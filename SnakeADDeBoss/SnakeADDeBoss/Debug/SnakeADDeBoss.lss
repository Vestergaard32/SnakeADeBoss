
SnakeADDeBoss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f4f  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d2c  00000000  00000000  00001203  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004fc  00000000  00000000  00001f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  0000242c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005fe  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009d  00000000  00000000  00002ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002b73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	02 d0       	rcall	.+4      	; 0xfa <main>
  f6:	39 c0       	rjmp	.+114    	; 0x16a <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <main>:
#include <avr/io.h>
#include "Nokia5110Driver.h"

int main(void)
{
	initDisplay();
  fa:	14 d0       	rcall	.+40     	; 0x124 <initDisplay>
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0x2>

000000fe <resetDisplay>:


void resetDisplay()
{
	// Set RES low
	PORTA &= ~(1 << RST_BIT);
  fe:	10 98       	cbi	0x02, 0	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	81 ee       	ldi	r24, 0xE1	; 225
 104:	94 e0       	ldi	r25, 0x04	; 4
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <resetDisplay+0x8>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <resetDisplay+0x12>
 110:	00 00       	nop
		
	// Delay of min 100 ns (0,1ms) p.20
	_delay_ms(100);
		
	// Set RES high
	PORTA |= (1 << RST_BIT);
 112:	10 9a       	sbi	0x02, 0	; 2
 114:	08 95       	ret

00000116 <sendIntruction>:
}

void sendIntruction(unsigned char cmd)
{
	// Set DC low, Command
	PORTA &= ~(1 << DC_BIT);
 116:	11 98       	cbi	0x02, 1	; 2
	SPI_MasterTransmit(cmd);
 118:	20 d0       	rcall	.+64     	; 0x15a <SPI_MasterTransmit>
	PORTA |= 1 << DC_BIT;
 11a:	11 9a       	sbi	0x02, 1	; 2
 11c:	08 95       	ret

0000011e <sendData>:
}

void sendData(unsigned char data)
{	
	PORTA |= 1 << DC_BIT;
 11e:	11 9a       	sbi	0x02, 1	; 2
	SPI_MasterTransmit(data);
 120:	1c c0       	rjmp	.+56     	; 0x15a <SPI_MasterTransmit>
 122:	08 95       	ret

00000124 <initDisplay>:



void initDisplay()
{
	SPI_MasterInit();
 124:	15 d0       	rcall	.+42     	; 0x150 <SPI_MasterInit>
	
	// Set port to output
	DDRA = 0xFF;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	81 b9       	out	0x01, r24	; 1
	
	// Set bits to high (active low)
	PORTA |= (1 << RST_BIT);
 12a:	10 9a       	sbi	0x02, 0	; 2
	PORTA |= (1 << DC_BIT);
 12c:	11 9a       	sbi	0x02, 1	; 2
	PORTA &= ~(1 << LIGHT_BIT);
	
	resetDisplay();
 12e:	12 98       	cbi	0x02, 2	; 2
	
	sendIntruction(0x21);
 130:	e6 df       	rcall	.-52     	; 0xfe <resetDisplay>
 132:	81 e2       	ldi	r24, 0x21	; 33
	sendIntruction(0xC0);
 134:	f0 df       	rcall	.-32     	; 0x116 <sendIntruction>
 136:	80 ec       	ldi	r24, 0xC0	; 192
	sendIntruction(0x07);
 138:	ee df       	rcall	.-36     	; 0x116 <sendIntruction>
 13a:	87 e0       	ldi	r24, 0x07	; 7
	sendIntruction(0x13);
 13c:	ec df       	rcall	.-40     	; 0x116 <sendIntruction>
 13e:	83 e1       	ldi	r24, 0x13	; 19
	
	sendIntruction(0x20); // Use basic instruction set
 140:	ea df       	rcall	.-44     	; 0x116 <sendIntruction>
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	e8 df       	rcall	.-48     	; 0x116 <sendIntruction>
	sendIntruction(0x0C); // Set display mode normal
 146:	8c e0       	ldi	r24, 0x0C	; 12
 148:	e6 df       	rcall	.-52     	; 0x116 <sendIntruction>
 14a:	8f e1       	ldi	r24, 0x1F	; 31
	
	sendData(0x1F);
 14c:	e8 cf       	rjmp	.-48     	; 0x11e <sendData>
 14e:	08 95       	ret

00000150 <SPI_MasterInit>:
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	84 b9       	out	0x04, r24	; 4
#define INPUT  0x00

void SPI_MasterInit(void)
{	
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS); //MOSI,SS & SCK output,others input
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);  		   //SPI, Master, clock = fck/16
 154:	81 e5       	ldi	r24, 0x51	; 81
 156:	8c bd       	out	0x2c, r24	; 44
 158:	08 95       	ret

0000015a <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	PORTA &= ~(1 << 2);
 15a:	12 98       	cbi	0x02, 2	; 2
	SPDR = cData;			 	   			// Start transmission
 15c:	8e bd       	out	0x2e, r24	; 46
	while( !(SPSR & (1<<SPIF)) );				// Wait for transmission complete
 15e:	0d b4       	in	r0, 0x2d	; 45
 160:	07 fe       	sbrs	r0, 7
 162:	fd cf       	rjmp	.-6      	; 0x15e <SPI_MasterTransmit+0x4>
	cData = SPDR;
 164:	8e b5       	in	r24, 0x2e	; 46
	PORTA |= 1 << 2;
 166:	12 9a       	sbi	0x02, 2	; 2
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
