
SnakeADDeBoss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00001326  000013ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001326  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005e3  00800214  00800214  000013ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f3  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff9  00000000  00000000  00002a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d23  00000000  00000000  00003a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00004760  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a9  00000000  00000000  00004a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ed  00000000  00000000  000051cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000056ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e2       	ldi	r30, 0x26	; 38
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 31       	cpi	r26, 0x14	; 20
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	27 e0       	ldi	r18, 0x07	; 7
     110:	a4 e1       	ldi	r26, 0x14	; 20
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a7 3f       	cpi	r26, 0xF7	; 247
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	3f d1       	rcall	.+638    	; 0x39e <main>
     120:	0c 94 91 09 	jmp	0x1322	; 0x1322 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <InitKeypad>:
	{ '3', '6', '9', '#' },
	{ 'A', 'B', 'C', 'D' }
};

void InitKeypad()
{
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
	// Setup input pins to keyboard
	// These are pins PA6 (Row 2) and PA4 (Row 1), and C7 (Row 3) and C5 (Row 4)
	DDRA &= ~(0b01010000);
     12e:	81 e2       	ldi	r24, 0x21	; 33
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	21 e2       	ldi	r18, 0x21	; 33
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	f9 01       	movw	r30, r18
     138:	20 81       	ld	r18, Z
     13a:	2f 7a       	andi	r18, 0xAF	; 175
     13c:	fc 01       	movw	r30, r24
     13e:	20 83       	st	Z, r18
	DDRC &= ~(0b10100000);
     140:	87 e2       	ldi	r24, 0x27	; 39
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	27 e2       	ldi	r18, 0x27	; 39
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	f9 01       	movw	r30, r18
     14a:	20 81       	ld	r18, Z
     14c:	2f 75       	andi	r18, 0x5F	; 95
     14e:	fc 01       	movw	r30, r24
     150:	20 83       	st	Z, r18

	// Setup output pins to keyboard
	// PD0 = Column 1, PD1 = Column 2, PD2 = Column 3, PD3 = Column 4
	DDRD |= 0b00001111;
     152:	8a e2       	ldi	r24, 0x2A	; 42
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	2a e2       	ldi	r18, 0x2A	; 42
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	f9 01       	movw	r30, r18
     15c:	20 81       	ld	r18, Z
     15e:	2f 60       	ori	r18, 0x0F	; 15
     160:	fc 01       	movw	r30, r24
     162:	20 83       	st	Z, r18
	PORTD |= 0b00001111;
     164:	8b e2       	ldi	r24, 0x2B	; 43
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	2b e2       	ldi	r18, 0x2B	; 43
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	f9 01       	movw	r30, r18
     16e:	20 81       	ld	r18, Z
     170:	2f 60       	ori	r18, 0x0F	; 15
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18

	DDRB = 0b11111111;
     176:	84 e2       	ldi	r24, 0x24	; 36
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	2f ef       	ldi	r18, 0xFF	; 255
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18

	//PORTB = 0xFF;
}
     180:	00 00       	nop
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <GetKey>:

char GetKey()
{
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
     190:	60 97       	sbiw	r28, 0x10	; 16
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	de bf       	out	0x3e, r29	; 62
     198:	0f be       	out	0x3f, r0	; 63
     19a:	cd bf       	out	0x3d, r28	; 61
	for (int columnIndex = 0; columnIndex < 4; columnIndex++)
     19c:	1a 82       	std	Y+2, r1	; 0x02
     19e:	19 82       	std	Y+1, r1	; 0x01
     1a0:	ee c0       	rjmp	.+476    	; 0x37e <GetKey+0x1f6>
	{
		// Scan Column 1 (1, 4, 7, and *)
		PORTD |= 0b00001111;
     1a2:	8b e2       	ldi	r24, 0x2B	; 43
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	2b e2       	ldi	r18, 0x2B	; 43
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	f9 01       	movw	r30, r18
     1ac:	20 81       	ld	r18, Z
     1ae:	2f 60       	ori	r18, 0x0F	; 15
     1b0:	fc 01       	movw	r30, r24
     1b2:	20 83       	st	Z, r18
		PORTD &= ~(1 << columnIndex);
     1b4:	8b e2       	ldi	r24, 0x2B	; 43
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	2b e2       	ldi	r18, 0x2B	; 43
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	f9 01       	movw	r30, r18
     1be:	20 81       	ld	r18, Z
     1c0:	42 2f       	mov	r20, r18
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	09 80       	ldd	r0, Y+1	; 0x01
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <GetKey+0x46>
     1ca:	22 0f       	add	r18, r18
     1cc:	33 1f       	adc	r19, r19
     1ce:	0a 94       	dec	r0
     1d0:	e2 f7       	brpl	.-8      	; 0x1ca <GetKey+0x42>
     1d2:	20 95       	com	r18
     1d4:	24 23       	and	r18, r20
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 83       	st	Z, r18
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	a0 e8       	ldi	r26, 0x80	; 128
     1e0:	bf e3       	ldi	r27, 0x3F	; 63
     1e2:	8b 83       	std	Y+3, r24	; 0x03
     1e4:	9c 83       	std	Y+4, r25	; 0x04
     1e6:	ad 83       	std	Y+5, r26	; 0x05
     1e8:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	4a e7       	ldi	r20, 0x7A	; 122
     1f0:	55 e4       	ldi	r21, 0x45	; 69
     1f2:	6b 81       	ldd	r22, Y+3	; 0x03
     1f4:	7c 81       	ldd	r23, Y+4	; 0x04
     1f6:	8d 81       	ldd	r24, Y+5	; 0x05
     1f8:	9e 81       	ldd	r25, Y+6	; 0x06
     1fa:	0e 94 06 09 	call	0x120c	; 0x120c <__mulsf3>
     1fe:	dc 01       	movw	r26, r24
     200:	cb 01       	movw	r24, r22
     202:	8f 83       	std	Y+7, r24	; 0x07
     204:	98 87       	std	Y+8, r25	; 0x08
     206:	a9 87       	std	Y+9, r26	; 0x09
     208:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	40 e8       	ldi	r20, 0x80	; 128
     210:	5f e3       	ldi	r21, 0x3F	; 63
     212:	6f 81       	ldd	r22, Y+7	; 0x07
     214:	78 85       	ldd	r23, Y+8	; 0x08
     216:	89 85       	ldd	r24, Y+9	; 0x09
     218:	9a 85       	ldd	r25, Y+10	; 0x0a
     21a:	77 d7       	rcall	.+3822   	; 0x110a <__cmpsf2>
     21c:	88 23       	and	r24, r24
     21e:	2c f4       	brge	.+10     	; 0x22a <GetKey+0xa2>
		__ticks = 1;
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	9c 87       	std	Y+12, r25	; 0x0c
     226:	8b 87       	std	Y+11, r24	; 0x0b
     228:	3b c0       	rjmp	.+118    	; 0x2a0 <GetKey+0x118>
	else if (__tmp > 65535)
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	3f ef       	ldi	r19, 0xFF	; 255
     22e:	4f e7       	ldi	r20, 0x7F	; 127
     230:	57 e4       	ldi	r21, 0x47	; 71
     232:	6f 81       	ldd	r22, Y+7	; 0x07
     234:	78 85       	ldd	r23, Y+8	; 0x08
     236:	89 85       	ldd	r24, Y+9	; 0x09
     238:	9a 85       	ldd	r25, Y+10	; 0x0a
     23a:	e4 d7       	rcall	.+4040   	; 0x1204 <__gesf2>
     23c:	18 16       	cp	r1, r24
     23e:	3c f5       	brge	.+78     	; 0x28e <GetKey+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e2       	ldi	r20, 0x20	; 32
     246:	51 e4       	ldi	r21, 0x41	; 65
     248:	6b 81       	ldd	r22, Y+3	; 0x03
     24a:	7c 81       	ldd	r23, Y+4	; 0x04
     24c:	8d 81       	ldd	r24, Y+5	; 0x05
     24e:	9e 81       	ldd	r25, Y+6	; 0x06
     250:	dd d7       	rcall	.+4026   	; 0x120c <__mulsf3>
     252:	dc 01       	movw	r26, r24
     254:	cb 01       	movw	r24, r22
     256:	bc 01       	movw	r22, r24
     258:	cd 01       	movw	r24, r26
     25a:	5b d7       	rcall	.+3766   	; 0x1112 <__fixunssfsi>
     25c:	dc 01       	movw	r26, r24
     25e:	cb 01       	movw	r24, r22
     260:	9c 87       	std	Y+12, r25	; 0x0c
     262:	8b 87       	std	Y+11, r24	; 0x0b
     264:	0f c0       	rjmp	.+30     	; 0x284 <GetKey+0xfc>
     266:	80 e9       	ldi	r24, 0x90	; 144
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	9e 87       	std	Y+14, r25	; 0x0e
     26c:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     26e:	8d 85       	ldd	r24, Y+13	; 0x0d
     270:	9e 85       	ldd	r25, Y+14	; 0x0e
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <GetKey+0xea>
     276:	9e 87       	std	Y+14, r25	; 0x0e
     278:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     27a:	8b 85       	ldd	r24, Y+11	; 0x0b
     27c:	9c 85       	ldd	r25, Y+12	; 0x0c
     27e:	01 97       	sbiw	r24, 0x01	; 1
     280:	9c 87       	std	Y+12, r25	; 0x0c
     282:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     284:	8b 85       	ldd	r24, Y+11	; 0x0b
     286:	9c 85       	ldd	r25, Y+12	; 0x0c
     288:	89 2b       	or	r24, r25
     28a:	69 f7       	brne	.-38     	; 0x266 <GetKey+0xde>
     28c:	13 c0       	rjmp	.+38     	; 0x2b4 <GetKey+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     28e:	6f 81       	ldd	r22, Y+7	; 0x07
     290:	78 85       	ldd	r23, Y+8	; 0x08
     292:	89 85       	ldd	r24, Y+9	; 0x09
     294:	9a 85       	ldd	r25, Y+10	; 0x0a
     296:	3d d7       	rcall	.+3706   	; 0x1112 <__fixunssfsi>
     298:	dc 01       	movw	r26, r24
     29a:	cb 01       	movw	r24, r22
     29c:	9c 87       	std	Y+12, r25	; 0x0c
     29e:	8b 87       	std	Y+11, r24	; 0x0b
     2a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2a2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2a4:	98 8b       	std	Y+16, r25	; 0x10
     2a6:	8f 87       	std	Y+15, r24	; 0x0f
     2a8:	8f 85       	ldd	r24, Y+15	; 0x0f
     2aa:	98 89       	ldd	r25, Y+16	; 0x10
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <GetKey+0x124>
     2b0:	98 8b       	std	Y+16, r25	; 0x10
     2b2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
			
		// Key '1'
		if ((PINA & (1 << ROW_1)) == 0)
     2b4:	80 e2       	ldi	r24, 0x20	; 32
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	80 81       	ld	r24, Z
     2bc:	88 2f       	mov	r24, r24
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	80 71       	andi	r24, 0x10	; 16
     2c2:	99 27       	eor	r25, r25
     2c4:	89 2b       	or	r24, r25
     2c6:	79 f4       	brne	.+30     	; 0x2e6 <GetKey+0x15e>
		{
			keyPressed = characterColumns[columnIndex][0]; 
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	9a 81       	ldd	r25, Y+2	; 0x02
     2cc:	88 0f       	add	r24, r24
     2ce:	99 1f       	adc	r25, r25
     2d0:	88 0f       	add	r24, r24
     2d2:	99 1f       	adc	r25, r25
     2d4:	80 50       	subi	r24, 0x00	; 0
     2d6:	9e 4f       	sbci	r25, 0xFE	; 254
     2d8:	fc 01       	movw	r30, r24
     2da:	80 81       	ld	r24, Z
     2dc:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			return keyPressed;
     2e0:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     2e4:	53 c0       	rjmp	.+166    	; 0x38c <GetKey+0x204>
		}

		// Key '4'
		if ((PINA & (1 << ROW_2)) == 0)
     2e6:	80 e2       	ldi	r24, 0x20	; 32
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	fc 01       	movw	r30, r24
     2ec:	80 81       	ld	r24, Z
     2ee:	88 2f       	mov	r24, r24
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	80 74       	andi	r24, 0x40	; 64
     2f4:	99 27       	eor	r25, r25
     2f6:	89 2b       	or	r24, r25
     2f8:	79 f4       	brne	.+30     	; 0x318 <GetKey+0x190>
		{
			keyPressed = characterColumns[columnIndex][1];
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	8f 5f       	subi	r24, 0xFF	; 255
     308:	9d 4f       	sbci	r25, 0xFD	; 253
     30a:	fc 01       	movw	r30, r24
     30c:	80 81       	ld	r24, Z
     30e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			return keyPressed;
     312:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     316:	3a c0       	rjmp	.+116    	; 0x38c <GetKey+0x204>
		}

		// Key '7'
		if ((PINC & (1 << ROW_3)) == 0)
     318:	86 e2       	ldi	r24, 0x26	; 38
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	fc 01       	movw	r30, r24
     31e:	80 81       	ld	r24, Z
     320:	88 23       	and	r24, r24
     322:	7c f0       	brlt	.+30     	; 0x342 <GetKey+0x1ba>
		{
			keyPressed = characterColumns[columnIndex][2];
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	9a 81       	ldd	r25, Y+2	; 0x02
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	8e 5f       	subi	r24, 0xFE	; 254
     332:	9d 4f       	sbci	r25, 0xFD	; 253
     334:	fc 01       	movw	r30, r24
     336:	80 81       	ld	r24, Z
     338:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			return keyPressed;
     33c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     340:	25 c0       	rjmp	.+74     	; 0x38c <GetKey+0x204>
		}

		// Key '*'
		if ((PINC & (1 << ROW_4)) == 0)
     342:	86 e2       	ldi	r24, 0x26	; 38
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	fc 01       	movw	r30, r24
     348:	80 81       	ld	r24, Z
     34a:	88 2f       	mov	r24, r24
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	80 72       	andi	r24, 0x20	; 32
     350:	99 27       	eor	r25, r25
     352:	89 2b       	or	r24, r25
     354:	79 f4       	brne	.+30     	; 0x374 <GetKey+0x1ec>
		{
			keyPressed = characterColumns[columnIndex][3];
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	9a 81       	ldd	r25, Y+2	; 0x02
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	8d 5f       	subi	r24, 0xFD	; 253
     364:	9d 4f       	sbci	r25, 0xFD	; 253
     366:	fc 01       	movw	r30, r24
     368:	80 81       	ld	r24, Z
     36a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			return keyPressed;
     36e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     372:	0c c0       	rjmp	.+24     	; 0x38c <GetKey+0x204>
	//PORTB = 0xFF;
}

char GetKey()
{
	for (int columnIndex = 0; columnIndex < 4; columnIndex++)
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	9a 81       	ldd	r25, Y+2	; 0x02
     378:	01 96       	adiw	r24, 0x01	; 1
     37a:	9a 83       	std	Y+2, r25	; 0x02
     37c:	89 83       	std	Y+1, r24	; 0x01
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	9a 81       	ldd	r25, Y+2	; 0x02
     382:	04 97       	sbiw	r24, 0x04	; 4
     384:	0c f4       	brge	.+2      	; 0x388 <GetKey+0x200>
     386:	0d cf       	rjmp	.-486    	; 0x1a2 <GetKey+0x1a>
			keyPressed = characterColumns[columnIndex][3];
			return keyPressed;
		}
	}
	
	return keyPressed;
     388:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
     38c:	60 96       	adiw	r28, 0x10	; 16
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	f8 94       	cli
     392:	de bf       	out	0x3e, r29	; 62
     394:	0f be       	out	0x3f, r0	; 63
     396:	cd bf       	out	0x3d, r28	; 61
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	08 95       	ret

0000039e <main>:
void GoUp();
void GoLeft();
void GoRight();

int main(void)
{
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	ec 97       	sbiw	r28, 0x3c	; 60
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
	initDisplay();
     3b2:	f5 d3       	rcall	.+2026   	; 0xb9e <initDisplay>
	InitKeypad();
     3b4:	b8 de       	rcall	.-656    	; 0x126 <InitKeypad>
     3b6:	1a 82       	std	Y+2, r1	; 0x02

	for (int x = 0; x < 504; x++)
     3b8:	19 82       	std	Y+1, r1	; 0x01
     3ba:	0b c0       	rjmp	.+22     	; 0x3d2 <main+0x34>
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
	{
		worldRender[x] = 0x00;
     3be:	9a 81       	ldd	r25, Y+2	; 0x02
     3c0:	81 50       	subi	r24, 0x01	; 1
     3c2:	9a 4f       	sbci	r25, 0xFA	; 250
     3c4:	fc 01       	movw	r30, r24
     3c6:	10 82       	st	Z, r1
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
int main(void)
{
	initDisplay();
	InitKeypad();

	for (int x = 0; x < 504; x++)
     3ca:	9a 81       	ldd	r25, Y+2	; 0x02
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	9a 83       	std	Y+2, r25	; 0x02
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	9a 81       	ldd	r25, Y+2	; 0x02
     3d6:	88 3f       	cpi	r24, 0xF8	; 248
     3d8:	91 40       	sbci	r25, 0x01	; 1
     3da:	84 f3       	brlt	.-32     	; 0x3bc <main+0x1e>
     3dc:	1e 8a       	std	Y+22, r1	; 0x16
	{
		worldRender[x] = 0x00;
	}
	
	struct SnakeBodyPart head;
	head.x = 0;
     3de:	1d 8a       	std	Y+21, r1	; 0x15
     3e0:	18 8e       	std	Y+24, r1	; 0x18
	head.y = 0;
     3e2:	1f 8a       	std	Y+23, r1	; 0x17
     3e4:	1a 8e       	std	Y+26, r1	; 0x1a
	head.prevX = 0;
     3e6:	19 8e       	std	Y+25, r1	; 0x19
     3e8:	1c 8e       	std	Y+28, r1	; 0x1c
	head.prevY = 0;
     3ea:	1b 8e       	std	Y+27, r1	; 0x1b
     3ec:	1e 8e       	std	Y+30, r1	; 0x1e
	head.headPointer = 0;
     3ee:	1d 8e       	std	Y+29, r1	; 0x1d
     3f0:	8a e0       	ldi	r24, 0x0A	; 10
	snake[0] = head;
     3f2:	fe 01       	movw	r30, r28
     3f4:	75 96       	adiw	r30, 0x15	; 21
     3f6:	a7 e1       	ldi	r26, 0x17	; 23
     3f8:	b2 e0       	ldi	r27, 0x02	; 2
     3fa:	01 90       	ld	r0, Z+
     3fc:	0d 92       	st	X+, r0
     3fe:	8a 95       	dec	r24
     400:	e1 f7       	brne	.-8      	; 0x3fa <main+0x5c>
     402:	18 a2       	std	Y+32, r1	; 0x20

	struct SnakeBodyPart middle;
	middle.x = 0;
     404:	1f 8e       	std	Y+31, r1	; 0x1f
     406:	1a a2       	std	Y+34, r1	; 0x22
	middle.y = 0;
     408:	19 a2       	std	Y+33, r1	; 0x21
     40a:	87 e1       	ldi	r24, 0x17	; 23
	middle.headPointer = &snake[0];
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	98 a7       	std	Y+40, r25	; 0x28
     410:	8f a3       	std	Y+39, r24	; 0x27
     412:	8a e0       	ldi	r24, 0x0A	; 10
	snake[1] = middle;
     414:	fe 01       	movw	r30, r28
     416:	7f 96       	adiw	r30, 0x1f	; 31
     418:	a1 e2       	ldi	r26, 0x21	; 33
     41a:	b2 e0       	ldi	r27, 0x02	; 2
     41c:	01 90       	ld	r0, Z+
     41e:	0d 92       	st	X+, r0
     420:	8a 95       	dec	r24
     422:	e1 f7       	brne	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     424:	1a a6       	std	Y+42, r1	; 0x2a

	struct SnakeBodyPart middle1;
	middle1.x = 0;
     426:	19 a6       	std	Y+41, r1	; 0x29
     428:	1c a6       	std	Y+44, r1	; 0x2c
	middle1.y = 0;
     42a:	1b a6       	std	Y+43, r1	; 0x2b
     42c:	1e a6       	std	Y+46, r1	; 0x2e
	middle1.prevX = 0;
     42e:	1d a6       	std	Y+45, r1	; 0x2d
     430:	18 aa       	std	Y+48, r1	; 0x30
	middle1.prevY = 0;
     432:	1f a6       	std	Y+47, r1	; 0x2f
     434:	81 e2       	ldi	r24, 0x21	; 33
	middle1.headPointer = &snake[1];
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	9a ab       	std	Y+50, r25	; 0x32
     43a:	89 ab       	std	Y+49, r24	; 0x31
     43c:	8a e0       	ldi	r24, 0x0A	; 10
	snake[2] = middle1;
     43e:	fe 01       	movw	r30, r28
     440:	b9 96       	adiw	r30, 0x29	; 41
     442:	ab e2       	ldi	r26, 0x2B	; 43
     444:	b2 e0       	ldi	r27, 0x02	; 2
     446:	01 90       	ld	r0, Z+
     448:	0d 92       	st	X+, r0
     44a:	8a 95       	dec	r24
     44c:	e1 f7       	brne	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     44e:	1c aa       	std	Y+52, r1	; 0x34
	
	struct SnakeBodyPart end;
	end.x = 0;
     450:	1b aa       	std	Y+51, r1	; 0x33
     452:	1e aa       	std	Y+54, r1	; 0x36
	end.y = 0;
     454:	1d aa       	std	Y+53, r1	; 0x35
     456:	8b e2       	ldi	r24, 0x2B	; 43
	end.headPointer = &snake[2];
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	9c af       	std	Y+60, r25	; 0x3c
     45c:	8b af       	std	Y+59, r24	; 0x3b
     45e:	8a e0       	ldi	r24, 0x0A	; 10
	snake[3] = end;
     460:	fe 01       	movw	r30, r28
     462:	f3 96       	adiw	r30, 0x33	; 51
     464:	a5 e3       	ldi	r26, 0x35	; 53
     466:	b2 e0       	ldi	r27, 0x02	; 2
     468:	01 90       	ld	r0, Z+
     46a:	0d 92       	st	X+, r0
     46c:	8a 95       	dec	r24
     46e:	e1 f7       	brne	.-8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>

    while (1) 
	{
		clearDisplay();
     470:	92 d4       	rcall	.+2340   	; 0xd96 <clearDisplay>
     472:	1c 82       	std	Y+4, r1	; 0x04
		
		for (int bodyPartIndex = 0; bodyPartIndex < snakeBodyLength; bodyPartIndex++)
     474:	1b 82       	std	Y+3, r1	; 0x03
     476:	62 c2       	rjmp	.+1220   	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
     478:	8b 81       	ldd	r24, Y+3	; 0x03
		{
			// Check for head
			if (snake[bodyPartIndex].headPointer == 0)
     47a:	9c 81       	ldd	r25, Y+4	; 0x04
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	9c 01       	movw	r18, r24
     482:	22 0f       	add	r18, r18
     484:	33 1f       	adc	r19, r19
     486:	22 0f       	add	r18, r18
     488:	33 1f       	adc	r19, r19
     48a:	82 0f       	add	r24, r18
     48c:	93 1f       	adc	r25, r19
     48e:	81 5e       	subi	r24, 0xE1	; 225
     490:	9d 4f       	sbci	r25, 0xFD	; 253
     492:	fc 01       	movw	r30, r24
     494:	80 81       	ld	r24, Z
     496:	91 81       	ldd	r25, Z+1	; 0x01
     498:	89 2b       	or	r24, r25
     49a:	09 f0       	breq	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     49c:	c4 c1       	rjmp	.+904    	; 0x826 <__LOCK_REGION_LENGTH__+0x426>
     49e:	8b 81       	ldd	r24, Y+3	; 0x03
			{
				snake[bodyPartIndex].prevX = snake[bodyPartIndex].x;
     4a0:	9c 81       	ldd	r25, Y+4	; 0x04
     4a2:	88 0f       	add	r24, r24
     4a4:	99 1f       	adc	r25, r25
     4a6:	9c 01       	movw	r18, r24
     4a8:	22 0f       	add	r18, r18
     4aa:	33 1f       	adc	r19, r19
     4ac:	22 0f       	add	r18, r18
     4ae:	33 1f       	adc	r19, r19
     4b0:	82 0f       	add	r24, r18
     4b2:	93 1f       	adc	r25, r19
     4b4:	89 5e       	subi	r24, 0xE9	; 233
     4b6:	9d 4f       	sbci	r25, 0xFD	; 253
     4b8:	fc 01       	movw	r30, r24
     4ba:	20 81       	ld	r18, Z
     4bc:	31 81       	ldd	r19, Z+1	; 0x01
     4be:	8b 81       	ldd	r24, Y+3	; 0x03
     4c0:	9c 81       	ldd	r25, Y+4	; 0x04
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	ac 01       	movw	r20, r24
     4c8:	44 0f       	add	r20, r20
     4ca:	55 1f       	adc	r21, r21
     4cc:	44 0f       	add	r20, r20
     4ce:	55 1f       	adc	r21, r21
     4d0:	84 0f       	add	r24, r20
     4d2:	95 1f       	adc	r25, r21
     4d4:	85 5e       	subi	r24, 0xE5	; 229
     4d6:	9d 4f       	sbci	r25, 0xFD	; 253
     4d8:	fc 01       	movw	r30, r24
     4da:	31 83       	std	Z+1, r19	; 0x01
     4dc:	20 83       	st	Z, r18
     4de:	8b 81       	ldd	r24, Y+3	; 0x03
				snake[bodyPartIndex].prevY = snake[bodyPartIndex].y;
     4e0:	9c 81       	ldd	r25, Y+4	; 0x04
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	9c 01       	movw	r18, r24
     4e8:	22 0f       	add	r18, r18
     4ea:	33 1f       	adc	r19, r19
     4ec:	22 0f       	add	r18, r18
     4ee:	33 1f       	adc	r19, r19
     4f0:	82 0f       	add	r24, r18
     4f2:	93 1f       	adc	r25, r19
     4f4:	87 5e       	subi	r24, 0xE7	; 231
     4f6:	9d 4f       	sbci	r25, 0xFD	; 253
     4f8:	fc 01       	movw	r30, r24
     4fa:	20 81       	ld	r18, Z
     4fc:	31 81       	ldd	r19, Z+1	; 0x01
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
     500:	9c 81       	ldd	r25, Y+4	; 0x04
     502:	88 0f       	add	r24, r24
     504:	99 1f       	adc	r25, r25
     506:	ac 01       	movw	r20, r24
     508:	44 0f       	add	r20, r20
     50a:	55 1f       	adc	r21, r21
     50c:	44 0f       	add	r20, r20
     50e:	55 1f       	adc	r21, r21
     510:	84 0f       	add	r24, r20
     512:	95 1f       	adc	r25, r21
     514:	83 5e       	subi	r24, 0xE3	; 227
     516:	9d 4f       	sbci	r25, 0xFD	; 253
     518:	fc 01       	movw	r30, r24
     51a:	31 83       	std	Z+1, r19	; 0x01
     51c:	20 83       	st	Z, r18
     51e:	8b 81       	ldd	r24, Y+3	; 0x03
				
				if ((snake[bodyPartIndex].x + 1) > WORLD_WIDTH)
     520:	9c 81       	ldd	r25, Y+4	; 0x04
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	9c 01       	movw	r18, r24
     528:	22 0f       	add	r18, r18
     52a:	33 1f       	adc	r19, r19
     52c:	22 0f       	add	r18, r18
     52e:	33 1f       	adc	r19, r19
     530:	82 0f       	add	r24, r18
     532:	93 1f       	adc	r25, r19
     534:	89 5e       	subi	r24, 0xE9	; 233
     536:	9d 4f       	sbci	r25, 0xFD	; 253
     538:	fc 01       	movw	r30, r24
     53a:	80 81       	ld	r24, Z
     53c:	91 81       	ldd	r25, Z+1	; 0x01
     53e:	01 96       	adiw	r24, 0x01	; 1
     540:	84 35       	cpi	r24, 0x54	; 84
     542:	91 05       	cpc	r25, r1
     544:	cc f1       	brlt	.+114    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     546:	8b 81       	ldd	r24, Y+3	; 0x03
				{
					snake[bodyPartIndex].x = 0;
     548:	9c 81       	ldd	r25, Y+4	; 0x04
     54a:	88 0f       	add	r24, r24
     54c:	99 1f       	adc	r25, r25
     54e:	9c 01       	movw	r18, r24
     550:	22 0f       	add	r18, r18
     552:	33 1f       	adc	r19, r19
     554:	22 0f       	add	r18, r18
     556:	33 1f       	adc	r19, r19
     558:	82 0f       	add	r24, r18
     55a:	93 1f       	adc	r25, r19
     55c:	89 5e       	subi	r24, 0xE9	; 233
     55e:	9d 4f       	sbci	r25, 0xFD	; 253
     560:	fc 01       	movw	r30, r24
     562:	11 82       	std	Z+1, r1	; 0x01
     564:	10 82       	st	Z, r1
     566:	8b 81       	ldd	r24, Y+3	; 0x03
					snake[bodyPartIndex].y += 2 * yDirection;
     568:	9c 81       	ldd	r25, Y+4	; 0x04
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	9c 01       	movw	r18, r24
     570:	22 0f       	add	r18, r18
     572:	33 1f       	adc	r19, r19
     574:	22 0f       	add	r18, r18
     576:	33 1f       	adc	r19, r19
     578:	82 0f       	add	r24, r18
     57a:	93 1f       	adc	r25, r19
     57c:	87 5e       	subi	r24, 0xE7	; 231
     57e:	9d 4f       	sbci	r25, 0xFD	; 253
     580:	fc 01       	movw	r30, r24
     582:	20 81       	ld	r18, Z
     584:	31 81       	ldd	r19, Z+1	; 0x01
     586:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <yDirection>
     58a:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <yDirection+0x1>
     58e:	88 0f       	add	r24, r24
     590:	99 1f       	adc	r25, r25
     592:	28 0f       	add	r18, r24
     594:	39 1f       	adc	r19, r25
     596:	8b 81       	ldd	r24, Y+3	; 0x03
     598:	9c 81       	ldd	r25, Y+4	; 0x04
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	ac 01       	movw	r20, r24
     5a0:	44 0f       	add	r20, r20
     5a2:	55 1f       	adc	r21, r21
     5a4:	44 0f       	add	r20, r20
     5a6:	55 1f       	adc	r21, r21
     5a8:	84 0f       	add	r24, r20
     5aa:	95 1f       	adc	r25, r21
     5ac:	87 5e       	subi	r24, 0xE7	; 231
     5ae:	9d 4f       	sbci	r25, 0xFD	; 253
     5b0:	fc 01       	movw	r30, r24
     5b2:	31 83       	std	Z+1, r19	; 0x01
     5b4:	20 83       	st	Z, r18
     5b6:	bd c1       	rjmp	.+890    	; 0x932 <__LOCK_REGION_LENGTH__+0x532>
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
				} 
				else if ((snake[bodyPartIndex].x) < 0) {
     5ba:	9c 81       	ldd	r25, Y+4	; 0x04
     5bc:	88 0f       	add	r24, r24
     5be:	99 1f       	adc	r25, r25
     5c0:	9c 01       	movw	r18, r24
     5c2:	22 0f       	add	r18, r18
     5c4:	33 1f       	adc	r19, r19
     5c6:	22 0f       	add	r18, r18
     5c8:	33 1f       	adc	r19, r19
     5ca:	82 0f       	add	r24, r18
     5cc:	93 1f       	adc	r25, r19
     5ce:	89 5e       	subi	r24, 0xE9	; 233
     5d0:	9d 4f       	sbci	r25, 0xFD	; 253
     5d2:	fc 01       	movw	r30, r24
     5d4:	80 81       	ld	r24, Z
     5d6:	91 81       	ldd	r25, Z+1	; 0x01
     5d8:	99 23       	and	r25, r25
     5da:	dc f5       	brge	.+118    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     5dc:	8b 81       	ldd	r24, Y+3	; 0x03
					snake[bodyPartIndex].x = WORLD_WIDTH - 1;
     5de:	9c 81       	ldd	r25, Y+4	; 0x04
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	9c 01       	movw	r18, r24
     5e6:	22 0f       	add	r18, r18
     5e8:	33 1f       	adc	r19, r19
     5ea:	22 0f       	add	r18, r18
     5ec:	33 1f       	adc	r19, r19
     5ee:	82 0f       	add	r24, r18
     5f0:	93 1f       	adc	r25, r19
     5f2:	89 5e       	subi	r24, 0xE9	; 233
     5f4:	9d 4f       	sbci	r25, 0xFD	; 253
     5f6:	22 e5       	ldi	r18, 0x52	; 82
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	fc 01       	movw	r30, r24
     5fc:	31 83       	std	Z+1, r19	; 0x01
     5fe:	20 83       	st	Z, r18
     600:	8b 81       	ldd	r24, Y+3	; 0x03
					snake[bodyPartIndex].y += 2 * yDirection;
     602:	9c 81       	ldd	r25, Y+4	; 0x04
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	9c 01       	movw	r18, r24
     60a:	22 0f       	add	r18, r18
     60c:	33 1f       	adc	r19, r19
     60e:	22 0f       	add	r18, r18
     610:	33 1f       	adc	r19, r19
     612:	82 0f       	add	r24, r18
     614:	93 1f       	adc	r25, r19
     616:	87 5e       	subi	r24, 0xE7	; 231
     618:	9d 4f       	sbci	r25, 0xFD	; 253
     61a:	fc 01       	movw	r30, r24
     61c:	20 81       	ld	r18, Z
     61e:	31 81       	ldd	r19, Z+1	; 0x01
     620:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <yDirection>
     624:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <yDirection+0x1>
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	28 0f       	add	r18, r24
     62e:	39 1f       	adc	r19, r25
     630:	8b 81       	ldd	r24, Y+3	; 0x03
     632:	9c 81       	ldd	r25, Y+4	; 0x04
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	ac 01       	movw	r20, r24
     63a:	44 0f       	add	r20, r20
     63c:	55 1f       	adc	r21, r21
     63e:	44 0f       	add	r20, r20
     640:	55 1f       	adc	r21, r21
     642:	84 0f       	add	r24, r20
     644:	95 1f       	adc	r25, r21
     646:	87 5e       	subi	r24, 0xE7	; 231
     648:	9d 4f       	sbci	r25, 0xFD	; 253
     64a:	fc 01       	movw	r30, r24
     64c:	31 83       	std	Z+1, r19	; 0x01
     64e:	20 83       	st	Z, r18
     650:	70 c1       	rjmp	.+736    	; 0x932 <__LOCK_REGION_LENGTH__+0x532>
     652:	8b 81       	ldd	r24, Y+3	; 0x03
				} else if ((snake[bodyPartIndex].y + 1) > WORLD_HEIGHT) {
     654:	9c 81       	ldd	r25, Y+4	; 0x04
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	9c 01       	movw	r18, r24
     65c:	22 0f       	add	r18, r18
     65e:	33 1f       	adc	r19, r19
     660:	22 0f       	add	r18, r18
     662:	33 1f       	adc	r19, r19
     664:	82 0f       	add	r24, r18
     666:	93 1f       	adc	r25, r19
     668:	87 5e       	subi	r24, 0xE7	; 231
     66a:	9d 4f       	sbci	r25, 0xFD	; 253
     66c:	fc 01       	movw	r30, r24
     66e:	80 81       	ld	r24, Z
     670:	91 81       	ldd	r25, Z+1	; 0x01
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	c0 97       	sbiw	r24, 0x30	; 48
     676:	cc f1       	brlt	.+114    	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
     678:	8b 81       	ldd	r24, Y+3	; 0x03
					snake[bodyPartIndex].y = 0;
     67a:	9c 81       	ldd	r25, Y+4	; 0x04
     67c:	88 0f       	add	r24, r24
     67e:	99 1f       	adc	r25, r25
     680:	9c 01       	movw	r18, r24
     682:	22 0f       	add	r18, r18
     684:	33 1f       	adc	r19, r19
     686:	22 0f       	add	r18, r18
     688:	33 1f       	adc	r19, r19
     68a:	82 0f       	add	r24, r18
     68c:	93 1f       	adc	r25, r19
     68e:	87 5e       	subi	r24, 0xE7	; 231
     690:	9d 4f       	sbci	r25, 0xFD	; 253
     692:	fc 01       	movw	r30, r24
     694:	11 82       	std	Z+1, r1	; 0x01
     696:	10 82       	st	Z, r1
     698:	8b 81       	ldd	r24, Y+3	; 0x03
					snake[bodyPartIndex].x += 2 * xDirection;
     69a:	9c 81       	ldd	r25, Y+4	; 0x04
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	9c 01       	movw	r18, r24
     6a2:	22 0f       	add	r18, r18
     6a4:	33 1f       	adc	r19, r19
     6a6:	22 0f       	add	r18, r18
     6a8:	33 1f       	adc	r19, r19
     6aa:	82 0f       	add	r24, r18
     6ac:	93 1f       	adc	r25, r19
     6ae:	89 5e       	subi	r24, 0xE9	; 233
     6b0:	9d 4f       	sbci	r25, 0xFD	; 253
     6b2:	fc 01       	movw	r30, r24
     6b4:	20 81       	ld	r18, Z
     6b6:	31 81       	ldd	r19, Z+1	; 0x01
     6b8:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <xDirection>
     6bc:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <xDirection+0x1>
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	28 0f       	add	r18, r24
     6c6:	39 1f       	adc	r19, r25
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	9c 81       	ldd	r25, Y+4	; 0x04
     6cc:	88 0f       	add	r24, r24
     6ce:	99 1f       	adc	r25, r25
     6d0:	ac 01       	movw	r20, r24
     6d2:	44 0f       	add	r20, r20
     6d4:	55 1f       	adc	r21, r21
     6d6:	44 0f       	add	r20, r20
     6d8:	55 1f       	adc	r21, r21
     6da:	84 0f       	add	r24, r20
     6dc:	95 1f       	adc	r25, r21
     6de:	89 5e       	subi	r24, 0xE9	; 233
     6e0:	9d 4f       	sbci	r25, 0xFD	; 253
     6e2:	fc 01       	movw	r30, r24
     6e4:	31 83       	std	Z+1, r19	; 0x01
     6e6:	20 83       	st	Z, r18
     6e8:	24 c1       	rjmp	.+584    	; 0x932 <__LOCK_REGION_LENGTH__+0x532>
     6ea:	8b 81       	ldd	r24, Y+3	; 0x03
				} else if ((snake[bodyPartIndex].y) < 0) {
     6ec:	9c 81       	ldd	r25, Y+4	; 0x04
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	9c 01       	movw	r18, r24
     6f4:	22 0f       	add	r18, r18
     6f6:	33 1f       	adc	r19, r19
     6f8:	22 0f       	add	r18, r18
     6fa:	33 1f       	adc	r19, r19
     6fc:	82 0f       	add	r24, r18
     6fe:	93 1f       	adc	r25, r19
     700:	87 5e       	subi	r24, 0xE7	; 231
     702:	9d 4f       	sbci	r25, 0xFD	; 253
     704:	fc 01       	movw	r30, r24
     706:	80 81       	ld	r24, Z
     708:	91 81       	ldd	r25, Z+1	; 0x01
     70a:	99 23       	and	r25, r25
     70c:	dc f5       	brge	.+118    	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
     70e:	8b 81       	ldd	r24, Y+3	; 0x03
					snake[bodyPartIndex].y = WORLD_HEIGHT - 1;
     710:	9c 81       	ldd	r25, Y+4	; 0x04
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	9c 01       	movw	r18, r24
     718:	22 0f       	add	r18, r18
     71a:	33 1f       	adc	r19, r19
     71c:	22 0f       	add	r18, r18
     71e:	33 1f       	adc	r19, r19
     720:	82 0f       	add	r24, r18
     722:	93 1f       	adc	r25, r19
     724:	87 5e       	subi	r24, 0xE7	; 231
     726:	9d 4f       	sbci	r25, 0xFD	; 253
     728:	2e e2       	ldi	r18, 0x2E	; 46
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	fc 01       	movw	r30, r24
     72e:	31 83       	std	Z+1, r19	; 0x01
     730:	20 83       	st	Z, r18
     732:	8b 81       	ldd	r24, Y+3	; 0x03
					snake[bodyPartIndex].x += 2 * xDirection;
     734:	9c 81       	ldd	r25, Y+4	; 0x04
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	9c 01       	movw	r18, r24
     73c:	22 0f       	add	r18, r18
     73e:	33 1f       	adc	r19, r19
     740:	22 0f       	add	r18, r18
     742:	33 1f       	adc	r19, r19
     744:	82 0f       	add	r24, r18
     746:	93 1f       	adc	r25, r19
     748:	89 5e       	subi	r24, 0xE9	; 233
     74a:	9d 4f       	sbci	r25, 0xFD	; 253
     74c:	fc 01       	movw	r30, r24
     74e:	20 81       	ld	r18, Z
     750:	31 81       	ldd	r19, Z+1	; 0x01
     752:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <xDirection>
     756:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <xDirection+0x1>
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	28 0f       	add	r18, r24
     760:	39 1f       	adc	r19, r25
     762:	8b 81       	ldd	r24, Y+3	; 0x03
     764:	9c 81       	ldd	r25, Y+4	; 0x04
     766:	88 0f       	add	r24, r24
     768:	99 1f       	adc	r25, r25
     76a:	ac 01       	movw	r20, r24
     76c:	44 0f       	add	r20, r20
     76e:	55 1f       	adc	r21, r21
     770:	44 0f       	add	r20, r20
     772:	55 1f       	adc	r21, r21
     774:	84 0f       	add	r24, r20
     776:	95 1f       	adc	r25, r21
     778:	89 5e       	subi	r24, 0xE9	; 233
     77a:	9d 4f       	sbci	r25, 0xFD	; 253
     77c:	fc 01       	movw	r30, r24
     77e:	31 83       	std	Z+1, r19	; 0x01
     780:	20 83       	st	Z, r18
     782:	d7 c0       	rjmp	.+430    	; 0x932 <__LOCK_REGION_LENGTH__+0x532>
     784:	8b 81       	ldd	r24, Y+3	; 0x03
				}
				else	
				{
					snake[bodyPartIndex].x += 2 * xDirection;
     786:	9c 81       	ldd	r25, Y+4	; 0x04
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	9c 01       	movw	r18, r24
     78e:	22 0f       	add	r18, r18
     790:	33 1f       	adc	r19, r19
     792:	22 0f       	add	r18, r18
     794:	33 1f       	adc	r19, r19
     796:	82 0f       	add	r24, r18
     798:	93 1f       	adc	r25, r19
     79a:	89 5e       	subi	r24, 0xE9	; 233
     79c:	9d 4f       	sbci	r25, 0xFD	; 253
     79e:	fc 01       	movw	r30, r24
     7a0:	20 81       	ld	r18, Z
     7a2:	31 81       	ldd	r19, Z+1	; 0x01
     7a4:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <xDirection>
     7a8:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <xDirection+0x1>
     7ac:	88 0f       	add	r24, r24
     7ae:	99 1f       	adc	r25, r25
     7b0:	28 0f       	add	r18, r24
     7b2:	39 1f       	adc	r19, r25
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	9c 81       	ldd	r25, Y+4	; 0x04
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	ac 01       	movw	r20, r24
     7be:	44 0f       	add	r20, r20
     7c0:	55 1f       	adc	r21, r21
     7c2:	44 0f       	add	r20, r20
     7c4:	55 1f       	adc	r21, r21
     7c6:	84 0f       	add	r24, r20
     7c8:	95 1f       	adc	r25, r21
     7ca:	89 5e       	subi	r24, 0xE9	; 233
     7cc:	9d 4f       	sbci	r25, 0xFD	; 253
     7ce:	fc 01       	movw	r30, r24
     7d0:	31 83       	std	Z+1, r19	; 0x01
     7d2:	20 83       	st	Z, r18
     7d4:	8b 81       	ldd	r24, Y+3	; 0x03
					snake[bodyPartIndex].y += 2 * yDirection;
     7d6:	9c 81       	ldd	r25, Y+4	; 0x04
     7d8:	88 0f       	add	r24, r24
     7da:	99 1f       	adc	r25, r25
     7dc:	9c 01       	movw	r18, r24
     7de:	22 0f       	add	r18, r18
     7e0:	33 1f       	adc	r19, r19
     7e2:	22 0f       	add	r18, r18
     7e4:	33 1f       	adc	r19, r19
     7e6:	82 0f       	add	r24, r18
     7e8:	93 1f       	adc	r25, r19
     7ea:	87 5e       	subi	r24, 0xE7	; 231
     7ec:	9d 4f       	sbci	r25, 0xFD	; 253
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 81       	ld	r18, Z
     7f2:	31 81       	ldd	r19, Z+1	; 0x01
     7f4:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <yDirection>
     7f8:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <yDirection+0x1>
     7fc:	88 0f       	add	r24, r24
     7fe:	99 1f       	adc	r25, r25
     800:	28 0f       	add	r18, r24
     802:	39 1f       	adc	r19, r25
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	9c 81       	ldd	r25, Y+4	; 0x04
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	ac 01       	movw	r20, r24
     80e:	44 0f       	add	r20, r20
     810:	55 1f       	adc	r21, r21
     812:	44 0f       	add	r20, r20
     814:	55 1f       	adc	r21, r21
     816:	84 0f       	add	r24, r20
     818:	95 1f       	adc	r25, r21
     81a:	87 5e       	subi	r24, 0xE7	; 231
     81c:	9d 4f       	sbci	r25, 0xFD	; 253
     81e:	fc 01       	movw	r30, r24
     820:	31 83       	std	Z+1, r19	; 0x01
     822:	20 83       	st	Z, r18
     824:	86 c0       	rjmp	.+268    	; 0x932 <__LOCK_REGION_LENGTH__+0x532>
     826:	8b 81       	ldd	r24, Y+3	; 0x03
				}
			}
			else
			{
				snake[bodyPartIndex].prevX = snake[bodyPartIndex].x;
     828:	9c 81       	ldd	r25, Y+4	; 0x04
     82a:	88 0f       	add	r24, r24
     82c:	99 1f       	adc	r25, r25
     82e:	9c 01       	movw	r18, r24
     830:	22 0f       	add	r18, r18
     832:	33 1f       	adc	r19, r19
     834:	22 0f       	add	r18, r18
     836:	33 1f       	adc	r19, r19
     838:	82 0f       	add	r24, r18
     83a:	93 1f       	adc	r25, r19
     83c:	89 5e       	subi	r24, 0xE9	; 233
     83e:	9d 4f       	sbci	r25, 0xFD	; 253
     840:	fc 01       	movw	r30, r24
     842:	20 81       	ld	r18, Z
     844:	31 81       	ldd	r19, Z+1	; 0x01
     846:	8b 81       	ldd	r24, Y+3	; 0x03
     848:	9c 81       	ldd	r25, Y+4	; 0x04
     84a:	88 0f       	add	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	ac 01       	movw	r20, r24
     850:	44 0f       	add	r20, r20
     852:	55 1f       	adc	r21, r21
     854:	44 0f       	add	r20, r20
     856:	55 1f       	adc	r21, r21
     858:	84 0f       	add	r24, r20
     85a:	95 1f       	adc	r25, r21
     85c:	85 5e       	subi	r24, 0xE5	; 229
     85e:	9d 4f       	sbci	r25, 0xFD	; 253
     860:	fc 01       	movw	r30, r24
     862:	31 83       	std	Z+1, r19	; 0x01
     864:	20 83       	st	Z, r18
     866:	8b 81       	ldd	r24, Y+3	; 0x03
				snake[bodyPartIndex].prevY = snake[bodyPartIndex].y;
     868:	9c 81       	ldd	r25, Y+4	; 0x04
     86a:	88 0f       	add	r24, r24
     86c:	99 1f       	adc	r25, r25
     86e:	9c 01       	movw	r18, r24
     870:	22 0f       	add	r18, r18
     872:	33 1f       	adc	r19, r19
     874:	22 0f       	add	r18, r18
     876:	33 1f       	adc	r19, r19
     878:	82 0f       	add	r24, r18
     87a:	93 1f       	adc	r25, r19
     87c:	87 5e       	subi	r24, 0xE7	; 231
     87e:	9d 4f       	sbci	r25, 0xFD	; 253
     880:	fc 01       	movw	r30, r24
     882:	20 81       	ld	r18, Z
     884:	31 81       	ldd	r19, Z+1	; 0x01
     886:	8b 81       	ldd	r24, Y+3	; 0x03
     888:	9c 81       	ldd	r25, Y+4	; 0x04
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	ac 01       	movw	r20, r24
     890:	44 0f       	add	r20, r20
     892:	55 1f       	adc	r21, r21
     894:	44 0f       	add	r20, r20
     896:	55 1f       	adc	r21, r21
     898:	84 0f       	add	r24, r20
     89a:	95 1f       	adc	r25, r21
     89c:	83 5e       	subi	r24, 0xE3	; 227
     89e:	9d 4f       	sbci	r25, 0xFD	; 253
     8a0:	fc 01       	movw	r30, r24
     8a2:	31 83       	std	Z+1, r19	; 0x01
     8a4:	20 83       	st	Z, r18
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
				snake[bodyPartIndex].x = snake[bodyPartIndex].headPointer->prevX;
     8a8:	9c 81       	ldd	r25, Y+4	; 0x04
     8aa:	88 0f       	add	r24, r24
     8ac:	99 1f       	adc	r25, r25
     8ae:	9c 01       	movw	r18, r24
     8b0:	22 0f       	add	r18, r18
     8b2:	33 1f       	adc	r19, r19
     8b4:	22 0f       	add	r18, r18
     8b6:	33 1f       	adc	r19, r19
     8b8:	82 0f       	add	r24, r18
     8ba:	93 1f       	adc	r25, r19
     8bc:	81 5e       	subi	r24, 0xE1	; 225
     8be:	9d 4f       	sbci	r25, 0xFD	; 253
     8c0:	fc 01       	movw	r30, r24
     8c2:	80 81       	ld	r24, Z
     8c4:	91 81       	ldd	r25, Z+1	; 0x01
     8c6:	fc 01       	movw	r30, r24
     8c8:	24 81       	ldd	r18, Z+4	; 0x04
     8ca:	35 81       	ldd	r19, Z+5	; 0x05
     8cc:	8b 81       	ldd	r24, Y+3	; 0x03
     8ce:	9c 81       	ldd	r25, Y+4	; 0x04
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	ac 01       	movw	r20, r24
     8d6:	44 0f       	add	r20, r20
     8d8:	55 1f       	adc	r21, r21
     8da:	44 0f       	add	r20, r20
     8dc:	55 1f       	adc	r21, r21
     8de:	84 0f       	add	r24, r20
     8e0:	95 1f       	adc	r25, r21
     8e2:	89 5e       	subi	r24, 0xE9	; 233
     8e4:	9d 4f       	sbci	r25, 0xFD	; 253
     8e6:	fc 01       	movw	r30, r24
     8e8:	31 83       	std	Z+1, r19	; 0x01
     8ea:	20 83       	st	Z, r18
     8ec:	8b 81       	ldd	r24, Y+3	; 0x03
				snake[bodyPartIndex].y = snake[bodyPartIndex].headPointer->prevY;
     8ee:	9c 81       	ldd	r25, Y+4	; 0x04
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	9c 01       	movw	r18, r24
     8f6:	22 0f       	add	r18, r18
     8f8:	33 1f       	adc	r19, r19
     8fa:	22 0f       	add	r18, r18
     8fc:	33 1f       	adc	r19, r19
     8fe:	82 0f       	add	r24, r18
     900:	93 1f       	adc	r25, r19
     902:	81 5e       	subi	r24, 0xE1	; 225
     904:	9d 4f       	sbci	r25, 0xFD	; 253
     906:	fc 01       	movw	r30, r24
     908:	80 81       	ld	r24, Z
     90a:	91 81       	ldd	r25, Z+1	; 0x01
     90c:	fc 01       	movw	r30, r24
     90e:	26 81       	ldd	r18, Z+6	; 0x06
     910:	37 81       	ldd	r19, Z+7	; 0x07
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	ac 01       	movw	r20, r24
     91c:	44 0f       	add	r20, r20
     91e:	55 1f       	adc	r21, r21
     920:	44 0f       	add	r20, r20
     922:	55 1f       	adc	r21, r21
     924:	84 0f       	add	r24, r20
     926:	95 1f       	adc	r25, r21
     928:	87 5e       	subi	r24, 0xE7	; 231
     92a:	9d 4f       	sbci	r25, 0xFD	; 253
     92c:	fc 01       	movw	r30, r24
     92e:	31 83       	std	Z+1, r19	; 0x01
     930:	20 83       	st	Z, r18
     932:	8b 81       	ldd	r24, Y+3	; 0x03

    while (1) 
	{
		clearDisplay();
		
		for (int bodyPartIndex = 0; bodyPartIndex < snakeBodyLength; bodyPartIndex++)
     934:	9c 81       	ldd	r25, Y+4	; 0x04
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	9c 83       	std	Y+4, r25	; 0x04
     93a:	8b 83       	std	Y+3, r24	; 0x03
     93c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <snakeBodyLength>
     940:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <snakeBodyLength+0x1>
     944:	2b 81       	ldd	r18, Y+3	; 0x03
     946:	3c 81       	ldd	r19, Y+4	; 0x04
     948:	28 17       	cp	r18, r24
     94a:	39 07       	cpc	r19, r25
     94c:	0c f4       	brge	.+2      	; 0x950 <__LOCK_REGION_LENGTH__+0x550>
     94e:	94 cd       	rjmp	.-1240   	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
				snake[bodyPartIndex].x = snake[bodyPartIndex].headPointer->prevX;
				snake[bodyPartIndex].y = snake[bodyPartIndex].headPointer->prevY;
			}
		}
		
		CheckInput();
     950:	aa d0       	rcall	.+340    	; 0xaa6 <CheckInput>
     952:	4f ef       	ldi	r20, 0xFF	; 255

		DrawFood(20,20,worldRender);
     954:	55 e0       	ldi	r21, 0x05	; 5
     956:	64 e1       	ldi	r22, 0x14	; 20
     958:	84 e1       	ldi	r24, 0x14	; 20
     95a:	61 d3       	rcall	.+1730   	; 0x101e <DrawFood>
     95c:	1e 82       	std	Y+6, r1	; 0x06

		for(int x = 0; x < snakeBodyLength; x++)
     95e:	1d 82       	std	Y+5, r1	; 0x05
     960:	29 c0       	rjmp	.+82     	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
     962:	8d 81       	ldd	r24, Y+5	; 0x05
		{
			DrawDot(snake[x].x, snake[x].y, worldRender);
     964:	9e 81       	ldd	r25, Y+6	; 0x06
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	9c 01       	movw	r18, r24
     96c:	22 0f       	add	r18, r18
     96e:	33 1f       	adc	r19, r19
     970:	22 0f       	add	r18, r18
     972:	33 1f       	adc	r19, r19
     974:	82 0f       	add	r24, r18
     976:	93 1f       	adc	r25, r19
     978:	87 5e       	subi	r24, 0xE7	; 231
     97a:	9d 4f       	sbci	r25, 0xFD	; 253
     97c:	fc 01       	movw	r30, r24
     97e:	80 81       	ld	r24, Z
     980:	91 81       	ldd	r25, Z+1	; 0x01
     982:	68 2f       	mov	r22, r24
     984:	8d 81       	ldd	r24, Y+5	; 0x05
     986:	9e 81       	ldd	r25, Y+6	; 0x06
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	9c 01       	movw	r18, r24
     98e:	22 0f       	add	r18, r18
     990:	33 1f       	adc	r19, r19
     992:	22 0f       	add	r18, r18
     994:	33 1f       	adc	r19, r19
     996:	82 0f       	add	r24, r18
     998:	93 1f       	adc	r25, r19
     99a:	89 5e       	subi	r24, 0xE9	; 233
     99c:	9d 4f       	sbci	r25, 0xFD	; 253
     99e:	fc 01       	movw	r30, r24
     9a0:	80 81       	ld	r24, Z
     9a2:	91 81       	ldd	r25, Z+1	; 0x01
     9a4:	4f ef       	ldi	r20, 0xFF	; 255
     9a6:	55 e0       	ldi	r21, 0x05	; 5
     9a8:	04 d3       	rcall	.+1544   	; 0xfb2 <DrawDot>
     9aa:	8d 81       	ldd	r24, Y+5	; 0x05
		
		CheckInput();

		DrawFood(20,20,worldRender);

		for(int x = 0; x < snakeBodyLength; x++)
     9ac:	9e 81       	ldd	r25, Y+6	; 0x06
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	9e 83       	std	Y+6, r25	; 0x06
     9b2:	8d 83       	std	Y+5, r24	; 0x05
     9b4:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <snakeBodyLength>
     9b8:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <snakeBodyLength+0x1>
     9bc:	2d 81       	ldd	r18, Y+5	; 0x05
     9be:	3e 81       	ldd	r19, Y+6	; 0x06
     9c0:	28 17       	cp	r18, r24
     9c2:	39 07       	cpc	r19, r25
     9c4:	74 f2       	brlt	.-100    	; 0x962 <__LOCK_REGION_LENGTH__+0x562>
		{
			DrawDot(snake[x].x, snake[x].y, worldRender);
		}
		
		RenderWorld(worldRender);
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	95 e0       	ldi	r25, 0x05	; 5
     9ca:	62 d3       	rcall	.+1732   	; 0x1090 <RenderWorld>
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a8 ec       	ldi	r26, 0xC8	; 200
     9d2:	b2 e4       	ldi	r27, 0x42	; 66
     9d4:	8f 83       	std	Y+7, r24	; 0x07
     9d6:	98 87       	std	Y+8, r25	; 0x08
     9d8:	a9 87       	std	Y+9, r26	; 0x09
     9da:	ba 87       	std	Y+10, r27	; 0x0a
     9dc:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	4a e7       	ldi	r20, 0x7A	; 122
     9e2:	55 e4       	ldi	r21, 0x45	; 69
     9e4:	6f 81       	ldd	r22, Y+7	; 0x07
     9e6:	78 85       	ldd	r23, Y+8	; 0x08
     9e8:	89 85       	ldd	r24, Y+9	; 0x09
     9ea:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ec:	0f d4       	rcall	.+2078   	; 0x120c <__mulsf3>
     9ee:	dc 01       	movw	r26, r24
     9f0:	cb 01       	movw	r24, r22
     9f2:	8b 87       	std	Y+11, r24	; 0x0b
     9f4:	9c 87       	std	Y+12, r25	; 0x0c
     9f6:	ad 87       	std	Y+13, r26	; 0x0d
     9f8:	be 87       	std	Y+14, r27	; 0x0e
     9fa:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e8       	ldi	r20, 0x80	; 128
     a00:	5f e3       	ldi	r21, 0x3F	; 63
     a02:	6b 85       	ldd	r22, Y+11	; 0x0b
     a04:	7c 85       	ldd	r23, Y+12	; 0x0c
     a06:	8d 85       	ldd	r24, Y+13	; 0x0d
     a08:	9e 85       	ldd	r25, Y+14	; 0x0e
     a0a:	7f d3       	rcall	.+1790   	; 0x110a <__cmpsf2>
     a0c:	88 23       	and	r24, r24
     a0e:	2c f4       	brge	.+10     	; 0xa1a <__LOCK_REGION_LENGTH__+0x61a>
     a10:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	98 8b       	std	Y+16, r25	; 0x10
     a16:	8f 87       	std	Y+15, r24	; 0x0f
     a18:	3b c0       	rjmp	.+118    	; 0xa90 <__LOCK_REGION_LENGTH__+0x690>
	else if (__tmp > 65535)
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	3f ef       	ldi	r19, 0xFF	; 255
     a1e:	4f e7       	ldi	r20, 0x7F	; 127
     a20:	57 e4       	ldi	r21, 0x47	; 71
     a22:	6b 85       	ldd	r22, Y+11	; 0x0b
     a24:	7c 85       	ldd	r23, Y+12	; 0x0c
     a26:	8d 85       	ldd	r24, Y+13	; 0x0d
     a28:	9e 85       	ldd	r25, Y+14	; 0x0e
     a2a:	ec d3       	rcall	.+2008   	; 0x1204 <__gesf2>
     a2c:	18 16       	cp	r1, r24
     a2e:	3c f5       	brge	.+78     	; 0xa7e <__LOCK_REGION_LENGTH__+0x67e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	40 e2       	ldi	r20, 0x20	; 32
     a36:	51 e4       	ldi	r21, 0x41	; 65
     a38:	6f 81       	ldd	r22, Y+7	; 0x07
     a3a:	78 85       	ldd	r23, Y+8	; 0x08
     a3c:	89 85       	ldd	r24, Y+9	; 0x09
     a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a40:	e5 d3       	rcall	.+1994   	; 0x120c <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	bc 01       	movw	r22, r24
     a48:	cd 01       	movw	r24, r26
     a4a:	63 d3       	rcall	.+1734   	; 0x1112 <__fixunssfsi>
     a4c:	dc 01       	movw	r26, r24
     a4e:	cb 01       	movw	r24, r22
     a50:	98 8b       	std	Y+16, r25	; 0x10
     a52:	8f 87       	std	Y+15, r24	; 0x0f
     a54:	0f c0       	rjmp	.+30     	; 0xa74 <__LOCK_REGION_LENGTH__+0x674>
     a56:	80 e9       	ldi	r24, 0x90	; 144
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	9a 8b       	std	Y+18, r25	; 0x12
     a5c:	89 8b       	std	Y+17, r24	; 0x11
     a5e:	89 89       	ldd	r24, Y+17	; 0x11
     a60:	9a 89       	ldd	r25, Y+18	; 0x12
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	f1 f7       	brne	.-4      	; 0xa62 <__LOCK_REGION_LENGTH__+0x662>
     a66:	9a 8b       	std	Y+18, r25	; 0x12
     a68:	89 8b       	std	Y+17, r24	; 0x11
     a6a:	8f 85       	ldd	r24, Y+15	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a6c:	98 89       	ldd	r25, Y+16	; 0x10
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	98 8b       	std	Y+16, r25	; 0x10
     a72:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a74:	8f 85       	ldd	r24, Y+15	; 0x0f
     a76:	98 89       	ldd	r25, Y+16	; 0x10
     a78:	89 2b       	or	r24, r25
     a7a:	69 f7       	brne	.-38     	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     a7c:	13 c0       	rjmp	.+38     	; 0xaa4 <__LOCK_REGION_LENGTH__+0x6a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a80:	7c 85       	ldd	r23, Y+12	; 0x0c
     a82:	8d 85       	ldd	r24, Y+13	; 0x0d
     a84:	9e 85       	ldd	r25, Y+14	; 0x0e
     a86:	45 d3       	rcall	.+1674   	; 0x1112 <__fixunssfsi>
     a88:	dc 01       	movw	r26, r24
     a8a:	cb 01       	movw	r24, r22
     a8c:	98 8b       	std	Y+16, r25	; 0x10
     a8e:	8f 87       	std	Y+15, r24	; 0x0f
     a90:	8f 85       	ldd	r24, Y+15	; 0x0f
     a92:	98 89       	ldd	r25, Y+16	; 0x10
     a94:	9c 8b       	std	Y+20, r25	; 0x14
     a96:	8b 8b       	std	Y+19, r24	; 0x13
     a98:	8b 89       	ldd	r24, Y+19	; 0x13
     a9a:	9c 89       	ldd	r25, Y+20	; 0x14
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <__LOCK_REGION_LENGTH__+0x69c>
     aa0:	9c 8b       	std	Y+20, r25	; 0x14
     aa2:	8b 8b       	std	Y+19, r24	; 0x13
     aa4:	e5 cc       	rjmp	.-1590   	; 0x470 <__LOCK_REGION_LENGTH__+0x70>

00000aa6 <CheckInput>:

		_delay_ms(100);
    }
     aa6:	cf 93       	push	r28
}

void CheckInput()
{
     aa8:	df 93       	push	r29
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
	if (GetKey() == '8')
     aae:	6c db       	rcall	.-2344   	; 0x188 <GetKey>
     ab0:	88 33       	cpi	r24, 0x38	; 56
     ab2:	09 f4       	brne	.+2      	; 0xab6 <CheckInput+0x10>
	{
		GoDown();
     ab4:	5b d0       	rcall	.+182    	; 0xb6c <GoDown>
	}

	if (GetKey() == '2')
     ab6:	68 db       	rcall	.-2352   	; 0x188 <GetKey>
     ab8:	82 33       	cpi	r24, 0x32	; 50
	{
		GoUp();
     aba:	09 f4       	brne	.+2      	; 0xabe <CheckInput+0x18>
	}

	if (GetKey() == '6')
     abc:	3e d0       	rcall	.+124    	; 0xb3a <GoUp>
     abe:	64 db       	rcall	.-2360   	; 0x188 <GetKey>
     ac0:	86 33       	cpi	r24, 0x36	; 54
	{
		GoRight();
     ac2:	09 f4       	brne	.+2      	; 0xac6 <CheckInput+0x20>
     ac4:	21 d0       	rcall	.+66     	; 0xb08 <GoRight>
	}

	if (GetKey() == '4')
     ac6:	60 db       	rcall	.-2368   	; 0x188 <GetKey>
     ac8:	84 33       	cpi	r24, 0x34	; 52
     aca:	09 f4       	brne	.+2      	; 0xace <CheckInput+0x28>
     acc:	04 d0       	rcall	.+8      	; 0xad6 <GoLeft>
	{
		GoLeft();
     ace:	00 00       	nop
     ad0:	df 91       	pop	r29
	}
}
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <GoLeft>:
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29

void GoLeft()
{
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
	if (xDirection == 1)
     ade:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <xDirection>
     ae2:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <xDirection+0x1>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	59 f0       	breq	.+22     	; 0xb00 <GoLeft+0x2a>
		return;
	
	yDirection = 0;
     aea:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <yDirection+0x1>
     aee:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <yDirection>
	xDirection = -1;
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	9f ef       	ldi	r25, 0xFF	; 255
     af6:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <xDirection+0x1>
     afa:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <xDirection>
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <GoLeft+0x2c>
}

void GoLeft()
{
	if (xDirection == 1)
		return;
     b00:	00 00       	nop
	
	yDirection = 0;
	xDirection = -1;
}
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <GoRight>:

void GoRight()
{
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
	if (xDirection == -1)
     b10:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <xDirection>
     b14:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <xDirection+0x1>
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	59 f0       	breq	.+22     	; 0xb32 <GoRight+0x2a>
		return;
	
	yDirection = 0;
     b1c:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <yDirection+0x1>
     b20:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <yDirection>
	xDirection = 1;
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <xDirection+0x1>
     b2c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <xDirection>
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <GoRight+0x2c>
}

void GoRight()
{
	if (xDirection == -1)
		return;
     b32:	00 00       	nop
	
	yDirection = 0;
	xDirection = 1;
}
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	08 95       	ret

00000b3a <GoUp>:

void GoUp()
{
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
	if (yDirection == 1)
     b42:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <yDirection>
     b46:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <yDirection+0x1>
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	59 f0       	breq	.+22     	; 0xb64 <GoUp+0x2a>
		return;
	
	yDirection = -1;
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	9f ef       	ldi	r25, 0xFF	; 255
     b52:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <yDirection+0x1>
     b56:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <yDirection>
	xDirection = 0;
     b5a:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <xDirection+0x1>
     b5e:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <xDirection>
     b62:	01 c0       	rjmp	.+2      	; 0xb66 <GoUp+0x2c>
}

void GoUp()
{
	if (yDirection == 1)
		return;
     b64:	00 00       	nop
	
	yDirection = -1;
	xDirection = 0;
}
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <GoDown>:

void GoDown()
{
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
	if (yDirection == -1)
     b74:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <yDirection>
     b78:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <yDirection+0x1>
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	59 f0       	breq	.+22     	; 0xb96 <GoDown+0x2a>
		return;
	
	xDirection = 0;
     b80:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <xDirection+0x1>
     b84:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <xDirection>
	yDirection = 1;
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <yDirection+0x1>
     b90:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <yDirection>
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <GoDown+0x2c>
}

void GoDown()
{
	if (yDirection == -1)
		return;
     b96:	00 00       	nop
	
	xDirection = 0;
	yDirection = 1;
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <initDisplay>:
#define RST_BIT 0 // PA0
#define DC_BIT 1 // PA1
#define LIGHT_BIT 2 // PA2

void initDisplay()
{
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	SPI_MasterInit();
     ba6:	12 d1       	rcall	.+548    	; 0xdcc <SPI_MasterInit>
	
	// Set port to output
	DDRA = 0xFF;
     ba8:	81 e2       	ldi	r24, 0x21	; 33
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	2f ef       	ldi	r18, 0xFF	; 255
     bae:	fc 01       	movw	r30, r24
     bb0:	20 83       	st	Z, r18
	
	// Set bits to high (active low)
	PORTA |= (1 << RST_BIT);
     bb2:	82 e2       	ldi	r24, 0x22	; 34
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	22 e2       	ldi	r18, 0x22	; 34
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	f9 01       	movw	r30, r18
     bbc:	20 81       	ld	r18, Z
     bbe:	21 60       	ori	r18, 0x01	; 1
     bc0:	fc 01       	movw	r30, r24
     bc2:	20 83       	st	Z, r18
	PORTA |= (1 << DC_BIT);
     bc4:	82 e2       	ldi	r24, 0x22	; 34
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	22 e2       	ldi	r18, 0x22	; 34
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	f9 01       	movw	r30, r18
     bce:	20 81       	ld	r18, Z
     bd0:	22 60       	ori	r18, 0x02	; 2
     bd2:	fc 01       	movw	r30, r24
     bd4:	20 83       	st	Z, r18

	// Turn on light
	PORTA &= ~(1 << LIGHT_BIT);
     bd6:	82 e2       	ldi	r24, 0x22	; 34
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	22 e2       	ldi	r18, 0x22	; 34
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	f9 01       	movw	r30, r18
     be0:	20 81       	ld	r18, Z
     be2:	2b 7f       	andi	r18, 0xFB	; 251
     be4:	fc 01       	movw	r30, r24
	
	// Required display reset
	// This has to be done before doing
	// Anything else with the display
	resetDisplay();
     be6:	20 83       	st	Z, r18
	
	// Use extended instruction set
	sendIntruction(0x21);
     be8:	0f d0       	rcall	.+30     	; 0xc08 <resetDisplay>
     bea:	81 e2       	ldi	r24, 0x21	; 33

	// Here we control operation voltage of the LCD
	// We set it to 6V (the minimum allowed voltage range)
	// If you do not set a VOP value, the internal voltage generator
	// Will be switched off, and thus the display won't function.
	sendIntruction(0xC0);
     bec:	9f d0       	rcall	.+318    	; 0xd2c <sendIntruction>
     bee:	80 ec       	ldi	r24, 0xC0	; 192

	// We set the bias voltage levels
	// The bias value is taken after the
	// optimum bias value described in official
	// data sheet.
	sendIntruction(0x13);
     bf0:	9d d0       	rcall	.+314    	; 0xd2c <sendIntruction>
     bf2:	83 e1       	ldi	r24, 0x13	; 19

	// Use basic instruction set
	sendIntruction(0x20);
     bf4:	9b d0       	rcall	.+310    	; 0xd2c <sendIntruction>
     bf6:	80 e2       	ldi	r24, 0x20	; 32
     bf8:	99 d0       	rcall	.+306    	; 0xd2c <sendIntruction>

	// Set display mode normal
	sendIntruction(0b00001100);
     bfa:	8c e0       	ldi	r24, 0x0C	; 12
     bfc:	97 d0       	rcall	.+302    	; 0xd2c <sendIntruction>
     bfe:	cb d0       	rcall	.+406    	; 0xd96 <clearDisplay>
	

	// Clear the display to make sure
	// No pixels are alive on startup
	clearDisplay();
     c00:	00 00       	nop
     c02:	df 91       	pop	r29
}
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <resetDisplay>:
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29


void resetDisplay()
{
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	2e 97       	sbiw	r28, 0x0e	; 14
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
	// Set RES low
	PORTA &= ~(1 << RST_BIT);
     c1c:	82 e2       	ldi	r24, 0x22	; 34
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	22 e2       	ldi	r18, 0x22	; 34
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	f9 01       	movw	r30, r18
     c26:	20 81       	ld	r18, Z
     c28:	2e 7f       	andi	r18, 0xFE	; 254
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 83       	st	Z, r18
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	a8 ec       	ldi	r26, 0xC8	; 200
     c34:	b2 e4       	ldi	r27, 0x42	; 66
     c36:	89 83       	std	Y+1, r24	; 0x01
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	ab 83       	std	Y+3, r26	; 0x03
     c3c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	4a e7       	ldi	r20, 0x7A	; 122
     c44:	55 e4       	ldi	r21, 0x45	; 69
     c46:	69 81       	ldd	r22, Y+1	; 0x01
     c48:	7a 81       	ldd	r23, Y+2	; 0x02
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	de d2       	rcall	.+1468   	; 0x120c <__mulsf3>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	8d 83       	std	Y+5, r24	; 0x05
     c56:	9e 83       	std	Y+6, r25	; 0x06
     c58:	af 83       	std	Y+7, r26	; 0x07
     c5a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e8       	ldi	r20, 0x80	; 128
     c62:	5f e3       	ldi	r21, 0x3F	; 63
     c64:	6d 81       	ldd	r22, Y+5	; 0x05
     c66:	7e 81       	ldd	r23, Y+6	; 0x06
     c68:	8f 81       	ldd	r24, Y+7	; 0x07
     c6a:	98 85       	ldd	r25, Y+8	; 0x08
     c6c:	4e d2       	rcall	.+1180   	; 0x110a <__cmpsf2>
     c6e:	88 23       	and	r24, r24
     c70:	2c f4       	brge	.+10     	; 0xc7c <resetDisplay+0x74>
		__ticks = 1;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	9a 87       	std	Y+10, r25	; 0x0a
     c78:	89 87       	std	Y+9, r24	; 0x09
     c7a:	3b c0       	rjmp	.+118    	; 0xcf2 <resetDisplay+0xea>
	else if (__tmp > 65535)
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	3f ef       	ldi	r19, 0xFF	; 255
     c80:	4f e7       	ldi	r20, 0x7F	; 127
     c82:	57 e4       	ldi	r21, 0x47	; 71
     c84:	6d 81       	ldd	r22, Y+5	; 0x05
     c86:	7e 81       	ldd	r23, Y+6	; 0x06
     c88:	8f 81       	ldd	r24, Y+7	; 0x07
     c8a:	98 85       	ldd	r25, Y+8	; 0x08
     c8c:	bb d2       	rcall	.+1398   	; 0x1204 <__gesf2>
     c8e:	18 16       	cp	r1, r24
     c90:	3c f5       	brge	.+78     	; 0xce0 <resetDisplay+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e2       	ldi	r20, 0x20	; 32
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	69 81       	ldd	r22, Y+1	; 0x01
     c9c:	7a 81       	ldd	r23, Y+2	; 0x02
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	b4 d2       	rcall	.+1384   	; 0x120c <__mulsf3>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	bc 01       	movw	r22, r24
     caa:	cd 01       	movw	r24, r26
     cac:	32 d2       	rcall	.+1124   	; 0x1112 <__fixunssfsi>
     cae:	dc 01       	movw	r26, r24
     cb0:	cb 01       	movw	r24, r22
     cb2:	9a 87       	std	Y+10, r25	; 0x0a
     cb4:	89 87       	std	Y+9, r24	; 0x09
     cb6:	0f c0       	rjmp	.+30     	; 0xcd6 <resetDisplay+0xce>
     cb8:	80 e9       	ldi	r24, 0x90	; 144
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	9c 87       	std	Y+12, r25	; 0x0c
     cbe:	8b 87       	std	Y+11, r24	; 0x0b
     cc0:	8b 85       	ldd	r24, Y+11	; 0x0b
     cc2:	9c 85       	ldd	r25, Y+12	; 0x0c
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	f1 f7       	brne	.-4      	; 0xcc4 <resetDisplay+0xbc>
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ccc:	89 85       	ldd	r24, Y+9	; 0x09
     cce:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	9a 87       	std	Y+10, r25	; 0x0a
     cd4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd6:	89 85       	ldd	r24, Y+9	; 0x09
     cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cda:	89 2b       	or	r24, r25
     cdc:	69 f7       	brne	.-38     	; 0xcb8 <resetDisplay+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cde:	13 c0       	rjmp	.+38     	; 0xd06 <resetDisplay+0xfe>
     ce0:	6d 81       	ldd	r22, Y+5	; 0x05
     ce2:	7e 81       	ldd	r23, Y+6	; 0x06
     ce4:	8f 81       	ldd	r24, Y+7	; 0x07
     ce6:	98 85       	ldd	r25, Y+8	; 0x08
     ce8:	14 d2       	rcall	.+1064   	; 0x1112 <__fixunssfsi>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	9a 87       	std	Y+10, r25	; 0x0a
     cf0:	89 87       	std	Y+9, r24	; 0x09
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	9e 87       	std	Y+14, r25	; 0x0e
     cf8:	8d 87       	std	Y+13, r24	; 0x0d
     cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <resetDisplay+0xf6>
     d02:	9e 87       	std	Y+14, r25	; 0x0e
     d04:	8d 87       	std	Y+13, r24	; 0x0d
		
	// Delay of min 100 ns (0,1ms) p.20
	_delay_ms(100);
		
	// Set RES high
	PORTA |= (1 << RST_BIT);
     d06:	82 e2       	ldi	r24, 0x22	; 34
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	22 e2       	ldi	r18, 0x22	; 34
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	f9 01       	movw	r30, r18
     d10:	20 81       	ld	r18, Z
     d12:	21 60       	ori	r18, 0x01	; 1
     d14:	fc 01       	movw	r30, r24
     d16:	20 83       	st	Z, r18
}
     d18:	00 00       	nop
     d1a:	2e 96       	adiw	r28, 0x0e	; 14
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret

00000d2c <sendIntruction>:

void sendIntruction(unsigned char cmd)
{
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	1f 92       	push	r1
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	89 83       	std	Y+1, r24	; 0x01
	// Set DC low, Command
	PORTA &= ~(1 << DC_BIT);
     d38:	82 e2       	ldi	r24, 0x22	; 34
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	22 e2       	ldi	r18, 0x22	; 34
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	f9 01       	movw	r30, r18
     d42:	20 81       	ld	r18, Z
     d44:	2d 7f       	andi	r18, 0xFD	; 253
     d46:	fc 01       	movw	r30, r24
     d48:	20 83       	st	Z, r18
	SPI_MasterTransmit(cmd);
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	51 d0       	rcall	.+162    	; 0xdf0 <SPI_MasterTransmit>
	PORTA |= 1 << DC_BIT;
     d4e:	82 e2       	ldi	r24, 0x22	; 34
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	22 e2       	ldi	r18, 0x22	; 34
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	f9 01       	movw	r30, r18
     d58:	20 81       	ld	r18, Z
     d5a:	22 60       	ori	r18, 0x02	; 2
     d5c:	fc 01       	movw	r30, r24
     d5e:	20 83       	st	Z, r18
}
     d60:	00 00       	nop
     d62:	0f 90       	pop	r0
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <sendData>:

void sendData(unsigned char data)
{	
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	1f 92       	push	r1
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= 1 << DC_BIT;
     d76:	82 e2       	ldi	r24, 0x22	; 34
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	22 e2       	ldi	r18, 0x22	; 34
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	f9 01       	movw	r30, r18
     d80:	20 81       	ld	r18, Z
     d82:	22 60       	ori	r18, 0x02	; 2
     d84:	fc 01       	movw	r30, r24
     d86:	20 83       	st	Z, r18
	SPI_MasterTransmit(data);
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	32 d0       	rcall	.+100    	; 0xdf0 <SPI_MasterTransmit>
}
     d8c:	00 00       	nop
     d8e:	0f 90       	pop	r0
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <clearDisplay>:

void clearDisplay()
{
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	1f 92       	push	r1
     d9c:	1f 92       	push	r1
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
	for (int k=0; k<=503; k++)
     da2:	1a 82       	std	Y+2, r1	; 0x02
     da4:	19 82       	std	Y+1, r1	; 0x01
     da6:	07 c0       	rjmp	.+14     	; 0xdb6 <clearDisplay+0x20>
	{
		sendData(0x00);
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	df df       	rcall	.-66     	; 0xd6a <sendData>
	SPI_MasterTransmit(data);
}

void clearDisplay()
{
	for (int k=0; k<=503; k++)
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	9a 81       	ldd	r25, Y+2	; 0x02
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	88 3f       	cpi	r24, 0xF8	; 248
     dbc:	91 40       	sbci	r25, 0x01	; 1
     dbe:	a4 f3       	brlt	.-24     	; 0xda8 <clearDisplay+0x12>
	{
		sendData(0x00);
	}
     dc0:	00 00       	nop
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	08 95       	ret

00000dcc <SPI_MasterInit>:
#define DD_MOSI 2
#define DD_MISO 3
#define DD_DORD 5

void SPI_MasterInit(void)
{	
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS); //MOSI,SS & SCK output,others input
     dd4:	84 e2       	ldi	r24, 0x24	; 36
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	27 e0       	ldi	r18, 0x07	; 7
     dda:	fc 01       	movw	r30, r24
     ddc:	20 83       	st	Z, r18
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);  		   //SPI, Master, clock = fck/16
     dde:	8c e4       	ldi	r24, 0x4C	; 76
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	21 e5       	ldi	r18, 0x51	; 81
     de4:	fc 01       	movw	r30, r24
     de6:	20 83       	st	Z, r18
}
     de8:	00 00       	nop
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <SPI_MasterTransmit+0x6>
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	8b 83       	std	Y+3, r24	; 0x03
	PORTB &= ~(1 << DD_SS);
     dfc:	85 e2       	ldi	r24, 0x25	; 37
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	25 e2       	ldi	r18, 0x25	; 37
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	f9 01       	movw	r30, r18
     e06:	20 81       	ld	r18, Z
     e08:	2e 7f       	andi	r18, 0xFE	; 254
     e0a:	fc 01       	movw	r30, r24
     e0c:	20 83       	st	Z, r18

	// Start transmission
	SPDR = cData;			
     e0e:	8e e4       	ldi	r24, 0x4E	; 78
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	2b 81       	ldd	r18, Y+3	; 0x03
     e14:	fc 01       	movw	r30, r24
     e16:	20 83       	st	Z, r18
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
     e18:	1a 82       	std	Y+2, r1	; 0x02
     e1a:	19 82       	std	Y+1, r1	; 0x01
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <SPI_MasterTransmit+0x38>
	{
		k++;
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
	// Start transmission
	SPDR = cData;			
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
     e28:	8d e4       	ldi	r24, 0x4D	; 77
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	fc 01       	movw	r30, r24
     e2e:	80 81       	ld	r24, Z
     e30:	88 23       	and	r24, r24
     e32:	ac f7       	brge	.-22     	; 0xe1e <SPI_MasterTransmit+0x2e>
	{
		k++;
	}			
	
	cData = SPDR;
     e34:	8e e4       	ldi	r24, 0x4E	; 78
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	fc 01       	movw	r30, r24
     e3a:	80 81       	ld	r24, Z
     e3c:	8b 83       	std	Y+3, r24	; 0x03

	PORTB|= 1 << DD_SS;
     e3e:	85 e2       	ldi	r24, 0x25	; 37
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	25 e2       	ldi	r18, 0x25	; 37
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	f9 01       	movw	r30, r18
     e48:	20 81       	ld	r18, Z
     e4a:	21 60       	ori	r18, 0x01	; 1
     e4c:	fc 01       	movw	r30, r24
     e4e:	20 83       	st	Z, r18
}
     e50:	00 00       	nop
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	08 95       	ret

00000e5e <DrawPixel>:
 */ 
#include "WorldDriver.h"
#include "Nokia5110Driver.h"

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	28 97       	sbiw	r28, 0x08	; 8
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	8d 83       	std	Y+5, r24	; 0x05
     e74:	6e 83       	std	Y+6, r22	; 0x06
     e76:	58 87       	std	Y+8, r21	; 0x08
     e78:	4f 83       	std	Y+7, r20	; 0x07
	if (x < 0 || x > 83)
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	84 35       	cpi	r24, 0x54	; 84
     e7e:	08 f0       	brcs	.+2      	; 0xe82 <DrawPixel+0x24>
     e80:	8c c0       	rjmp	.+280    	; 0xf9a <DrawPixel+0x13c>
		return;

	if (y < 0 || y > 47)
     e82:	8e 81       	ldd	r24, Y+6	; 0x06
     e84:	80 33       	cpi	r24, 0x30	; 48
     e86:	08 f0       	brcs	.+2      	; 0xe8a <DrawPixel+0x2c>
     e88:	8a c0       	rjmp	.+276    	; 0xf9e <DrawPixel+0x140>
		return;

	unsigned int baselineOffset = 0;
     e8a:	1a 82       	std	Y+2, r1	; 0x02
     e8c:	19 82       	std	Y+1, r1	; 0x01
	unsigned int verticalBitOffset = 0;
     e8e:	1c 82       	std	Y+4, r1	; 0x04
     e90:	1b 82       	std	Y+3, r1	; 0x03

	if (y >= 0 && y <= 7)
     e92:	8e 81       	ldd	r24, Y+6	; 0x06
     e94:	88 30       	cpi	r24, 0x08	; 8
     e96:	40 f4       	brcc	.+16     	; 0xea8 <DrawPixel+0x4a>
	{
		baselineOffset = 0;
     e98:	1a 82       	std	Y+2, r1	; 0x02
     e9a:	19 82       	std	Y+1, r1	; 0x01
		verticalBitOffset = y;
     e9c:	8e 81       	ldd	r24, Y+6	; 0x06
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	9c 83       	std	Y+4, r25	; 0x04
     ea4:	8b 83       	std	Y+3, r24	; 0x03
     ea6:	54 c0       	rjmp	.+168    	; 0xf50 <DrawPixel+0xf2>
	} 
	else if (y >= 8 && y <= 15)
     ea8:	8e 81       	ldd	r24, Y+6	; 0x06
     eaa:	88 30       	cpi	r24, 0x08	; 8
     eac:	70 f0       	brcs	.+28     	; 0xeca <DrawPixel+0x6c>
     eae:	8e 81       	ldd	r24, Y+6	; 0x06
     eb0:	80 31       	cpi	r24, 0x10	; 16
     eb2:	58 f4       	brcc	.+22     	; 0xeca <DrawPixel+0x6c>
	{
		baselineOffset = 84;
     eb4:	84 e5       	ldi	r24, 0x54	; 84
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	9a 83       	std	Y+2, r25	; 0x02
     eba:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - 8;
     ebc:	8e 81       	ldd	r24, Y+6	; 0x06
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	08 97       	sbiw	r24, 0x08	; 8
     ec4:	9c 83       	std	Y+4, r25	; 0x04
     ec6:	8b 83       	std	Y+3, r24	; 0x03
     ec8:	43 c0       	rjmp	.+134    	; 0xf50 <DrawPixel+0xf2>
	} 
	else if (y >= 16 && y <= 23)
     eca:	8e 81       	ldd	r24, Y+6	; 0x06
     ecc:	80 31       	cpi	r24, 0x10	; 16
     ece:	70 f0       	brcs	.+28     	; 0xeec <DrawPixel+0x8e>
     ed0:	8e 81       	ldd	r24, Y+6	; 0x06
     ed2:	88 31       	cpi	r24, 0x18	; 24
     ed4:	58 f4       	brcc	.+22     	; 0xeec <DrawPixel+0x8e>
	{
		baselineOffset = 84 * 2;
     ed6:	88 ea       	ldi	r24, 0xA8	; 168
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 2);
     ede:	8e 81       	ldd	r24, Y+6	; 0x06
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	40 97       	sbiw	r24, 0x10	; 16
     ee6:	9c 83       	std	Y+4, r25	; 0x04
     ee8:	8b 83       	std	Y+3, r24	; 0x03
     eea:	32 c0       	rjmp	.+100    	; 0xf50 <DrawPixel+0xf2>
	} 
	else if (y >= 24 && y <= 31)
     eec:	8e 81       	ldd	r24, Y+6	; 0x06
     eee:	88 31       	cpi	r24, 0x18	; 24
     ef0:	70 f0       	brcs	.+28     	; 0xf0e <DrawPixel+0xb0>
     ef2:	8e 81       	ldd	r24, Y+6	; 0x06
     ef4:	80 32       	cpi	r24, 0x20	; 32
     ef6:	58 f4       	brcc	.+22     	; 0xf0e <DrawPixel+0xb0>
	{
		baselineOffset = 84 * 3;
     ef8:	8c ef       	ldi	r24, 0xFC	; 252
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	9a 83       	std	Y+2, r25	; 0x02
     efe:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 3);
     f00:	8e 81       	ldd	r24, Y+6	; 0x06
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	48 97       	sbiw	r24, 0x18	; 24
     f08:	9c 83       	std	Y+4, r25	; 0x04
     f0a:	8b 83       	std	Y+3, r24	; 0x03
     f0c:	21 c0       	rjmp	.+66     	; 0xf50 <DrawPixel+0xf2>
	}
	else if (y >= 32 && y <= 39)
     f0e:	8e 81       	ldd	r24, Y+6	; 0x06
     f10:	80 32       	cpi	r24, 0x20	; 32
     f12:	70 f0       	brcs	.+28     	; 0xf30 <DrawPixel+0xd2>
     f14:	8e 81       	ldd	r24, Y+6	; 0x06
     f16:	88 32       	cpi	r24, 0x28	; 40
     f18:	58 f4       	brcc	.+22     	; 0xf30 <DrawPixel+0xd2>
	{
		baselineOffset = 84 * 4;
     f1a:	80 e5       	ldi	r24, 0x50	; 80
     f1c:	91 e0       	ldi	r25, 0x01	; 1
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 4);
     f22:	8e 81       	ldd	r24, Y+6	; 0x06
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	80 97       	sbiw	r24, 0x20	; 32
     f2a:	9c 83       	std	Y+4, r25	; 0x04
     f2c:	8b 83       	std	Y+3, r24	; 0x03
     f2e:	10 c0       	rjmp	.+32     	; 0xf50 <DrawPixel+0xf2>
	}
	else if (y >= 40 && y <= 47)
     f30:	8e 81       	ldd	r24, Y+6	; 0x06
     f32:	88 32       	cpi	r24, 0x28	; 40
     f34:	68 f0       	brcs	.+26     	; 0xf50 <DrawPixel+0xf2>
     f36:	8e 81       	ldd	r24, Y+6	; 0x06
     f38:	80 33       	cpi	r24, 0x30	; 48
     f3a:	50 f4       	brcc	.+20     	; 0xf50 <DrawPixel+0xf2>
	{
		baselineOffset = 84 * 5;
     f3c:	84 ea       	ldi	r24, 0xA4	; 164
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 5);
     f44:	8e 81       	ldd	r24, Y+6	; 0x06
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	88 97       	sbiw	r24, 0x28	; 40
     f4c:	9c 83       	std	Y+4, r25	; 0x04
     f4e:	8b 83       	std	Y+3, r24	; 0x03
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	82 0f       	add	r24, r18
     f5c:	93 1f       	adc	r25, r19
     f5e:	2f 81       	ldd	r18, Y+7	; 0x07
     f60:	38 85       	ldd	r19, Y+8	; 0x08
     f62:	82 0f       	add	r24, r18
     f64:	93 1f       	adc	r25, r19
     f66:	2d 81       	ldd	r18, Y+5	; 0x05
     f68:	42 2f       	mov	r20, r18
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	29 81       	ldd	r18, Y+1	; 0x01
     f6e:	3a 81       	ldd	r19, Y+2	; 0x02
     f70:	24 0f       	add	r18, r20
     f72:	35 1f       	adc	r19, r21
     f74:	4f 81       	ldd	r20, Y+7	; 0x07
     f76:	58 85       	ldd	r21, Y+8	; 0x08
     f78:	24 0f       	add	r18, r20
     f7a:	35 1f       	adc	r19, r21
     f7c:	f9 01       	movw	r30, r18
     f7e:	20 81       	ld	r18, Z
     f80:	42 2f       	mov	r20, r18
     f82:	21 e0       	ldi	r18, 0x01	; 1
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	0b 80       	ldd	r0, Y+3	; 0x03
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DrawPixel+0x130>
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DrawPixel+0x12c>
     f92:	24 2b       	or	r18, r20
     f94:	fc 01       	movw	r30, r24
     f96:	20 83       	st	Z, r18
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <DrawPixel+0x142>
#include "Nokia5110Driver.h"

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
	if (x < 0 || x > 83)
		return;
     f9a:	00 00       	nop
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <DrawPixel+0x142>

	if (y < 0 || y > 47)
		return;
     f9e:	00 00       	nop
		baselineOffset = 84 * 5;
		verticalBitOffset = y - (8 * 5);
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
}
     fa0:	28 96       	adiw	r28, 0x08	; 8
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	08 95       	ret

00000fb2 <DrawDot>:

 void DrawDot(unsigned char x, unsigned char y, unsigned char* world)
 {
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <DrawDot+0x6>
     fb8:	1f 92       	push	r1
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	6a 83       	std	Y+2, r22	; 0x02
     fc2:	5c 83       	std	Y+4, r21	; 0x04
     fc4:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	9c 81       	ldd	r25, Y+4	; 0x04
     fca:	ac 01       	movw	r20, r24
     fcc:	6a 81       	ldd	r22, Y+2	; 0x02
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	46 df       	rcall	.-372    	; 0xe5e <DrawPixel>
	DrawPixel(x + 1, y, world);
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	21 e0       	ldi	r18, 0x01	; 1
     fd6:	28 0f       	add	r18, r24
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	ac 01       	movw	r20, r24
     fde:	6a 81       	ldd	r22, Y+2	; 0x02
     fe0:	82 2f       	mov	r24, r18
     fe2:	3d df       	rcall	.-390    	; 0xe5e <DrawPixel>
	DrawPixel(x, y + 1, world);
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	21 e0       	ldi	r18, 0x01	; 1
     fe8:	28 0f       	add	r18, r24
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	ac 01       	movw	r20, r24
     ff0:	62 2f       	mov	r22, r18
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	34 df       	rcall	.-408    	; 0xe5e <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	31 e0       	ldi	r19, 0x01	; 1
     ffa:	38 0f       	add	r19, r24
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	21 e0       	ldi	r18, 0x01	; 1
    1000:	28 0f       	add	r18, r24
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	ac 01       	movw	r20, r24
    1008:	63 2f       	mov	r22, r19
    100a:	82 2f       	mov	r24, r18
    100c:	28 df       	rcall	.-432    	; 0xe5e <DrawPixel>
 }
    100e:	00 00       	nop
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	08 95       	ret

0000101e <DrawFood>:
 
 void DrawFood(unsigned char x, unsigned char y, unsigned char* world)
 {
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	00 d0       	rcall	.+0      	; 0x1024 <DrawFood+0x6>
    1024:	1f 92       	push	r1
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	6a 83       	std	Y+2, r22	; 0x02
    102e:	5c 83       	std	Y+4, r21	; 0x04
    1030:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	ac 01       	movw	r20, r24
    1038:	6a 81       	ldd	r22, Y+2	; 0x02
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	10 df       	rcall	.-480    	; 0xe5e <DrawPixel>
	DrawPixel(x + 2, y, world);
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	22 e0       	ldi	r18, 0x02	; 2
    1042:	28 0f       	add	r18, r24
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	9c 81       	ldd	r25, Y+4	; 0x04
    1048:	ac 01       	movw	r20, r24
    104a:	6a 81       	ldd	r22, Y+2	; 0x02
    104c:	82 2f       	mov	r24, r18
    104e:	07 df       	rcall	.-498    	; 0xe5e <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	31 e0       	ldi	r19, 0x01	; 1
    1054:	38 0f       	add	r19, r24
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	28 0f       	add	r18, r24
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	ac 01       	movw	r20, r24
    1062:	63 2f       	mov	r22, r19
    1064:	82 2f       	mov	r24, r18
    1066:	fb de       	rcall	.-522    	; 0xe5e <DrawPixel>
	DrawPixel(x + 1, y - 1, world);
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	3f ef       	ldi	r19, 0xFF	; 255
    106c:	38 0f       	add	r19, r24
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	21 e0       	ldi	r18, 0x01	; 1
    1072:	28 0f       	add	r18, r24
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	ac 01       	movw	r20, r24
    107a:	63 2f       	mov	r22, r19
    107c:	82 2f       	mov	r24, r18
    107e:	ef de       	rcall	.-546    	; 0xe5e <DrawPixel>
 }
    1080:	00 00       	nop
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <RenderWorld>:
 

 void RenderWorld(unsigned char* world)
 {
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	00 d0       	rcall	.+0      	; 0x1096 <RenderWorld+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <RenderWorld+0x8>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	9e 83       	std	Y+6, r25	; 0x06
    109e:	8d 83       	std	Y+5, r24	; 0x05
	for (int x = 0; x < 504; x++)
    10a0:	1a 82       	std	Y+2, r1	; 0x02
    10a2:	19 82       	std	Y+1, r1	; 0x01
    10a4:	0e c0       	rjmp	.+28     	; 0x10c2 <RenderWorld+0x32>
	{
		sendData(world[x]);
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	9a 81       	ldd	r25, Y+2	; 0x02
    10aa:	2d 81       	ldd	r18, Y+5	; 0x05
    10ac:	3e 81       	ldd	r19, Y+6	; 0x06
    10ae:	82 0f       	add	r24, r18
    10b0:	93 1f       	adc	r25, r19
    10b2:	fc 01       	movw	r30, r24
    10b4:	80 81       	ld	r24, Z
    10b6:	59 de       	rcall	.-846    	; 0xd6a <sendData>
 }
 

 void RenderWorld(unsigned char* world)
 {
	for (int x = 0; x < 504; x++)
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
    10c6:	88 3f       	cpi	r24, 0xF8	; 248
    10c8:	91 40       	sbci	r25, 0x01	; 1
    10ca:	6c f3       	brlt	.-38     	; 0x10a6 <RenderWorld+0x16>
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
    10cc:	1c 82       	std	Y+4, r1	; 0x04
    10ce:	1b 82       	std	Y+3, r1	; 0x03
    10d0:	0d c0       	rjmp	.+26     	; 0x10ec <RenderWorld+0x5c>
	{
		world[x] = 0x00;
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	9c 81       	ldd	r25, Y+4	; 0x04
    10d6:	2d 81       	ldd	r18, Y+5	; 0x05
    10d8:	3e 81       	ldd	r19, Y+6	; 0x06
    10da:	82 0f       	add	r24, r18
    10dc:	93 1f       	adc	r25, r19
    10de:	fc 01       	movw	r30, r24
    10e0:	10 82       	st	Z, r1
	for (int x = 0; x < 504; x++)
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	9c 81       	ldd	r25, Y+4	; 0x04
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	9c 83       	std	Y+4, r25	; 0x04
    10ea:	8b 83       	std	Y+3, r24	; 0x03
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	88 3f       	cpi	r24, 0xF8	; 248
    10f2:	91 40       	sbci	r25, 0x01	; 1
    10f4:	74 f3       	brlt	.-36     	; 0x10d2 <RenderWorld+0x42>
	{
		world[x] = 0x00;
	}
    10f6:	00 00       	nop
    10f8:	26 96       	adiw	r28, 0x06	; 6
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	08 95       	ret

0000110a <__cmpsf2>:
    110a:	2f d0       	rcall	.+94     	; 0x116a <__fp_cmp>
    110c:	08 f4       	brcc	.+2      	; 0x1110 <__cmpsf2+0x6>
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	08 95       	ret

00001112 <__fixunssfsi>:
    1112:	57 d0       	rcall	.+174    	; 0x11c2 <__fp_splitA>
    1114:	88 f0       	brcs	.+34     	; 0x1138 <__fixunssfsi+0x26>
    1116:	9f 57       	subi	r25, 0x7F	; 127
    1118:	90 f0       	brcs	.+36     	; 0x113e <__fixunssfsi+0x2c>
    111a:	b9 2f       	mov	r27, r25
    111c:	99 27       	eor	r25, r25
    111e:	b7 51       	subi	r27, 0x17	; 23
    1120:	a0 f0       	brcs	.+40     	; 0x114a <__fixunssfsi+0x38>
    1122:	d1 f0       	breq	.+52     	; 0x1158 <__fixunssfsi+0x46>
    1124:	66 0f       	add	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	88 1f       	adc	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	1a f0       	brmi	.+6      	; 0x1134 <__fixunssfsi+0x22>
    112e:	ba 95       	dec	r27
    1130:	c9 f7       	brne	.-14     	; 0x1124 <__fixunssfsi+0x12>
    1132:	12 c0       	rjmp	.+36     	; 0x1158 <__fixunssfsi+0x46>
    1134:	b1 30       	cpi	r27, 0x01	; 1
    1136:	81 f0       	breq	.+32     	; 0x1158 <__fixunssfsi+0x46>
    1138:	5e d0       	rcall	.+188    	; 0x11f6 <__fp_zero>
    113a:	b1 e0       	ldi	r27, 0x01	; 1
    113c:	08 95       	ret
    113e:	5b c0       	rjmp	.+182    	; 0x11f6 <__fp_zero>
    1140:	67 2f       	mov	r22, r23
    1142:	78 2f       	mov	r23, r24
    1144:	88 27       	eor	r24, r24
    1146:	b8 5f       	subi	r27, 0xF8	; 248
    1148:	39 f0       	breq	.+14     	; 0x1158 <__fixunssfsi+0x46>
    114a:	b9 3f       	cpi	r27, 0xF9	; 249
    114c:	cc f3       	brlt	.-14     	; 0x1140 <__fixunssfsi+0x2e>
    114e:	86 95       	lsr	r24
    1150:	77 95       	ror	r23
    1152:	67 95       	ror	r22
    1154:	b3 95       	inc	r27
    1156:	d9 f7       	brne	.-10     	; 0x114e <__fixunssfsi+0x3c>
    1158:	3e f4       	brtc	.+14     	; 0x1168 <__fixunssfsi+0x56>
    115a:	90 95       	com	r25
    115c:	80 95       	com	r24
    115e:	70 95       	com	r23
    1160:	61 95       	neg	r22
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	8f 4f       	sbci	r24, 0xFF	; 255
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	08 95       	ret

0000116a <__fp_cmp>:
    116a:	99 0f       	add	r25, r25
    116c:	00 08       	sbc	r0, r0
    116e:	55 0f       	add	r21, r21
    1170:	aa 0b       	sbc	r26, r26
    1172:	e0 e8       	ldi	r30, 0x80	; 128
    1174:	fe ef       	ldi	r31, 0xFE	; 254
    1176:	16 16       	cp	r1, r22
    1178:	17 06       	cpc	r1, r23
    117a:	e8 07       	cpc	r30, r24
    117c:	f9 07       	cpc	r31, r25
    117e:	c0 f0       	brcs	.+48     	; 0x11b0 <__fp_cmp+0x46>
    1180:	12 16       	cp	r1, r18
    1182:	13 06       	cpc	r1, r19
    1184:	e4 07       	cpc	r30, r20
    1186:	f5 07       	cpc	r31, r21
    1188:	98 f0       	brcs	.+38     	; 0x11b0 <__fp_cmp+0x46>
    118a:	62 1b       	sub	r22, r18
    118c:	73 0b       	sbc	r23, r19
    118e:	84 0b       	sbc	r24, r20
    1190:	95 0b       	sbc	r25, r21
    1192:	39 f4       	brne	.+14     	; 0x11a2 <__fp_cmp+0x38>
    1194:	0a 26       	eor	r0, r26
    1196:	61 f0       	breq	.+24     	; 0x11b0 <__fp_cmp+0x46>
    1198:	23 2b       	or	r18, r19
    119a:	24 2b       	or	r18, r20
    119c:	25 2b       	or	r18, r21
    119e:	21 f4       	brne	.+8      	; 0x11a8 <__fp_cmp+0x3e>
    11a0:	08 95       	ret
    11a2:	0a 26       	eor	r0, r26
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <__fp_cmp+0x3e>
    11a6:	a1 40       	sbci	r26, 0x01	; 1
    11a8:	a6 95       	lsr	r26
    11aa:	8f ef       	ldi	r24, 0xFF	; 255
    11ac:	81 1d       	adc	r24, r1
    11ae:	81 1d       	adc	r24, r1
    11b0:	08 95       	ret

000011b2 <__fp_split3>:
    11b2:	57 fd       	sbrc	r21, 7
    11b4:	90 58       	subi	r25, 0x80	; 128
    11b6:	44 0f       	add	r20, r20
    11b8:	55 1f       	adc	r21, r21
    11ba:	59 f0       	breq	.+22     	; 0x11d2 <__fp_splitA+0x10>
    11bc:	5f 3f       	cpi	r21, 0xFF	; 255
    11be:	71 f0       	breq	.+28     	; 0x11dc <__fp_splitA+0x1a>
    11c0:	47 95       	ror	r20

000011c2 <__fp_splitA>:
    11c2:	88 0f       	add	r24, r24
    11c4:	97 fb       	bst	r25, 7
    11c6:	99 1f       	adc	r25, r25
    11c8:	61 f0       	breq	.+24     	; 0x11e2 <__fp_splitA+0x20>
    11ca:	9f 3f       	cpi	r25, 0xFF	; 255
    11cc:	79 f0       	breq	.+30     	; 0x11ec <__fp_splitA+0x2a>
    11ce:	87 95       	ror	r24
    11d0:	08 95       	ret
    11d2:	12 16       	cp	r1, r18
    11d4:	13 06       	cpc	r1, r19
    11d6:	14 06       	cpc	r1, r20
    11d8:	55 1f       	adc	r21, r21
    11da:	f2 cf       	rjmp	.-28     	; 0x11c0 <__fp_split3+0xe>
    11dc:	46 95       	lsr	r20
    11de:	f1 df       	rcall	.-30     	; 0x11c2 <__fp_splitA>
    11e0:	08 c0       	rjmp	.+16     	; 0x11f2 <__fp_splitA+0x30>
    11e2:	16 16       	cp	r1, r22
    11e4:	17 06       	cpc	r1, r23
    11e6:	18 06       	cpc	r1, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	f1 cf       	rjmp	.-30     	; 0x11ce <__fp_splitA+0xc>
    11ec:	86 95       	lsr	r24
    11ee:	71 05       	cpc	r23, r1
    11f0:	61 05       	cpc	r22, r1
    11f2:	08 94       	sec
    11f4:	08 95       	ret

000011f6 <__fp_zero>:
    11f6:	e8 94       	clt

000011f8 <__fp_szero>:
    11f8:	bb 27       	eor	r27, r27
    11fa:	66 27       	eor	r22, r22
    11fc:	77 27       	eor	r23, r23
    11fe:	cb 01       	movw	r24, r22
    1200:	97 f9       	bld	r25, 7
    1202:	08 95       	ret

00001204 <__gesf2>:
    1204:	b2 df       	rcall	.-156    	; 0x116a <__fp_cmp>
    1206:	08 f4       	brcc	.+2      	; 0x120a <__gesf2+0x6>
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	08 95       	ret

0000120c <__mulsf3>:
    120c:	0b d0       	rcall	.+22     	; 0x1224 <__mulsf3x>
    120e:	78 c0       	rjmp	.+240    	; 0x1300 <__fp_round>
    1210:	69 d0       	rcall	.+210    	; 0x12e4 <__fp_pscA>
    1212:	28 f0       	brcs	.+10     	; 0x121e <__mulsf3+0x12>
    1214:	6e d0       	rcall	.+220    	; 0x12f2 <__fp_pscB>
    1216:	18 f0       	brcs	.+6      	; 0x121e <__mulsf3+0x12>
    1218:	95 23       	and	r25, r21
    121a:	09 f0       	breq	.+2      	; 0x121e <__mulsf3+0x12>
    121c:	5a c0       	rjmp	.+180    	; 0x12d2 <__fp_inf>
    121e:	5f c0       	rjmp	.+190    	; 0x12de <__fp_nan>
    1220:	11 24       	eor	r1, r1
    1222:	ea cf       	rjmp	.-44     	; 0x11f8 <__fp_szero>

00001224 <__mulsf3x>:
    1224:	c6 df       	rcall	.-116    	; 0x11b2 <__fp_split3>
    1226:	a0 f3       	brcs	.-24     	; 0x1210 <__mulsf3+0x4>

00001228 <__mulsf3_pse>:
    1228:	95 9f       	mul	r25, r21
    122a:	d1 f3       	breq	.-12     	; 0x1220 <__mulsf3+0x14>
    122c:	95 0f       	add	r25, r21
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	55 1f       	adc	r21, r21
    1232:	62 9f       	mul	r22, r18
    1234:	f0 01       	movw	r30, r0
    1236:	72 9f       	mul	r23, r18
    1238:	bb 27       	eor	r27, r27
    123a:	f0 0d       	add	r31, r0
    123c:	b1 1d       	adc	r27, r1
    123e:	63 9f       	mul	r22, r19
    1240:	aa 27       	eor	r26, r26
    1242:	f0 0d       	add	r31, r0
    1244:	b1 1d       	adc	r27, r1
    1246:	aa 1f       	adc	r26, r26
    1248:	64 9f       	mul	r22, r20
    124a:	66 27       	eor	r22, r22
    124c:	b0 0d       	add	r27, r0
    124e:	a1 1d       	adc	r26, r1
    1250:	66 1f       	adc	r22, r22
    1252:	82 9f       	mul	r24, r18
    1254:	22 27       	eor	r18, r18
    1256:	b0 0d       	add	r27, r0
    1258:	a1 1d       	adc	r26, r1
    125a:	62 1f       	adc	r22, r18
    125c:	73 9f       	mul	r23, r19
    125e:	b0 0d       	add	r27, r0
    1260:	a1 1d       	adc	r26, r1
    1262:	62 1f       	adc	r22, r18
    1264:	83 9f       	mul	r24, r19
    1266:	a0 0d       	add	r26, r0
    1268:	61 1d       	adc	r22, r1
    126a:	22 1f       	adc	r18, r18
    126c:	74 9f       	mul	r23, r20
    126e:	33 27       	eor	r19, r19
    1270:	a0 0d       	add	r26, r0
    1272:	61 1d       	adc	r22, r1
    1274:	23 1f       	adc	r18, r19
    1276:	84 9f       	mul	r24, r20
    1278:	60 0d       	add	r22, r0
    127a:	21 1d       	adc	r18, r1
    127c:	82 2f       	mov	r24, r18
    127e:	76 2f       	mov	r23, r22
    1280:	6a 2f       	mov	r22, r26
    1282:	11 24       	eor	r1, r1
    1284:	9f 57       	subi	r25, 0x7F	; 127
    1286:	50 40       	sbci	r21, 0x00	; 0
    1288:	8a f0       	brmi	.+34     	; 0x12ac <__mulsf3_pse+0x84>
    128a:	e1 f0       	breq	.+56     	; 0x12c4 <__mulsf3_pse+0x9c>
    128c:	88 23       	and	r24, r24
    128e:	4a f0       	brmi	.+18     	; 0x12a2 <__mulsf3_pse+0x7a>
    1290:	ee 0f       	add	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	bb 1f       	adc	r27, r27
    1296:	66 1f       	adc	r22, r22
    1298:	77 1f       	adc	r23, r23
    129a:	88 1f       	adc	r24, r24
    129c:	91 50       	subi	r25, 0x01	; 1
    129e:	50 40       	sbci	r21, 0x00	; 0
    12a0:	a9 f7       	brne	.-22     	; 0x128c <__mulsf3_pse+0x64>
    12a2:	9e 3f       	cpi	r25, 0xFE	; 254
    12a4:	51 05       	cpc	r21, r1
    12a6:	70 f0       	brcs	.+28     	; 0x12c4 <__mulsf3_pse+0x9c>
    12a8:	14 c0       	rjmp	.+40     	; 0x12d2 <__fp_inf>
    12aa:	a6 cf       	rjmp	.-180    	; 0x11f8 <__fp_szero>
    12ac:	5f 3f       	cpi	r21, 0xFF	; 255
    12ae:	ec f3       	brlt	.-6      	; 0x12aa <__mulsf3_pse+0x82>
    12b0:	98 3e       	cpi	r25, 0xE8	; 232
    12b2:	dc f3       	brlt	.-10     	; 0x12aa <__mulsf3_pse+0x82>
    12b4:	86 95       	lsr	r24
    12b6:	77 95       	ror	r23
    12b8:	67 95       	ror	r22
    12ba:	b7 95       	ror	r27
    12bc:	f7 95       	ror	r31
    12be:	e7 95       	ror	r30
    12c0:	9f 5f       	subi	r25, 0xFF	; 255
    12c2:	c1 f7       	brne	.-16     	; 0x12b4 <__mulsf3_pse+0x8c>
    12c4:	fe 2b       	or	r31, r30
    12c6:	88 0f       	add	r24, r24
    12c8:	91 1d       	adc	r25, r1
    12ca:	96 95       	lsr	r25
    12cc:	87 95       	ror	r24
    12ce:	97 f9       	bld	r25, 7
    12d0:	08 95       	ret

000012d2 <__fp_inf>:
    12d2:	97 f9       	bld	r25, 7
    12d4:	9f 67       	ori	r25, 0x7F	; 127
    12d6:	80 e8       	ldi	r24, 0x80	; 128
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	08 95       	ret

000012de <__fp_nan>:
    12de:	9f ef       	ldi	r25, 0xFF	; 255
    12e0:	80 ec       	ldi	r24, 0xC0	; 192
    12e2:	08 95       	ret

000012e4 <__fp_pscA>:
    12e4:	00 24       	eor	r0, r0
    12e6:	0a 94       	dec	r0
    12e8:	16 16       	cp	r1, r22
    12ea:	17 06       	cpc	r1, r23
    12ec:	18 06       	cpc	r1, r24
    12ee:	09 06       	cpc	r0, r25
    12f0:	08 95       	ret

000012f2 <__fp_pscB>:
    12f2:	00 24       	eor	r0, r0
    12f4:	0a 94       	dec	r0
    12f6:	12 16       	cp	r1, r18
    12f8:	13 06       	cpc	r1, r19
    12fa:	14 06       	cpc	r1, r20
    12fc:	05 06       	cpc	r0, r21
    12fe:	08 95       	ret

00001300 <__fp_round>:
    1300:	09 2e       	mov	r0, r25
    1302:	03 94       	inc	r0
    1304:	00 0c       	add	r0, r0
    1306:	11 f4       	brne	.+4      	; 0x130c <__fp_round+0xc>
    1308:	88 23       	and	r24, r24
    130a:	52 f0       	brmi	.+20     	; 0x1320 <__fp_round+0x20>
    130c:	bb 0f       	add	r27, r27
    130e:	40 f4       	brcc	.+16     	; 0x1320 <__fp_round+0x20>
    1310:	bf 2b       	or	r27, r31
    1312:	11 f4       	brne	.+4      	; 0x1318 <__fp_round+0x18>
    1314:	60 ff       	sbrs	r22, 0
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <__fp_round+0x20>
    1318:	6f 5f       	subi	r22, 0xFF	; 255
    131a:	7f 4f       	sbci	r23, 0xFF	; 255
    131c:	8f 4f       	sbci	r24, 0xFF	; 255
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	08 95       	ret

00001322 <_exit>:
    1322:	f8 94       	cli

00001324 <__stop_program>:
    1324:	ff cf       	rjmp	.-2      	; 0x1324 <__stop_program>
