
SnakeADDeBoss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800200  000019be  00001a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ed  00800218  00800218  00001a6a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000182b  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000115d  00000000  00000000  00003477  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f65  00000000  00000000  000045d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  0000553c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c9  00000000  00000000  000058e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000068a  00000000  00000000  000061b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000683b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee eb       	ldi	r30, 0xBE	; 190
      fc:	f9 e1       	ldi	r31, 0x19	; 25
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 31       	cpi	r26, 0x18	; 24
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	28 e0       	ldi	r18, 0x08	; 8
     110:	a8 e1       	ldi	r26, 0x18	; 24
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a5 30       	cpi	r26, 0x05	; 5
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	94 d1       	rcall	.+808    	; 0x448 <main>
     120:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <time>:
     126:	fc 01       	movw	r30, r24
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	f8 94       	cli
     12c:	60 91 01 08 	lds	r22, 0x0801	; 0x800801 <__system_time>
     130:	70 91 02 08 	lds	r23, 0x0802	; 0x800802 <__system_time+0x1>
     134:	80 91 03 08 	lds	r24, 0x0803	; 0x800803 <__system_time+0x2>
     138:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__system_time+0x3>
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	30 97       	sbiw	r30, 0x00	; 0
     140:	21 f0       	breq	.+8      	; 0x14a <time+0x24>
     142:	60 83       	st	Z, r22
     144:	71 83       	std	Z+1, r23	; 0x01
     146:	82 83       	std	Z+2, r24	; 0x02
     148:	93 83       	std	Z+3, r25	; 0x03
     14a:	08 95       	ret

0000014c <GenerateFoodPosition>:
#include "FoodProcessor.h"
#include <stdlib.h>
#include <time.h>

struct Position GenerateFoodPosition(int worldWidth, int worldHeight)
{	
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	2c 97       	sbiw	r28, 0x0c	; 12
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	cd bf       	out	0x3d, r28	; 61
     160:	9a 87       	std	Y+10, r25	; 0x0a
     162:	89 87       	std	Y+9, r24	; 0x09
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	6b 87       	std	Y+11, r22	; 0x0b
	int newXPos = rand() % (worldWidth-2);
     168:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <rand>
     16c:	ac 01       	movw	r20, r24
     16e:	89 85       	ldd	r24, Y+9	; 0x09
     170:	9a 85       	ldd	r25, Y+10	; 0x0a
     172:	9c 01       	movw	r18, r24
     174:	22 50       	subi	r18, 0x02	; 2
     176:	31 09       	sbc	r19, r1
     178:	ca 01       	movw	r24, r20
     17a:	b9 01       	movw	r22, r18
     17c:	0e 94 04 0c 	call	0x1808	; 0x1808 <__divmodhi4>
     180:	9a 83       	std	Y+2, r25	; 0x02
     182:	89 83       	std	Y+1, r24	; 0x01
	int newYPos = rand() & (worldHeight-2);
     184:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <rand>
     188:	9c 01       	movw	r18, r24
     18a:	8b 85       	ldd	r24, Y+11	; 0x0b
     18c:	9c 85       	ldd	r25, Y+12	; 0x0c
     18e:	02 97       	sbiw	r24, 0x02	; 2
     190:	82 23       	and	r24, r18
     192:	93 23       	and	r25, r19
     194:	9c 83       	std	Y+4, r25	; 0x04
     196:	8b 83       	std	Y+3, r24	; 0x03
	
	struct Position newPosition;
	newPosition.x = newXPos;
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	9a 81       	ldd	r25, Y+2	; 0x02
     19c:	9e 83       	std	Y+6, r25	; 0x06
     19e:	8d 83       	std	Y+5, r24	; 0x05
	newPosition.y = newYPos;
     1a0:	8b 81       	ldd	r24, Y+3	; 0x03
     1a2:	9c 81       	ldd	r25, Y+4	; 0x04
     1a4:	98 87       	std	Y+8, r25	; 0x08
     1a6:	8f 83       	std	Y+7, r24	; 0x07
		
	return newPosition;
     1a8:	8d 81       	ldd	r24, Y+5	; 0x05
     1aa:	9e 81       	ldd	r25, Y+6	; 0x06
     1ac:	af 81       	ldd	r26, Y+7	; 0x07
     1ae:	b8 85       	ldd	r27, Y+8	; 0x08
     1b0:	bc 01       	movw	r22, r24
     1b2:	cd 01       	movw	r24, r26
     1b4:	2c 96       	adiw	r28, 0x0c	; 12
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	cd bf       	out	0x3d, r28	; 61
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <InitKeypad>:
	{ '3', '6', '9', '#' },
	{ 'A', 'B', 'C', 'D' }
};

void InitKeypad()
{
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
	// Setup input pins to keyboard
	// These are pins PA6 (Row 2) and PA4 (Row 1), and C7 (Row 3) and C5 (Row 4)
	DDRA &= ~(0b01010000);
     1ce:	81 e2       	ldi	r24, 0x21	; 33
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	21 e2       	ldi	r18, 0x21	; 33
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	f9 01       	movw	r30, r18
     1d8:	20 81       	ld	r18, Z
     1da:	2f 7a       	andi	r18, 0xAF	; 175
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
	DDRC &= ~(0b10100000);
     1e0:	87 e2       	ldi	r24, 0x27	; 39
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	27 e2       	ldi	r18, 0x27	; 39
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	f9 01       	movw	r30, r18
     1ea:	20 81       	ld	r18, Z
     1ec:	2f 75       	andi	r18, 0x5F	; 95
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18

	// Setup output pins to keyboard
	// PD0 = Column 1, PD1 = Column 2, PD2 = Column 3, PD3 = Column 4
	DDRD |= 0b00001111;
     1f2:	8a e2       	ldi	r24, 0x2A	; 42
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	2a e2       	ldi	r18, 0x2A	; 42
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	f9 01       	movw	r30, r18
     1fc:	20 81       	ld	r18, Z
     1fe:	2f 60       	ori	r18, 0x0F	; 15
     200:	fc 01       	movw	r30, r24
     202:	20 83       	st	Z, r18
	PORTD |= 0b00001111;
     204:	8b e2       	ldi	r24, 0x2B	; 43
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	2b e2       	ldi	r18, 0x2B	; 43
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	f9 01       	movw	r30, r18
     20e:	20 81       	ld	r18, Z
     210:	2f 60       	ori	r18, 0x0F	; 15
     212:	fc 01       	movw	r30, r24
     214:	20 83       	st	Z, r18

	DDRB = 0b11111111;
     216:	84 e2       	ldi	r24, 0x24	; 36
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	2f ef       	ldi	r18, 0xFF	; 255
     21c:	fc 01       	movw	r30, r24
     21e:	20 83       	st	Z, r18

	//PORTB = 0xFF;
}
     220:	00 00       	nop
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <GetKey>:

char GetKey()
{
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	60 97       	sbiw	r28, 0x10	; 16
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	de bf       	out	0x3e, r29	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	cd bf       	out	0x3d, r28	; 61
	for (int columnIndex = 0; columnIndex < 4; columnIndex++)
     23c:	1a 82       	std	Y+2, r1	; 0x02
     23e:	19 82       	std	Y+1, r1	; 0x01
     240:	f3 c0       	rjmp	.+486    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	{
		// Scan Column 1 (1, 4, 7, and *)
		PORTD |= 0b00001111;
     242:	8b e2       	ldi	r24, 0x2B	; 43
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	2b e2       	ldi	r18, 0x2B	; 43
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	f9 01       	movw	r30, r18
     24c:	20 81       	ld	r18, Z
     24e:	2f 60       	ori	r18, 0x0F	; 15
     250:	fc 01       	movw	r30, r24
     252:	20 83       	st	Z, r18
		PORTD &= ~(1 << columnIndex);
     254:	8b e2       	ldi	r24, 0x2B	; 43
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	2b e2       	ldi	r18, 0x2B	; 43
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	f9 01       	movw	r30, r18
     25e:	20 81       	ld	r18, Z
     260:	42 2f       	mov	r20, r18
     262:	21 e0       	ldi	r18, 0x01	; 1
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	09 80       	ldd	r0, Y+1	; 0x01
     268:	02 c0       	rjmp	.+4      	; 0x26e <GetKey+0x46>
     26a:	22 0f       	add	r18, r18
     26c:	33 1f       	adc	r19, r19
     26e:	0a 94       	dec	r0
     270:	e2 f7       	brpl	.-8      	; 0x26a <GetKey+0x42>
     272:	20 95       	com	r18
     274:	24 23       	and	r18, r20
     276:	fc 01       	movw	r30, r24
     278:	20 83       	st	Z, r18
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	a0 e8       	ldi	r26, 0x80	; 128
     280:	bf e3       	ldi	r27, 0x3F	; 63
     282:	8b 83       	std	Y+3, r24	; 0x03
     284:	9c 83       	std	Y+4, r25	; 0x04
     286:	ad 83       	std	Y+5, r26	; 0x05
     288:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	4a e7       	ldi	r20, 0x7A	; 122
     290:	55 e4       	ldi	r21, 0x45	; 69
     292:	6b 81       	ldd	r22, Y+3	; 0x03
     294:	7c 81       	ldd	r23, Y+4	; 0x04
     296:	8d 81       	ldd	r24, Y+5	; 0x05
     298:	9e 81       	ldd	r25, Y+6	; 0x06
     29a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__mulsf3>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	8f 83       	std	Y+7, r24	; 0x07
     2a4:	98 87       	std	Y+8, r25	; 0x08
     2a6:	a9 87       	std	Y+9, r26	; 0x09
     2a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	40 e8       	ldi	r20, 0x80	; 128
     2b0:	5f e3       	ldi	r21, 0x3F	; 63
     2b2:	6f 81       	ldd	r22, Y+7	; 0x07
     2b4:	78 85       	ldd	r23, Y+8	; 0x08
     2b6:	89 85       	ldd	r24, Y+9	; 0x09
     2b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ba:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__cmpsf2>
     2be:	88 23       	and	r24, r24
     2c0:	2c f4       	brge	.+10     	; 0x2cc <GetKey+0xa4>
		__ticks = 1;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	9c 87       	std	Y+12, r25	; 0x0c
     2c8:	8b 87       	std	Y+11, r24	; 0x0b
     2ca:	3f c0       	rjmp	.+126    	; 0x34a <GetKey+0x122>
	else if (__tmp > 65535)
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	3f ef       	ldi	r19, 0xFF	; 255
     2d0:	4f e7       	ldi	r20, 0x7F	; 127
     2d2:	57 e4       	ldi	r21, 0x47	; 71
     2d4:	6f 81       	ldd	r22, Y+7	; 0x07
     2d6:	78 85       	ldd	r23, Y+8	; 0x08
     2d8:	89 85       	ldd	r24, Y+9	; 0x09
     2da:	9a 85       	ldd	r25, Y+10	; 0x0a
     2dc:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__gesf2>
     2e0:	18 16       	cp	r1, r24
     2e2:	4c f5       	brge	.+82     	; 0x336 <GetKey+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	40 e2       	ldi	r20, 0x20	; 32
     2ea:	51 e4       	ldi	r21, 0x41	; 65
     2ec:	6b 81       	ldd	r22, Y+3	; 0x03
     2ee:	7c 81       	ldd	r23, Y+4	; 0x04
     2f0:	8d 81       	ldd	r24, Y+5	; 0x05
     2f2:	9e 81       	ldd	r25, Y+6	; 0x06
     2f4:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__mulsf3>
     2f8:	dc 01       	movw	r26, r24
     2fa:	cb 01       	movw	r24, r22
     2fc:	bc 01       	movw	r22, r24
     2fe:	cd 01       	movw	r24, r26
     300:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     304:	dc 01       	movw	r26, r24
     306:	cb 01       	movw	r24, r22
     308:	9c 87       	std	Y+12, r25	; 0x0c
     30a:	8b 87       	std	Y+11, r24	; 0x0b
     30c:	0f c0       	rjmp	.+30     	; 0x32c <GetKey+0x104>
     30e:	80 e9       	ldi	r24, 0x90	; 144
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	9e 87       	std	Y+14, r25	; 0x0e
     314:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     316:	8d 85       	ldd	r24, Y+13	; 0x0d
     318:	9e 85       	ldd	r25, Y+14	; 0x0e
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <GetKey+0xf2>
     31e:	9e 87       	std	Y+14, r25	; 0x0e
     320:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     322:	8b 85       	ldd	r24, Y+11	; 0x0b
     324:	9c 85       	ldd	r25, Y+12	; 0x0c
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	9c 87       	std	Y+12, r25	; 0x0c
     32a:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     32c:	8b 85       	ldd	r24, Y+11	; 0x0b
     32e:	9c 85       	ldd	r25, Y+12	; 0x0c
     330:	89 2b       	or	r24, r25
     332:	69 f7       	brne	.-38     	; 0x30e <GetKey+0xe6>
     334:	14 c0       	rjmp	.+40     	; 0x35e <GetKey+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     336:	6f 81       	ldd	r22, Y+7	; 0x07
     338:	78 85       	ldd	r23, Y+8	; 0x08
     33a:	89 85       	ldd	r24, Y+9	; 0x09
     33c:	9a 85       	ldd	r25, Y+10	; 0x0a
     33e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fixunssfsi>
     342:	dc 01       	movw	r26, r24
     344:	cb 01       	movw	r24, r22
     346:	9c 87       	std	Y+12, r25	; 0x0c
     348:	8b 87       	std	Y+11, r24	; 0x0b
     34a:	8b 85       	ldd	r24, Y+11	; 0x0b
     34c:	9c 85       	ldd	r25, Y+12	; 0x0c
     34e:	98 8b       	std	Y+16, r25	; 0x10
     350:	8f 87       	std	Y+15, r24	; 0x0f
     352:	8f 85       	ldd	r24, Y+15	; 0x0f
     354:	98 89       	ldd	r25, Y+16	; 0x10
     356:	01 97       	sbiw	r24, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <GetKey+0x12e>
     35a:	98 8b       	std	Y+16, r25	; 0x10
     35c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
			
		// Key '1'
		if ((PINA & (1 << ROW_1)) == 0)
     35e:	80 e2       	ldi	r24, 0x20	; 32
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	fc 01       	movw	r30, r24
     364:	80 81       	ld	r24, Z
     366:	88 2f       	mov	r24, r24
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	80 71       	andi	r24, 0x10	; 16
     36c:	99 27       	eor	r25, r25
     36e:	89 2b       	or	r24, r25
     370:	79 f4       	brne	.+30     	; 0x390 <GetKey+0x168>
		{
			keyPressed = characterColumns[columnIndex][0]; 
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	9a 81       	ldd	r25, Y+2	; 0x02
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	8c 5f       	subi	r24, 0xFC	; 252
     380:	9d 4f       	sbci	r25, 0xFD	; 253
     382:	fc 01       	movw	r30, r24
     384:	80 81       	ld	r24, Z
     386:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
			return keyPressed;
     38a:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     38e:	53 c0       	rjmp	.+166    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		}

		// Key '4'
		if ((PINA & (1 << ROW_2)) == 0)
     390:	80 e2       	ldi	r24, 0x20	; 32
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	fc 01       	movw	r30, r24
     396:	80 81       	ld	r24, Z
     398:	88 2f       	mov	r24, r24
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	80 74       	andi	r24, 0x40	; 64
     39e:	99 27       	eor	r25, r25
     3a0:	89 2b       	or	r24, r25
     3a2:	79 f4       	brne	.+30     	; 0x3c2 <GetKey+0x19a>
		{
			keyPressed = characterColumns[columnIndex][1];
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	9a 81       	ldd	r25, Y+2	; 0x02
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	8b 5f       	subi	r24, 0xFB	; 251
     3b2:	9d 4f       	sbci	r25, 0xFD	; 253
     3b4:	fc 01       	movw	r30, r24
     3b6:	80 81       	ld	r24, Z
     3b8:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
			return keyPressed;
     3bc:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     3c0:	3a c0       	rjmp	.+116    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		}

		// Key '7'
		if ((PINC & (1 << ROW_3)) == 0)
     3c2:	86 e2       	ldi	r24, 0x26	; 38
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	fc 01       	movw	r30, r24
     3c8:	80 81       	ld	r24, Z
     3ca:	88 23       	and	r24, r24
     3cc:	7c f0       	brlt	.+30     	; 0x3ec <GetKey+0x1c4>
		{
			keyPressed = characterColumns[columnIndex][2];
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	9a 81       	ldd	r25, Y+2	; 0x02
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	8a 5f       	subi	r24, 0xFA	; 250
     3dc:	9d 4f       	sbci	r25, 0xFD	; 253
     3de:	fc 01       	movw	r30, r24
     3e0:	80 81       	ld	r24, Z
     3e2:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
			return keyPressed;
     3e6:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     3ea:	25 c0       	rjmp	.+74     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		}

		// Key '*'
		if ((PINC & (1 << ROW_4)) == 0)
     3ec:	86 e2       	ldi	r24, 0x26	; 38
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	fc 01       	movw	r30, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	88 2f       	mov	r24, r24
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	80 72       	andi	r24, 0x20	; 32
     3fa:	99 27       	eor	r25, r25
     3fc:	89 2b       	or	r24, r25
     3fe:	79 f4       	brne	.+30     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		{
			keyPressed = characterColumns[columnIndex][3];
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	9a 81       	ldd	r25, Y+2	; 0x02
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	89 5f       	subi	r24, 0xF9	; 249
     40e:	9d 4f       	sbci	r25, 0xFD	; 253
     410:	fc 01       	movw	r30, r24
     412:	80 81       	ld	r24, Z
     414:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__data_end>
			return keyPressed;
     418:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     41c:	0c c0       	rjmp	.+24     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	//PORTB = 0xFF;
}

char GetKey()
{
	for (int columnIndex = 0; columnIndex < 4; columnIndex++)
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	9a 81       	ldd	r25, Y+2	; 0x02
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	9a 83       	std	Y+2, r25	; 0x02
     426:	89 83       	std	Y+1, r24	; 0x01
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	04 97       	sbiw	r24, 0x04	; 4
     42e:	0c f4       	brge	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	08 cf       	rjmp	.-496    	; 0x242 <GetKey+0x1a>
			keyPressed = characterColumns[columnIndex][3];
			return keyPressed;
		}
	}
	
	return keyPressed;
     432:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end>
     436:	60 96       	adiw	r28, 0x10	; 16
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <main>:
struct SnakeBodyPart snake[100];
struct Position currentFoodPosition;
int snakeBodyLength = 3;

int main(void)
{
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	6c 97       	sbiw	r28, 0x1c	; 28
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
	InitKeypad();
     45c:	b4 de       	rcall	.-664    	; 0x1c6 <InitKeypad>
	initDisplay();
     45e:	57 d1       	rcall	.+686    	; 0x70e <initDisplay>
     460:	80 e0       	ldi	r24, 0x00	; 0
	
	// Seed number generator
	srand(time(NULL));
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	60 de       	rcall	.-832    	; 0x126 <time>
     466:	dc 01       	movw	r26, r24
     468:	cb 01       	movw	r24, r22
     46a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <srand>
     46e:	1a 82       	std	Y+2, r1	; 0x02

	for (int x = 0; x < 504; x++)
     470:	19 82       	std	Y+1, r1	; 0x01
     472:	0b c0       	rjmp	.+22     	; 0x48a <main+0x42>
     474:	89 81       	ldd	r24, Y+1	; 0x01
	{
		worldRender[x] = 0x00;
     476:	9a 81       	ldd	r25, Y+2	; 0x02
     478:	8b 5f       	subi	r24, 0xFB	; 251
     47a:	99 4f       	sbci	r25, 0xF9	; 249
     47c:	fc 01       	movw	r30, r24
     47e:	10 82       	st	Z, r1
     480:	89 81       	ldd	r24, Y+1	; 0x01
	initDisplay();
	
	// Seed number generator
	srand(time(NULL));

	for (int x = 0; x < 504; x++)
     482:	9a 81       	ldd	r25, Y+2	; 0x02
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	9a 83       	std	Y+2, r25	; 0x02
     488:	89 83       	std	Y+1, r24	; 0x01
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	9a 81       	ldd	r25, Y+2	; 0x02
     48e:	88 3f       	cpi	r24, 0xF8	; 248
     490:	91 40       	sbci	r25, 0x01	; 1
     492:	84 f3       	brlt	.-32     	; 0x474 <main+0x2c>
     494:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <snakeBodyLength>
	{
		worldRender[x] = 0x00;
	}
	
	InitSnake(snake, snakeBodyLength);
     498:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <snakeBodyLength+0x1>
     49c:	bc 01       	movw	r22, r24
     49e:	8d e1       	ldi	r24, 0x1D	; 29
     4a0:	92 e0       	ldi	r25, 0x02	; 2
     4a2:	41 d3       	rcall	.+1666   	; 0xb26 <InitSnake>
     4a4:	6f e2       	ldi	r22, 0x2F	; 47
	
	currentFoodPosition = GenerateFoodPosition(WORLD_WIDTH, WORLD_HEIGHT);
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	83 e5       	ldi	r24, 0x53	; 83
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	4f de       	rcall	.-866    	; 0x14c <GenerateFoodPosition>
     4ae:	dc 01       	movw	r26, r24
     4b0:	cb 01       	movw	r24, r22
     4b2:	80 93 fd 07 	sts	0x07FD, r24	; 0x8007fd <currentFoodPosition>
     4b6:	90 93 fe 07 	sts	0x07FE, r25	; 0x8007fe <currentFoodPosition+0x1>
     4ba:	a0 93 ff 07 	sts	0x07FF, r26	; 0x8007ff <currentFoodPosition+0x2>
     4be:	b0 93 00 08 	sts	0x0800, r27	; 0x800800 <currentFoodPosition+0x3>
     4c2:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <snakeBodyLength>

    while (1) 
	{
		UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);
     4c6:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <snakeBodyLength+0x1>
     4ca:	2f e2       	ldi	r18, 0x2F	; 47
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	43 e5       	ldi	r20, 0x53	; 83
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	bc 01       	movw	r22, r24
     4d4:	8d e1       	ldi	r24, 0x1D	; 29
     4d6:	92 e0       	ldi	r25, 0x02	; 2
     4d8:	9b d3       	rcall	.+1846   	; 0xc10 <UpdateSnake>
     4da:	8a e0       	ldi	r24, 0x0A	; 10

		struct SnakeBodyPart snakeHead = snake[0];
     4dc:	ed e1       	ldi	r30, 0x1D	; 29
     4de:	f2 e0       	ldi	r31, 0x02	; 2
     4e0:	de 01       	movw	r26, r28
     4e2:	53 96       	adiw	r26, 0x13	; 19
     4e4:	01 90       	ld	r0, Z+
     4e6:	0d 92       	st	X+, r0
     4e8:	8a 95       	dec	r24
     4ea:	e1 f7       	brne	.-8      	; 0x4e4 <main+0x9c>
     4ec:	2b 89       	ldd	r18, Y+19	; 0x13
		if (snakeHead.x < (currentFoodPosition.x + 3) &&
     4ee:	3c 89       	ldd	r19, Y+20	; 0x14
     4f0:	80 91 fd 07 	lds	r24, 0x07FD	; 0x8007fd <currentFoodPosition>
     4f4:	90 91 fe 07 	lds	r25, 0x07FE	; 0x8007fe <currentFoodPosition+0x1>
     4f8:	03 96       	adiw	r24, 0x03	; 3
     4fa:	28 17       	cp	r18, r24
     4fc:	39 07       	cpc	r19, r25
     4fe:	0c f0       	brlt	.+2      	; 0x502 <main+0xba>
     500:	42 c0       	rjmp	.+132    	; 0x586 <main+0x13e>
     502:	8b 89       	ldd	r24, Y+19	; 0x13
		(snakeHead.x + 2) > currentFoodPosition.x &&
     504:	9c 89       	ldd	r25, Y+20	; 0x14
     506:	9c 01       	movw	r18, r24
     508:	2e 5f       	subi	r18, 0xFE	; 254
     50a:	3f 4f       	sbci	r19, 0xFF	; 255
     50c:	80 91 fd 07 	lds	r24, 0x07FD	; 0x8007fd <currentFoodPosition>
     510:	90 91 fe 07 	lds	r25, 0x07FE	; 0x8007fe <currentFoodPosition+0x1>
     514:	82 17       	cp	r24, r18
    while (1) 
	{
		UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

		struct SnakeBodyPart snakeHead = snake[0];
		if (snakeHead.x < (currentFoodPosition.x + 3) &&
     516:	93 07       	cpc	r25, r19
     518:	b4 f5       	brge	.+108    	; 0x586 <main+0x13e>
     51a:	2d 89       	ldd	r18, Y+21	; 0x15
		(snakeHead.x + 2) > currentFoodPosition.x &&
		snakeHead.y < (currentFoodPosition.y + 3) &&
     51c:	3e 89       	ldd	r19, Y+22	; 0x16
     51e:	80 91 ff 07 	lds	r24, 0x07FF	; 0x8007ff <currentFoodPosition+0x2>
     522:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <currentFoodPosition+0x3>
     526:	03 96       	adiw	r24, 0x03	; 3
     528:	28 17       	cp	r18, r24
	{
		UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

		struct SnakeBodyPart snakeHead = snake[0];
		if (snakeHead.x < (currentFoodPosition.x + 3) &&
		(snakeHead.x + 2) > currentFoodPosition.x &&
     52a:	39 07       	cpc	r19, r25
     52c:	64 f5       	brge	.+88     	; 0x586 <main+0x13e>
     52e:	8d 89       	ldd	r24, Y+21	; 0x15
		snakeHead.y < (currentFoodPosition.y + 3) &&
		(2 + snakeHead.y) > currentFoodPosition.y)
     530:	9e 89       	ldd	r25, Y+22	; 0x16
     532:	9c 01       	movw	r18, r24
     534:	2e 5f       	subi	r18, 0xFE	; 254
     536:	3f 4f       	sbci	r19, 0xFF	; 255
     538:	80 91 ff 07 	lds	r24, 0x07FF	; 0x8007ff <currentFoodPosition+0x2>
     53c:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <currentFoodPosition+0x3>
     540:	82 17       	cp	r24, r18
		UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

		struct SnakeBodyPart snakeHead = snake[0];
		if (snakeHead.x < (currentFoodPosition.x + 3) &&
		(snakeHead.x + 2) > currentFoodPosition.x &&
		snakeHead.y < (currentFoodPosition.y + 3) &&
     542:	93 07       	cpc	r25, r19
     544:	04 f5       	brge	.+64     	; 0x586 <main+0x13e>
		(2 + snakeHead.y) > currentFoodPosition.y)
		{
			currentFoodPosition = GenerateFoodPosition(WORLD_WIDTH, WORLD_HEIGHT);
     546:	6f e2       	ldi	r22, 0x2F	; 47
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	83 e5       	ldi	r24, 0x53	; 83
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	fe dd       	rcall	.-1028   	; 0x14c <GenerateFoodPosition>
     550:	dc 01       	movw	r26, r24
     552:	cb 01       	movw	r24, r22
     554:	80 93 fd 07 	sts	0x07FD, r24	; 0x8007fd <currentFoodPosition>
     558:	90 93 fe 07 	sts	0x07FE, r25	; 0x8007fe <currentFoodPosition+0x1>
     55c:	a0 93 ff 07 	sts	0x07FF, r26	; 0x8007ff <currentFoodPosition+0x2>
     560:	b0 93 00 08 	sts	0x0800, r27	; 0x800800 <currentFoodPosition+0x3>
     564:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <snakeBodyLength>
			snakeBodyLength++;
     568:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <snakeBodyLength+0x1>
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <snakeBodyLength+0x1>
     572:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <snakeBodyLength>
     576:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <snakeBodyLength>
			GrowSnake(snake, snakeBodyLength);
     57a:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <snakeBodyLength+0x1>
     57e:	bc 01       	movw	r22, r24
     580:	8d e1       	ldi	r24, 0x1D	; 29
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	28 d6       	rcall	.+3152   	; 0x11d6 <GrowSnake>
     586:	80 91 ff 07 	lds	r24, 0x07FF	; 0x8007ff <currentFoodPosition+0x2>
		}

		DrawFood(currentFoodPosition.x ,currentFoodPosition.y, worldRender);
     58a:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <currentFoodPosition+0x3>
     58e:	28 2f       	mov	r18, r24
     590:	80 91 fd 07 	lds	r24, 0x07FD	; 0x8007fd <currentFoodPosition>
     594:	90 91 fe 07 	lds	r25, 0x07FE	; 0x8007fe <currentFoodPosition+0x1>
     598:	45 e0       	ldi	r20, 0x05	; 5
     59a:	56 e0       	ldi	r21, 0x06	; 6
     59c:	62 2f       	mov	r22, r18
     59e:	b2 d7       	rcall	.+3940   	; 0x1504 <DrawFood>
     5a0:	1c 82       	std	Y+4, r1	; 0x04

		for(int x = 0; x < snakeBodyLength; x++)
     5a2:	1b 82       	std	Y+3, r1	; 0x03
     5a4:	29 c0       	rjmp	.+82     	; 0x5f8 <main+0x1b0>
     5a6:	8b 81       	ldd	r24, Y+3	; 0x03
		{
			DrawDot(snake[x].x, snake[x].y, worldRender);
     5a8:	9c 81       	ldd	r25, Y+4	; 0x04
     5aa:	88 0f       	add	r24, r24
     5ac:	99 1f       	adc	r25, r25
     5ae:	9c 01       	movw	r18, r24
     5b0:	22 0f       	add	r18, r18
     5b2:	33 1f       	adc	r19, r19
     5b4:	22 0f       	add	r18, r18
     5b6:	33 1f       	adc	r19, r19
     5b8:	82 0f       	add	r24, r18
     5ba:	93 1f       	adc	r25, r19
     5bc:	81 5e       	subi	r24, 0xE1	; 225
     5be:	9d 4f       	sbci	r25, 0xFD	; 253
     5c0:	fc 01       	movw	r30, r24
     5c2:	80 81       	ld	r24, Z
     5c4:	91 81       	ldd	r25, Z+1	; 0x01
     5c6:	68 2f       	mov	r22, r24
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	9c 01       	movw	r18, r24
     5d2:	22 0f       	add	r18, r18
     5d4:	33 1f       	adc	r19, r19
     5d6:	22 0f       	add	r18, r18
     5d8:	33 1f       	adc	r19, r19
     5da:	82 0f       	add	r24, r18
     5dc:	93 1f       	adc	r25, r19
     5de:	83 5e       	subi	r24, 0xE3	; 227
     5e0:	9d 4f       	sbci	r25, 0xFD	; 253
     5e2:	fc 01       	movw	r30, r24
     5e4:	80 81       	ld	r24, Z
     5e6:	91 81       	ldd	r25, Z+1	; 0x01
     5e8:	45 e0       	ldi	r20, 0x05	; 5
     5ea:	56 e0       	ldi	r21, 0x06	; 6
     5ec:	55 d7       	rcall	.+3754   	; 0x1498 <DrawDot>
     5ee:	8b 81       	ldd	r24, Y+3	; 0x03
			GrowSnake(snake, snakeBodyLength);
		}

		DrawFood(currentFoodPosition.x ,currentFoodPosition.y, worldRender);

		for(int x = 0; x < snakeBodyLength; x++)
     5f0:	9c 81       	ldd	r25, Y+4	; 0x04
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	9c 83       	std	Y+4, r25	; 0x04
     5f6:	8b 83       	std	Y+3, r24	; 0x03
     5f8:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <snakeBodyLength>
     5fc:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <snakeBodyLength+0x1>
     600:	2b 81       	ldd	r18, Y+3	; 0x03
     602:	3c 81       	ldd	r19, Y+4	; 0x04
     604:	28 17       	cp	r18, r24
     606:	39 07       	cpc	r19, r25
		{
			DrawDot(snake[x].x, snake[x].y, worldRender);
		}
		
		RenderWorld(worldRender);
     608:	74 f2       	brlt	.-100    	; 0x5a6 <main+0x15e>
     60a:	85 e0       	ldi	r24, 0x05	; 5
     60c:	96 e0       	ldi	r25, 0x06	; 6
     60e:	b3 d7       	rcall	.+3942   	; 0x1576 <RenderWorld>
		
		if (SnakeHitSelf() == 1)
     610:	45 d6       	rcall	.+3210   	; 0x129c <SnakeHitSelf>
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	19 f4       	brne	.+6      	; 0x61c <main+0x1d4>
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	70 c0       	rjmp	.+224    	; 0x6fc <main+0x2b4>
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	a8 ec       	ldi	r26, 0xC8	; 200
     622:	b1 e4       	ldi	r27, 0x41	; 65
     624:	8d 83       	std	Y+5, r24	; 0x05
     626:	9e 83       	std	Y+6, r25	; 0x06
     628:	af 83       	std	Y+7, r26	; 0x07
     62a:	b8 87       	std	Y+8, r27	; 0x08
     62c:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	4a e7       	ldi	r20, 0x7A	; 122
     632:	55 e4       	ldi	r21, 0x45	; 69
     634:	6d 81       	ldd	r22, Y+5	; 0x05
     636:	7e 81       	ldd	r23, Y+6	; 0x06
     638:	8f 81       	ldd	r24, Y+7	; 0x07
     63a:	98 85       	ldd	r25, Y+8	; 0x08
     63c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__mulsf3>
     640:	dc 01       	movw	r26, r24
     642:	cb 01       	movw	r24, r22
     644:	89 87       	std	Y+9, r24	; 0x09
     646:	9a 87       	std	Y+10, r25	; 0x0a
     648:	ab 87       	std	Y+11, r26	; 0x0b
     64a:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 e8       	ldi	r20, 0x80	; 128
     652:	5f e3       	ldi	r21, 0x3F	; 63
     654:	69 85       	ldd	r22, Y+9	; 0x09
     656:	7a 85       	ldd	r23, Y+10	; 0x0a
     658:	8b 85       	ldd	r24, Y+11	; 0x0b
     65a:	9c 85       	ldd	r25, Y+12	; 0x0c
     65c:	c9 d7       	rcall	.+3986   	; 0x15f0 <__cmpsf2>
     65e:	88 23       	and	r24, r24
     660:	2c f4       	brge	.+10     	; 0x66c <main+0x224>
     662:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	9e 87       	std	Y+14, r25	; 0x0e
     668:	8d 87       	std	Y+13, r24	; 0x0d
     66a:	3d c0       	rjmp	.+122    	; 0x6e6 <main+0x29e>
     66c:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
     66e:	3f ef       	ldi	r19, 0xFF	; 255
     670:	4f e7       	ldi	r20, 0x7F	; 127
     672:	57 e4       	ldi	r21, 0x47	; 71
     674:	69 85       	ldd	r22, Y+9	; 0x09
     676:	7a 85       	ldd	r23, Y+10	; 0x0a
     678:	8b 85       	ldd	r24, Y+11	; 0x0b
     67a:	9c 85       	ldd	r25, Y+12	; 0x0c
     67c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__gesf2>
     680:	18 16       	cp	r1, r24
     682:	44 f5       	brge	.+80     	; 0x6d4 <main+0x28c>
     684:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	40 e2       	ldi	r20, 0x20	; 32
     68a:	51 e4       	ldi	r21, 0x41	; 65
     68c:	6d 81       	ldd	r22, Y+5	; 0x05
     68e:	7e 81       	ldd	r23, Y+6	; 0x06
     690:	8f 81       	ldd	r24, Y+7	; 0x07
     692:	98 85       	ldd	r25, Y+8	; 0x08
     694:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__mulsf3>
     698:	dc 01       	movw	r26, r24
     69a:	cb 01       	movw	r24, r22
     69c:	bc 01       	movw	r22, r24
     69e:	cd 01       	movw	r24, r26
     6a0:	ab d7       	rcall	.+3926   	; 0x15f8 <__fixunssfsi>
     6a2:	dc 01       	movw	r26, r24
     6a4:	cb 01       	movw	r24, r22
     6a6:	9e 87       	std	Y+14, r25	; 0x0e
     6a8:	8d 87       	std	Y+13, r24	; 0x0d
     6aa:	0f c0       	rjmp	.+30     	; 0x6ca <main+0x282>
     6ac:	80 e9       	ldi	r24, 0x90	; 144
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	98 8b       	std	Y+16, r25	; 0x10
     6b2:	8f 87       	std	Y+15, r24	; 0x0f
     6b4:	8f 85       	ldd	r24, Y+15	; 0x0f
     6b6:	98 89       	ldd	r25, Y+16	; 0x10
     6b8:	01 97       	sbiw	r24, 0x01	; 1
     6ba:	f1 f7       	brne	.-4      	; 0x6b8 <main+0x270>
     6bc:	98 8b       	std	Y+16, r25	; 0x10
     6be:	8f 87       	std	Y+15, r24	; 0x0f
     6c0:	8d 85       	ldd	r24, Y+13	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	9e 87       	std	Y+14, r25	; 0x0e
     6c8:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6ca:	8d 85       	ldd	r24, Y+13	; 0x0d
     6cc:	9e 85       	ldd	r25, Y+14	; 0x0e
     6ce:	89 2b       	or	r24, r25
     6d0:	69 f7       	brne	.-38     	; 0x6ac <main+0x264>
     6d2:	13 c0       	rjmp	.+38     	; 0x6fa <main+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6d4:	69 85       	ldd	r22, Y+9	; 0x09
     6d6:	7a 85       	ldd	r23, Y+10	; 0x0a
     6d8:	8b 85       	ldd	r24, Y+11	; 0x0b
     6da:	9c 85       	ldd	r25, Y+12	; 0x0c
     6dc:	8d d7       	rcall	.+3866   	; 0x15f8 <__fixunssfsi>
     6de:	dc 01       	movw	r26, r24
     6e0:	cb 01       	movw	r24, r22
     6e2:	9e 87       	std	Y+14, r25	; 0x0e
     6e4:	8d 87       	std	Y+13, r24	; 0x0d
     6e6:	8d 85       	ldd	r24, Y+13	; 0x0d
     6e8:	9e 85       	ldd	r25, Y+14	; 0x0e
     6ea:	9a 8b       	std	Y+18, r25	; 0x12
     6ec:	89 8b       	std	Y+17, r24	; 0x11
     6ee:	89 89       	ldd	r24, Y+17	; 0x11
     6f0:	9a 89       	ldd	r25, Y+18	; 0x12
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <main+0x2aa>
     6f6:	9a 8b       	std	Y+18, r25	; 0x12
     6f8:	89 8b       	std	Y+17, r24	; 0x11
     6fa:	e3 ce       	rjmp	.-570    	; 0x4c2 <main+0x7a>
		{
			break;
		}

		_delay_ms(25);
    }
     6fc:	6c 96       	adiw	r28, 0x1c	; 28
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <initDisplay>:
#define RST_BIT 0 // PA0
#define DC_BIT 1 // PA1
#define LIGHT_BIT 2 // PA2

void initDisplay()
{
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
	SPI_MasterInit();
     716:	cd d5       	rcall	.+2970   	; 0x12b2 <SPI_MasterInit>
	
	// Set port to output
	DDRA |= 0b00000111;
     718:	81 e2       	ldi	r24, 0x21	; 33
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	21 e2       	ldi	r18, 0x21	; 33
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	f9 01       	movw	r30, r18
     722:	20 81       	ld	r18, Z
     724:	27 60       	ori	r18, 0x07	; 7
     726:	fc 01       	movw	r30, r24
     728:	20 83       	st	Z, r18
	
	// Turn on light
	PORTA &= ~(1 << LIGHT_BIT);
     72a:	82 e2       	ldi	r24, 0x22	; 34
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	22 e2       	ldi	r18, 0x22	; 34
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	f9 01       	movw	r30, r18
     734:	20 81       	ld	r18, Z
     736:	2b 7f       	andi	r18, 0xFB	; 251
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18
	
	// Set bits to high (active low)
	PORTA |= (1 << RST_BIT);
     73c:	82 e2       	ldi	r24, 0x22	; 34
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	22 e2       	ldi	r18, 0x22	; 34
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	f9 01       	movw	r30, r18
     746:	20 81       	ld	r18, Z
     748:	21 60       	ori	r18, 0x01	; 1
     74a:	fc 01       	movw	r30, r24
     74c:	20 83       	st	Z, r18
	PORTA |= (1 << DC_BIT);
     74e:	82 e2       	ldi	r24, 0x22	; 34
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	22 e2       	ldi	r18, 0x22	; 34
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	f9 01       	movw	r30, r18
     758:	20 81       	ld	r18, Z
     75a:	22 60       	ori	r18, 0x02	; 2
     75c:	fc 01       	movw	r30, r24
	
	// Required display reset
	// This has to be done before doing
	// Anything else with the display
	resetDisplay();
     75e:	20 83       	st	Z, r18
	
	// Use extended instruction set
	sendIntruction(0x21);
     760:	0f d0       	rcall	.+30     	; 0x780 <resetDisplay>
     762:	81 e2       	ldi	r24, 0x21	; 33

	// Here we control operation voltage of the LCD
	// We set it to 6V (the minimum allowed voltage range)
	// If you do not set a VOP value, the internal voltage generator
	// Will be switched off, and thus the display won't function.
	sendIntruction(0xC0);
     764:	9f d0       	rcall	.+318    	; 0x8a4 <sendIntruction>
     766:	80 ec       	ldi	r24, 0xC0	; 192

	// We set the bias voltage levels
	// The bias value is taken after the
	// optimum bias value described in official
	// data sheet.
	sendIntruction(0x13);
     768:	9d d0       	rcall	.+314    	; 0x8a4 <sendIntruction>
     76a:	83 e1       	ldi	r24, 0x13	; 19

	// Use basic instruction set
	sendIntruction(0x20);
     76c:	9b d0       	rcall	.+310    	; 0x8a4 <sendIntruction>
     76e:	80 e2       	ldi	r24, 0x20	; 32
     770:	99 d0       	rcall	.+306    	; 0x8a4 <sendIntruction>

	// Set display mode normal
	sendIntruction(0b00001100);
     772:	8c e0       	ldi	r24, 0x0C	; 12
     774:	97 d0       	rcall	.+302    	; 0x8a4 <sendIntruction>
     776:	cb d0       	rcall	.+406    	; 0x90e <clearDisplay>
	

	// Clear the display to make sure
	// No pixels are alive on startup
	clearDisplay();
     778:	00 00       	nop
     77a:	df 91       	pop	r29
}
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <resetDisplay>:
     780:	cf 93       	push	r28
     782:	df 93       	push	r29


void resetDisplay()
{
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	2e 97       	sbiw	r28, 0x0e	; 14
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	de bf       	out	0x3e, r29	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	cd bf       	out	0x3d, r28	; 61
	// Set RES low
	PORTA &= ~(1 << RST_BIT);
     794:	82 e2       	ldi	r24, 0x22	; 34
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	22 e2       	ldi	r18, 0x22	; 34
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	f9 01       	movw	r30, r18
     79e:	20 81       	ld	r18, Z
     7a0:	2e 7f       	andi	r18, 0xFE	; 254
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	a8 ec       	ldi	r26, 0xC8	; 200
     7ac:	b2 e4       	ldi	r27, 0x42	; 66
     7ae:	89 83       	std	Y+1, r24	; 0x01
     7b0:	9a 83       	std	Y+2, r25	; 0x02
     7b2:	ab 83       	std	Y+3, r26	; 0x03
     7b4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	4a e7       	ldi	r20, 0x7A	; 122
     7bc:	55 e4       	ldi	r21, 0x45	; 69
     7be:	69 81       	ldd	r22, Y+1	; 0x01
     7c0:	7a 81       	ldd	r23, Y+2	; 0x02
     7c2:	8b 81       	ldd	r24, Y+3	; 0x03
     7c4:	9c 81       	ldd	r25, Y+4	; 0x04
     7c6:	95 d7       	rcall	.+3882   	; 0x16f2 <__mulsf3>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	8d 83       	std	Y+5, r24	; 0x05
     7ce:	9e 83       	std	Y+6, r25	; 0x06
     7d0:	af 83       	std	Y+7, r26	; 0x07
     7d2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	40 e8       	ldi	r20, 0x80	; 128
     7da:	5f e3       	ldi	r21, 0x3F	; 63
     7dc:	6d 81       	ldd	r22, Y+5	; 0x05
     7de:	7e 81       	ldd	r23, Y+6	; 0x06
     7e0:	8f 81       	ldd	r24, Y+7	; 0x07
     7e2:	98 85       	ldd	r25, Y+8	; 0x08
     7e4:	05 d7       	rcall	.+3594   	; 0x15f0 <__cmpsf2>
     7e6:	88 23       	and	r24, r24
     7e8:	2c f4       	brge	.+10     	; 0x7f4 <resetDisplay+0x74>
		__ticks = 1;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	9a 87       	std	Y+10, r25	; 0x0a
     7f0:	89 87       	std	Y+9, r24	; 0x09
     7f2:	3b c0       	rjmp	.+118    	; 0x86a <resetDisplay+0xea>
	else if (__tmp > 65535)
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	3f ef       	ldi	r19, 0xFF	; 255
     7f8:	4f e7       	ldi	r20, 0x7F	; 127
     7fa:	57 e4       	ldi	r21, 0x47	; 71
     7fc:	6d 81       	ldd	r22, Y+5	; 0x05
     7fe:	7e 81       	ldd	r23, Y+6	; 0x06
     800:	8f 81       	ldd	r24, Y+7	; 0x07
     802:	98 85       	ldd	r25, Y+8	; 0x08
     804:	72 d7       	rcall	.+3812   	; 0x16ea <__gesf2>
     806:	18 16       	cp	r1, r24
     808:	3c f5       	brge	.+78     	; 0x858 <resetDisplay+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	40 e2       	ldi	r20, 0x20	; 32
     810:	51 e4       	ldi	r21, 0x41	; 65
     812:	69 81       	ldd	r22, Y+1	; 0x01
     814:	7a 81       	ldd	r23, Y+2	; 0x02
     816:	8b 81       	ldd	r24, Y+3	; 0x03
     818:	9c 81       	ldd	r25, Y+4	; 0x04
     81a:	6b d7       	rcall	.+3798   	; 0x16f2 <__mulsf3>
     81c:	dc 01       	movw	r26, r24
     81e:	cb 01       	movw	r24, r22
     820:	bc 01       	movw	r22, r24
     822:	cd 01       	movw	r24, r26
     824:	e9 d6       	rcall	.+3538   	; 0x15f8 <__fixunssfsi>
     826:	dc 01       	movw	r26, r24
     828:	cb 01       	movw	r24, r22
     82a:	9a 87       	std	Y+10, r25	; 0x0a
     82c:	89 87       	std	Y+9, r24	; 0x09
     82e:	0f c0       	rjmp	.+30     	; 0x84e <resetDisplay+0xce>
     830:	80 e9       	ldi	r24, 0x90	; 144
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	9c 87       	std	Y+12, r25	; 0x0c
     836:	8b 87       	std	Y+11, r24	; 0x0b
     838:	8b 85       	ldd	r24, Y+11	; 0x0b
     83a:	9c 85       	ldd	r25, Y+12	; 0x0c
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <resetDisplay+0xbc>
     840:	9c 87       	std	Y+12, r25	; 0x0c
     842:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     844:	89 85       	ldd	r24, Y+9	; 0x09
     846:	9a 85       	ldd	r25, Y+10	; 0x0a
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	9a 87       	std	Y+10, r25	; 0x0a
     84c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     84e:	89 85       	ldd	r24, Y+9	; 0x09
     850:	9a 85       	ldd	r25, Y+10	; 0x0a
     852:	89 2b       	or	r24, r25
     854:	69 f7       	brne	.-38     	; 0x830 <resetDisplay+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     856:	13 c0       	rjmp	.+38     	; 0x87e <resetDisplay+0xfe>
     858:	6d 81       	ldd	r22, Y+5	; 0x05
     85a:	7e 81       	ldd	r23, Y+6	; 0x06
     85c:	8f 81       	ldd	r24, Y+7	; 0x07
     85e:	98 85       	ldd	r25, Y+8	; 0x08
     860:	cb d6       	rcall	.+3478   	; 0x15f8 <__fixunssfsi>
     862:	dc 01       	movw	r26, r24
     864:	cb 01       	movw	r24, r22
     866:	9a 87       	std	Y+10, r25	; 0x0a
     868:	89 87       	std	Y+9, r24	; 0x09
     86a:	89 85       	ldd	r24, Y+9	; 0x09
     86c:	9a 85       	ldd	r25, Y+10	; 0x0a
     86e:	9e 87       	std	Y+14, r25	; 0x0e
     870:	8d 87       	std	Y+13, r24	; 0x0d
     872:	8d 85       	ldd	r24, Y+13	; 0x0d
     874:	9e 85       	ldd	r25, Y+14	; 0x0e
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <resetDisplay+0xf6>
     87a:	9e 87       	std	Y+14, r25	; 0x0e
     87c:	8d 87       	std	Y+13, r24	; 0x0d
		
	// Delay of min 100 ns (0,1ms) p.20
	_delay_ms(100);
		
	// Set RES high
	PORTA |= (1 << RST_BIT);
     87e:	82 e2       	ldi	r24, 0x22	; 34
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	22 e2       	ldi	r18, 0x22	; 34
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	f9 01       	movw	r30, r18
     888:	20 81       	ld	r18, Z
     88a:	21 60       	ori	r18, 0x01	; 1
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18
}
     890:	00 00       	nop
     892:	2e 96       	adiw	r28, 0x0e	; 14
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <sendIntruction>:

void sendIntruction(unsigned char cmd)
{
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	1f 92       	push	r1
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	89 83       	std	Y+1, r24	; 0x01
	// Set DC low, Command
	PORTA &= ~(1 << DC_BIT);
     8b0:	82 e2       	ldi	r24, 0x22	; 34
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	22 e2       	ldi	r18, 0x22	; 34
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	f9 01       	movw	r30, r18
     8ba:	20 81       	ld	r18, Z
     8bc:	2d 7f       	andi	r18, 0xFD	; 253
     8be:	fc 01       	movw	r30, r24
     8c0:	20 83       	st	Z, r18
	SPI_MasterTransmit(cmd);
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
     8c4:	08 d5       	rcall	.+2576   	; 0x12d6 <SPI_MasterTransmit>
	PORTA |= 1 << DC_BIT;
     8c6:	82 e2       	ldi	r24, 0x22	; 34
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	22 e2       	ldi	r18, 0x22	; 34
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	f9 01       	movw	r30, r18
     8d0:	20 81       	ld	r18, Z
     8d2:	22 60       	ori	r18, 0x02	; 2
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 83       	st	Z, r18
}
     8d8:	00 00       	nop
     8da:	0f 90       	pop	r0
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <sendData>:

void sendData(unsigned char data)
{	
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	1f 92       	push	r1
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= 1 << DC_BIT;
     8ee:	82 e2       	ldi	r24, 0x22	; 34
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	22 e2       	ldi	r18, 0x22	; 34
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	f9 01       	movw	r30, r18
     8f8:	20 81       	ld	r18, Z
     8fa:	22 60       	ori	r18, 0x02	; 2
     8fc:	fc 01       	movw	r30, r24
     8fe:	20 83       	st	Z, r18
	SPI_MasterTransmit(data);
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	e9 d4       	rcall	.+2514   	; 0x12d6 <SPI_MasterTransmit>
}
     904:	00 00       	nop
     906:	0f 90       	pop	r0
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <clearDisplay>:

void clearDisplay()
{
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	1f 92       	push	r1
     914:	1f 92       	push	r1
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
	for (int k=0; k<=503; k++)
     91a:	1a 82       	std	Y+2, r1	; 0x02
     91c:	19 82       	std	Y+1, r1	; 0x01
     91e:	07 c0       	rjmp	.+14     	; 0x92e <clearDisplay+0x20>
	{
		sendData(0x00);
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	df df       	rcall	.-66     	; 0x8e2 <sendData>
	SPI_MasterTransmit(data);
}

void clearDisplay()
{
	for (int k=0; k<=503; k++)
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	9a 81       	ldd	r25, Y+2	; 0x02
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	9a 83       	std	Y+2, r25	; 0x02
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	9a 81       	ldd	r25, Y+2	; 0x02
     932:	88 3f       	cpi	r24, 0xF8	; 248
     934:	91 40       	sbci	r25, 0x01	; 1
     936:	a4 f3       	brlt	.-24     	; 0x920 <clearDisplay+0x12>
	{
		sendData(0x00);
	}
     938:	00 00       	nop
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <GoLeft>:
int xDirection = 1;
int yDirection = 0;
int hitSelf = 0;

void GoLeft()
{
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
	if (xDirection == 1)
     94c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <xDirection>
     950:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <xDirection+0x1>
     954:	01 97       	sbiw	r24, 0x01	; 1
     956:	59 f0       	breq	.+22     	; 0x96e <GoLeft+0x2a>
		return;
	
	yDirection = 0;
     958:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <yDirection+0x1>
     95c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <yDirection>
	xDirection = -1;
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	9f ef       	ldi	r25, 0xFF	; 255
     964:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <xDirection+0x1>
     968:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <xDirection>
     96c:	01 c0       	rjmp	.+2      	; 0x970 <GoLeft+0x2c>
int hitSelf = 0;

void GoLeft()
{
	if (xDirection == 1)
		return;
     96e:	00 00       	nop
	
	yDirection = 0;
	xDirection = -1;
}
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <GoRight>:

void GoRight()
{
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
	if (xDirection == -1)
     97e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <xDirection>
     982:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <xDirection+0x1>
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	59 f0       	breq	.+22     	; 0x9a0 <GoRight+0x2a>
		return;
	
	yDirection = 0;
     98a:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <yDirection+0x1>
     98e:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <yDirection>
	xDirection = 1;
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <xDirection+0x1>
     99a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <xDirection>
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <GoRight+0x2c>
}

void GoRight()
{
	if (xDirection == -1)
		return;
     9a0:	00 00       	nop
	
	yDirection = 0;
	xDirection = 1;
}
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <GoUp>:

void GoUp()
{
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
	if (yDirection == 1)
     9b0:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <yDirection>
     9b4:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <yDirection+0x1>
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	59 f0       	breq	.+22     	; 0x9d2 <GoUp+0x2a>
	return;
	
	yDirection = -1;
     9bc:	8f ef       	ldi	r24, 0xFF	; 255
     9be:	9f ef       	ldi	r25, 0xFF	; 255
     9c0:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <yDirection+0x1>
     9c4:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <yDirection>
	xDirection = 0;
     9c8:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <xDirection+0x1>
     9cc:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <xDirection>
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <GoUp+0x2c>
}

void GoUp()
{
	if (yDirection == 1)
	return;
     9d2:	00 00       	nop
	
	yDirection = -1;
	xDirection = 0;
}
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <GoDown>:

void GoDown()
{
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
	if (yDirection == -1)
     9e2:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <yDirection>
     9e6:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <yDirection+0x1>
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	59 f0       	breq	.+22     	; 0xa04 <GoDown+0x2a>
	return;
	
	xDirection = 0;
     9ee:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <xDirection+0x1>
     9f2:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <xDirection>
	yDirection = 1;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <yDirection+0x1>
     9fe:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <yDirection>
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <GoDown+0x2c>
}

void GoDown()
{
	if (yDirection == -1)
	return;
     a04:	00 00       	nop
	
	xDirection = 0;
	yDirection = 1;
}
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <CheckInput>:

void CheckInput()
{
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
	if (GetKey() == '8')
     a14:	09 dc       	rcall	.-2030   	; 0x228 <GetKey>
     a16:	88 33       	cpi	r24, 0x38	; 56
     a18:	09 f4       	brne	.+2      	; 0xa1c <CheckInput+0x10>
	{
		GoDown();
     a1a:	df df       	rcall	.-66     	; 0x9da <GoDown>
	}

	if (GetKey() == '2')
     a1c:	05 dc       	rcall	.-2038   	; 0x228 <GetKey>
     a1e:	82 33       	cpi	r24, 0x32	; 50
	{
		GoUp();
     a20:	09 f4       	brne	.+2      	; 0xa24 <CheckInput+0x18>
	}

	if (GetKey() == '6')
     a22:	c2 df       	rcall	.-124    	; 0x9a8 <GoUp>
     a24:	01 dc       	rcall	.-2046   	; 0x228 <GetKey>
     a26:	86 33       	cpi	r24, 0x36	; 54
	{
		GoRight();
     a28:	09 f4       	brne	.+2      	; 0xa2c <CheckInput+0x20>
     a2a:	a5 df       	rcall	.-182    	; 0x976 <GoRight>
	}

	if (GetKey() == '4')
     a2c:	fd db       	rcall	.-2054   	; 0x228 <GetKey>
     a2e:	84 33       	cpi	r24, 0x34	; 52
     a30:	09 f4       	brne	.+2      	; 0xa34 <CheckInput+0x28>
     a32:	88 df       	rcall	.-240    	; 0x944 <GoLeft>
	{
		GoLeft();
     a34:	00 00       	nop
     a36:	df 91       	pop	r29
	}
}
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <CheckSnakeBodyCollision>:
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29

void CheckSnakeBodyCollision(struct SnakeBodyPart snakeArray[], int snakeLength)
{
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	6a 97       	sbiw	r28, 0x1a	; 26
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	98 8f       	std	Y+24, r25	; 0x18
     a52:	8f 8b       	std	Y+23, r24	; 0x17
     a54:	7a 8f       	std	Y+26, r23	; 0x1a
     a56:	69 8f       	std	Y+25, r22	; 0x19
	struct SnakeBodyPart snakeHead = snakeArray[0];
     a58:	8f 89       	ldd	r24, Y+23	; 0x17
     a5a:	98 8d       	ldd	r25, Y+24	; 0x18
     a5c:	2a e0       	ldi	r18, 0x0A	; 10
     a5e:	fc 01       	movw	r30, r24
     a60:	de 01       	movw	r26, r28
     a62:	13 96       	adiw	r26, 0x03	; 3
     a64:	01 90       	ld	r0, Z+
     a66:	0d 92       	st	X+, r0
     a68:	2a 95       	dec	r18
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <CheckSnakeBodyCollision+0x28>
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	9a 83       	std	Y+2, r25	; 0x02
     a72:	89 83       	std	Y+1, r24	; 0x01
     a74:	46 c0       	rjmp	.+140    	; 0xb02 <CheckSnakeBodyCollision+0xc6>
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	9a 81       	ldd	r25, Y+2	; 0x02
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	9c 01       	movw	r18, r24
     a80:	22 0f       	add	r18, r18
     a82:	33 1f       	adc	r19, r19
     a84:	22 0f       	add	r18, r18
     a86:	33 1f       	adc	r19, r19
     a88:	82 0f       	add	r24, r18
     a8a:	93 1f       	adc	r25, r19
     a8c:	2f 89       	ldd	r18, Y+23	; 0x17
     a8e:	38 8d       	ldd	r19, Y+24	; 0x18
     a90:	82 0f       	add	r24, r18
     a92:	93 1f       	adc	r25, r19
     a94:	2a e0       	ldi	r18, 0x0A	; 10
     a96:	fc 01       	movw	r30, r24
     a98:	de 01       	movw	r26, r28
     a9a:	1d 96       	adiw	r26, 0x0d	; 13
     a9c:	01 90       	ld	r0, Z+
     a9e:	0d 92       	st	X+, r0
     aa0:	2a 95       	dec	r18
     aa2:	e1 f7       	brne	.-8      	; 0xa9c <CheckSnakeBodyCollision+0x60>
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
     aa4:	2b 81       	ldd	r18, Y+3	; 0x03
     aa6:	3c 81       	ldd	r19, Y+4	; 0x04
     aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
     aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
     aac:	02 96       	adiw	r24, 0x02	; 2
     aae:	28 17       	cp	r18, r24
     ab0:	39 07       	cpc	r19, r25
     ab2:	14 f5       	brge	.+68     	; 0xaf8 <CheckSnakeBodyCollision+0xbc>
		(snakeHead.x + 2) > currentBodyPart.x &&
     ab4:	8b 81       	ldd	r24, Y+3	; 0x03
     ab6:	9c 81       	ldd	r25, Y+4	; 0x04
     ab8:	9c 01       	movw	r18, r24
     aba:	2e 5f       	subi	r18, 0xFE	; 254
     abc:	3f 4f       	sbci	r19, 0xFF	; 255
     abe:	8d 85       	ldd	r24, Y+13	; 0x0d
     ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
     ac2:	82 17       	cp	r24, r18
     ac4:	93 07       	cpc	r25, r19
     ac6:	c4 f4       	brge	.+48     	; 0xaf8 <CheckSnakeBodyCollision+0xbc>
		(snakeHead.x + 2) > currentBodyPart.x &&
		snakeHead.y < (currentBodyPart.y + 2) &&
     ac8:	2d 81       	ldd	r18, Y+5	; 0x05
     aca:	3e 81       	ldd	r19, Y+6	; 0x06
     acc:	8f 85       	ldd	r24, Y+15	; 0x0f
     ace:	98 89       	ldd	r25, Y+16	; 0x10
     ad0:	02 96       	adiw	r24, 0x02	; 2
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
		(snakeHead.x + 2) > currentBodyPart.x &&
     ad2:	28 17       	cp	r18, r24
     ad4:	39 07       	cpc	r19, r25
     ad6:	84 f4       	brge	.+32     	; 0xaf8 <CheckSnakeBodyCollision+0xbc>
		snakeHead.y < (currentBodyPart.y + 2) &&
		(2 + snakeHead.y) > currentBodyPart.y)
     ad8:	8d 81       	ldd	r24, Y+5	; 0x05
     ada:	9e 81       	ldd	r25, Y+6	; 0x06
     adc:	9c 01       	movw	r18, r24
     ade:	2e 5f       	subi	r18, 0xFE	; 254
     ae0:	3f 4f       	sbci	r19, 0xFF	; 255
     ae2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ae4:	98 89       	ldd	r25, Y+16	; 0x10
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
		(snakeHead.x + 2) > currentBodyPart.x &&
		snakeHead.y < (currentBodyPart.y + 2) &&
     ae6:	82 17       	cp	r24, r18
     ae8:	93 07       	cpc	r25, r19
     aea:	34 f4       	brge	.+12     	; 0xaf8 <CheckSnakeBodyCollision+0xbc>
		(2 + snakeHead.y) > currentBodyPart.y)
		{
			hitSelf = 1;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <hitSelf+0x1>
     af4:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <hitSelf>

void CheckSnakeBodyCollision(struct SnakeBodyPart snakeArray[], int snakeLength)
{
	struct SnakeBodyPart snakeHead = snakeArray[0];
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
     b02:	29 81       	ldd	r18, Y+1	; 0x01
     b04:	3a 81       	ldd	r19, Y+2	; 0x02
     b06:	89 8d       	ldd	r24, Y+25	; 0x19
     b08:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b0a:	28 17       	cp	r18, r24
     b0c:	39 07       	cpc	r19, r25
     b0e:	0c f4       	brge	.+2      	; 0xb12 <CheckSnakeBodyCollision+0xd6>
     b10:	b2 cf       	rjmp	.-156    	; 0xa76 <CheckSnakeBodyCollision+0x3a>
		(2 + snakeHead.y) > currentBodyPart.y)
		{
			hitSelf = 1;
		}
	}
}
     b12:	00 00       	nop
     b14:	6a 96       	adiw	r28, 0x1a	; 26
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <InitSnake>:

void InitSnake(struct SnakeBodyPart snakeArray[], int snakeLength)
{
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	6a 97       	sbiw	r28, 0x1a	; 26
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	98 8f       	std	Y+24, r25	; 0x18
     b3c:	8f 8b       	std	Y+23, r24	; 0x17
     b3e:	7a 8f       	std	Y+26, r23	; 0x1a
     b40:	69 8f       	std	Y+25, r22	; 0x19
	if (snakeLength <= 0)
     b42:	89 8d       	ldd	r24, Y+25	; 0x19
     b44:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b46:	18 16       	cp	r1, r24
     b48:	19 06       	cpc	r1, r25
     b4a:	0c f0       	brlt	.+2      	; 0xb4e <InitSnake+0x28>
     b4c:	57 c0       	rjmp	.+174    	; 0xbfc <InitSnake+0xd6>
		return;
		
	struct SnakeBodyPart head;
	head.x = 0;
     b4e:	1c 82       	std	Y+4, r1	; 0x04
     b50:	1b 82       	std	Y+3, r1	; 0x03
	head.y = 0;
     b52:	1e 82       	std	Y+6, r1	; 0x06
     b54:	1d 82       	std	Y+5, r1	; 0x05
	head.prevX = 0;
     b56:	18 86       	std	Y+8, r1	; 0x08
     b58:	1f 82       	std	Y+7, r1	; 0x07
	head.prevY = 0;
     b5a:	1a 86       	std	Y+10, r1	; 0x0a
     b5c:	19 86       	std	Y+9, r1	; 0x09
	head.headPointer = 0;
     b5e:	1c 86       	std	Y+12, r1	; 0x0c
     b60:	1b 86       	std	Y+11, r1	; 0x0b
	snakeArray[0] = head;
     b62:	8f 89       	ldd	r24, Y+23	; 0x17
     b64:	98 8d       	ldd	r25, Y+24	; 0x18
     b66:	2a e0       	ldi	r18, 0x0A	; 10
     b68:	fe 01       	movw	r30, r28
     b6a:	33 96       	adiw	r30, 0x03	; 3
     b6c:	dc 01       	movw	r26, r24
     b6e:	01 90       	ld	r0, Z+
     b70:	0d 92       	st	X+, r0
     b72:	2a 95       	dec	r18
     b74:	e1 f7       	brne	.-8      	; 0xb6e <InitSnake+0x48>
	
	for (int snakeBodyIndex = 1; snakeBodyIndex < (snakeLength); snakeBodyIndex++)
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	9a 83       	std	Y+2, r25	; 0x02
     b7c:	89 83       	std	Y+1, r24	; 0x01
     b7e:	36 c0       	rjmp	.+108    	; 0xbec <InitSnake+0xc6>
	{
		struct SnakeBodyPart newBodyPart;
		newBodyPart.x = -2;
     b80:	8e ef       	ldi	r24, 0xFE	; 254
     b82:	9f ef       	ldi	r25, 0xFF	; 255
     b84:	9e 87       	std	Y+14, r25	; 0x0e
     b86:	8d 87       	std	Y+13, r24	; 0x0d
		newBodyPart.y = -2;
     b88:	8e ef       	ldi	r24, 0xFE	; 254
     b8a:	9f ef       	ldi	r25, 0xFF	; 255
     b8c:	98 8b       	std	Y+16, r25	; 0x10
     b8e:	8f 87       	std	Y+15, r24	; 0x0f
		newBodyPart.headPointer = &snakeArray[snakeBodyIndex - 1];
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	9a 81       	ldd	r25, Y+2	; 0x02
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	9c 01       	movw	r18, r24
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	22 0f       	add	r18, r18
     ba0:	33 1f       	adc	r19, r19
     ba2:	82 0f       	add	r24, r18
     ba4:	93 1f       	adc	r25, r19
     ba6:	0a 97       	sbiw	r24, 0x0a	; 10
     ba8:	2f 89       	ldd	r18, Y+23	; 0x17
     baa:	38 8d       	ldd	r19, Y+24	; 0x18
     bac:	82 0f       	add	r24, r18
     bae:	93 1f       	adc	r25, r19
     bb0:	9e 8b       	std	Y+22, r25	; 0x16
     bb2:	8d 8b       	std	Y+21, r24	; 0x15
		snakeArray[snakeBodyIndex] = newBodyPart;
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	9a 81       	ldd	r25, Y+2	; 0x02
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	9c 01       	movw	r18, r24
     bbe:	22 0f       	add	r18, r18
     bc0:	33 1f       	adc	r19, r19
     bc2:	22 0f       	add	r18, r18
     bc4:	33 1f       	adc	r19, r19
     bc6:	82 0f       	add	r24, r18
     bc8:	93 1f       	adc	r25, r19
     bca:	2f 89       	ldd	r18, Y+23	; 0x17
     bcc:	38 8d       	ldd	r19, Y+24	; 0x18
     bce:	82 0f       	add	r24, r18
     bd0:	93 1f       	adc	r25, r19
     bd2:	2a e0       	ldi	r18, 0x0A	; 10
     bd4:	fe 01       	movw	r30, r28
     bd6:	3d 96       	adiw	r30, 0x0d	; 13
     bd8:	dc 01       	movw	r26, r24
     bda:	01 90       	ld	r0, Z+
     bdc:	0d 92       	st	X+, r0
     bde:	2a 95       	dec	r18
     be0:	e1 f7       	brne	.-8      	; 0xbda <InitSnake+0xb4>
	head.prevX = 0;
	head.prevY = 0;
	head.headPointer = 0;
	snakeArray[0] = head;
	
	for (int snakeBodyIndex = 1; snakeBodyIndex < (snakeLength); snakeBodyIndex++)
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	9a 83       	std	Y+2, r25	; 0x02
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	29 81       	ldd	r18, Y+1	; 0x01
     bee:	3a 81       	ldd	r19, Y+2	; 0x02
     bf0:	89 8d       	ldd	r24, Y+25	; 0x19
     bf2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bf4:	28 17       	cp	r18, r24
     bf6:	39 07       	cpc	r19, r25
     bf8:	1c f2       	brlt	.-122    	; 0xb80 <InitSnake+0x5a>
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <InitSnake+0xd8>
}

void InitSnake(struct SnakeBodyPart snakeArray[], int snakeLength)
{
	if (snakeLength <= 0)
		return;
     bfc:	00 00       	nop
		newBodyPart.x = -2;
		newBodyPart.y = -2;
		newBodyPart.headPointer = &snakeArray[snakeBodyIndex - 1];
		snakeArray[snakeBodyIndex] = newBodyPart;
	}
}
     bfe:	6a 96       	adiw	r28, 0x1a	; 26
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <UpdateSnake>:

void UpdateSnake(struct SnakeBodyPart snakeArray[], int snakeLength, int worldWidth, int worldHeight)
{
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	2a 97       	sbiw	r28, 0x0a	; 10
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	9c 83       	std	Y+4, r25	; 0x04
     c26:	8b 83       	std	Y+3, r24	; 0x03
     c28:	7e 83       	std	Y+6, r23	; 0x06
     c2a:	6d 83       	std	Y+5, r22	; 0x05
     c2c:	58 87       	std	Y+8, r21	; 0x08
     c2e:	4f 83       	std	Y+7, r20	; 0x07
     c30:	3a 87       	std	Y+10, r19	; 0x0a
     c32:	29 87       	std	Y+9, r18	; 0x09
	CheckInput();
     c34:	eb de       	rcall	.-554    	; 0xa0c <CheckInput>
	
	for (int bodyPartIndex = 0; bodyPartIndex < snakeLength; bodyPartIndex++)
     c36:	1a 82       	std	Y+2, r1	; 0x02
     c38:	19 82       	std	Y+1, r1	; 0x01
     c3a:	b5 c2       	rjmp	.+1386   	; 0x11a6 <UpdateSnake+0x596>
	{
		// Check for head
		if (snakeArray[bodyPartIndex].headPointer == 0)
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	9c 01       	movw	r18, r24
     c46:	22 0f       	add	r18, r18
     c48:	33 1f       	adc	r19, r19
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	82 0f       	add	r24, r18
     c50:	93 1f       	adc	r25, r19
     c52:	2b 81       	ldd	r18, Y+3	; 0x03
     c54:	3c 81       	ldd	r19, Y+4	; 0x04
     c56:	82 0f       	add	r24, r18
     c58:	93 1f       	adc	r25, r19
     c5a:	fc 01       	movw	r30, r24
     c5c:	80 85       	ldd	r24, Z+8	; 0x08
     c5e:	91 85       	ldd	r25, Z+9	; 0x09
     c60:	89 2b       	or	r24, r25
     c62:	09 f0       	breq	.+2      	; 0xc66 <UpdateSnake+0x56>
     c64:	05 c2       	rjmp	.+1034   	; 0x1070 <UpdateSnake+0x460>
		{
			snakeArray[bodyPartIndex].prevX = snakeArray[bodyPartIndex].x;
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	9a 81       	ldd	r25, Y+2	; 0x02
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	9c 01       	movw	r18, r24
     c70:	22 0f       	add	r18, r18
     c72:	33 1f       	adc	r19, r19
     c74:	22 0f       	add	r18, r18
     c76:	33 1f       	adc	r19, r19
     c78:	82 0f       	add	r24, r18
     c7a:	93 1f       	adc	r25, r19
     c7c:	2b 81       	ldd	r18, Y+3	; 0x03
     c7e:	3c 81       	ldd	r19, Y+4	; 0x04
     c80:	28 0f       	add	r18, r24
     c82:	39 1f       	adc	r19, r25
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	9a 81       	ldd	r25, Y+2	; 0x02
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	ac 01       	movw	r20, r24
     c8e:	44 0f       	add	r20, r20
     c90:	55 1f       	adc	r21, r21
     c92:	44 0f       	add	r20, r20
     c94:	55 1f       	adc	r21, r21
     c96:	84 0f       	add	r24, r20
     c98:	95 1f       	adc	r25, r21
     c9a:	4b 81       	ldd	r20, Y+3	; 0x03
     c9c:	5c 81       	ldd	r21, Y+4	; 0x04
     c9e:	84 0f       	add	r24, r20
     ca0:	95 1f       	adc	r25, r21
     ca2:	fc 01       	movw	r30, r24
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	f9 01       	movw	r30, r18
     caa:	95 83       	std	Z+5, r25	; 0x05
     cac:	84 83       	std	Z+4, r24	; 0x04
			snakeArray[bodyPartIndex].prevY = snakeArray[bodyPartIndex].y;
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	9a 81       	ldd	r25, Y+2	; 0x02
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	9c 01       	movw	r18, r24
     cb8:	22 0f       	add	r18, r18
     cba:	33 1f       	adc	r19, r19
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	82 0f       	add	r24, r18
     cc2:	93 1f       	adc	r25, r19
     cc4:	2b 81       	ldd	r18, Y+3	; 0x03
     cc6:	3c 81       	ldd	r19, Y+4	; 0x04
     cc8:	28 0f       	add	r18, r24
     cca:	39 1f       	adc	r19, r25
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	9a 81       	ldd	r25, Y+2	; 0x02
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	ac 01       	movw	r20, r24
     cd6:	44 0f       	add	r20, r20
     cd8:	55 1f       	adc	r21, r21
     cda:	44 0f       	add	r20, r20
     cdc:	55 1f       	adc	r21, r21
     cde:	84 0f       	add	r24, r20
     ce0:	95 1f       	adc	r25, r21
     ce2:	4b 81       	ldd	r20, Y+3	; 0x03
     ce4:	5c 81       	ldd	r21, Y+4	; 0x04
     ce6:	84 0f       	add	r24, r20
     ce8:	95 1f       	adc	r25, r21
     cea:	fc 01       	movw	r30, r24
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	f9 01       	movw	r30, r18
     cf2:	97 83       	std	Z+7, r25	; 0x07
     cf4:	86 83       	std	Z+6, r24	; 0x06
					
			if ((snakeArray[bodyPartIndex].x + 1) > worldWidth)
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	9c 01       	movw	r18, r24
     d00:	22 0f       	add	r18, r18
     d02:	33 1f       	adc	r19, r19
     d04:	22 0f       	add	r18, r18
     d06:	33 1f       	adc	r19, r19
     d08:	82 0f       	add	r24, r18
     d0a:	93 1f       	adc	r25, r19
     d0c:	2b 81       	ldd	r18, Y+3	; 0x03
     d0e:	3c 81       	ldd	r19, Y+4	; 0x04
     d10:	82 0f       	add	r24, r18
     d12:	93 1f       	adc	r25, r19
     d14:	fc 01       	movw	r30, r24
     d16:	80 81       	ld	r24, Z
     d18:	91 81       	ldd	r25, Z+1	; 0x01
     d1a:	9c 01       	movw	r18, r24
     d1c:	2f 5f       	subi	r18, 0xFF	; 255
     d1e:	3f 4f       	sbci	r19, 0xFF	; 255
     d20:	8f 81       	ldd	r24, Y+7	; 0x07
     d22:	98 85       	ldd	r25, Y+8	; 0x08
     d24:	82 17       	cp	r24, r18
     d26:	93 07       	cpc	r25, r19
     d28:	0c f0       	brlt	.+2      	; 0xd2c <UpdateSnake+0x11c>
     d2a:	3f c0       	rjmp	.+126    	; 0xdaa <UpdateSnake+0x19a>
			{
				snakeArray[bodyPartIndex].x = 0;
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	9a 81       	ldd	r25, Y+2	; 0x02
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	9c 01       	movw	r18, r24
     d36:	22 0f       	add	r18, r18
     d38:	33 1f       	adc	r19, r19
     d3a:	22 0f       	add	r18, r18
     d3c:	33 1f       	adc	r19, r19
     d3e:	82 0f       	add	r24, r18
     d40:	93 1f       	adc	r25, r19
     d42:	2b 81       	ldd	r18, Y+3	; 0x03
     d44:	3c 81       	ldd	r19, Y+4	; 0x04
     d46:	82 0f       	add	r24, r18
     d48:	93 1f       	adc	r25, r19
     d4a:	fc 01       	movw	r30, r24
     d4c:	11 82       	std	Z+1, r1	; 0x01
     d4e:	10 82       	st	Z, r1
				snakeArray[bodyPartIndex].y += 2 * yDirection;
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	9a 81       	ldd	r25, Y+2	; 0x02
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	9c 01       	movw	r18, r24
     d5a:	22 0f       	add	r18, r18
     d5c:	33 1f       	adc	r19, r19
     d5e:	22 0f       	add	r18, r18
     d60:	33 1f       	adc	r19, r19
     d62:	82 0f       	add	r24, r18
     d64:	93 1f       	adc	r25, r19
     d66:	2b 81       	ldd	r18, Y+3	; 0x03
     d68:	3c 81       	ldd	r19, Y+4	; 0x04
     d6a:	28 0f       	add	r18, r24
     d6c:	39 1f       	adc	r19, r25
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	ac 01       	movw	r20, r24
     d78:	44 0f       	add	r20, r20
     d7a:	55 1f       	adc	r21, r21
     d7c:	44 0f       	add	r20, r20
     d7e:	55 1f       	adc	r21, r21
     d80:	84 0f       	add	r24, r20
     d82:	95 1f       	adc	r25, r21
     d84:	4b 81       	ldd	r20, Y+3	; 0x03
     d86:	5c 81       	ldd	r21, Y+4	; 0x04
     d88:	84 0f       	add	r24, r20
     d8a:	95 1f       	adc	r25, r21
     d8c:	fc 01       	movw	r30, r24
     d8e:	42 81       	ldd	r20, Z+2	; 0x02
     d90:	53 81       	ldd	r21, Z+3	; 0x03
     d92:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <yDirection>
     d96:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <yDirection+0x1>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	84 0f       	add	r24, r20
     da0:	95 1f       	adc	r25, r21
     da2:	f9 01       	movw	r30, r18
     da4:	93 83       	std	Z+3, r25	; 0x03
     da6:	82 83       	std	Z+2, r24	; 0x02
     da8:	f9 c1       	rjmp	.+1010   	; 0x119c <UpdateSnake+0x58c>
			}
			else if ((snakeArray[bodyPartIndex].x) < 0) {
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	9c 01       	movw	r18, r24
     db4:	22 0f       	add	r18, r18
     db6:	33 1f       	adc	r19, r19
     db8:	22 0f       	add	r18, r18
     dba:	33 1f       	adc	r19, r19
     dbc:	82 0f       	add	r24, r18
     dbe:	93 1f       	adc	r25, r19
     dc0:	2b 81       	ldd	r18, Y+3	; 0x03
     dc2:	3c 81       	ldd	r19, Y+4	; 0x04
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	fc 01       	movw	r30, r24
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	99 23       	and	r25, r25
     dd0:	0c f0       	brlt	.+2      	; 0xdd4 <UpdateSnake+0x1c4>
     dd2:	43 c0       	rjmp	.+134    	; 0xe5a <UpdateSnake+0x24a>
				snakeArray[bodyPartIndex].x = worldWidth - 1;
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	9c 01       	movw	r18, r24
     dde:	22 0f       	add	r18, r18
     de0:	33 1f       	adc	r19, r19
     de2:	22 0f       	add	r18, r18
     de4:	33 1f       	adc	r19, r19
     de6:	82 0f       	add	r24, r18
     de8:	93 1f       	adc	r25, r19
     dea:	2b 81       	ldd	r18, Y+3	; 0x03
     dec:	3c 81       	ldd	r19, Y+4	; 0x04
     dee:	82 0f       	add	r24, r18
     df0:	93 1f       	adc	r25, r19
     df2:	2f 81       	ldd	r18, Y+7	; 0x07
     df4:	38 85       	ldd	r19, Y+8	; 0x08
     df6:	21 50       	subi	r18, 0x01	; 1
     df8:	31 09       	sbc	r19, r1
     dfa:	fc 01       	movw	r30, r24
     dfc:	31 83       	std	Z+1, r19	; 0x01
     dfe:	20 83       	st	Z, r18
				snakeArray[bodyPartIndex].y += 2 * yDirection;
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	9c 01       	movw	r18, r24
     e0a:	22 0f       	add	r18, r18
     e0c:	33 1f       	adc	r19, r19
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	82 0f       	add	r24, r18
     e14:	93 1f       	adc	r25, r19
     e16:	2b 81       	ldd	r18, Y+3	; 0x03
     e18:	3c 81       	ldd	r19, Y+4	; 0x04
     e1a:	28 0f       	add	r18, r24
     e1c:	39 1f       	adc	r19, r25
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	ac 01       	movw	r20, r24
     e28:	44 0f       	add	r20, r20
     e2a:	55 1f       	adc	r21, r21
     e2c:	44 0f       	add	r20, r20
     e2e:	55 1f       	adc	r21, r21
     e30:	84 0f       	add	r24, r20
     e32:	95 1f       	adc	r25, r21
     e34:	4b 81       	ldd	r20, Y+3	; 0x03
     e36:	5c 81       	ldd	r21, Y+4	; 0x04
     e38:	84 0f       	add	r24, r20
     e3a:	95 1f       	adc	r25, r21
     e3c:	fc 01       	movw	r30, r24
     e3e:	42 81       	ldd	r20, Z+2	; 0x02
     e40:	53 81       	ldd	r21, Z+3	; 0x03
     e42:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <yDirection>
     e46:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <yDirection+0x1>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	84 0f       	add	r24, r20
     e50:	95 1f       	adc	r25, r21
     e52:	f9 01       	movw	r30, r18
     e54:	93 83       	std	Z+3, r25	; 0x03
     e56:	82 83       	std	Z+2, r24	; 0x02
     e58:	a1 c1       	rjmp	.+834    	; 0x119c <UpdateSnake+0x58c>
				} else if ((snakeArray[bodyPartIndex].y + 1) > worldHeight) {
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	9c 01       	movw	r18, r24
     e64:	22 0f       	add	r18, r18
     e66:	33 1f       	adc	r19, r19
     e68:	22 0f       	add	r18, r18
     e6a:	33 1f       	adc	r19, r19
     e6c:	82 0f       	add	r24, r18
     e6e:	93 1f       	adc	r25, r19
     e70:	2b 81       	ldd	r18, Y+3	; 0x03
     e72:	3c 81       	ldd	r19, Y+4	; 0x04
     e74:	82 0f       	add	r24, r18
     e76:	93 1f       	adc	r25, r19
     e78:	fc 01       	movw	r30, r24
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	93 81       	ldd	r25, Z+3	; 0x03
     e7e:	9c 01       	movw	r18, r24
     e80:	2f 5f       	subi	r18, 0xFF	; 255
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	89 85       	ldd	r24, Y+9	; 0x09
     e86:	9a 85       	ldd	r25, Y+10	; 0x0a
     e88:	82 17       	cp	r24, r18
     e8a:	93 07       	cpc	r25, r19
     e8c:	0c f0       	brlt	.+2      	; 0xe90 <UpdateSnake+0x280>
     e8e:	3f c0       	rjmp	.+126    	; 0xf0e <UpdateSnake+0x2fe>
				snakeArray[bodyPartIndex].y = 0;
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	9c 01       	movw	r18, r24
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	82 0f       	add	r24, r18
     ea4:	93 1f       	adc	r25, r19
     ea6:	2b 81       	ldd	r18, Y+3	; 0x03
     ea8:	3c 81       	ldd	r19, Y+4	; 0x04
     eaa:	82 0f       	add	r24, r18
     eac:	93 1f       	adc	r25, r19
     eae:	fc 01       	movw	r30, r24
     eb0:	13 82       	std	Z+3, r1	; 0x03
     eb2:	12 82       	std	Z+2, r1	; 0x02
				snakeArray[bodyPartIndex].x += 2 * xDirection;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	9c 01       	movw	r18, r24
     ebe:	22 0f       	add	r18, r18
     ec0:	33 1f       	adc	r19, r19
     ec2:	22 0f       	add	r18, r18
     ec4:	33 1f       	adc	r19, r19
     ec6:	82 0f       	add	r24, r18
     ec8:	93 1f       	adc	r25, r19
     eca:	2b 81       	ldd	r18, Y+3	; 0x03
     ecc:	3c 81       	ldd	r19, Y+4	; 0x04
     ece:	28 0f       	add	r18, r24
     ed0:	39 1f       	adc	r19, r25
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	9a 81       	ldd	r25, Y+2	; 0x02
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	ac 01       	movw	r20, r24
     edc:	44 0f       	add	r20, r20
     ede:	55 1f       	adc	r21, r21
     ee0:	44 0f       	add	r20, r20
     ee2:	55 1f       	adc	r21, r21
     ee4:	84 0f       	add	r24, r20
     ee6:	95 1f       	adc	r25, r21
     ee8:	4b 81       	ldd	r20, Y+3	; 0x03
     eea:	5c 81       	ldd	r21, Y+4	; 0x04
     eec:	84 0f       	add	r24, r20
     eee:	95 1f       	adc	r25, r21
     ef0:	fc 01       	movw	r30, r24
     ef2:	40 81       	ld	r20, Z
     ef4:	51 81       	ldd	r21, Z+1	; 0x01
     ef6:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <xDirection>
     efa:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <xDirection+0x1>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	84 0f       	add	r24, r20
     f04:	95 1f       	adc	r25, r21
     f06:	f9 01       	movw	r30, r18
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	80 83       	st	Z, r24
     f0c:	47 c1       	rjmp	.+654    	; 0x119c <UpdateSnake+0x58c>
				} else if ((snakeArray[bodyPartIndex].y) < 0) {
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	9c 01       	movw	r18, r24
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	22 0f       	add	r18, r18
     f1e:	33 1f       	adc	r19, r19
     f20:	82 0f       	add	r24, r18
     f22:	93 1f       	adc	r25, r19
     f24:	2b 81       	ldd	r18, Y+3	; 0x03
     f26:	3c 81       	ldd	r19, Y+4	; 0x04
     f28:	82 0f       	add	r24, r18
     f2a:	93 1f       	adc	r25, r19
     f2c:	fc 01       	movw	r30, r24
     f2e:	82 81       	ldd	r24, Z+2	; 0x02
     f30:	93 81       	ldd	r25, Z+3	; 0x03
     f32:	99 23       	and	r25, r25
     f34:	0c f0       	brlt	.+2      	; 0xf38 <UpdateSnake+0x328>
     f36:	43 c0       	rjmp	.+134    	; 0xfbe <UpdateSnake+0x3ae>
				snakeArray[bodyPartIndex].y = worldHeight - 1;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	9c 01       	movw	r18, r24
     f42:	22 0f       	add	r18, r18
     f44:	33 1f       	adc	r19, r19
     f46:	22 0f       	add	r18, r18
     f48:	33 1f       	adc	r19, r19
     f4a:	82 0f       	add	r24, r18
     f4c:	93 1f       	adc	r25, r19
     f4e:	2b 81       	ldd	r18, Y+3	; 0x03
     f50:	3c 81       	ldd	r19, Y+4	; 0x04
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	29 85       	ldd	r18, Y+9	; 0x09
     f58:	3a 85       	ldd	r19, Y+10	; 0x0a
     f5a:	21 50       	subi	r18, 0x01	; 1
     f5c:	31 09       	sbc	r19, r1
     f5e:	fc 01       	movw	r30, r24
     f60:	33 83       	std	Z+3, r19	; 0x03
     f62:	22 83       	std	Z+2, r18	; 0x02
				snakeArray[bodyPartIndex].x += 2 * xDirection;
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	9c 01       	movw	r18, r24
     f6e:	22 0f       	add	r18, r18
     f70:	33 1f       	adc	r19, r19
     f72:	22 0f       	add	r18, r18
     f74:	33 1f       	adc	r19, r19
     f76:	82 0f       	add	r24, r18
     f78:	93 1f       	adc	r25, r19
     f7a:	2b 81       	ldd	r18, Y+3	; 0x03
     f7c:	3c 81       	ldd	r19, Y+4	; 0x04
     f7e:	28 0f       	add	r18, r24
     f80:	39 1f       	adc	r19, r25
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	9a 81       	ldd	r25, Y+2	; 0x02
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	ac 01       	movw	r20, r24
     f8c:	44 0f       	add	r20, r20
     f8e:	55 1f       	adc	r21, r21
     f90:	44 0f       	add	r20, r20
     f92:	55 1f       	adc	r21, r21
     f94:	84 0f       	add	r24, r20
     f96:	95 1f       	adc	r25, r21
     f98:	4b 81       	ldd	r20, Y+3	; 0x03
     f9a:	5c 81       	ldd	r21, Y+4	; 0x04
     f9c:	84 0f       	add	r24, r20
     f9e:	95 1f       	adc	r25, r21
     fa0:	fc 01       	movw	r30, r24
     fa2:	40 81       	ld	r20, Z
     fa4:	51 81       	ldd	r21, Z+1	; 0x01
     fa6:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <xDirection>
     faa:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <xDirection+0x1>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	84 0f       	add	r24, r20
     fb4:	95 1f       	adc	r25, r21
     fb6:	f9 01       	movw	r30, r18
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	80 83       	st	Z, r24
     fbc:	ef c0       	rjmp	.+478    	; 0x119c <UpdateSnake+0x58c>
			}
			else
			{
				snakeArray[bodyPartIndex].x += 2 * xDirection;
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	9a 81       	ldd	r25, Y+2	; 0x02
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	9c 01       	movw	r18, r24
     fc8:	22 0f       	add	r18, r18
     fca:	33 1f       	adc	r19, r19
     fcc:	22 0f       	add	r18, r18
     fce:	33 1f       	adc	r19, r19
     fd0:	82 0f       	add	r24, r18
     fd2:	93 1f       	adc	r25, r19
     fd4:	2b 81       	ldd	r18, Y+3	; 0x03
     fd6:	3c 81       	ldd	r19, Y+4	; 0x04
     fd8:	28 0f       	add	r18, r24
     fda:	39 1f       	adc	r19, r25
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	9a 81       	ldd	r25, Y+2	; 0x02
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	ac 01       	movw	r20, r24
     fe6:	44 0f       	add	r20, r20
     fe8:	55 1f       	adc	r21, r21
     fea:	44 0f       	add	r20, r20
     fec:	55 1f       	adc	r21, r21
     fee:	84 0f       	add	r24, r20
     ff0:	95 1f       	adc	r25, r21
     ff2:	4b 81       	ldd	r20, Y+3	; 0x03
     ff4:	5c 81       	ldd	r21, Y+4	; 0x04
     ff6:	84 0f       	add	r24, r20
     ff8:	95 1f       	adc	r25, r21
     ffa:	fc 01       	movw	r30, r24
     ffc:	40 81       	ld	r20, Z
     ffe:	51 81       	ldd	r21, Z+1	; 0x01
    1000:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <xDirection>
    1004:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <xDirection+0x1>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	84 0f       	add	r24, r20
    100e:	95 1f       	adc	r25, r21
    1010:	f9 01       	movw	r30, r18
    1012:	91 83       	std	Z+1, r25	; 0x01
    1014:	80 83       	st	Z, r24
				snakeArray[bodyPartIndex].y += 2 * yDirection;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	9a 81       	ldd	r25, Y+2	; 0x02
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	9c 01       	movw	r18, r24
    1020:	22 0f       	add	r18, r18
    1022:	33 1f       	adc	r19, r19
    1024:	22 0f       	add	r18, r18
    1026:	33 1f       	adc	r19, r19
    1028:	82 0f       	add	r24, r18
    102a:	93 1f       	adc	r25, r19
    102c:	2b 81       	ldd	r18, Y+3	; 0x03
    102e:	3c 81       	ldd	r19, Y+4	; 0x04
    1030:	28 0f       	add	r18, r24
    1032:	39 1f       	adc	r19, r25
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	9a 81       	ldd	r25, Y+2	; 0x02
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	ac 01       	movw	r20, r24
    103e:	44 0f       	add	r20, r20
    1040:	55 1f       	adc	r21, r21
    1042:	44 0f       	add	r20, r20
    1044:	55 1f       	adc	r21, r21
    1046:	84 0f       	add	r24, r20
    1048:	95 1f       	adc	r25, r21
    104a:	4b 81       	ldd	r20, Y+3	; 0x03
    104c:	5c 81       	ldd	r21, Y+4	; 0x04
    104e:	84 0f       	add	r24, r20
    1050:	95 1f       	adc	r25, r21
    1052:	fc 01       	movw	r30, r24
    1054:	42 81       	ldd	r20, Z+2	; 0x02
    1056:	53 81       	ldd	r21, Z+3	; 0x03
    1058:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <yDirection>
    105c:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <yDirection+0x1>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	84 0f       	add	r24, r20
    1066:	95 1f       	adc	r25, r21
    1068:	f9 01       	movw	r30, r18
    106a:	93 83       	std	Z+3, r25	; 0x03
    106c:	82 83       	std	Z+2, r24	; 0x02
    106e:	96 c0       	rjmp	.+300    	; 0x119c <UpdateSnake+0x58c>
			}
		}
		else
		{
			snakeArray[bodyPartIndex].prevX = snakeArray[bodyPartIndex].x;
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	9a 81       	ldd	r25, Y+2	; 0x02
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	9c 01       	movw	r18, r24
    107a:	22 0f       	add	r18, r18
    107c:	33 1f       	adc	r19, r19
    107e:	22 0f       	add	r18, r18
    1080:	33 1f       	adc	r19, r19
    1082:	82 0f       	add	r24, r18
    1084:	93 1f       	adc	r25, r19
    1086:	2b 81       	ldd	r18, Y+3	; 0x03
    1088:	3c 81       	ldd	r19, Y+4	; 0x04
    108a:	28 0f       	add	r18, r24
    108c:	39 1f       	adc	r19, r25
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	ac 01       	movw	r20, r24
    1098:	44 0f       	add	r20, r20
    109a:	55 1f       	adc	r21, r21
    109c:	44 0f       	add	r20, r20
    109e:	55 1f       	adc	r21, r21
    10a0:	84 0f       	add	r24, r20
    10a2:	95 1f       	adc	r25, r21
    10a4:	4b 81       	ldd	r20, Y+3	; 0x03
    10a6:	5c 81       	ldd	r21, Y+4	; 0x04
    10a8:	84 0f       	add	r24, r20
    10aa:	95 1f       	adc	r25, r21
    10ac:	fc 01       	movw	r30, r24
    10ae:	80 81       	ld	r24, Z
    10b0:	91 81       	ldd	r25, Z+1	; 0x01
    10b2:	f9 01       	movw	r30, r18
    10b4:	95 83       	std	Z+5, r25	; 0x05
    10b6:	84 83       	std	Z+4, r24	; 0x04
			snakeArray[bodyPartIndex].prevY = snakeArray[bodyPartIndex].y;
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	9c 01       	movw	r18, r24
    10c2:	22 0f       	add	r18, r18
    10c4:	33 1f       	adc	r19, r19
    10c6:	22 0f       	add	r18, r18
    10c8:	33 1f       	adc	r19, r19
    10ca:	82 0f       	add	r24, r18
    10cc:	93 1f       	adc	r25, r19
    10ce:	2b 81       	ldd	r18, Y+3	; 0x03
    10d0:	3c 81       	ldd	r19, Y+4	; 0x04
    10d2:	28 0f       	add	r18, r24
    10d4:	39 1f       	adc	r19, r25
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	9a 81       	ldd	r25, Y+2	; 0x02
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	ac 01       	movw	r20, r24
    10e0:	44 0f       	add	r20, r20
    10e2:	55 1f       	adc	r21, r21
    10e4:	44 0f       	add	r20, r20
    10e6:	55 1f       	adc	r21, r21
    10e8:	84 0f       	add	r24, r20
    10ea:	95 1f       	adc	r25, r21
    10ec:	4b 81       	ldd	r20, Y+3	; 0x03
    10ee:	5c 81       	ldd	r21, Y+4	; 0x04
    10f0:	84 0f       	add	r24, r20
    10f2:	95 1f       	adc	r25, r21
    10f4:	fc 01       	movw	r30, r24
    10f6:	82 81       	ldd	r24, Z+2	; 0x02
    10f8:	93 81       	ldd	r25, Z+3	; 0x03
    10fa:	f9 01       	movw	r30, r18
    10fc:	97 83       	std	Z+7, r25	; 0x07
    10fe:	86 83       	std	Z+6, r24	; 0x06
			snakeArray[bodyPartIndex].x = snakeArray[bodyPartIndex].headPointer->prevX;
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	9c 01       	movw	r18, r24
    110a:	22 0f       	add	r18, r18
    110c:	33 1f       	adc	r19, r19
    110e:	22 0f       	add	r18, r18
    1110:	33 1f       	adc	r19, r19
    1112:	82 0f       	add	r24, r18
    1114:	93 1f       	adc	r25, r19
    1116:	2b 81       	ldd	r18, Y+3	; 0x03
    1118:	3c 81       	ldd	r19, Y+4	; 0x04
    111a:	28 0f       	add	r18, r24
    111c:	39 1f       	adc	r19, r25
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	ac 01       	movw	r20, r24
    1128:	44 0f       	add	r20, r20
    112a:	55 1f       	adc	r21, r21
    112c:	44 0f       	add	r20, r20
    112e:	55 1f       	adc	r21, r21
    1130:	84 0f       	add	r24, r20
    1132:	95 1f       	adc	r25, r21
    1134:	4b 81       	ldd	r20, Y+3	; 0x03
    1136:	5c 81       	ldd	r21, Y+4	; 0x04
    1138:	84 0f       	add	r24, r20
    113a:	95 1f       	adc	r25, r21
    113c:	fc 01       	movw	r30, r24
    113e:	80 85       	ldd	r24, Z+8	; 0x08
    1140:	91 85       	ldd	r25, Z+9	; 0x09
    1142:	fc 01       	movw	r30, r24
    1144:	84 81       	ldd	r24, Z+4	; 0x04
    1146:	95 81       	ldd	r25, Z+5	; 0x05
    1148:	f9 01       	movw	r30, r18
    114a:	91 83       	std	Z+1, r25	; 0x01
    114c:	80 83       	st	Z, r24
			snakeArray[bodyPartIndex].y = snakeArray[bodyPartIndex].headPointer->prevY;
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	9c 01       	movw	r18, r24
    1158:	22 0f       	add	r18, r18
    115a:	33 1f       	adc	r19, r19
    115c:	22 0f       	add	r18, r18
    115e:	33 1f       	adc	r19, r19
    1160:	82 0f       	add	r24, r18
    1162:	93 1f       	adc	r25, r19
    1164:	2b 81       	ldd	r18, Y+3	; 0x03
    1166:	3c 81       	ldd	r19, Y+4	; 0x04
    1168:	28 0f       	add	r18, r24
    116a:	39 1f       	adc	r19, r25
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	ac 01       	movw	r20, r24
    1176:	44 0f       	add	r20, r20
    1178:	55 1f       	adc	r21, r21
    117a:	44 0f       	add	r20, r20
    117c:	55 1f       	adc	r21, r21
    117e:	84 0f       	add	r24, r20
    1180:	95 1f       	adc	r25, r21
    1182:	4b 81       	ldd	r20, Y+3	; 0x03
    1184:	5c 81       	ldd	r21, Y+4	; 0x04
    1186:	84 0f       	add	r24, r20
    1188:	95 1f       	adc	r25, r21
    118a:	fc 01       	movw	r30, r24
    118c:	80 85       	ldd	r24, Z+8	; 0x08
    118e:	91 85       	ldd	r25, Z+9	; 0x09
    1190:	fc 01       	movw	r30, r24
    1192:	86 81       	ldd	r24, Z+6	; 0x06
    1194:	97 81       	ldd	r25, Z+7	; 0x07
    1196:	f9 01       	movw	r30, r18
    1198:	93 83       	std	Z+3, r25	; 0x03
    119a:	82 83       	std	Z+2, r24	; 0x02

void UpdateSnake(struct SnakeBodyPart snakeArray[], int snakeLength, int worldWidth, int worldHeight)
{
	CheckInput();
	
	for (int bodyPartIndex = 0; bodyPartIndex < snakeLength; bodyPartIndex++)
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	29 81       	ldd	r18, Y+1	; 0x01
    11a8:	3a 81       	ldd	r19, Y+2	; 0x02
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	28 17       	cp	r18, r24
    11b0:	39 07       	cpc	r19, r25
    11b2:	0c f4       	brge	.+2      	; 0x11b6 <UpdateSnake+0x5a6>
    11b4:	43 cd       	rjmp	.-1402   	; 0xc3c <UpdateSnake+0x2c>
			snakeArray[bodyPartIndex].x = snakeArray[bodyPartIndex].headPointer->prevX;
			snakeArray[bodyPartIndex].y = snakeArray[bodyPartIndex].headPointer->prevY;
		}
	}
	
	CheckSnakeBodyCollision(snakeArray, snakeLength);
    11b6:	2d 81       	ldd	r18, Y+5	; 0x05
    11b8:	3e 81       	ldd	r19, Y+6	; 0x06
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	b9 01       	movw	r22, r18
    11c0:	3d dc       	rcall	.-1926   	; 0xa3c <CheckSnakeBodyCollision>
}
    11c2:	00 00       	nop
    11c4:	2a 96       	adiw	r28, 0x0a	; 10
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	08 95       	ret

000011d6 <GrowSnake>:

void GrowSnake(struct SnakeBodyPart snakeArray[], int snakeBodyLength)
{
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	68 97       	sbiw	r28, 0x18	; 24
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	9e 8b       	std	Y+22, r25	; 0x16
    11ec:	8d 8b       	std	Y+21, r24	; 0x15
    11ee:	78 8f       	std	Y+24, r23	; 0x18
    11f0:	6f 8b       	std	Y+23, r22	; 0x17
	struct SnakeBodyPart previousBodyPart = snakeArray[snakeBodyLength - 2]; 
    11f2:	8f 89       	ldd	r24, Y+23	; 0x17
    11f4:	98 8d       	ldd	r25, Y+24	; 0x18
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	9c 01       	movw	r18, r24
    11fc:	22 0f       	add	r18, r18
    11fe:	33 1f       	adc	r19, r19
    1200:	22 0f       	add	r18, r18
    1202:	33 1f       	adc	r19, r19
    1204:	82 0f       	add	r24, r18
    1206:	93 1f       	adc	r25, r19
    1208:	44 97       	sbiw	r24, 0x14	; 20
    120a:	2d 89       	ldd	r18, Y+21	; 0x15
    120c:	3e 89       	ldd	r19, Y+22	; 0x16
    120e:	82 0f       	add	r24, r18
    1210:	93 1f       	adc	r25, r19
    1212:	2a e0       	ldi	r18, 0x0A	; 10
    1214:	fc 01       	movw	r30, r24
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	dc 01       	movw	r26, r24
    121c:	01 90       	ld	r0, Z+
    121e:	0d 92       	st	X+, r0
    1220:	2a 95       	dec	r18
    1222:	e1 f7       	brne	.-8      	; 0x121c <GrowSnake+0x46>
	
	struct SnakeBodyPart newBodyPart;
	newBodyPart.x = previousBodyPart.prevX;
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	9c 87       	std	Y+12, r25	; 0x0c
    122a:	8b 87       	std	Y+11, r24	; 0x0b
	newBodyPart.y = previousBodyPart.prevY;
    122c:	8f 81       	ldd	r24, Y+7	; 0x07
    122e:	98 85       	ldd	r25, Y+8	; 0x08
    1230:	9e 87       	std	Y+14, r25	; 0x0e
    1232:	8d 87       	std	Y+13, r24	; 0x0d
	newBodyPart.headPointer = &snakeArray[snakeBodyLength - 2];
    1234:	8f 89       	ldd	r24, Y+23	; 0x17
    1236:	98 8d       	ldd	r25, Y+24	; 0x18
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	9c 01       	movw	r18, r24
    123e:	22 0f       	add	r18, r18
    1240:	33 1f       	adc	r19, r19
    1242:	22 0f       	add	r18, r18
    1244:	33 1f       	adc	r19, r19
    1246:	82 0f       	add	r24, r18
    1248:	93 1f       	adc	r25, r19
    124a:	44 97       	sbiw	r24, 0x14	; 20
    124c:	2d 89       	ldd	r18, Y+21	; 0x15
    124e:	3e 89       	ldd	r19, Y+22	; 0x16
    1250:	82 0f       	add	r24, r18
    1252:	93 1f       	adc	r25, r19
    1254:	9c 8b       	std	Y+20, r25	; 0x14
    1256:	8b 8b       	std	Y+19, r24	; 0x13
	snakeArray[snakeBodyLength - 1] = newBodyPart;
    1258:	8f 89       	ldd	r24, Y+23	; 0x17
    125a:	98 8d       	ldd	r25, Y+24	; 0x18
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	9c 01       	movw	r18, r24
    1262:	22 0f       	add	r18, r18
    1264:	33 1f       	adc	r19, r19
    1266:	22 0f       	add	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	82 0f       	add	r24, r18
    126c:	93 1f       	adc	r25, r19
    126e:	0a 97       	sbiw	r24, 0x0a	; 10
    1270:	2d 89       	ldd	r18, Y+21	; 0x15
    1272:	3e 89       	ldd	r19, Y+22	; 0x16
    1274:	82 0f       	add	r24, r18
    1276:	93 1f       	adc	r25, r19
    1278:	2a e0       	ldi	r18, 0x0A	; 10
    127a:	fe 01       	movw	r30, r28
    127c:	3b 96       	adiw	r30, 0x0b	; 11
    127e:	dc 01       	movw	r26, r24
    1280:	01 90       	ld	r0, Z+
    1282:	0d 92       	st	X+, r0
    1284:	2a 95       	dec	r18
    1286:	e1 f7       	brne	.-8      	; 0x1280 <GrowSnake+0xaa>
}
    1288:	00 00       	nop
    128a:	68 96       	adiw	r28, 0x18	; 24
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	08 95       	ret

0000129c <SnakeHitSelf>:

int SnakeHitSelf()
{
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
	return hitSelf;
    12a4:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <hitSelf>
    12a8:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <hitSelf+0x1>
}
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <SPI_MasterInit>:
#define DD_MOSI 2
#define DD_MISO 3
#define DD_DORD 5

void SPI_MasterInit(void)
{	
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS); //MOSI,SS & SCK output,others input
    12ba:	84 e2       	ldi	r24, 0x24	; 36
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	27 e0       	ldi	r18, 0x07	; 7
    12c0:	fc 01       	movw	r30, r24
    12c2:	20 83       	st	Z, r18
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);  		   //SPI, Master, clock = fck/16
    12c4:	8c e4       	ldi	r24, 0x4C	; 76
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	21 e5       	ldi	r18, 0x51	; 81
    12ca:	fc 01       	movw	r30, r24
    12cc:	20 83       	st	Z, r18
}
    12ce:	00 00       	nop
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	08 95       	ret

000012d6 <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	00 d0       	rcall	.+0      	; 0x12dc <SPI_MasterTransmit+0x6>
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	8b 83       	std	Y+3, r24	; 0x03
	PORTB &= ~(1 << DD_SS);
    12e2:	85 e2       	ldi	r24, 0x25	; 37
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	25 e2       	ldi	r18, 0x25	; 37
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	f9 01       	movw	r30, r18
    12ec:	20 81       	ld	r18, Z
    12ee:	2e 7f       	andi	r18, 0xFE	; 254
    12f0:	fc 01       	movw	r30, r24
    12f2:	20 83       	st	Z, r18

	// Start transmission
	SPDR = cData;			
    12f4:	8e e4       	ldi	r24, 0x4E	; 78
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	2b 81       	ldd	r18, Y+3	; 0x03
    12fa:	fc 01       	movw	r30, r24
    12fc:	20 83       	st	Z, r18
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
    12fe:	1a 82       	std	Y+2, r1	; 0x02
    1300:	19 82       	std	Y+1, r1	; 0x01
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
    1302:	05 c0       	rjmp	.+10     	; 0x130e <SPI_MasterTransmit+0x38>
	{
		k++;
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	89 83       	std	Y+1, r24	; 0x01
	// Start transmission
	SPDR = cData;			
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
    130e:	8d e4       	ldi	r24, 0x4D	; 77
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	fc 01       	movw	r30, r24
    1314:	80 81       	ld	r24, Z
    1316:	88 23       	and	r24, r24
    1318:	ac f7       	brge	.-22     	; 0x1304 <SPI_MasterTransmit+0x2e>
	{
		k++;
	}			
	
	cData = SPDR;
    131a:	8e e4       	ldi	r24, 0x4E	; 78
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	fc 01       	movw	r30, r24
    1320:	80 81       	ld	r24, Z
    1322:	8b 83       	std	Y+3, r24	; 0x03

	PORTB|= 1 << DD_SS;
    1324:	85 e2       	ldi	r24, 0x25	; 37
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	25 e2       	ldi	r18, 0x25	; 37
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	f9 01       	movw	r30, r18
    132e:	20 81       	ld	r18, Z
    1330:	21 60       	ori	r18, 0x01	; 1
    1332:	fc 01       	movw	r30, r24
    1334:	20 83       	st	Z, r18
}
    1336:	00 00       	nop
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <DrawPixel>:
 */ 
#include "WorldDriver.h"
#include "Nokia5110Driver.h"

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	28 97       	sbiw	r28, 0x08	; 8
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	8d 83       	std	Y+5, r24	; 0x05
    135a:	6e 83       	std	Y+6, r22	; 0x06
    135c:	58 87       	std	Y+8, r21	; 0x08
    135e:	4f 83       	std	Y+7, r20	; 0x07
	if (x < 0 || x > 83)
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	84 35       	cpi	r24, 0x54	; 84
    1364:	08 f0       	brcs	.+2      	; 0x1368 <DrawPixel+0x24>
    1366:	8c c0       	rjmp	.+280    	; 0x1480 <DrawPixel+0x13c>
		return;

	if (y < 0 || y > 47)
    1368:	8e 81       	ldd	r24, Y+6	; 0x06
    136a:	80 33       	cpi	r24, 0x30	; 48
    136c:	08 f0       	brcs	.+2      	; 0x1370 <DrawPixel+0x2c>
    136e:	8a c0       	rjmp	.+276    	; 0x1484 <DrawPixel+0x140>
		return;

	unsigned int baselineOffset = 0;
    1370:	1a 82       	std	Y+2, r1	; 0x02
    1372:	19 82       	std	Y+1, r1	; 0x01
	unsigned int verticalBitOffset = 0;
    1374:	1c 82       	std	Y+4, r1	; 0x04
    1376:	1b 82       	std	Y+3, r1	; 0x03

	if (y >= 0 && y <= 7)
    1378:	8e 81       	ldd	r24, Y+6	; 0x06
    137a:	88 30       	cpi	r24, 0x08	; 8
    137c:	40 f4       	brcc	.+16     	; 0x138e <DrawPixel+0x4a>
	{
		baselineOffset = 0;
    137e:	1a 82       	std	Y+2, r1	; 0x02
    1380:	19 82       	std	Y+1, r1	; 0x01
		verticalBitOffset = y;
    1382:	8e 81       	ldd	r24, Y+6	; 0x06
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9c 83       	std	Y+4, r25	; 0x04
    138a:	8b 83       	std	Y+3, r24	; 0x03
    138c:	54 c0       	rjmp	.+168    	; 0x1436 <DrawPixel+0xf2>
	} 
	else if (y >= 8 && y <= 15)
    138e:	8e 81       	ldd	r24, Y+6	; 0x06
    1390:	88 30       	cpi	r24, 0x08	; 8
    1392:	70 f0       	brcs	.+28     	; 0x13b0 <DrawPixel+0x6c>
    1394:	8e 81       	ldd	r24, Y+6	; 0x06
    1396:	80 31       	cpi	r24, 0x10	; 16
    1398:	58 f4       	brcc	.+22     	; 0x13b0 <DrawPixel+0x6c>
	{
		baselineOffset = 84;
    139a:	84 e5       	ldi	r24, 0x54	; 84
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9a 83       	std	Y+2, r25	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - 8;
    13a2:	8e 81       	ldd	r24, Y+6	; 0x06
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	08 97       	sbiw	r24, 0x08	; 8
    13aa:	9c 83       	std	Y+4, r25	; 0x04
    13ac:	8b 83       	std	Y+3, r24	; 0x03
    13ae:	43 c0       	rjmp	.+134    	; 0x1436 <DrawPixel+0xf2>
	} 
	else if (y >= 16 && y <= 23)
    13b0:	8e 81       	ldd	r24, Y+6	; 0x06
    13b2:	80 31       	cpi	r24, 0x10	; 16
    13b4:	70 f0       	brcs	.+28     	; 0x13d2 <DrawPixel+0x8e>
    13b6:	8e 81       	ldd	r24, Y+6	; 0x06
    13b8:	88 31       	cpi	r24, 0x18	; 24
    13ba:	58 f4       	brcc	.+22     	; 0x13d2 <DrawPixel+0x8e>
	{
		baselineOffset = 84 * 2;
    13bc:	88 ea       	ldi	r24, 0xA8	; 168
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	9a 83       	std	Y+2, r25	; 0x02
    13c2:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 2);
    13c4:	8e 81       	ldd	r24, Y+6	; 0x06
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	40 97       	sbiw	r24, 0x10	; 16
    13cc:	9c 83       	std	Y+4, r25	; 0x04
    13ce:	8b 83       	std	Y+3, r24	; 0x03
    13d0:	32 c0       	rjmp	.+100    	; 0x1436 <DrawPixel+0xf2>
	} 
	else if (y >= 24 && y <= 31)
    13d2:	8e 81       	ldd	r24, Y+6	; 0x06
    13d4:	88 31       	cpi	r24, 0x18	; 24
    13d6:	70 f0       	brcs	.+28     	; 0x13f4 <DrawPixel+0xb0>
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	80 32       	cpi	r24, 0x20	; 32
    13dc:	58 f4       	brcc	.+22     	; 0x13f4 <DrawPixel+0xb0>
	{
		baselineOffset = 84 * 3;
    13de:	8c ef       	ldi	r24, 0xFC	; 252
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 3);
    13e6:	8e 81       	ldd	r24, Y+6	; 0x06
    13e8:	88 2f       	mov	r24, r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	48 97       	sbiw	r24, 0x18	; 24
    13ee:	9c 83       	std	Y+4, r25	; 0x04
    13f0:	8b 83       	std	Y+3, r24	; 0x03
    13f2:	21 c0       	rjmp	.+66     	; 0x1436 <DrawPixel+0xf2>
	}
	else if (y >= 32 && y <= 39)
    13f4:	8e 81       	ldd	r24, Y+6	; 0x06
    13f6:	80 32       	cpi	r24, 0x20	; 32
    13f8:	70 f0       	brcs	.+28     	; 0x1416 <DrawPixel+0xd2>
    13fa:	8e 81       	ldd	r24, Y+6	; 0x06
    13fc:	88 32       	cpi	r24, 0x28	; 40
    13fe:	58 f4       	brcc	.+22     	; 0x1416 <DrawPixel+0xd2>
	{
		baselineOffset = 84 * 4;
    1400:	80 e5       	ldi	r24, 0x50	; 80
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 4);
    1408:	8e 81       	ldd	r24, Y+6	; 0x06
    140a:	88 2f       	mov	r24, r24
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	80 97       	sbiw	r24, 0x20	; 32
    1410:	9c 83       	std	Y+4, r25	; 0x04
    1412:	8b 83       	std	Y+3, r24	; 0x03
    1414:	10 c0       	rjmp	.+32     	; 0x1436 <DrawPixel+0xf2>
	}
	else if (y >= 40 && y <= 47)
    1416:	8e 81       	ldd	r24, Y+6	; 0x06
    1418:	88 32       	cpi	r24, 0x28	; 40
    141a:	68 f0       	brcs	.+26     	; 0x1436 <DrawPixel+0xf2>
    141c:	8e 81       	ldd	r24, Y+6	; 0x06
    141e:	80 33       	cpi	r24, 0x30	; 48
    1420:	50 f4       	brcc	.+20     	; 0x1436 <DrawPixel+0xf2>
	{
		baselineOffset = 84 * 5;
    1422:	84 ea       	ldi	r24, 0xA4	; 164
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 5);
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	88 2f       	mov	r24, r24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	88 97       	sbiw	r24, 0x28	; 40
    1432:	9c 83       	std	Y+4, r25	; 0x04
    1434:	8b 83       	std	Y+3, r24	; 0x03
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
    1436:	8d 81       	ldd	r24, Y+5	; 0x05
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
    1440:	82 0f       	add	r24, r18
    1442:	93 1f       	adc	r25, r19
    1444:	2f 81       	ldd	r18, Y+7	; 0x07
    1446:	38 85       	ldd	r19, Y+8	; 0x08
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	2d 81       	ldd	r18, Y+5	; 0x05
    144e:	42 2f       	mov	r20, r18
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	29 81       	ldd	r18, Y+1	; 0x01
    1454:	3a 81       	ldd	r19, Y+2	; 0x02
    1456:	24 0f       	add	r18, r20
    1458:	35 1f       	adc	r19, r21
    145a:	4f 81       	ldd	r20, Y+7	; 0x07
    145c:	58 85       	ldd	r21, Y+8	; 0x08
    145e:	24 0f       	add	r18, r20
    1460:	35 1f       	adc	r19, r21
    1462:	f9 01       	movw	r30, r18
    1464:	20 81       	ld	r18, Z
    1466:	42 2f       	mov	r20, r18
    1468:	21 e0       	ldi	r18, 0x01	; 1
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	0b 80       	ldd	r0, Y+3	; 0x03
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DrawPixel+0x130>
    1470:	22 0f       	add	r18, r18
    1472:	33 1f       	adc	r19, r19
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DrawPixel+0x12c>
    1478:	24 2b       	or	r18, r20
    147a:	fc 01       	movw	r30, r24
    147c:	20 83       	st	Z, r18
    147e:	03 c0       	rjmp	.+6      	; 0x1486 <DrawPixel+0x142>
#include "Nokia5110Driver.h"

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
	if (x < 0 || x > 83)
		return;
    1480:	00 00       	nop
    1482:	01 c0       	rjmp	.+2      	; 0x1486 <DrawPixel+0x142>

	if (y < 0 || y > 47)
		return;
    1484:	00 00       	nop
		baselineOffset = 84 * 5;
		verticalBitOffset = y - (8 * 5);
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
}
    1486:	28 96       	adiw	r28, 0x08	; 8
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <DrawDot>:

 void DrawDot(unsigned char x, unsigned char y, unsigned char* world)
 {
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	00 d0       	rcall	.+0      	; 0x149e <DrawDot+0x6>
    149e:	1f 92       	push	r1
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	6a 83       	std	Y+2, r22	; 0x02
    14a8:	5c 83       	std	Y+4, r21	; 0x04
    14aa:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	ac 01       	movw	r20, r24
    14b2:	6a 81       	ldd	r22, Y+2	; 0x02
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	46 df       	rcall	.-372    	; 0x1344 <DrawPixel>
	DrawPixel(x + 1, y, world);
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	21 e0       	ldi	r18, 0x01	; 1
    14bc:	28 0f       	add	r18, r24
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	ac 01       	movw	r20, r24
    14c4:	6a 81       	ldd	r22, Y+2	; 0x02
    14c6:	82 2f       	mov	r24, r18
    14c8:	3d df       	rcall	.-390    	; 0x1344 <DrawPixel>
	DrawPixel(x, y + 1, world);
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	21 e0       	ldi	r18, 0x01	; 1
    14ce:	28 0f       	add	r18, r24
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	ac 01       	movw	r20, r24
    14d6:	62 2f       	mov	r22, r18
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	34 df       	rcall	.-408    	; 0x1344 <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	31 e0       	ldi	r19, 0x01	; 1
    14e0:	38 0f       	add	r19, r24
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	21 e0       	ldi	r18, 0x01	; 1
    14e6:	28 0f       	add	r18, r24
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	ac 01       	movw	r20, r24
    14ee:	63 2f       	mov	r22, r19
    14f0:	82 2f       	mov	r24, r18
    14f2:	28 df       	rcall	.-432    	; 0x1344 <DrawPixel>
 }
    14f4:	00 00       	nop
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	08 95       	ret

00001504 <DrawFood>:
 
 void DrawFood(unsigned char x, unsigned char y, unsigned char* world)
 {
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	00 d0       	rcall	.+0      	; 0x150a <DrawFood+0x6>
    150a:	1f 92       	push	r1
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	6a 83       	std	Y+2, r22	; 0x02
    1514:	5c 83       	std	Y+4, r21	; 0x04
    1516:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	ac 01       	movw	r20, r24
    151e:	6a 81       	ldd	r22, Y+2	; 0x02
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	10 df       	rcall	.-480    	; 0x1344 <DrawPixel>
	DrawPixel(x + 2, y, world);
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	22 e0       	ldi	r18, 0x02	; 2
    1528:	28 0f       	add	r18, r24
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	ac 01       	movw	r20, r24
    1530:	6a 81       	ldd	r22, Y+2	; 0x02
    1532:	82 2f       	mov	r24, r18
    1534:	07 df       	rcall	.-498    	; 0x1344 <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	31 e0       	ldi	r19, 0x01	; 1
    153a:	38 0f       	add	r19, r24
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	21 e0       	ldi	r18, 0x01	; 1
    1540:	28 0f       	add	r18, r24
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	ac 01       	movw	r20, r24
    1548:	63 2f       	mov	r22, r19
    154a:	82 2f       	mov	r24, r18
    154c:	fb de       	rcall	.-522    	; 0x1344 <DrawPixel>
	DrawPixel(x + 1, y - 1, world);
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	3f ef       	ldi	r19, 0xFF	; 255
    1552:	38 0f       	add	r19, r24
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	21 e0       	ldi	r18, 0x01	; 1
    1558:	28 0f       	add	r18, r24
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	9c 81       	ldd	r25, Y+4	; 0x04
    155e:	ac 01       	movw	r20, r24
    1560:	63 2f       	mov	r22, r19
    1562:	82 2f       	mov	r24, r18
    1564:	ef de       	rcall	.-546    	; 0x1344 <DrawPixel>
 }
    1566:	00 00       	nop
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	08 95       	ret

00001576 <RenderWorld>:
 

 void RenderWorld(unsigned char* world)
 {
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	00 d0       	rcall	.+0      	; 0x157c <RenderWorld+0x6>
    157c:	00 d0       	rcall	.+0      	; 0x157e <RenderWorld+0x8>
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
	for (int x = 0; x < 504; x++)
    1586:	1a 82       	std	Y+2, r1	; 0x02
    1588:	19 82       	std	Y+1, r1	; 0x01
    158a:	0e c0       	rjmp	.+28     	; 0x15a8 <RenderWorld+0x32>
	{
		sendData(world[x]);
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	2d 81       	ldd	r18, Y+5	; 0x05
    1592:	3e 81       	ldd	r19, Y+6	; 0x06
    1594:	82 0f       	add	r24, r18
    1596:	93 1f       	adc	r25, r19
    1598:	fc 01       	movw	r30, r24
    159a:	80 81       	ld	r24, Z
    159c:	a2 d9       	rcall	.-3260   	; 0x8e2 <sendData>
 }
 

 void RenderWorld(unsigned char* world)
 {
	for (int x = 0; x < 504; x++)
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	9a 83       	std	Y+2, r25	; 0x02
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	88 3f       	cpi	r24, 0xF8	; 248
    15ae:	91 40       	sbci	r25, 0x01	; 1
    15b0:	6c f3       	brlt	.-38     	; 0x158c <RenderWorld+0x16>
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
    15b2:	1c 82       	std	Y+4, r1	; 0x04
    15b4:	1b 82       	std	Y+3, r1	; 0x03
    15b6:	0d c0       	rjmp	.+26     	; 0x15d2 <RenderWorld+0x5c>
	{
		world[x] = 0x00;
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	2d 81       	ldd	r18, Y+5	; 0x05
    15be:	3e 81       	ldd	r19, Y+6	; 0x06
    15c0:	82 0f       	add	r24, r18
    15c2:	93 1f       	adc	r25, r19
    15c4:	fc 01       	movw	r30, r24
    15c6:	10 82       	st	Z, r1
	for (int x = 0; x < 504; x++)
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	9c 81       	ldd	r25, Y+4	; 0x04
    15cc:	01 96       	adiw	r24, 0x01	; 1
    15ce:	9c 83       	std	Y+4, r25	; 0x04
    15d0:	8b 83       	std	Y+3, r24	; 0x03
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	88 3f       	cpi	r24, 0xF8	; 248
    15d8:	91 40       	sbci	r25, 0x01	; 1
    15da:	74 f3       	brlt	.-36     	; 0x15b8 <RenderWorld+0x42>
	{
		world[x] = 0x00;
	}
    15dc:	00 00       	nop
    15de:	26 96       	adiw	r28, 0x06	; 6
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	08 95       	ret

000015f0 <__cmpsf2>:
    15f0:	2f d0       	rcall	.+94     	; 0x1650 <__fp_cmp>
    15f2:	08 f4       	brcc	.+2      	; 0x15f6 <__cmpsf2+0x6>
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	08 95       	ret

000015f8 <__fixunssfsi>:
    15f8:	57 d0       	rcall	.+174    	; 0x16a8 <__fp_splitA>
    15fa:	88 f0       	brcs	.+34     	; 0x161e <__fixunssfsi+0x26>
    15fc:	9f 57       	subi	r25, 0x7F	; 127
    15fe:	90 f0       	brcs	.+36     	; 0x1624 <__fixunssfsi+0x2c>
    1600:	b9 2f       	mov	r27, r25
    1602:	99 27       	eor	r25, r25
    1604:	b7 51       	subi	r27, 0x17	; 23
    1606:	a0 f0       	brcs	.+40     	; 0x1630 <__fixunssfsi+0x38>
    1608:	d1 f0       	breq	.+52     	; 0x163e <__fixunssfsi+0x46>
    160a:	66 0f       	add	r22, r22
    160c:	77 1f       	adc	r23, r23
    160e:	88 1f       	adc	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	1a f0       	brmi	.+6      	; 0x161a <__fixunssfsi+0x22>
    1614:	ba 95       	dec	r27
    1616:	c9 f7       	brne	.-14     	; 0x160a <__fixunssfsi+0x12>
    1618:	12 c0       	rjmp	.+36     	; 0x163e <__fixunssfsi+0x46>
    161a:	b1 30       	cpi	r27, 0x01	; 1
    161c:	81 f0       	breq	.+32     	; 0x163e <__fixunssfsi+0x46>
    161e:	5e d0       	rcall	.+188    	; 0x16dc <__fp_zero>
    1620:	b1 e0       	ldi	r27, 0x01	; 1
    1622:	08 95       	ret
    1624:	5b c0       	rjmp	.+182    	; 0x16dc <__fp_zero>
    1626:	67 2f       	mov	r22, r23
    1628:	78 2f       	mov	r23, r24
    162a:	88 27       	eor	r24, r24
    162c:	b8 5f       	subi	r27, 0xF8	; 248
    162e:	39 f0       	breq	.+14     	; 0x163e <__fixunssfsi+0x46>
    1630:	b9 3f       	cpi	r27, 0xF9	; 249
    1632:	cc f3       	brlt	.-14     	; 0x1626 <__fixunssfsi+0x2e>
    1634:	86 95       	lsr	r24
    1636:	77 95       	ror	r23
    1638:	67 95       	ror	r22
    163a:	b3 95       	inc	r27
    163c:	d9 f7       	brne	.-10     	; 0x1634 <__fixunssfsi+0x3c>
    163e:	3e f4       	brtc	.+14     	; 0x164e <__fixunssfsi+0x56>
    1640:	90 95       	com	r25
    1642:	80 95       	com	r24
    1644:	70 95       	com	r23
    1646:	61 95       	neg	r22
    1648:	7f 4f       	sbci	r23, 0xFF	; 255
    164a:	8f 4f       	sbci	r24, 0xFF	; 255
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	08 95       	ret

00001650 <__fp_cmp>:
    1650:	99 0f       	add	r25, r25
    1652:	00 08       	sbc	r0, r0
    1654:	55 0f       	add	r21, r21
    1656:	aa 0b       	sbc	r26, r26
    1658:	e0 e8       	ldi	r30, 0x80	; 128
    165a:	fe ef       	ldi	r31, 0xFE	; 254
    165c:	16 16       	cp	r1, r22
    165e:	17 06       	cpc	r1, r23
    1660:	e8 07       	cpc	r30, r24
    1662:	f9 07       	cpc	r31, r25
    1664:	c0 f0       	brcs	.+48     	; 0x1696 <__fp_cmp+0x46>
    1666:	12 16       	cp	r1, r18
    1668:	13 06       	cpc	r1, r19
    166a:	e4 07       	cpc	r30, r20
    166c:	f5 07       	cpc	r31, r21
    166e:	98 f0       	brcs	.+38     	; 0x1696 <__fp_cmp+0x46>
    1670:	62 1b       	sub	r22, r18
    1672:	73 0b       	sbc	r23, r19
    1674:	84 0b       	sbc	r24, r20
    1676:	95 0b       	sbc	r25, r21
    1678:	39 f4       	brne	.+14     	; 0x1688 <__fp_cmp+0x38>
    167a:	0a 26       	eor	r0, r26
    167c:	61 f0       	breq	.+24     	; 0x1696 <__fp_cmp+0x46>
    167e:	23 2b       	or	r18, r19
    1680:	24 2b       	or	r18, r20
    1682:	25 2b       	or	r18, r21
    1684:	21 f4       	brne	.+8      	; 0x168e <__fp_cmp+0x3e>
    1686:	08 95       	ret
    1688:	0a 26       	eor	r0, r26
    168a:	09 f4       	brne	.+2      	; 0x168e <__fp_cmp+0x3e>
    168c:	a1 40       	sbci	r26, 0x01	; 1
    168e:	a6 95       	lsr	r26
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	81 1d       	adc	r24, r1
    1694:	81 1d       	adc	r24, r1
    1696:	08 95       	ret

00001698 <__fp_split3>:
    1698:	57 fd       	sbrc	r21, 7
    169a:	90 58       	subi	r25, 0x80	; 128
    169c:	44 0f       	add	r20, r20
    169e:	55 1f       	adc	r21, r21
    16a0:	59 f0       	breq	.+22     	; 0x16b8 <__fp_splitA+0x10>
    16a2:	5f 3f       	cpi	r21, 0xFF	; 255
    16a4:	71 f0       	breq	.+28     	; 0x16c2 <__fp_splitA+0x1a>
    16a6:	47 95       	ror	r20

000016a8 <__fp_splitA>:
    16a8:	88 0f       	add	r24, r24
    16aa:	97 fb       	bst	r25, 7
    16ac:	99 1f       	adc	r25, r25
    16ae:	61 f0       	breq	.+24     	; 0x16c8 <__fp_splitA+0x20>
    16b0:	9f 3f       	cpi	r25, 0xFF	; 255
    16b2:	79 f0       	breq	.+30     	; 0x16d2 <__fp_splitA+0x2a>
    16b4:	87 95       	ror	r24
    16b6:	08 95       	ret
    16b8:	12 16       	cp	r1, r18
    16ba:	13 06       	cpc	r1, r19
    16bc:	14 06       	cpc	r1, r20
    16be:	55 1f       	adc	r21, r21
    16c0:	f2 cf       	rjmp	.-28     	; 0x16a6 <__fp_split3+0xe>
    16c2:	46 95       	lsr	r20
    16c4:	f1 df       	rcall	.-30     	; 0x16a8 <__fp_splitA>
    16c6:	08 c0       	rjmp	.+16     	; 0x16d8 <__fp_splitA+0x30>
    16c8:	16 16       	cp	r1, r22
    16ca:	17 06       	cpc	r1, r23
    16cc:	18 06       	cpc	r1, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	f1 cf       	rjmp	.-30     	; 0x16b4 <__fp_splitA+0xc>
    16d2:	86 95       	lsr	r24
    16d4:	71 05       	cpc	r23, r1
    16d6:	61 05       	cpc	r22, r1
    16d8:	08 94       	sec
    16da:	08 95       	ret

000016dc <__fp_zero>:
    16dc:	e8 94       	clt

000016de <__fp_szero>:
    16de:	bb 27       	eor	r27, r27
    16e0:	66 27       	eor	r22, r22
    16e2:	77 27       	eor	r23, r23
    16e4:	cb 01       	movw	r24, r22
    16e6:	97 f9       	bld	r25, 7
    16e8:	08 95       	ret

000016ea <__gesf2>:
    16ea:	b2 df       	rcall	.-156    	; 0x1650 <__fp_cmp>
    16ec:	08 f4       	brcc	.+2      	; 0x16f0 <__gesf2+0x6>
    16ee:	8f ef       	ldi	r24, 0xFF	; 255
    16f0:	08 95       	ret

000016f2 <__mulsf3>:
    16f2:	0b d0       	rcall	.+22     	; 0x170a <__mulsf3x>
    16f4:	78 c0       	rjmp	.+240    	; 0x17e6 <__fp_round>
    16f6:	69 d0       	rcall	.+210    	; 0x17ca <__fp_pscA>
    16f8:	28 f0       	brcs	.+10     	; 0x1704 <__mulsf3+0x12>
    16fa:	6e d0       	rcall	.+220    	; 0x17d8 <__fp_pscB>
    16fc:	18 f0       	brcs	.+6      	; 0x1704 <__mulsf3+0x12>
    16fe:	95 23       	and	r25, r21
    1700:	09 f0       	breq	.+2      	; 0x1704 <__mulsf3+0x12>
    1702:	5a c0       	rjmp	.+180    	; 0x17b8 <__fp_inf>
    1704:	5f c0       	rjmp	.+190    	; 0x17c4 <__fp_nan>
    1706:	11 24       	eor	r1, r1
    1708:	ea cf       	rjmp	.-44     	; 0x16de <__fp_szero>

0000170a <__mulsf3x>:
    170a:	c6 df       	rcall	.-116    	; 0x1698 <__fp_split3>
    170c:	a0 f3       	brcs	.-24     	; 0x16f6 <__mulsf3+0x4>

0000170e <__mulsf3_pse>:
    170e:	95 9f       	mul	r25, r21
    1710:	d1 f3       	breq	.-12     	; 0x1706 <__mulsf3+0x14>
    1712:	95 0f       	add	r25, r21
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	55 1f       	adc	r21, r21
    1718:	62 9f       	mul	r22, r18
    171a:	f0 01       	movw	r30, r0
    171c:	72 9f       	mul	r23, r18
    171e:	bb 27       	eor	r27, r27
    1720:	f0 0d       	add	r31, r0
    1722:	b1 1d       	adc	r27, r1
    1724:	63 9f       	mul	r22, r19
    1726:	aa 27       	eor	r26, r26
    1728:	f0 0d       	add	r31, r0
    172a:	b1 1d       	adc	r27, r1
    172c:	aa 1f       	adc	r26, r26
    172e:	64 9f       	mul	r22, r20
    1730:	66 27       	eor	r22, r22
    1732:	b0 0d       	add	r27, r0
    1734:	a1 1d       	adc	r26, r1
    1736:	66 1f       	adc	r22, r22
    1738:	82 9f       	mul	r24, r18
    173a:	22 27       	eor	r18, r18
    173c:	b0 0d       	add	r27, r0
    173e:	a1 1d       	adc	r26, r1
    1740:	62 1f       	adc	r22, r18
    1742:	73 9f       	mul	r23, r19
    1744:	b0 0d       	add	r27, r0
    1746:	a1 1d       	adc	r26, r1
    1748:	62 1f       	adc	r22, r18
    174a:	83 9f       	mul	r24, r19
    174c:	a0 0d       	add	r26, r0
    174e:	61 1d       	adc	r22, r1
    1750:	22 1f       	adc	r18, r18
    1752:	74 9f       	mul	r23, r20
    1754:	33 27       	eor	r19, r19
    1756:	a0 0d       	add	r26, r0
    1758:	61 1d       	adc	r22, r1
    175a:	23 1f       	adc	r18, r19
    175c:	84 9f       	mul	r24, r20
    175e:	60 0d       	add	r22, r0
    1760:	21 1d       	adc	r18, r1
    1762:	82 2f       	mov	r24, r18
    1764:	76 2f       	mov	r23, r22
    1766:	6a 2f       	mov	r22, r26
    1768:	11 24       	eor	r1, r1
    176a:	9f 57       	subi	r25, 0x7F	; 127
    176c:	50 40       	sbci	r21, 0x00	; 0
    176e:	8a f0       	brmi	.+34     	; 0x1792 <__mulsf3_pse+0x84>
    1770:	e1 f0       	breq	.+56     	; 0x17aa <__mulsf3_pse+0x9c>
    1772:	88 23       	and	r24, r24
    1774:	4a f0       	brmi	.+18     	; 0x1788 <__mulsf3_pse+0x7a>
    1776:	ee 0f       	add	r30, r30
    1778:	ff 1f       	adc	r31, r31
    177a:	bb 1f       	adc	r27, r27
    177c:	66 1f       	adc	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	88 1f       	adc	r24, r24
    1782:	91 50       	subi	r25, 0x01	; 1
    1784:	50 40       	sbci	r21, 0x00	; 0
    1786:	a9 f7       	brne	.-22     	; 0x1772 <__mulsf3_pse+0x64>
    1788:	9e 3f       	cpi	r25, 0xFE	; 254
    178a:	51 05       	cpc	r21, r1
    178c:	70 f0       	brcs	.+28     	; 0x17aa <__mulsf3_pse+0x9c>
    178e:	14 c0       	rjmp	.+40     	; 0x17b8 <__fp_inf>
    1790:	a6 cf       	rjmp	.-180    	; 0x16de <__fp_szero>
    1792:	5f 3f       	cpi	r21, 0xFF	; 255
    1794:	ec f3       	brlt	.-6      	; 0x1790 <__mulsf3_pse+0x82>
    1796:	98 3e       	cpi	r25, 0xE8	; 232
    1798:	dc f3       	brlt	.-10     	; 0x1790 <__mulsf3_pse+0x82>
    179a:	86 95       	lsr	r24
    179c:	77 95       	ror	r23
    179e:	67 95       	ror	r22
    17a0:	b7 95       	ror	r27
    17a2:	f7 95       	ror	r31
    17a4:	e7 95       	ror	r30
    17a6:	9f 5f       	subi	r25, 0xFF	; 255
    17a8:	c1 f7       	brne	.-16     	; 0x179a <__mulsf3_pse+0x8c>
    17aa:	fe 2b       	or	r31, r30
    17ac:	88 0f       	add	r24, r24
    17ae:	91 1d       	adc	r25, r1
    17b0:	96 95       	lsr	r25
    17b2:	87 95       	ror	r24
    17b4:	97 f9       	bld	r25, 7
    17b6:	08 95       	ret

000017b8 <__fp_inf>:
    17b8:	97 f9       	bld	r25, 7
    17ba:	9f 67       	ori	r25, 0x7F	; 127
    17bc:	80 e8       	ldi	r24, 0x80	; 128
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	08 95       	ret

000017c4 <__fp_nan>:
    17c4:	9f ef       	ldi	r25, 0xFF	; 255
    17c6:	80 ec       	ldi	r24, 0xC0	; 192
    17c8:	08 95       	ret

000017ca <__fp_pscA>:
    17ca:	00 24       	eor	r0, r0
    17cc:	0a 94       	dec	r0
    17ce:	16 16       	cp	r1, r22
    17d0:	17 06       	cpc	r1, r23
    17d2:	18 06       	cpc	r1, r24
    17d4:	09 06       	cpc	r0, r25
    17d6:	08 95       	ret

000017d8 <__fp_pscB>:
    17d8:	00 24       	eor	r0, r0
    17da:	0a 94       	dec	r0
    17dc:	12 16       	cp	r1, r18
    17de:	13 06       	cpc	r1, r19
    17e0:	14 06       	cpc	r1, r20
    17e2:	05 06       	cpc	r0, r21
    17e4:	08 95       	ret

000017e6 <__fp_round>:
    17e6:	09 2e       	mov	r0, r25
    17e8:	03 94       	inc	r0
    17ea:	00 0c       	add	r0, r0
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <__fp_round+0xc>
    17ee:	88 23       	and	r24, r24
    17f0:	52 f0       	brmi	.+20     	; 0x1806 <__fp_round+0x20>
    17f2:	bb 0f       	add	r27, r27
    17f4:	40 f4       	brcc	.+16     	; 0x1806 <__fp_round+0x20>
    17f6:	bf 2b       	or	r27, r31
    17f8:	11 f4       	brne	.+4      	; 0x17fe <__fp_round+0x18>
    17fa:	60 ff       	sbrs	r22, 0
    17fc:	04 c0       	rjmp	.+8      	; 0x1806 <__fp_round+0x20>
    17fe:	6f 5f       	subi	r22, 0xFF	; 255
    1800:	7f 4f       	sbci	r23, 0xFF	; 255
    1802:	8f 4f       	sbci	r24, 0xFF	; 255
    1804:	9f 4f       	sbci	r25, 0xFF	; 255
    1806:	08 95       	ret

00001808 <__divmodhi4>:
    1808:	97 fb       	bst	r25, 7
    180a:	07 2e       	mov	r0, r23
    180c:	16 f4       	brtc	.+4      	; 0x1812 <__divmodhi4+0xa>
    180e:	00 94       	com	r0
    1810:	06 d0       	rcall	.+12     	; 0x181e <__divmodhi4_neg1>
    1812:	77 fd       	sbrc	r23, 7
    1814:	08 d0       	rcall	.+16     	; 0x1826 <__divmodhi4_neg2>
    1816:	0b d0       	rcall	.+22     	; 0x182e <__udivmodhi4>
    1818:	07 fc       	sbrc	r0, 7
    181a:	05 d0       	rcall	.+10     	; 0x1826 <__divmodhi4_neg2>
    181c:	3e f4       	brtc	.+14     	; 0x182c <__divmodhi4_exit>

0000181e <__divmodhi4_neg1>:
    181e:	90 95       	com	r25
    1820:	81 95       	neg	r24
    1822:	9f 4f       	sbci	r25, 0xFF	; 255
    1824:	08 95       	ret

00001826 <__divmodhi4_neg2>:
    1826:	70 95       	com	r23
    1828:	61 95       	neg	r22
    182a:	7f 4f       	sbci	r23, 0xFF	; 255

0000182c <__divmodhi4_exit>:
    182c:	08 95       	ret

0000182e <__udivmodhi4>:
    182e:	aa 1b       	sub	r26, r26
    1830:	bb 1b       	sub	r27, r27
    1832:	51 e1       	ldi	r21, 0x11	; 17
    1834:	07 c0       	rjmp	.+14     	; 0x1844 <__udivmodhi4_ep>

00001836 <__udivmodhi4_loop>:
    1836:	aa 1f       	adc	r26, r26
    1838:	bb 1f       	adc	r27, r27
    183a:	a6 17       	cp	r26, r22
    183c:	b7 07       	cpc	r27, r23
    183e:	10 f0       	brcs	.+4      	; 0x1844 <__udivmodhi4_ep>
    1840:	a6 1b       	sub	r26, r22
    1842:	b7 0b       	sbc	r27, r23

00001844 <__udivmodhi4_ep>:
    1844:	88 1f       	adc	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	5a 95       	dec	r21
    184a:	a9 f7       	brne	.-22     	; 0x1836 <__udivmodhi4_loop>
    184c:	80 95       	com	r24
    184e:	90 95       	com	r25
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	08 95       	ret

00001856 <do_rand>:
    1856:	8f 92       	push	r8
    1858:	9f 92       	push	r9
    185a:	af 92       	push	r10
    185c:	bf 92       	push	r11
    185e:	cf 92       	push	r12
    1860:	df 92       	push	r13
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	ec 01       	movw	r28, r24
    186c:	68 81       	ld	r22, Y
    186e:	79 81       	ldd	r23, Y+1	; 0x01
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	9b 81       	ldd	r25, Y+3	; 0x03
    1874:	61 15       	cp	r22, r1
    1876:	71 05       	cpc	r23, r1
    1878:	81 05       	cpc	r24, r1
    187a:	91 05       	cpc	r25, r1
    187c:	21 f4       	brne	.+8      	; 0x1886 <do_rand+0x30>
    187e:	64 e2       	ldi	r22, 0x24	; 36
    1880:	79 ed       	ldi	r23, 0xD9	; 217
    1882:	8b e5       	ldi	r24, 0x5B	; 91
    1884:	97 e0       	ldi	r25, 0x07	; 7
    1886:	2d e1       	ldi	r18, 0x1D	; 29
    1888:	33 ef       	ldi	r19, 0xF3	; 243
    188a:	41 e0       	ldi	r20, 0x01	; 1
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	38 d0       	rcall	.+112    	; 0x1900 <__divmodsi4>
    1890:	49 01       	movw	r8, r18
    1892:	5a 01       	movw	r10, r20
    1894:	9b 01       	movw	r18, r22
    1896:	ac 01       	movw	r20, r24
    1898:	a7 ea       	ldi	r26, 0xA7	; 167
    189a:	b1 e4       	ldi	r27, 0x41	; 65
    189c:	4d d0       	rcall	.+154    	; 0x1938 <__muluhisi3>
    189e:	6b 01       	movw	r12, r22
    18a0:	7c 01       	movw	r14, r24
    18a2:	ac ee       	ldi	r26, 0xEC	; 236
    18a4:	b4 ef       	ldi	r27, 0xF4	; 244
    18a6:	a5 01       	movw	r20, r10
    18a8:	94 01       	movw	r18, r8
    18aa:	52 d0       	rcall	.+164    	; 0x1950 <__mulohisi3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	8c 0d       	add	r24, r12
    18b2:	9d 1d       	adc	r25, r13
    18b4:	ae 1d       	adc	r26, r14
    18b6:	bf 1d       	adc	r27, r15
    18b8:	b7 ff       	sbrs	r27, 7
    18ba:	03 c0       	rjmp	.+6      	; 0x18c2 <do_rand+0x6c>
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	a1 09       	sbc	r26, r1
    18c0:	b0 48       	sbci	r27, 0x80	; 128
    18c2:	88 83       	st	Y, r24
    18c4:	99 83       	std	Y+1, r25	; 0x01
    18c6:	aa 83       	std	Y+2, r26	; 0x02
    18c8:	bb 83       	std	Y+3, r27	; 0x03
    18ca:	9f 77       	andi	r25, 0x7F	; 127
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	ff 90       	pop	r15
    18d2:	ef 90       	pop	r14
    18d4:	df 90       	pop	r13
    18d6:	cf 90       	pop	r12
    18d8:	bf 90       	pop	r11
    18da:	af 90       	pop	r10
    18dc:	9f 90       	pop	r9
    18de:	8f 90       	pop	r8
    18e0:	08 95       	ret

000018e2 <rand_r>:
    18e2:	b9 cf       	rjmp	.-142    	; 0x1856 <do_rand>

000018e4 <rand>:
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	92 e0       	ldi	r25, 0x02	; 2
    18e8:	b6 cf       	rjmp	.-148    	; 0x1856 <do_rand>

000018ea <srand>:
    18ea:	a0 e0       	ldi	r26, 0x00	; 0
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    18f2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    18f6:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    18fa:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    18fe:	08 95       	ret

00001900 <__divmodsi4>:
    1900:	05 2e       	mov	r0, r21
    1902:	97 fb       	bst	r25, 7
    1904:	16 f4       	brtc	.+4      	; 0x190a <__divmodsi4+0xa>
    1906:	00 94       	com	r0
    1908:	0f d0       	rcall	.+30     	; 0x1928 <__negsi2>
    190a:	57 fd       	sbrc	r21, 7
    190c:	05 d0       	rcall	.+10     	; 0x1918 <__divmodsi4_neg2>
    190e:	24 d0       	rcall	.+72     	; 0x1958 <__udivmodsi4>
    1910:	07 fc       	sbrc	r0, 7
    1912:	02 d0       	rcall	.+4      	; 0x1918 <__divmodsi4_neg2>
    1914:	46 f4       	brtc	.+16     	; 0x1926 <__divmodsi4_exit>
    1916:	08 c0       	rjmp	.+16     	; 0x1928 <__negsi2>

00001918 <__divmodsi4_neg2>:
    1918:	50 95       	com	r21
    191a:	40 95       	com	r20
    191c:	30 95       	com	r19
    191e:	21 95       	neg	r18
    1920:	3f 4f       	sbci	r19, 0xFF	; 255
    1922:	4f 4f       	sbci	r20, 0xFF	; 255
    1924:	5f 4f       	sbci	r21, 0xFF	; 255

00001926 <__divmodsi4_exit>:
    1926:	08 95       	ret

00001928 <__negsi2>:
    1928:	90 95       	com	r25
    192a:	80 95       	com	r24
    192c:	70 95       	com	r23
    192e:	61 95       	neg	r22
    1930:	7f 4f       	sbci	r23, 0xFF	; 255
    1932:	8f 4f       	sbci	r24, 0xFF	; 255
    1934:	9f 4f       	sbci	r25, 0xFF	; 255
    1936:	08 95       	ret

00001938 <__muluhisi3>:
    1938:	31 d0       	rcall	.+98     	; 0x199c <__umulhisi3>
    193a:	a5 9f       	mul	r26, r21
    193c:	90 0d       	add	r25, r0
    193e:	b4 9f       	mul	r27, r20
    1940:	90 0d       	add	r25, r0
    1942:	a4 9f       	mul	r26, r20
    1944:	80 0d       	add	r24, r0
    1946:	91 1d       	adc	r25, r1
    1948:	11 24       	eor	r1, r1
    194a:	08 95       	ret

0000194c <__mulshisi3>:
    194c:	b7 ff       	sbrs	r27, 7
    194e:	f4 cf       	rjmp	.-24     	; 0x1938 <__muluhisi3>

00001950 <__mulohisi3>:
    1950:	f3 df       	rcall	.-26     	; 0x1938 <__muluhisi3>
    1952:	82 1b       	sub	r24, r18
    1954:	93 0b       	sbc	r25, r19
    1956:	08 95       	ret

00001958 <__udivmodsi4>:
    1958:	a1 e2       	ldi	r26, 0x21	; 33
    195a:	1a 2e       	mov	r1, r26
    195c:	aa 1b       	sub	r26, r26
    195e:	bb 1b       	sub	r27, r27
    1960:	fd 01       	movw	r30, r26
    1962:	0d c0       	rjmp	.+26     	; 0x197e <__udivmodsi4_ep>

00001964 <__udivmodsi4_loop>:
    1964:	aa 1f       	adc	r26, r26
    1966:	bb 1f       	adc	r27, r27
    1968:	ee 1f       	adc	r30, r30
    196a:	ff 1f       	adc	r31, r31
    196c:	a2 17       	cp	r26, r18
    196e:	b3 07       	cpc	r27, r19
    1970:	e4 07       	cpc	r30, r20
    1972:	f5 07       	cpc	r31, r21
    1974:	20 f0       	brcs	.+8      	; 0x197e <__udivmodsi4_ep>
    1976:	a2 1b       	sub	r26, r18
    1978:	b3 0b       	sbc	r27, r19
    197a:	e4 0b       	sbc	r30, r20
    197c:	f5 0b       	sbc	r31, r21

0000197e <__udivmodsi4_ep>:
    197e:	66 1f       	adc	r22, r22
    1980:	77 1f       	adc	r23, r23
    1982:	88 1f       	adc	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	1a 94       	dec	r1
    1988:	69 f7       	brne	.-38     	; 0x1964 <__udivmodsi4_loop>
    198a:	60 95       	com	r22
    198c:	70 95       	com	r23
    198e:	80 95       	com	r24
    1990:	90 95       	com	r25
    1992:	9b 01       	movw	r18, r22
    1994:	ac 01       	movw	r20, r24
    1996:	bd 01       	movw	r22, r26
    1998:	cf 01       	movw	r24, r30
    199a:	08 95       	ret

0000199c <__umulhisi3>:
    199c:	a2 9f       	mul	r26, r18
    199e:	b0 01       	movw	r22, r0
    19a0:	b3 9f       	mul	r27, r19
    19a2:	c0 01       	movw	r24, r0
    19a4:	a3 9f       	mul	r26, r19
    19a6:	70 0d       	add	r23, r0
    19a8:	81 1d       	adc	r24, r1
    19aa:	11 24       	eor	r1, r1
    19ac:	91 1d       	adc	r25, r1
    19ae:	b2 9f       	mul	r27, r18
    19b0:	70 0d       	add	r23, r0
    19b2:	81 1d       	adc	r24, r1
    19b4:	11 24       	eor	r1, r1
    19b6:	91 1d       	adc	r25, r1
    19b8:	08 95       	ret

000019ba <_exit>:
    19ba:	f8 94       	cli

000019bc <__stop_program>:
    19bc:	ff cf       	rjmp	.-2      	; 0x19bc <__stop_program>
