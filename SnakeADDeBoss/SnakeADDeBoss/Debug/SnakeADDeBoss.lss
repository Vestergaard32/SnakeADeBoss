
SnakeADDeBoss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000009c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000952  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f8  00800200  00800200  000009c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001139  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e8d  00000000  00000000  00001c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c9  00000000  00000000  00002ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00003380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066a  00000000  00000000  00003530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fb  00000000  00000000  00003b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003e95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	23 e0       	ldi	r18, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a8 3f       	cpi	r26, 0xF8	; 248
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	02 d0       	rcall	.+4      	; 0x10a <main>
 106:	23 c4       	rjmp	.+2118   	; 0x94e <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <main>:
#include <util/delay.h>

unsigned char worldRender[504];

int main(void)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	62 97       	sbiw	r28, 0x12	; 18
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
	initDisplay();
 11e:	8e d0       	rcall	.+284    	; 0x23c <initDisplay>

	for (int x = 0; x < 504; x++)
 120:	1a 82       	std	Y+2, r1	; 0x02
 122:	19 82       	std	Y+1, r1	; 0x01
 124:	0b c0       	rjmp	.+22     	; 0x13c <main+0x32>
	{
		worldRender[x] = 0x00;
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	9a 81       	ldd	r25, Y+2	; 0x02
 12a:	80 50       	subi	r24, 0x00	; 0
 12c:	9e 4f       	sbci	r25, 0xFE	; 254
 12e:	fc 01       	movw	r30, r24
 130:	10 82       	st	Z, r1

int main(void)
{
	initDisplay();

	for (int x = 0; x < 504; x++)
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	9a 83       	std	Y+2, r25	; 0x02
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	9a 81       	ldd	r25, Y+2	; 0x02
 140:	88 3f       	cpi	r24, 0xF8	; 248
 142:	91 40       	sbci	r25, 0x01	; 1
 144:	84 f3       	brlt	.-32     	; 0x126 <main+0x1c>
	{
		worldRender[x] = 0x00;
	}

	char xPos = 0;
 146:	1b 82       	std	Y+3, r1	; 0x03
	char yPos = 0;

    while (1) 
	{
		clearDisplay();
 148:	1c 82       	std	Y+4, r1	; 0x04
 14a:	74 d1       	rcall	.+744    	; 0x434 <clearDisplay>

		xPos += 1;
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	8b 83       	std	Y+3, r24	; 0x03

		DrawDot(xPos, yPos, worldRender);
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	52 e0       	ldi	r21, 0x02	; 2
 156:	6c 81       	ldd	r22, Y+4	; 0x04
 158:	8b 81       	ldd	r24, Y+3	; 0x03
 15a:	7a d2       	rcall	.+1268   	; 0x650 <DrawDot>

		RenderWorld(worldRender);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	92 e0       	ldi	r25, 0x02	; 2
 160:	ad d2       	rcall	.+1370   	; 0x6bc <RenderWorld>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	a8 e4       	ldi	r26, 0x48	; 72
 168:	b2 e4       	ldi	r27, 0x42	; 66
 16a:	8d 83       	std	Y+5, r24	; 0x05
 16c:	9e 83       	std	Y+6, r25	; 0x06
 16e:	af 83       	std	Y+7, r26	; 0x07
 170:	b8 87       	std	Y+8, r27	; 0x08
 172:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	4a e7       	ldi	r20, 0x7A	; 122
 178:	55 e4       	ldi	r21, 0x45	; 69
 17a:	6d 81       	ldd	r22, Y+5	; 0x05
 17c:	7e 81       	ldd	r23, Y+6	; 0x06
 17e:	8f 81       	ldd	r24, Y+7	; 0x07
 180:	98 85       	ldd	r25, Y+8	; 0x08
 182:	5a d3       	rcall	.+1716   	; 0x838 <__mulsf3>
 184:	dc 01       	movw	r26, r24
 186:	cb 01       	movw	r24, r22
 188:	89 87       	std	Y+9, r24	; 0x09
 18a:	9a 87       	std	Y+10, r25	; 0x0a
 18c:	ab 87       	std	Y+11, r26	; 0x0b
 18e:	bc 87       	std	Y+12, r27	; 0x0c
 190:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	40 e8       	ldi	r20, 0x80	; 128
 196:	5f e3       	ldi	r21, 0x3F	; 63
 198:	69 85       	ldd	r22, Y+9	; 0x09
 19a:	7a 85       	ldd	r23, Y+10	; 0x0a
 19c:	8b 85       	ldd	r24, Y+11	; 0x0b
 19e:	9c 85       	ldd	r25, Y+12	; 0x0c
 1a0:	ca d2       	rcall	.+1428   	; 0x736 <__cmpsf2>
 1a2:	88 23       	and	r24, r24
 1a4:	2c f4       	brge	.+10     	; 0x1b0 <main+0xa6>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	9e 87       	std	Y+14, r25	; 0x0e
 1ac:	8d 87       	std	Y+13, r24	; 0x0d
 1ae:	3b c0       	rjmp	.+118    	; 0x226 <main+0x11c>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
 1b2:	3f ef       	ldi	r19, 0xFF	; 255
 1b4:	4f e7       	ldi	r20, 0x7F	; 127
 1b6:	57 e4       	ldi	r21, 0x47	; 71
 1b8:	69 85       	ldd	r22, Y+9	; 0x09
 1ba:	7a 85       	ldd	r23, Y+10	; 0x0a
 1bc:	8b 85       	ldd	r24, Y+11	; 0x0b
 1be:	9c 85       	ldd	r25, Y+12	; 0x0c
 1c0:	37 d3       	rcall	.+1646   	; 0x830 <__gesf2>
 1c2:	18 16       	cp	r1, r24
 1c4:	3c f5       	brge	.+78     	; 0x214 <main+0x10a>
 1c6:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	40 e2       	ldi	r20, 0x20	; 32
 1cc:	51 e4       	ldi	r21, 0x41	; 65
 1ce:	6d 81       	ldd	r22, Y+5	; 0x05
 1d0:	7e 81       	ldd	r23, Y+6	; 0x06
 1d2:	8f 81       	ldd	r24, Y+7	; 0x07
 1d4:	98 85       	ldd	r25, Y+8	; 0x08
 1d6:	30 d3       	rcall	.+1632   	; 0x838 <__mulsf3>
 1d8:	dc 01       	movw	r26, r24
 1da:	cb 01       	movw	r24, r22
 1dc:	bc 01       	movw	r22, r24
 1de:	cd 01       	movw	r24, r26
 1e0:	ae d2       	rcall	.+1372   	; 0x73e <__fixunssfsi>
 1e2:	dc 01       	movw	r26, r24
 1e4:	cb 01       	movw	r24, r22
 1e6:	9e 87       	std	Y+14, r25	; 0x0e
 1e8:	8d 87       	std	Y+13, r24	; 0x0d
 1ea:	0f c0       	rjmp	.+30     	; 0x20a <main+0x100>
 1ec:	80 e9       	ldi	r24, 0x90	; 144
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	98 8b       	std	Y+16, r25	; 0x10
 1f2:	8f 87       	std	Y+15, r24	; 0x0f
 1f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1f6:	98 89       	ldd	r25, Y+16	; 0x10
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <main+0xee>
 1fc:	98 8b       	std	Y+16, r25	; 0x10
 1fe:	8f 87       	std	Y+15, r24	; 0x0f
 200:	8d 85       	ldd	r24, Y+13	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 202:	9e 85       	ldd	r25, Y+14	; 0x0e
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	9e 87       	std	Y+14, r25	; 0x0e
 208:	8d 87       	std	Y+13, r24	; 0x0d
 20a:	8d 85       	ldd	r24, Y+13	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20c:	9e 85       	ldd	r25, Y+14	; 0x0e
 20e:	89 2b       	or	r24, r25
 210:	69 f7       	brne	.-38     	; 0x1ec <main+0xe2>
 212:	13 c0       	rjmp	.+38     	; 0x23a <main+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 214:	69 85       	ldd	r22, Y+9	; 0x09
 216:	7a 85       	ldd	r23, Y+10	; 0x0a
 218:	8b 85       	ldd	r24, Y+11	; 0x0b
 21a:	9c 85       	ldd	r25, Y+12	; 0x0c
 21c:	90 d2       	rcall	.+1312   	; 0x73e <__fixunssfsi>
 21e:	dc 01       	movw	r26, r24
 220:	cb 01       	movw	r24, r22
 222:	9e 87       	std	Y+14, r25	; 0x0e
 224:	8d 87       	std	Y+13, r24	; 0x0d
 226:	8d 85       	ldd	r24, Y+13	; 0x0d
 228:	9e 85       	ldd	r25, Y+14	; 0x0e
 22a:	9a 8b       	std	Y+18, r25	; 0x12
 22c:	89 8b       	std	Y+17, r24	; 0x11
 22e:	89 89       	ldd	r24, Y+17	; 0x11
 230:	9a 89       	ldd	r25, Y+18	; 0x12
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0x128>
 236:	9a 8b       	std	Y+18, r25	; 0x12
 238:	89 8b       	std	Y+17, r24	; 0x11
 23a:	87 cf       	rjmp	.-242    	; 0x14a <main+0x40>

0000023c <initDisplay>:
#define RST_BIT 0 // PA0
#define DC_BIT 1 // PA1
#define LIGHT_BIT 2 // PA2

void initDisplay()
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
	SPI_MasterInit();
 244:	12 d1       	rcall	.+548    	; 0x46a <SPI_MasterInit>
	
	// Set port to output
	DDRA = 0xFF;
 246:	81 e2       	ldi	r24, 0x21	; 33
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	fc 01       	movw	r30, r24
 24e:	20 83       	st	Z, r18
	
	// Set bits to high (active low)
	PORTA |= (1 << RST_BIT);
 250:	82 e2       	ldi	r24, 0x22	; 34
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	22 e2       	ldi	r18, 0x22	; 34
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	f9 01       	movw	r30, r18
 25a:	20 81       	ld	r18, Z
 25c:	21 60       	ori	r18, 0x01	; 1
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
	PORTA |= (1 << DC_BIT);
 262:	82 e2       	ldi	r24, 0x22	; 34
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	22 e2       	ldi	r18, 0x22	; 34
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	f9 01       	movw	r30, r18
 26c:	20 81       	ld	r18, Z
 26e:	22 60       	ori	r18, 0x02	; 2
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18

	// Turn on light
	PORTA &= ~(1 << LIGHT_BIT);
 274:	82 e2       	ldi	r24, 0x22	; 34
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	22 e2       	ldi	r18, 0x22	; 34
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	f9 01       	movw	r30, r18
 27e:	20 81       	ld	r18, Z
 280:	2b 7f       	andi	r18, 0xFB	; 251
 282:	fc 01       	movw	r30, r24
	
	// Required display reset
	// This has to be done before doing
	// Anything else with the display
	resetDisplay();
 284:	20 83       	st	Z, r18
	
	// Use extended instruction set
	sendIntruction(0x21);
 286:	0f d0       	rcall	.+30     	; 0x2a6 <resetDisplay>
 288:	81 e2       	ldi	r24, 0x21	; 33

	// Here we control operation voltage of the LCD
	// We set it to 6V (the minimum allowed voltage range)
	// If you do not set a VOP value, the internal voltage generator
	// Will be switched off, and thus the display won't function.
	sendIntruction(0xC0);
 28a:	9f d0       	rcall	.+318    	; 0x3ca <sendIntruction>
 28c:	80 ec       	ldi	r24, 0xC0	; 192

	// We set the bias voltage levels
	// The bias value is taken after the
	// optimum bias value described in official
	// data sheet.
	sendIntruction(0x13);
 28e:	9d d0       	rcall	.+314    	; 0x3ca <sendIntruction>
 290:	83 e1       	ldi	r24, 0x13	; 19

	// Use basic instruction set
	sendIntruction(0x20);
 292:	9b d0       	rcall	.+310    	; 0x3ca <sendIntruction>
 294:	80 e2       	ldi	r24, 0x20	; 32
 296:	99 d0       	rcall	.+306    	; 0x3ca <sendIntruction>

	// Set display mode normal
	sendIntruction(0b00001100);
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	97 d0       	rcall	.+302    	; 0x3ca <sendIntruction>
 29c:	cb d0       	rcall	.+406    	; 0x434 <clearDisplay>
	

	// Clear the display to make sure
	// No pixels are alive on startup
	clearDisplay();
 29e:	00 00       	nop
 2a0:	df 91       	pop	r29
}
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <resetDisplay>:
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29


void resetDisplay()
{
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	2e 97       	sbiw	r28, 0x0e	; 14
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	f8 94       	cli
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	cd bf       	out	0x3d, r28	; 61
	// Set RES low
	PORTA &= ~(1 << RST_BIT);
 2ba:	82 e2       	ldi	r24, 0x22	; 34
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	22 e2       	ldi	r18, 0x22	; 34
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	f9 01       	movw	r30, r18
 2c4:	20 81       	ld	r18, Z
 2c6:	2e 7f       	andi	r18, 0xFE	; 254
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	a8 ec       	ldi	r26, 0xC8	; 200
 2d2:	b2 e4       	ldi	r27, 0x42	; 66
 2d4:	89 83       	std	Y+1, r24	; 0x01
 2d6:	9a 83       	std	Y+2, r25	; 0x02
 2d8:	ab 83       	std	Y+3, r26	; 0x03
 2da:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	4a e7       	ldi	r20, 0x7A	; 122
 2e2:	55 e4       	ldi	r21, 0x45	; 69
 2e4:	69 81       	ldd	r22, Y+1	; 0x01
 2e6:	7a 81       	ldd	r23, Y+2	; 0x02
 2e8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ea:	9c 81       	ldd	r25, Y+4	; 0x04
 2ec:	a5 d2       	rcall	.+1354   	; 0x838 <__mulsf3>
 2ee:	dc 01       	movw	r26, r24
 2f0:	cb 01       	movw	r24, r22
 2f2:	8d 83       	std	Y+5, r24	; 0x05
 2f4:	9e 83       	std	Y+6, r25	; 0x06
 2f6:	af 83       	std	Y+7, r26	; 0x07
 2f8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	40 e8       	ldi	r20, 0x80	; 128
 300:	5f e3       	ldi	r21, 0x3F	; 63
 302:	6d 81       	ldd	r22, Y+5	; 0x05
 304:	7e 81       	ldd	r23, Y+6	; 0x06
 306:	8f 81       	ldd	r24, Y+7	; 0x07
 308:	98 85       	ldd	r25, Y+8	; 0x08
 30a:	15 d2       	rcall	.+1066   	; 0x736 <__cmpsf2>
 30c:	88 23       	and	r24, r24
 30e:	2c f4       	brge	.+10     	; 0x31a <resetDisplay+0x74>
		__ticks = 1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	9a 87       	std	Y+10, r25	; 0x0a
 316:	89 87       	std	Y+9, r24	; 0x09
 318:	3b c0       	rjmp	.+118    	; 0x390 <resetDisplay+0xea>
	else if (__tmp > 65535)
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	3f ef       	ldi	r19, 0xFF	; 255
 31e:	4f e7       	ldi	r20, 0x7F	; 127
 320:	57 e4       	ldi	r21, 0x47	; 71
 322:	6d 81       	ldd	r22, Y+5	; 0x05
 324:	7e 81       	ldd	r23, Y+6	; 0x06
 326:	8f 81       	ldd	r24, Y+7	; 0x07
 328:	98 85       	ldd	r25, Y+8	; 0x08
 32a:	82 d2       	rcall	.+1284   	; 0x830 <__gesf2>
 32c:	18 16       	cp	r1, r24
 32e:	3c f5       	brge	.+78     	; 0x37e <resetDisplay+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	40 e2       	ldi	r20, 0x20	; 32
 336:	51 e4       	ldi	r21, 0x41	; 65
 338:	69 81       	ldd	r22, Y+1	; 0x01
 33a:	7a 81       	ldd	r23, Y+2	; 0x02
 33c:	8b 81       	ldd	r24, Y+3	; 0x03
 33e:	9c 81       	ldd	r25, Y+4	; 0x04
 340:	7b d2       	rcall	.+1270   	; 0x838 <__mulsf3>
 342:	dc 01       	movw	r26, r24
 344:	cb 01       	movw	r24, r22
 346:	bc 01       	movw	r22, r24
 348:	cd 01       	movw	r24, r26
 34a:	f9 d1       	rcall	.+1010   	; 0x73e <__fixunssfsi>
 34c:	dc 01       	movw	r26, r24
 34e:	cb 01       	movw	r24, r22
 350:	9a 87       	std	Y+10, r25	; 0x0a
 352:	89 87       	std	Y+9, r24	; 0x09
 354:	0f c0       	rjmp	.+30     	; 0x374 <resetDisplay+0xce>
 356:	80 e9       	ldi	r24, 0x90	; 144
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	9c 87       	std	Y+12, r25	; 0x0c
 35c:	8b 87       	std	Y+11, r24	; 0x0b
 35e:	8b 85       	ldd	r24, Y+11	; 0x0b
 360:	9c 85       	ldd	r25, Y+12	; 0x0c
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <resetDisplay+0xbc>
 366:	9c 87       	std	Y+12, r25	; 0x0c
 368:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 36a:	89 85       	ldd	r24, Y+9	; 0x09
 36c:	9a 85       	ldd	r25, Y+10	; 0x0a
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	9a 87       	std	Y+10, r25	; 0x0a
 372:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 374:	89 85       	ldd	r24, Y+9	; 0x09
 376:	9a 85       	ldd	r25, Y+10	; 0x0a
 378:	89 2b       	or	r24, r25
 37a:	69 f7       	brne	.-38     	; 0x356 <resetDisplay+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 37c:	13 c0       	rjmp	.+38     	; 0x3a4 <resetDisplay+0xfe>
 37e:	6d 81       	ldd	r22, Y+5	; 0x05
 380:	7e 81       	ldd	r23, Y+6	; 0x06
 382:	8f 81       	ldd	r24, Y+7	; 0x07
 384:	98 85       	ldd	r25, Y+8	; 0x08
 386:	db d1       	rcall	.+950    	; 0x73e <__fixunssfsi>
 388:	dc 01       	movw	r26, r24
 38a:	cb 01       	movw	r24, r22
 38c:	9a 87       	std	Y+10, r25	; 0x0a
 38e:	89 87       	std	Y+9, r24	; 0x09
 390:	89 85       	ldd	r24, Y+9	; 0x09
 392:	9a 85       	ldd	r25, Y+10	; 0x0a
 394:	9e 87       	std	Y+14, r25	; 0x0e
 396:	8d 87       	std	Y+13, r24	; 0x0d
 398:	8d 85       	ldd	r24, Y+13	; 0x0d
 39a:	9e 85       	ldd	r25, Y+14	; 0x0e
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <resetDisplay+0xf6>
 3a0:	9e 87       	std	Y+14, r25	; 0x0e
 3a2:	8d 87       	std	Y+13, r24	; 0x0d
		
	// Delay of min 100 ns (0,1ms) p.20
	_delay_ms(100);
		
	// Set RES high
	PORTA |= (1 << RST_BIT);
 3a4:	82 e2       	ldi	r24, 0x22	; 34
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	22 e2       	ldi	r18, 0x22	; 34
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	f9 01       	movw	r30, r18
 3ae:	20 81       	ld	r18, Z
 3b0:	21 60       	ori	r18, 0x01	; 1
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18
}
 3b6:	00 00       	nop
 3b8:	2e 96       	adiw	r28, 0x0e	; 14
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	f8 94       	cli
 3be:	de bf       	out	0x3e, r29	; 62
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	cd bf       	out	0x3d, r28	; 61
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <sendIntruction>:

void sendIntruction(unsigned char cmd)
{
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	1f 92       	push	r1
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62
 3d4:	89 83       	std	Y+1, r24	; 0x01
	// Set DC low, Command
	PORTA &= ~(1 << DC_BIT);
 3d6:	82 e2       	ldi	r24, 0x22	; 34
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	22 e2       	ldi	r18, 0x22	; 34
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	f9 01       	movw	r30, r18
 3e0:	20 81       	ld	r18, Z
 3e2:	2d 7f       	andi	r18, 0xFD	; 253
 3e4:	fc 01       	movw	r30, r24
 3e6:	20 83       	st	Z, r18
	SPI_MasterTransmit(cmd);
 3e8:	89 81       	ldd	r24, Y+1	; 0x01
 3ea:	51 d0       	rcall	.+162    	; 0x48e <SPI_MasterTransmit>
	PORTA |= 1 << DC_BIT;
 3ec:	82 e2       	ldi	r24, 0x22	; 34
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	22 e2       	ldi	r18, 0x22	; 34
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	f9 01       	movw	r30, r18
 3f6:	20 81       	ld	r18, Z
 3f8:	22 60       	ori	r18, 0x02	; 2
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 83       	st	Z, r18
}
 3fe:	00 00       	nop
 400:	0f 90       	pop	r0
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	08 95       	ret

00000408 <sendData>:

void sendData(unsigned char data)
{	
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	1f 92       	push	r1
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= 1 << DC_BIT;
 414:	82 e2       	ldi	r24, 0x22	; 34
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	22 e2       	ldi	r18, 0x22	; 34
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	f9 01       	movw	r30, r18
 41e:	20 81       	ld	r18, Z
 420:	22 60       	ori	r18, 0x02	; 2
 422:	fc 01       	movw	r30, r24
 424:	20 83       	st	Z, r18
	SPI_MasterTransmit(data);
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	32 d0       	rcall	.+100    	; 0x48e <SPI_MasterTransmit>
}
 42a:	00 00       	nop
 42c:	0f 90       	pop	r0
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <clearDisplay>:

void clearDisplay()
{
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	1f 92       	push	r1
 43a:	1f 92       	push	r1
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
	for (int k=0; k<=503; k++)
 440:	1a 82       	std	Y+2, r1	; 0x02
 442:	19 82       	std	Y+1, r1	; 0x01
 444:	07 c0       	rjmp	.+14     	; 0x454 <clearDisplay+0x20>
	{
		sendData(0x00);
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	df df       	rcall	.-66     	; 0x408 <sendData>
	SPI_MasterTransmit(data);
}

void clearDisplay()
{
	for (int k=0; k<=503; k++)
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	9a 81       	ldd	r25, Y+2	; 0x02
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	9a 83       	std	Y+2, r25	; 0x02
 452:	89 83       	std	Y+1, r24	; 0x01
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	9a 81       	ldd	r25, Y+2	; 0x02
 458:	88 3f       	cpi	r24, 0xF8	; 248
 45a:	91 40       	sbci	r25, 0x01	; 1
 45c:	a4 f3       	brlt	.-24     	; 0x446 <clearDisplay+0x12>
	{
		sendData(0x00);
	}
 45e:	00 00       	nop
 460:	0f 90       	pop	r0
 462:	0f 90       	pop	r0
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <SPI_MasterInit>:
#define DD_MOSI 2
#define DD_MISO 3
#define DD_DORD 5

void SPI_MasterInit(void)
{	
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS); //MOSI,SS & SCK output,others input
 472:	84 e2       	ldi	r24, 0x24	; 36
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	27 e0       	ldi	r18, 0x07	; 7
 478:	fc 01       	movw	r30, r24
 47a:	20 83       	st	Z, r18
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);  		   //SPI, Master, clock = fck/16
 47c:	8c e4       	ldi	r24, 0x4C	; 76
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	21 e5       	ldi	r18, 0x51	; 81
 482:	fc 01       	movw	r30, r24
 484:	20 83       	st	Z, r18
}
 486:	00 00       	nop
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	00 d0       	rcall	.+0      	; 0x494 <SPI_MasterTransmit+0x6>
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
 498:	8b 83       	std	Y+3, r24	; 0x03
	PORTB &= ~(1 << DD_SS);
 49a:	85 e2       	ldi	r24, 0x25	; 37
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	25 e2       	ldi	r18, 0x25	; 37
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	f9 01       	movw	r30, r18
 4a4:	20 81       	ld	r18, Z
 4a6:	2e 7f       	andi	r18, 0xFE	; 254
 4a8:	fc 01       	movw	r30, r24
 4aa:	20 83       	st	Z, r18

	// Start transmission
	SPDR = cData;			
 4ac:	8e e4       	ldi	r24, 0x4E	; 78
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	2b 81       	ldd	r18, Y+3	; 0x03
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 83       	st	Z, r18
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
 4b6:	1a 82       	std	Y+2, r1	; 0x02
 4b8:	19 82       	std	Y+1, r1	; 0x01
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <SPI_MasterTransmit+0x38>
	{
		k++;
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	9a 81       	ldd	r25, Y+2	; 0x02
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	9a 83       	std	Y+2, r25	; 0x02
 4c4:	89 83       	std	Y+1, r24	; 0x01
	// Start transmission
	SPDR = cData;			
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
 4c6:	8d e4       	ldi	r24, 0x4D	; 77
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	fc 01       	movw	r30, r24
 4cc:	80 81       	ld	r24, Z
 4ce:	88 23       	and	r24, r24
 4d0:	ac f7       	brge	.-22     	; 0x4bc <SPI_MasterTransmit+0x2e>
	{
		k++;
	}			
	
	cData = SPDR;
 4d2:	8e e4       	ldi	r24, 0x4E	; 78
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	fc 01       	movw	r30, r24
 4d8:	80 81       	ld	r24, Z
 4da:	8b 83       	std	Y+3, r24	; 0x03

	PORTB|= 1 << DD_SS;
 4dc:	85 e2       	ldi	r24, 0x25	; 37
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	25 e2       	ldi	r18, 0x25	; 37
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	f9 01       	movw	r30, r18
 4e6:	20 81       	ld	r18, Z
 4e8:	21 60       	ori	r18, 0x01	; 1
 4ea:	fc 01       	movw	r30, r24
 4ec:	20 83       	st	Z, r18
}
 4ee:	00 00       	nop
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	0f 90       	pop	r0
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	08 95       	ret

000004fc <DrawPixel>:
 */ 
#include "WorldDriver.h"
#include "Nokia5110Driver.h"

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	28 97       	sbiw	r28, 0x08	; 8
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	f8 94       	cli
 50a:	de bf       	out	0x3e, r29	; 62
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	cd bf       	out	0x3d, r28	; 61
 510:	8d 83       	std	Y+5, r24	; 0x05
 512:	6e 83       	std	Y+6, r22	; 0x06
 514:	58 87       	std	Y+8, r21	; 0x08
 516:	4f 83       	std	Y+7, r20	; 0x07
	if (x < 0 || x > 83)
 518:	8d 81       	ldd	r24, Y+5	; 0x05
 51a:	84 35       	cpi	r24, 0x54	; 84
 51c:	08 f0       	brcs	.+2      	; 0x520 <DrawPixel+0x24>
 51e:	8c c0       	rjmp	.+280    	; 0x638 <DrawPixel+0x13c>
		return;

	if (y < 0 || y > 47)
 520:	8e 81       	ldd	r24, Y+6	; 0x06
 522:	80 33       	cpi	r24, 0x30	; 48
 524:	08 f0       	brcs	.+2      	; 0x528 <DrawPixel+0x2c>
 526:	8a c0       	rjmp	.+276    	; 0x63c <DrawPixel+0x140>
		return;

	unsigned int baselineOffset = 0;
 528:	1a 82       	std	Y+2, r1	; 0x02
 52a:	19 82       	std	Y+1, r1	; 0x01
	unsigned int verticalBitOffset = 0;
 52c:	1c 82       	std	Y+4, r1	; 0x04
 52e:	1b 82       	std	Y+3, r1	; 0x03

	if (y >= 0 && y <= 7)
 530:	8e 81       	ldd	r24, Y+6	; 0x06
 532:	88 30       	cpi	r24, 0x08	; 8
 534:	40 f4       	brcc	.+16     	; 0x546 <DrawPixel+0x4a>
	{
		baselineOffset = 0;
 536:	1a 82       	std	Y+2, r1	; 0x02
 538:	19 82       	std	Y+1, r1	; 0x01
		verticalBitOffset = y;
 53a:	8e 81       	ldd	r24, Y+6	; 0x06
 53c:	88 2f       	mov	r24, r24
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	9c 83       	std	Y+4, r25	; 0x04
 542:	8b 83       	std	Y+3, r24	; 0x03
 544:	54 c0       	rjmp	.+168    	; 0x5ee <DrawPixel+0xf2>
	} 
	else if (y >= 8 && y <= 15)
 546:	8e 81       	ldd	r24, Y+6	; 0x06
 548:	88 30       	cpi	r24, 0x08	; 8
 54a:	70 f0       	brcs	.+28     	; 0x568 <DrawPixel+0x6c>
 54c:	8e 81       	ldd	r24, Y+6	; 0x06
 54e:	80 31       	cpi	r24, 0x10	; 16
 550:	58 f4       	brcc	.+22     	; 0x568 <DrawPixel+0x6c>
	{
		baselineOffset = 84;
 552:	84 e5       	ldi	r24, 0x54	; 84
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	9a 83       	std	Y+2, r25	; 0x02
 558:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - 8;
 55a:	8e 81       	ldd	r24, Y+6	; 0x06
 55c:	88 2f       	mov	r24, r24
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	08 97       	sbiw	r24, 0x08	; 8
 562:	9c 83       	std	Y+4, r25	; 0x04
 564:	8b 83       	std	Y+3, r24	; 0x03
 566:	43 c0       	rjmp	.+134    	; 0x5ee <DrawPixel+0xf2>
	} 
	else if (y >= 16 && y <= 23)
 568:	8e 81       	ldd	r24, Y+6	; 0x06
 56a:	80 31       	cpi	r24, 0x10	; 16
 56c:	70 f0       	brcs	.+28     	; 0x58a <DrawPixel+0x8e>
 56e:	8e 81       	ldd	r24, Y+6	; 0x06
 570:	88 31       	cpi	r24, 0x18	; 24
 572:	58 f4       	brcc	.+22     	; 0x58a <DrawPixel+0x8e>
	{
		baselineOffset = 84 * 2;
 574:	88 ea       	ldi	r24, 0xA8	; 168
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	9a 83       	std	Y+2, r25	; 0x02
 57a:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 2);
 57c:	8e 81       	ldd	r24, Y+6	; 0x06
 57e:	88 2f       	mov	r24, r24
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	40 97       	sbiw	r24, 0x10	; 16
 584:	9c 83       	std	Y+4, r25	; 0x04
 586:	8b 83       	std	Y+3, r24	; 0x03
 588:	32 c0       	rjmp	.+100    	; 0x5ee <DrawPixel+0xf2>
	} 
	else if (y >= 24 && y <= 31)
 58a:	8e 81       	ldd	r24, Y+6	; 0x06
 58c:	88 31       	cpi	r24, 0x18	; 24
 58e:	70 f0       	brcs	.+28     	; 0x5ac <DrawPixel+0xb0>
 590:	8e 81       	ldd	r24, Y+6	; 0x06
 592:	80 32       	cpi	r24, 0x20	; 32
 594:	58 f4       	brcc	.+22     	; 0x5ac <DrawPixel+0xb0>
	{
		baselineOffset = 84 * 3;
 596:	8c ef       	ldi	r24, 0xFC	; 252
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	9a 83       	std	Y+2, r25	; 0x02
 59c:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 3);
 59e:	8e 81       	ldd	r24, Y+6	; 0x06
 5a0:	88 2f       	mov	r24, r24
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	48 97       	sbiw	r24, 0x18	; 24
 5a6:	9c 83       	std	Y+4, r25	; 0x04
 5a8:	8b 83       	std	Y+3, r24	; 0x03
 5aa:	21 c0       	rjmp	.+66     	; 0x5ee <DrawPixel+0xf2>
	}
	else if (y >= 32 && y <= 39)
 5ac:	8e 81       	ldd	r24, Y+6	; 0x06
 5ae:	80 32       	cpi	r24, 0x20	; 32
 5b0:	70 f0       	brcs	.+28     	; 0x5ce <DrawPixel+0xd2>
 5b2:	8e 81       	ldd	r24, Y+6	; 0x06
 5b4:	88 32       	cpi	r24, 0x28	; 40
 5b6:	58 f4       	brcc	.+22     	; 0x5ce <DrawPixel+0xd2>
	{
		baselineOffset = 84 * 4;
 5b8:	80 e5       	ldi	r24, 0x50	; 80
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	9a 83       	std	Y+2, r25	; 0x02
 5be:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 4);
 5c0:	8e 81       	ldd	r24, Y+6	; 0x06
 5c2:	88 2f       	mov	r24, r24
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	80 97       	sbiw	r24, 0x20	; 32
 5c8:	9c 83       	std	Y+4, r25	; 0x04
 5ca:	8b 83       	std	Y+3, r24	; 0x03
 5cc:	10 c0       	rjmp	.+32     	; 0x5ee <DrawPixel+0xf2>
	}
	else if (y >= 40 && y <= 47)
 5ce:	8e 81       	ldd	r24, Y+6	; 0x06
 5d0:	88 32       	cpi	r24, 0x28	; 40
 5d2:	68 f0       	brcs	.+26     	; 0x5ee <DrawPixel+0xf2>
 5d4:	8e 81       	ldd	r24, Y+6	; 0x06
 5d6:	80 33       	cpi	r24, 0x30	; 48
 5d8:	50 f4       	brcc	.+20     	; 0x5ee <DrawPixel+0xf2>
	{
		baselineOffset = 84 * 5;
 5da:	84 ea       	ldi	r24, 0xA4	; 164
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	9a 83       	std	Y+2, r25	; 0x02
 5e0:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 5);
 5e2:	8e 81       	ldd	r24, Y+6	; 0x06
 5e4:	88 2f       	mov	r24, r24
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	88 97       	sbiw	r24, 0x28	; 40
 5ea:	9c 83       	std	Y+4, r25	; 0x04
 5ec:	8b 83       	std	Y+3, r24	; 0x03
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
 5ee:	8d 81       	ldd	r24, Y+5	; 0x05
 5f0:	28 2f       	mov	r18, r24
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	9a 81       	ldd	r25, Y+2	; 0x02
 5f8:	82 0f       	add	r24, r18
 5fa:	93 1f       	adc	r25, r19
 5fc:	2f 81       	ldd	r18, Y+7	; 0x07
 5fe:	38 85       	ldd	r19, Y+8	; 0x08
 600:	82 0f       	add	r24, r18
 602:	93 1f       	adc	r25, r19
 604:	2d 81       	ldd	r18, Y+5	; 0x05
 606:	42 2f       	mov	r20, r18
 608:	50 e0       	ldi	r21, 0x00	; 0
 60a:	29 81       	ldd	r18, Y+1	; 0x01
 60c:	3a 81       	ldd	r19, Y+2	; 0x02
 60e:	24 0f       	add	r18, r20
 610:	35 1f       	adc	r19, r21
 612:	4f 81       	ldd	r20, Y+7	; 0x07
 614:	58 85       	ldd	r21, Y+8	; 0x08
 616:	24 0f       	add	r18, r20
 618:	35 1f       	adc	r19, r21
 61a:	f9 01       	movw	r30, r18
 61c:	20 81       	ld	r18, Z
 61e:	42 2f       	mov	r20, r18
 620:	21 e0       	ldi	r18, 0x01	; 1
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	0b 80       	ldd	r0, Y+3	; 0x03
 626:	02 c0       	rjmp	.+4      	; 0x62c <DrawPixel+0x130>
 628:	22 0f       	add	r18, r18
 62a:	33 1f       	adc	r19, r19
 62c:	0a 94       	dec	r0
 62e:	e2 f7       	brpl	.-8      	; 0x628 <DrawPixel+0x12c>
 630:	24 2b       	or	r18, r20
 632:	fc 01       	movw	r30, r24
 634:	20 83       	st	Z, r18
 636:	03 c0       	rjmp	.+6      	; 0x63e <DrawPixel+0x142>
#include "Nokia5110Driver.h"

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
	if (x < 0 || x > 83)
		return;
 638:	00 00       	nop
 63a:	01 c0       	rjmp	.+2      	; 0x63e <DrawPixel+0x142>

	if (y < 0 || y > 47)
		return;
 63c:	00 00       	nop
		baselineOffset = 84 * 5;
		verticalBitOffset = y - (8 * 5);
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
}
 63e:	28 96       	adiw	r28, 0x08	; 8
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	f8 94       	cli
 644:	de bf       	out	0x3e, r29	; 62
 646:	0f be       	out	0x3f, r0	; 63
 648:	cd bf       	out	0x3d, r28	; 61
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	08 95       	ret

00000650 <DrawDot>:

 void DrawDot(unsigned char x, unsigned char y, unsigned char* world)
 {
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	00 d0       	rcall	.+0      	; 0x656 <DrawDot+0x6>
 656:	1f 92       	push	r1
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
 65c:	89 83       	std	Y+1, r24	; 0x01
 65e:	6a 83       	std	Y+2, r22	; 0x02
 660:	5c 83       	std	Y+4, r21	; 0x04
 662:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	9c 81       	ldd	r25, Y+4	; 0x04
 668:	ac 01       	movw	r20, r24
 66a:	6a 81       	ldd	r22, Y+2	; 0x02
 66c:	89 81       	ldd	r24, Y+1	; 0x01
 66e:	46 df       	rcall	.-372    	; 0x4fc <DrawPixel>
	DrawPixel(x + 1, y, world);
 670:	89 81       	ldd	r24, Y+1	; 0x01
 672:	21 e0       	ldi	r18, 0x01	; 1
 674:	28 0f       	add	r18, r24
 676:	8b 81       	ldd	r24, Y+3	; 0x03
 678:	9c 81       	ldd	r25, Y+4	; 0x04
 67a:	ac 01       	movw	r20, r24
 67c:	6a 81       	ldd	r22, Y+2	; 0x02
 67e:	82 2f       	mov	r24, r18
 680:	3d df       	rcall	.-390    	; 0x4fc <DrawPixel>
	DrawPixel(x, y + 1, world);
 682:	8a 81       	ldd	r24, Y+2	; 0x02
 684:	21 e0       	ldi	r18, 0x01	; 1
 686:	28 0f       	add	r18, r24
 688:	8b 81       	ldd	r24, Y+3	; 0x03
 68a:	9c 81       	ldd	r25, Y+4	; 0x04
 68c:	ac 01       	movw	r20, r24
 68e:	62 2f       	mov	r22, r18
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	34 df       	rcall	.-408    	; 0x4fc <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
 694:	8a 81       	ldd	r24, Y+2	; 0x02
 696:	31 e0       	ldi	r19, 0x01	; 1
 698:	38 0f       	add	r19, r24
 69a:	89 81       	ldd	r24, Y+1	; 0x01
 69c:	21 e0       	ldi	r18, 0x01	; 1
 69e:	28 0f       	add	r18, r24
 6a0:	8b 81       	ldd	r24, Y+3	; 0x03
 6a2:	9c 81       	ldd	r25, Y+4	; 0x04
 6a4:	ac 01       	movw	r20, r24
 6a6:	63 2f       	mov	r22, r19
 6a8:	82 2f       	mov	r24, r18
 6aa:	28 df       	rcall	.-432    	; 0x4fc <DrawPixel>
 }
 6ac:	00 00       	nop
 6ae:	0f 90       	pop	r0
 6b0:	0f 90       	pop	r0
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	08 95       	ret

000006bc <RenderWorld>:

 void RenderWorld(unsigned char* world)
 {
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	00 d0       	rcall	.+0      	; 0x6c2 <RenderWorld+0x6>
 6c2:	00 d0       	rcall	.+0      	; 0x6c4 <RenderWorld+0x8>
 6c4:	cd b7       	in	r28, 0x3d	; 61
 6c6:	de b7       	in	r29, 0x3e	; 62
 6c8:	9e 83       	std	Y+6, r25	; 0x06
 6ca:	8d 83       	std	Y+5, r24	; 0x05
	for (int x = 0; x < 504; x++)
 6cc:	1a 82       	std	Y+2, r1	; 0x02
 6ce:	19 82       	std	Y+1, r1	; 0x01
 6d0:	0e c0       	rjmp	.+28     	; 0x6ee <RenderWorld+0x32>
	{
		sendData(world[x]);
 6d2:	89 81       	ldd	r24, Y+1	; 0x01
 6d4:	9a 81       	ldd	r25, Y+2	; 0x02
 6d6:	2d 81       	ldd	r18, Y+5	; 0x05
 6d8:	3e 81       	ldd	r19, Y+6	; 0x06
 6da:	82 0f       	add	r24, r18
 6dc:	93 1f       	adc	r25, r19
 6de:	fc 01       	movw	r30, r24
 6e0:	80 81       	ld	r24, Z
 6e2:	92 de       	rcall	.-732    	; 0x408 <sendData>
	DrawPixel(x + 1, y + 1, world);
 }

 void RenderWorld(unsigned char* world)
 {
	for (int x = 0; x < 504; x++)
 6e4:	89 81       	ldd	r24, Y+1	; 0x01
 6e6:	9a 81       	ldd	r25, Y+2	; 0x02
 6e8:	01 96       	adiw	r24, 0x01	; 1
 6ea:	9a 83       	std	Y+2, r25	; 0x02
 6ec:	89 83       	std	Y+1, r24	; 0x01
 6ee:	89 81       	ldd	r24, Y+1	; 0x01
 6f0:	9a 81       	ldd	r25, Y+2	; 0x02
 6f2:	88 3f       	cpi	r24, 0xF8	; 248
 6f4:	91 40       	sbci	r25, 0x01	; 1
 6f6:	6c f3       	brlt	.-38     	; 0x6d2 <RenderWorld+0x16>
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
 6f8:	1c 82       	std	Y+4, r1	; 0x04
 6fa:	1b 82       	std	Y+3, r1	; 0x03
 6fc:	0d c0       	rjmp	.+26     	; 0x718 <RenderWorld+0x5c>
	{
		world[x] = 0x00;
 6fe:	8b 81       	ldd	r24, Y+3	; 0x03
 700:	9c 81       	ldd	r25, Y+4	; 0x04
 702:	2d 81       	ldd	r18, Y+5	; 0x05
 704:	3e 81       	ldd	r19, Y+6	; 0x06
 706:	82 0f       	add	r24, r18
 708:	93 1f       	adc	r25, r19
 70a:	fc 01       	movw	r30, r24
 70c:	10 82       	st	Z, r1
	for (int x = 0; x < 504; x++)
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
 70e:	8b 81       	ldd	r24, Y+3	; 0x03
 710:	9c 81       	ldd	r25, Y+4	; 0x04
 712:	01 96       	adiw	r24, 0x01	; 1
 714:	9c 83       	std	Y+4, r25	; 0x04
 716:	8b 83       	std	Y+3, r24	; 0x03
 718:	8b 81       	ldd	r24, Y+3	; 0x03
 71a:	9c 81       	ldd	r25, Y+4	; 0x04
 71c:	88 3f       	cpi	r24, 0xF8	; 248
 71e:	91 40       	sbci	r25, 0x01	; 1
 720:	74 f3       	brlt	.-36     	; 0x6fe <RenderWorld+0x42>
	{
		world[x] = 0x00;
	}
 722:	00 00       	nop
 724:	26 96       	adiw	r28, 0x06	; 6
 726:	0f b6       	in	r0, 0x3f	; 63
 728:	f8 94       	cli
 72a:	de bf       	out	0x3e, r29	; 62
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	cd bf       	out	0x3d, r28	; 61
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	08 95       	ret

00000736 <__cmpsf2>:
 736:	2f d0       	rcall	.+94     	; 0x796 <__fp_cmp>
 738:	08 f4       	brcc	.+2      	; 0x73c <__cmpsf2+0x6>
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	08 95       	ret

0000073e <__fixunssfsi>:
 73e:	57 d0       	rcall	.+174    	; 0x7ee <__fp_splitA>
 740:	88 f0       	brcs	.+34     	; 0x764 <__fixunssfsi+0x26>
 742:	9f 57       	subi	r25, 0x7F	; 127
 744:	90 f0       	brcs	.+36     	; 0x76a <__fixunssfsi+0x2c>
 746:	b9 2f       	mov	r27, r25
 748:	99 27       	eor	r25, r25
 74a:	b7 51       	subi	r27, 0x17	; 23
 74c:	a0 f0       	brcs	.+40     	; 0x776 <__fixunssfsi+0x38>
 74e:	d1 f0       	breq	.+52     	; 0x784 <__fixunssfsi+0x46>
 750:	66 0f       	add	r22, r22
 752:	77 1f       	adc	r23, r23
 754:	88 1f       	adc	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	1a f0       	brmi	.+6      	; 0x760 <__fixunssfsi+0x22>
 75a:	ba 95       	dec	r27
 75c:	c9 f7       	brne	.-14     	; 0x750 <__fixunssfsi+0x12>
 75e:	12 c0       	rjmp	.+36     	; 0x784 <__fixunssfsi+0x46>
 760:	b1 30       	cpi	r27, 0x01	; 1
 762:	81 f0       	breq	.+32     	; 0x784 <__fixunssfsi+0x46>
 764:	5e d0       	rcall	.+188    	; 0x822 <__fp_zero>
 766:	b1 e0       	ldi	r27, 0x01	; 1
 768:	08 95       	ret
 76a:	5b c0       	rjmp	.+182    	; 0x822 <__fp_zero>
 76c:	67 2f       	mov	r22, r23
 76e:	78 2f       	mov	r23, r24
 770:	88 27       	eor	r24, r24
 772:	b8 5f       	subi	r27, 0xF8	; 248
 774:	39 f0       	breq	.+14     	; 0x784 <__fixunssfsi+0x46>
 776:	b9 3f       	cpi	r27, 0xF9	; 249
 778:	cc f3       	brlt	.-14     	; 0x76c <__fixunssfsi+0x2e>
 77a:	86 95       	lsr	r24
 77c:	77 95       	ror	r23
 77e:	67 95       	ror	r22
 780:	b3 95       	inc	r27
 782:	d9 f7       	brne	.-10     	; 0x77a <__fixunssfsi+0x3c>
 784:	3e f4       	brtc	.+14     	; 0x794 <__fixunssfsi+0x56>
 786:	90 95       	com	r25
 788:	80 95       	com	r24
 78a:	70 95       	com	r23
 78c:	61 95       	neg	r22
 78e:	7f 4f       	sbci	r23, 0xFF	; 255
 790:	8f 4f       	sbci	r24, 0xFF	; 255
 792:	9f 4f       	sbci	r25, 0xFF	; 255
 794:	08 95       	ret

00000796 <__fp_cmp>:
 796:	99 0f       	add	r25, r25
 798:	00 08       	sbc	r0, r0
 79a:	55 0f       	add	r21, r21
 79c:	aa 0b       	sbc	r26, r26
 79e:	e0 e8       	ldi	r30, 0x80	; 128
 7a0:	fe ef       	ldi	r31, 0xFE	; 254
 7a2:	16 16       	cp	r1, r22
 7a4:	17 06       	cpc	r1, r23
 7a6:	e8 07       	cpc	r30, r24
 7a8:	f9 07       	cpc	r31, r25
 7aa:	c0 f0       	brcs	.+48     	; 0x7dc <__fp_cmp+0x46>
 7ac:	12 16       	cp	r1, r18
 7ae:	13 06       	cpc	r1, r19
 7b0:	e4 07       	cpc	r30, r20
 7b2:	f5 07       	cpc	r31, r21
 7b4:	98 f0       	brcs	.+38     	; 0x7dc <__fp_cmp+0x46>
 7b6:	62 1b       	sub	r22, r18
 7b8:	73 0b       	sbc	r23, r19
 7ba:	84 0b       	sbc	r24, r20
 7bc:	95 0b       	sbc	r25, r21
 7be:	39 f4       	brne	.+14     	; 0x7ce <__fp_cmp+0x38>
 7c0:	0a 26       	eor	r0, r26
 7c2:	61 f0       	breq	.+24     	; 0x7dc <__fp_cmp+0x46>
 7c4:	23 2b       	or	r18, r19
 7c6:	24 2b       	or	r18, r20
 7c8:	25 2b       	or	r18, r21
 7ca:	21 f4       	brne	.+8      	; 0x7d4 <__fp_cmp+0x3e>
 7cc:	08 95       	ret
 7ce:	0a 26       	eor	r0, r26
 7d0:	09 f4       	brne	.+2      	; 0x7d4 <__fp_cmp+0x3e>
 7d2:	a1 40       	sbci	r26, 0x01	; 1
 7d4:	a6 95       	lsr	r26
 7d6:	8f ef       	ldi	r24, 0xFF	; 255
 7d8:	81 1d       	adc	r24, r1
 7da:	81 1d       	adc	r24, r1
 7dc:	08 95       	ret

000007de <__fp_split3>:
 7de:	57 fd       	sbrc	r21, 7
 7e0:	90 58       	subi	r25, 0x80	; 128
 7e2:	44 0f       	add	r20, r20
 7e4:	55 1f       	adc	r21, r21
 7e6:	59 f0       	breq	.+22     	; 0x7fe <__fp_splitA+0x10>
 7e8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ea:	71 f0       	breq	.+28     	; 0x808 <__fp_splitA+0x1a>
 7ec:	47 95       	ror	r20

000007ee <__fp_splitA>:
 7ee:	88 0f       	add	r24, r24
 7f0:	97 fb       	bst	r25, 7
 7f2:	99 1f       	adc	r25, r25
 7f4:	61 f0       	breq	.+24     	; 0x80e <__fp_splitA+0x20>
 7f6:	9f 3f       	cpi	r25, 0xFF	; 255
 7f8:	79 f0       	breq	.+30     	; 0x818 <__fp_splitA+0x2a>
 7fa:	87 95       	ror	r24
 7fc:	08 95       	ret
 7fe:	12 16       	cp	r1, r18
 800:	13 06       	cpc	r1, r19
 802:	14 06       	cpc	r1, r20
 804:	55 1f       	adc	r21, r21
 806:	f2 cf       	rjmp	.-28     	; 0x7ec <__fp_split3+0xe>
 808:	46 95       	lsr	r20
 80a:	f1 df       	rcall	.-30     	; 0x7ee <__fp_splitA>
 80c:	08 c0       	rjmp	.+16     	; 0x81e <__fp_splitA+0x30>
 80e:	16 16       	cp	r1, r22
 810:	17 06       	cpc	r1, r23
 812:	18 06       	cpc	r1, r24
 814:	99 1f       	adc	r25, r25
 816:	f1 cf       	rjmp	.-30     	; 0x7fa <__fp_splitA+0xc>
 818:	86 95       	lsr	r24
 81a:	71 05       	cpc	r23, r1
 81c:	61 05       	cpc	r22, r1
 81e:	08 94       	sec
 820:	08 95       	ret

00000822 <__fp_zero>:
 822:	e8 94       	clt

00000824 <__fp_szero>:
 824:	bb 27       	eor	r27, r27
 826:	66 27       	eor	r22, r22
 828:	77 27       	eor	r23, r23
 82a:	cb 01       	movw	r24, r22
 82c:	97 f9       	bld	r25, 7
 82e:	08 95       	ret

00000830 <__gesf2>:
 830:	b2 df       	rcall	.-156    	; 0x796 <__fp_cmp>
 832:	08 f4       	brcc	.+2      	; 0x836 <__gesf2+0x6>
 834:	8f ef       	ldi	r24, 0xFF	; 255
 836:	08 95       	ret

00000838 <__mulsf3>:
 838:	0b d0       	rcall	.+22     	; 0x850 <__mulsf3x>
 83a:	78 c0       	rjmp	.+240    	; 0x92c <__fp_round>
 83c:	69 d0       	rcall	.+210    	; 0x910 <__fp_pscA>
 83e:	28 f0       	brcs	.+10     	; 0x84a <__mulsf3+0x12>
 840:	6e d0       	rcall	.+220    	; 0x91e <__fp_pscB>
 842:	18 f0       	brcs	.+6      	; 0x84a <__mulsf3+0x12>
 844:	95 23       	and	r25, r21
 846:	09 f0       	breq	.+2      	; 0x84a <__mulsf3+0x12>
 848:	5a c0       	rjmp	.+180    	; 0x8fe <__fp_inf>
 84a:	5f c0       	rjmp	.+190    	; 0x90a <__fp_nan>
 84c:	11 24       	eor	r1, r1
 84e:	ea cf       	rjmp	.-44     	; 0x824 <__fp_szero>

00000850 <__mulsf3x>:
 850:	c6 df       	rcall	.-116    	; 0x7de <__fp_split3>
 852:	a0 f3       	brcs	.-24     	; 0x83c <__mulsf3+0x4>

00000854 <__mulsf3_pse>:
 854:	95 9f       	mul	r25, r21
 856:	d1 f3       	breq	.-12     	; 0x84c <__mulsf3+0x14>
 858:	95 0f       	add	r25, r21
 85a:	50 e0       	ldi	r21, 0x00	; 0
 85c:	55 1f       	adc	r21, r21
 85e:	62 9f       	mul	r22, r18
 860:	f0 01       	movw	r30, r0
 862:	72 9f       	mul	r23, r18
 864:	bb 27       	eor	r27, r27
 866:	f0 0d       	add	r31, r0
 868:	b1 1d       	adc	r27, r1
 86a:	63 9f       	mul	r22, r19
 86c:	aa 27       	eor	r26, r26
 86e:	f0 0d       	add	r31, r0
 870:	b1 1d       	adc	r27, r1
 872:	aa 1f       	adc	r26, r26
 874:	64 9f       	mul	r22, r20
 876:	66 27       	eor	r22, r22
 878:	b0 0d       	add	r27, r0
 87a:	a1 1d       	adc	r26, r1
 87c:	66 1f       	adc	r22, r22
 87e:	82 9f       	mul	r24, r18
 880:	22 27       	eor	r18, r18
 882:	b0 0d       	add	r27, r0
 884:	a1 1d       	adc	r26, r1
 886:	62 1f       	adc	r22, r18
 888:	73 9f       	mul	r23, r19
 88a:	b0 0d       	add	r27, r0
 88c:	a1 1d       	adc	r26, r1
 88e:	62 1f       	adc	r22, r18
 890:	83 9f       	mul	r24, r19
 892:	a0 0d       	add	r26, r0
 894:	61 1d       	adc	r22, r1
 896:	22 1f       	adc	r18, r18
 898:	74 9f       	mul	r23, r20
 89a:	33 27       	eor	r19, r19
 89c:	a0 0d       	add	r26, r0
 89e:	61 1d       	adc	r22, r1
 8a0:	23 1f       	adc	r18, r19
 8a2:	84 9f       	mul	r24, r20
 8a4:	60 0d       	add	r22, r0
 8a6:	21 1d       	adc	r18, r1
 8a8:	82 2f       	mov	r24, r18
 8aa:	76 2f       	mov	r23, r22
 8ac:	6a 2f       	mov	r22, r26
 8ae:	11 24       	eor	r1, r1
 8b0:	9f 57       	subi	r25, 0x7F	; 127
 8b2:	50 40       	sbci	r21, 0x00	; 0
 8b4:	8a f0       	brmi	.+34     	; 0x8d8 <__mulsf3_pse+0x84>
 8b6:	e1 f0       	breq	.+56     	; 0x8f0 <__mulsf3_pse+0x9c>
 8b8:	88 23       	and	r24, r24
 8ba:	4a f0       	brmi	.+18     	; 0x8ce <__mulsf3_pse+0x7a>
 8bc:	ee 0f       	add	r30, r30
 8be:	ff 1f       	adc	r31, r31
 8c0:	bb 1f       	adc	r27, r27
 8c2:	66 1f       	adc	r22, r22
 8c4:	77 1f       	adc	r23, r23
 8c6:	88 1f       	adc	r24, r24
 8c8:	91 50       	subi	r25, 0x01	; 1
 8ca:	50 40       	sbci	r21, 0x00	; 0
 8cc:	a9 f7       	brne	.-22     	; 0x8b8 <__mulsf3_pse+0x64>
 8ce:	9e 3f       	cpi	r25, 0xFE	; 254
 8d0:	51 05       	cpc	r21, r1
 8d2:	70 f0       	brcs	.+28     	; 0x8f0 <__mulsf3_pse+0x9c>
 8d4:	14 c0       	rjmp	.+40     	; 0x8fe <__fp_inf>
 8d6:	a6 cf       	rjmp	.-180    	; 0x824 <__fp_szero>
 8d8:	5f 3f       	cpi	r21, 0xFF	; 255
 8da:	ec f3       	brlt	.-6      	; 0x8d6 <__mulsf3_pse+0x82>
 8dc:	98 3e       	cpi	r25, 0xE8	; 232
 8de:	dc f3       	brlt	.-10     	; 0x8d6 <__mulsf3_pse+0x82>
 8e0:	86 95       	lsr	r24
 8e2:	77 95       	ror	r23
 8e4:	67 95       	ror	r22
 8e6:	b7 95       	ror	r27
 8e8:	f7 95       	ror	r31
 8ea:	e7 95       	ror	r30
 8ec:	9f 5f       	subi	r25, 0xFF	; 255
 8ee:	c1 f7       	brne	.-16     	; 0x8e0 <__mulsf3_pse+0x8c>
 8f0:	fe 2b       	or	r31, r30
 8f2:	88 0f       	add	r24, r24
 8f4:	91 1d       	adc	r25, r1
 8f6:	96 95       	lsr	r25
 8f8:	87 95       	ror	r24
 8fa:	97 f9       	bld	r25, 7
 8fc:	08 95       	ret

000008fe <__fp_inf>:
 8fe:	97 f9       	bld	r25, 7
 900:	9f 67       	ori	r25, 0x7F	; 127
 902:	80 e8       	ldi	r24, 0x80	; 128
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	08 95       	ret

0000090a <__fp_nan>:
 90a:	9f ef       	ldi	r25, 0xFF	; 255
 90c:	80 ec       	ldi	r24, 0xC0	; 192
 90e:	08 95       	ret

00000910 <__fp_pscA>:
 910:	00 24       	eor	r0, r0
 912:	0a 94       	dec	r0
 914:	16 16       	cp	r1, r22
 916:	17 06       	cpc	r1, r23
 918:	18 06       	cpc	r1, r24
 91a:	09 06       	cpc	r0, r25
 91c:	08 95       	ret

0000091e <__fp_pscB>:
 91e:	00 24       	eor	r0, r0
 920:	0a 94       	dec	r0
 922:	12 16       	cp	r1, r18
 924:	13 06       	cpc	r1, r19
 926:	14 06       	cpc	r1, r20
 928:	05 06       	cpc	r0, r21
 92a:	08 95       	ret

0000092c <__fp_round>:
 92c:	09 2e       	mov	r0, r25
 92e:	03 94       	inc	r0
 930:	00 0c       	add	r0, r0
 932:	11 f4       	brne	.+4      	; 0x938 <__fp_round+0xc>
 934:	88 23       	and	r24, r24
 936:	52 f0       	brmi	.+20     	; 0x94c <__fp_round+0x20>
 938:	bb 0f       	add	r27, r27
 93a:	40 f4       	brcc	.+16     	; 0x94c <__fp_round+0x20>
 93c:	bf 2b       	or	r27, r31
 93e:	11 f4       	brne	.+4      	; 0x944 <__fp_round+0x18>
 940:	60 ff       	sbrs	r22, 0
 942:	04 c0       	rjmp	.+8      	; 0x94c <__fp_round+0x20>
 944:	6f 5f       	subi	r22, 0xFF	; 255
 946:	7f 4f       	sbci	r23, 0xFF	; 255
 948:	8f 4f       	sbci	r24, 0xFF	; 255
 94a:	9f 4f       	sbci	r25, 0xFF	; 255
 94c:	08 95       	ret

0000094e <_exit>:
 94e:	f8 94       	cli

00000950 <__stop_program>:
 950:	ff cf       	rjmp	.-2      	; 0x950 <__stop_program>
