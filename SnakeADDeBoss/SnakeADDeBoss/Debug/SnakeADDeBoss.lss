
SnakeADDeBoss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000378  00800200  00001d58  00001dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005f3  00800578  00800578  00002164  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002164  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002194  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000021d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b09  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a0  00000000  00000000  00003e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001144  00000000  00000000  00005015  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  0000615c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f0  00000000  00000000  000065a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e4  00000000  00000000  00006f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000777c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	15 e0       	ldi	r17, 0x05	; 5
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e5       	ldi	r30, 0x58	; 88
      fc:	fd e1       	ldi	r31, 0x1D	; 29
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 37       	cpi	r26, 0x78	; 120
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2b e0       	ldi	r18, 0x0B	; 11
     110:	a8 e7       	ldi	r26, 0x78	; 120
     112:	b5 e0       	ldi	r27, 0x05	; 5
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 36       	cpi	r26, 0x6B	; 107
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	96 d1       	rcall	.+812    	; 0x44c <main>
     120:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <time>:
     126:	fc 01       	movw	r30, r24
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	f8 94       	cli
     12c:	60 91 67 0b 	lds	r22, 0x0B67	; 0x800b67 <__system_time>
     130:	70 91 68 0b 	lds	r23, 0x0B68	; 0x800b68 <__system_time+0x1>
     134:	80 91 69 0b 	lds	r24, 0x0B69	; 0x800b69 <__system_time+0x2>
     138:	90 91 6a 0b 	lds	r25, 0x0B6A	; 0x800b6a <__system_time+0x3>
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	30 97       	sbiw	r30, 0x00	; 0
     140:	21 f0       	breq	.+8      	; 0x14a <time+0x24>
     142:	60 83       	st	Z, r22
     144:	71 83       	std	Z+1, r23	; 0x01
     146:	82 83       	std	Z+2, r24	; 0x02
     148:	93 83       	std	Z+3, r25	; 0x03
     14a:	08 95       	ret

0000014c <GenerateFoodPosition>:
#include "FoodProcessor.h"
#include <stdlib.h>
#include <time.h>

struct Position GenerateFoodPosition(int worldWidth, int worldHeight)
{	
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	2c 97       	sbiw	r28, 0x0c	; 12
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	cd bf       	out	0x3d, r28	; 61
     160:	9a 87       	std	Y+10, r25	; 0x0a
     162:	89 87       	std	Y+9, r24	; 0x09
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	6b 87       	std	Y+11, r22	; 0x0b
	int newXPos = rand() % (worldWidth-2);
     168:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <rand>
     16c:	ac 01       	movw	r20, r24
     16e:	89 85       	ldd	r24, Y+9	; 0x09
     170:	9a 85       	ldd	r25, Y+10	; 0x0a
     172:	9c 01       	movw	r18, r24
     174:	22 50       	subi	r18, 0x02	; 2
     176:	31 09       	sbc	r19, r1
     178:	ca 01       	movw	r24, r20
     17a:	b9 01       	movw	r22, r18
     17c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__divmodhi4>
     180:	9a 83       	std	Y+2, r25	; 0x02
     182:	89 83       	std	Y+1, r24	; 0x01
	int newYPos = rand() & (worldHeight-2);
     184:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <rand>
     188:	9c 01       	movw	r18, r24
     18a:	8b 85       	ldd	r24, Y+11	; 0x0b
     18c:	9c 85       	ldd	r25, Y+12	; 0x0c
     18e:	02 97       	sbiw	r24, 0x02	; 2
     190:	82 23       	and	r24, r18
     192:	93 23       	and	r25, r19
     194:	9c 83       	std	Y+4, r25	; 0x04
     196:	8b 83       	std	Y+3, r24	; 0x03
	
	struct Position newPosition;
	newPosition.x = newXPos;
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	9a 81       	ldd	r25, Y+2	; 0x02
     19c:	9e 83       	std	Y+6, r25	; 0x06
     19e:	8d 83       	std	Y+5, r24	; 0x05
	newPosition.y = newYPos;
     1a0:	8b 81       	ldd	r24, Y+3	; 0x03
     1a2:	9c 81       	ldd	r25, Y+4	; 0x04
     1a4:	98 87       	std	Y+8, r25	; 0x08
     1a6:	8f 83       	std	Y+7, r24	; 0x07
		
	return newPosition;
     1a8:	8d 81       	ldd	r24, Y+5	; 0x05
     1aa:	9e 81       	ldd	r25, Y+6	; 0x06
     1ac:	af 81       	ldd	r26, Y+7	; 0x07
     1ae:	b8 85       	ldd	r27, Y+8	; 0x08
     1b0:	bc 01       	movw	r22, r24
     1b2:	cd 01       	movw	r24, r26
     1b4:	2c 96       	adiw	r28, 0x0c	; 12
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	cd bf       	out	0x3d, r28	; 61
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <InitKeypad>:
	{ '3', '6', '9', '#' },
	{ 'A', 'B', 'C', 'D' }
};

void InitKeypad()
{
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
	// Setup input pins to keyboard
	// These are pins PA6 (Row 2) and PA4 (Row 1), and C7 (Row 3) and C5 (Row 4)
	DDRA &= ~(0b01010000);
     1ce:	81 e2       	ldi	r24, 0x21	; 33
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	21 e2       	ldi	r18, 0x21	; 33
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	f9 01       	movw	r30, r18
     1d8:	20 81       	ld	r18, Z
     1da:	2f 7a       	andi	r18, 0xAF	; 175
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
	DDRC &= ~(0b10100000);
     1e0:	87 e2       	ldi	r24, 0x27	; 39
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	27 e2       	ldi	r18, 0x27	; 39
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	f9 01       	movw	r30, r18
     1ea:	20 81       	ld	r18, Z
     1ec:	2f 75       	andi	r18, 0x5F	; 95
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18

	// Setup output pins to keyboard
	// PD0 = Column 1, PD1 = Column 2, PD2 = Column 3, PD3 = Column 4
	DDRD |= 0b00001111;
     1f2:	8a e2       	ldi	r24, 0x2A	; 42
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	2a e2       	ldi	r18, 0x2A	; 42
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	f9 01       	movw	r30, r18
     1fc:	20 81       	ld	r18, Z
     1fe:	2f 60       	ori	r18, 0x0F	; 15
     200:	fc 01       	movw	r30, r24
     202:	20 83       	st	Z, r18
	PORTD |= 0b00001111;
     204:	8b e2       	ldi	r24, 0x2B	; 43
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	2b e2       	ldi	r18, 0x2B	; 43
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	f9 01       	movw	r30, r18
     20e:	20 81       	ld	r18, Z
     210:	2f 60       	ori	r18, 0x0F	; 15
     212:	fc 01       	movw	r30, r24
     214:	20 83       	st	Z, r18

	DDRB = 0b11111111;
     216:	84 e2       	ldi	r24, 0x24	; 36
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	2f ef       	ldi	r18, 0xFF	; 255
     21c:	fc 01       	movw	r30, r24
     21e:	20 83       	st	Z, r18

	//PORTB = 0xFF;
}
     220:	00 00       	nop
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <GetKey>:

char GetKey()
{
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	60 97       	sbiw	r28, 0x10	; 16
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	de bf       	out	0x3e, r29	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	cd bf       	out	0x3d, r28	; 61
	keyPressed = 0;
     23c:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <__data_end>
	
	for (int columnIndex = 0; columnIndex < 4; columnIndex++)
     240:	1a 82       	std	Y+2, r1	; 0x02
     242:	19 82       	std	Y+1, r1	; 0x01
     244:	f3 c0       	rjmp	.+486    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
		// Scan Column 1 (1, 4, 7, and *)
		PORTD |= 0b00001111;
     246:	8b e2       	ldi	r24, 0x2B	; 43
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	2b e2       	ldi	r18, 0x2B	; 43
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	f9 01       	movw	r30, r18
     250:	20 81       	ld	r18, Z
     252:	2f 60       	ori	r18, 0x0F	; 15
     254:	fc 01       	movw	r30, r24
     256:	20 83       	st	Z, r18
		PORTD &= ~(1 << columnIndex);
     258:	8b e2       	ldi	r24, 0x2B	; 43
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	2b e2       	ldi	r18, 0x2B	; 43
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	f9 01       	movw	r30, r18
     262:	20 81       	ld	r18, Z
     264:	42 2f       	mov	r20, r18
     266:	21 e0       	ldi	r18, 0x01	; 1
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	09 80       	ldd	r0, Y+1	; 0x01
     26c:	02 c0       	rjmp	.+4      	; 0x272 <GetKey+0x4a>
     26e:	22 0f       	add	r18, r18
     270:	33 1f       	adc	r19, r19
     272:	0a 94       	dec	r0
     274:	e2 f7       	brpl	.-8      	; 0x26e <GetKey+0x46>
     276:	20 95       	com	r18
     278:	24 23       	and	r18, r20
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	a0 e8       	ldi	r26, 0x80	; 128
     284:	bf e3       	ldi	r27, 0x3F	; 63
     286:	8b 83       	std	Y+3, r24	; 0x03
     288:	9c 83       	std	Y+4, r25	; 0x04
     28a:	ad 83       	std	Y+5, r26	; 0x05
     28c:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     28e:	20 e0       	ldi	r18, 0x00	; 0
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	4a e7       	ldi	r20, 0x7A	; 122
     294:	55 e4       	ldi	r21, 0x45	; 69
     296:	6b 81       	ldd	r22, Y+3	; 0x03
     298:	7c 81       	ldd	r23, Y+4	; 0x04
     29a:	8d 81       	ldd	r24, Y+5	; 0x05
     29c:	9e 81       	ldd	r25, Y+6	; 0x06
     29e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__mulsf3>
     2a2:	dc 01       	movw	r26, r24
     2a4:	cb 01       	movw	r24, r22
     2a6:	8f 83       	std	Y+7, r24	; 0x07
     2a8:	98 87       	std	Y+8, r25	; 0x08
     2aa:	a9 87       	std	Y+9, r26	; 0x09
     2ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 e8       	ldi	r20, 0x80	; 128
     2b4:	5f e3       	ldi	r21, 0x3F	; 63
     2b6:	6f 81       	ldd	r22, Y+7	; 0x07
     2b8:	78 85       	ldd	r23, Y+8	; 0x08
     2ba:	89 85       	ldd	r24, Y+9	; 0x09
     2bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     2be:	0e 94 81 0c 	call	0x1902	; 0x1902 <__cmpsf2>
     2c2:	88 23       	and	r24, r24
     2c4:	2c f4       	brge	.+10     	; 0x2d0 <GetKey+0xa8>
		__ticks = 1;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	9c 87       	std	Y+12, r25	; 0x0c
     2cc:	8b 87       	std	Y+11, r24	; 0x0b
     2ce:	3f c0       	rjmp	.+126    	; 0x34e <GetKey+0x126>
	else if (__tmp > 65535)
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	3f ef       	ldi	r19, 0xFF	; 255
     2d4:	4f e7       	ldi	r20, 0x7F	; 127
     2d6:	57 e4       	ldi	r21, 0x47	; 71
     2d8:	6f 81       	ldd	r22, Y+7	; 0x07
     2da:	78 85       	ldd	r23, Y+8	; 0x08
     2dc:	89 85       	ldd	r24, Y+9	; 0x09
     2de:	9a 85       	ldd	r25, Y+10	; 0x0a
     2e0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__gesf2>
     2e4:	18 16       	cp	r1, r24
     2e6:	4c f5       	brge	.+82     	; 0x33a <GetKey+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e2       	ldi	r20, 0x20	; 32
     2ee:	51 e4       	ldi	r21, 0x41	; 65
     2f0:	6b 81       	ldd	r22, Y+3	; 0x03
     2f2:	7c 81       	ldd	r23, Y+4	; 0x04
     2f4:	8d 81       	ldd	r24, Y+5	; 0x05
     2f6:	9e 81       	ldd	r25, Y+6	; 0x06
     2f8:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__mulsf3>
     2fc:	dc 01       	movw	r26, r24
     2fe:	cb 01       	movw	r24, r22
     300:	bc 01       	movw	r22, r24
     302:	cd 01       	movw	r24, r26
     304:	0e 94 85 0c 	call	0x190a	; 0x190a <__fixunssfsi>
     308:	dc 01       	movw	r26, r24
     30a:	cb 01       	movw	r24, r22
     30c:	9c 87       	std	Y+12, r25	; 0x0c
     30e:	8b 87       	std	Y+11, r24	; 0x0b
     310:	0f c0       	rjmp	.+30     	; 0x330 <GetKey+0x108>
     312:	80 e9       	ldi	r24, 0x90	; 144
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	9e 87       	std	Y+14, r25	; 0x0e
     318:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     31a:	8d 85       	ldd	r24, Y+13	; 0x0d
     31c:	9e 85       	ldd	r25, Y+14	; 0x0e
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <GetKey+0xf6>
     322:	9e 87       	std	Y+14, r25	; 0x0e
     324:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     326:	8b 85       	ldd	r24, Y+11	; 0x0b
     328:	9c 85       	ldd	r25, Y+12	; 0x0c
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	9c 87       	std	Y+12, r25	; 0x0c
     32e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     330:	8b 85       	ldd	r24, Y+11	; 0x0b
     332:	9c 85       	ldd	r25, Y+12	; 0x0c
     334:	89 2b       	or	r24, r25
     336:	69 f7       	brne	.-38     	; 0x312 <GetKey+0xea>
     338:	14 c0       	rjmp	.+40     	; 0x362 <GetKey+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     33a:	6f 81       	ldd	r22, Y+7	; 0x07
     33c:	78 85       	ldd	r23, Y+8	; 0x08
     33e:	89 85       	ldd	r24, Y+9	; 0x09
     340:	9a 85       	ldd	r25, Y+10	; 0x0a
     342:	0e 94 85 0c 	call	0x190a	; 0x190a <__fixunssfsi>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	9c 87       	std	Y+12, r25	; 0x0c
     34c:	8b 87       	std	Y+11, r24	; 0x0b
     34e:	8b 85       	ldd	r24, Y+11	; 0x0b
     350:	9c 85       	ldd	r25, Y+12	; 0x0c
     352:	98 8b       	std	Y+16, r25	; 0x10
     354:	8f 87       	std	Y+15, r24	; 0x0f
     356:	8f 85       	ldd	r24, Y+15	; 0x0f
     358:	98 89       	ldd	r25, Y+16	; 0x10
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <GetKey+0x132>
     35e:	98 8b       	std	Y+16, r25	; 0x10
     360:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
			
		// Key '1'
		if ((PINA & (1 << ROW_1)) == 0)
     362:	80 e2       	ldi	r24, 0x20	; 32
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	fc 01       	movw	r30, r24
     368:	80 81       	ld	r24, Z
     36a:	88 2f       	mov	r24, r24
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	80 71       	andi	r24, 0x10	; 16
     370:	99 27       	eor	r25, r25
     372:	89 2b       	or	r24, r25
     374:	79 f4       	brne	.+30     	; 0x394 <GetKey+0x16c>
		{
			keyPressed = characterColumns[columnIndex][0]; 
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	9a 81       	ldd	r25, Y+2	; 0x02
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	88 0f       	add	r24, r24
     380:	99 1f       	adc	r25, r25
     382:	8c 5f       	subi	r24, 0xFC	; 252
     384:	9d 4f       	sbci	r25, 0xFD	; 253
     386:	fc 01       	movw	r30, r24
     388:	80 81       	ld	r24, Z
     38a:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <__data_end>
			return keyPressed;
     38e:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <__data_end>
     392:	53 c0       	rjmp	.+166    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		}

		// Key '4'
		if ((PINA & (1 << ROW_2)) == 0)
     394:	80 e2       	ldi	r24, 0x20	; 32
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	fc 01       	movw	r30, r24
     39a:	80 81       	ld	r24, Z
     39c:	88 2f       	mov	r24, r24
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	80 74       	andi	r24, 0x40	; 64
     3a2:	99 27       	eor	r25, r25
     3a4:	89 2b       	or	r24, r25
     3a6:	79 f4       	brne	.+30     	; 0x3c6 <GetKey+0x19e>
		{
			keyPressed = characterColumns[columnIndex][1];
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	9a 81       	ldd	r25, Y+2	; 0x02
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	88 0f       	add	r24, r24
     3b2:	99 1f       	adc	r25, r25
     3b4:	8b 5f       	subi	r24, 0xFB	; 251
     3b6:	9d 4f       	sbci	r25, 0xFD	; 253
     3b8:	fc 01       	movw	r30, r24
     3ba:	80 81       	ld	r24, Z
     3bc:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <__data_end>
			return keyPressed;
     3c0:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <__data_end>
     3c4:	3a c0       	rjmp	.+116    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		}

		// Key '7'
		if ((PINC & (1 << ROW_3)) == 0)
     3c6:	86 e2       	ldi	r24, 0x26	; 38
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	fc 01       	movw	r30, r24
     3cc:	80 81       	ld	r24, Z
     3ce:	88 23       	and	r24, r24
     3d0:	7c f0       	brlt	.+30     	; 0x3f0 <GetKey+0x1c8>
		{
			keyPressed = characterColumns[columnIndex][2];
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	9a 81       	ldd	r25, Y+2	; 0x02
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	8a 5f       	subi	r24, 0xFA	; 250
     3e0:	9d 4f       	sbci	r25, 0xFD	; 253
     3e2:	fc 01       	movw	r30, r24
     3e4:	80 81       	ld	r24, Z
     3e6:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <__data_end>
			return keyPressed;
     3ea:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <__data_end>
     3ee:	25 c0       	rjmp	.+74     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		}

		// Key '*'
		if ((PINC & (1 << ROW_4)) == 0)
     3f0:	86 e2       	ldi	r24, 0x26	; 38
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	fc 01       	movw	r30, r24
     3f6:	80 81       	ld	r24, Z
     3f8:	88 2f       	mov	r24, r24
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	80 72       	andi	r24, 0x20	; 32
     3fe:	99 27       	eor	r25, r25
     400:	89 2b       	or	r24, r25
     402:	79 f4       	brne	.+30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			keyPressed = characterColumns[columnIndex][3];
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	9a 81       	ldd	r25, Y+2	; 0x02
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	88 0f       	add	r24, r24
     40e:	99 1f       	adc	r25, r25
     410:	89 5f       	subi	r24, 0xF9	; 249
     412:	9d 4f       	sbci	r25, 0xFD	; 253
     414:	fc 01       	movw	r30, r24
     416:	80 81       	ld	r24, Z
     418:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <__data_end>
			return keyPressed;
     41c:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <__data_end>
     420:	0c c0       	rjmp	.+24     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>

char GetKey()
{
	keyPressed = 0;
	
	for (int columnIndex = 0; columnIndex < 4; columnIndex++)
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	9a 81       	ldd	r25, Y+2	; 0x02
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	9a 83       	std	Y+2, r25	; 0x02
     42a:	89 83       	std	Y+1, r24	; 0x01
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	04 97       	sbiw	r24, 0x04	; 4
     432:	0c f4       	brge	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     434:	08 cf       	rjmp	.-496    	; 0x246 <GetKey+0x1e>
			keyPressed = characterColumns[columnIndex][3];
			return keyPressed;
		}
	}
	
	return keyPressed;
     436:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <__data_end>
     43a:	60 96       	adiw	r28, 0x10	; 16
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <main>:
int scoreTensCounter = 0;
int scoreHundredsCounter = 0;
int playerHighscoreTextOffset = 50;

int main(void)
{
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	6a 97       	sbiw	r28, 0x1a	; 26
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	de bf       	out	0x3e, r29	; 62
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	cd bf       	out	0x3d, r28	; 61
	InitKeypad();
     460:	b2 de       	rcall	.-668    	; 0x1c6 <InitKeypad>
	initDisplay();
     462:	1e d2       	rcall	.+1084   	; 0x8a0 <initDisplay>
     464:	80 e0       	ldi	r24, 0x00	; 0
	
	// Seed number generator
	srand(time(NULL));
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	5e de       	rcall	.-836    	; 0x126 <time>
     46a:	dc 01       	movw	r26, r24
     46c:	cb 01       	movw	r24, r22
     46e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <srand>
	
	ResetGame();
     472:	d8 d1       	rcall	.+944    	; 0x824 <ResetGame>
     474:	84 e1       	ldi	r24, 0x14	; 20

	DrawIntroScreen(IntroScreenImage);
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	0e 94 a1 0a 	call	0x1542	; 0x1542 <DrawIntroScreen>
	
	// Busy Wait until user press star button
	while (GetKey() != '*')
     47c:	00 00       	nop
     47e:	d4 de       	rcall	.-600    	; 0x228 <GetKey>
     480:	8a 32       	cpi	r24, 0x2A	; 42
     482:	e9 f7       	brne	.-6      	; 0x47e <main+0x32>
     484:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <gameState>
	}

	// Main Game Loop
    while (1) 
	{
		if (gameState == GAME_STATE_ALIVE)
     488:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <gameState+0x1>
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	09 f0       	breq	.+2      	; 0x492 <main+0x46>
     490:	fc c0       	rjmp	.+504    	; 0x68a <main+0x23e>
     492:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <snakeBodyLength>
		{
			UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);
     496:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <snakeBodyLength+0x1>
     49a:	2f e2       	ldi	r18, 0x2F	; 47
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	43 e5       	ldi	r20, 0x53	; 83
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	bc 01       	movw	r22, r24
     4a4:	83 e8       	ldi	r24, 0x83	; 131
     4a6:	95 e0       	ldi	r25, 0x05	; 5
     4a8:	b2 d4       	rcall	.+2404   	; 0xe0e <UpdateSnake>
     4aa:	8a e0       	ldi	r24, 0x0A	; 10

			struct SnakeBodyPart snakeHead = snake[0];
     4ac:	e3 e8       	ldi	r30, 0x83	; 131
     4ae:	f5 e0       	ldi	r31, 0x05	; 5
     4b0:	de 01       	movw	r26, r28
     4b2:	51 96       	adiw	r26, 0x11	; 17
     4b4:	01 90       	ld	r0, Z+
     4b6:	0d 92       	st	X+, r0
     4b8:	8a 95       	dec	r24
     4ba:	e1 f7       	brne	.-8      	; 0x4b4 <main+0x68>
     4bc:	29 89       	ldd	r18, Y+17	; 0x11
			if (snakeHead.x < (currentFoodPosition.x + 3) &&
     4be:	3a 89       	ldd	r19, Y+18	; 0x12
     4c0:	80 91 63 0b 	lds	r24, 0x0B63	; 0x800b63 <currentFoodPosition>
     4c4:	90 91 64 0b 	lds	r25, 0x0B64	; 0x800b64 <currentFoodPosition+0x1>
     4c8:	03 96       	adiw	r24, 0x03	; 3
     4ca:	28 17       	cp	r18, r24
     4cc:	39 07       	cpc	r19, r25
     4ce:	0c f0       	brlt	.+2      	; 0x4d2 <main+0x86>
     4d0:	8c c0       	rjmp	.+280    	; 0x5ea <main+0x19e>
     4d2:	89 89       	ldd	r24, Y+17	; 0x11
			(snakeHead.x + 2) > currentFoodPosition.x &&
     4d4:	9a 89       	ldd	r25, Y+18	; 0x12
     4d6:	9c 01       	movw	r18, r24
     4d8:	2e 5f       	subi	r18, 0xFE	; 254
     4da:	3f 4f       	sbci	r19, 0xFF	; 255
     4dc:	80 91 63 0b 	lds	r24, 0x0B63	; 0x800b63 <currentFoodPosition>
     4e0:	90 91 64 0b 	lds	r25, 0x0B64	; 0x800b64 <currentFoodPosition+0x1>
     4e4:	82 17       	cp	r24, r18
		if (gameState == GAME_STATE_ALIVE)
		{
			UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

			struct SnakeBodyPart snakeHead = snake[0];
			if (snakeHead.x < (currentFoodPosition.x + 3) &&
     4e6:	93 07       	cpc	r25, r19
     4e8:	0c f0       	brlt	.+2      	; 0x4ec <main+0xa0>
     4ea:	7f c0       	rjmp	.+254    	; 0x5ea <main+0x19e>
     4ec:	2b 89       	ldd	r18, Y+19	; 0x13
			(snakeHead.x + 2) > currentFoodPosition.x &&
			snakeHead.y < (currentFoodPosition.y + 2) &&
     4ee:	3c 89       	ldd	r19, Y+20	; 0x14
     4f0:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <currentFoodPosition+0x2>
     4f4:	90 91 66 0b 	lds	r25, 0x0B66	; 0x800b66 <currentFoodPosition+0x3>
     4f8:	02 96       	adiw	r24, 0x02	; 2
     4fa:	28 17       	cp	r18, r24
		{
			UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

			struct SnakeBodyPart snakeHead = snake[0];
			if (snakeHead.x < (currentFoodPosition.x + 3) &&
			(snakeHead.x + 2) > currentFoodPosition.x &&
     4fc:	39 07       	cpc	r19, r25
     4fe:	0c f0       	brlt	.+2      	; 0x502 <main+0xb6>
     500:	74 c0       	rjmp	.+232    	; 0x5ea <main+0x19e>
     502:	8b 89       	ldd	r24, Y+19	; 0x13
			snakeHead.y < (currentFoodPosition.y + 2) &&
			(2 + snakeHead.y) > (currentFoodPosition.y -1))
     504:	9c 89       	ldd	r25, Y+20	; 0x14
     506:	9c 01       	movw	r18, r24
     508:	2e 5f       	subi	r18, 0xFE	; 254
     50a:	3f 4f       	sbci	r19, 0xFF	; 255
     50c:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <currentFoodPosition+0x2>
     510:	90 91 66 0b 	lds	r25, 0x0B66	; 0x800b66 <currentFoodPosition+0x3>
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	82 17       	cp	r24, r18
			UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

			struct SnakeBodyPart snakeHead = snake[0];
			if (snakeHead.x < (currentFoodPosition.x + 3) &&
			(snakeHead.x + 2) > currentFoodPosition.x &&
			snakeHead.y < (currentFoodPosition.y + 2) &&
     518:	93 07       	cpc	r25, r19
     51a:	0c f0       	brlt	.+2      	; 0x51e <main+0xd2>
     51c:	66 c0       	rjmp	.+204    	; 0x5ea <main+0x19e>
			(2 + snakeHead.y) > (currentFoodPosition.y -1))
			{
				currentFoodPosition = GenerateFoodPosition(WORLD_WIDTH, WORLD_HEIGHT);
     51e:	6f e2       	ldi	r22, 0x2F	; 47
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	83 e5       	ldi	r24, 0x53	; 83
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	12 de       	rcall	.-988    	; 0x14c <GenerateFoodPosition>
     528:	dc 01       	movw	r26, r24
     52a:	cb 01       	movw	r24, r22
     52c:	80 93 63 0b 	sts	0x0B63, r24	; 0x800b63 <currentFoodPosition>
     530:	90 93 64 0b 	sts	0x0B64, r25	; 0x800b64 <currentFoodPosition+0x1>
     534:	a0 93 65 0b 	sts	0x0B65, r26	; 0x800b65 <currentFoodPosition+0x2>
     538:	b0 93 66 0b 	sts	0x0B66, r27	; 0x800b66 <currentFoodPosition+0x3>
     53c:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <snakeBodyLength>
				snakeBodyLength++;
     540:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <snakeBodyLength+0x1>
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <snakeBodyLength+0x1>
     54a:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <snakeBodyLength>
     54e:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <gameSpeed>
				
				if(gameSpeed !=  0)
     552:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <gameSpeed+0x1>
     556:	89 2b       	or	r24, r25
     558:	49 f0       	breq	.+18     	; 0x56c <main+0x120>
     55a:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <gameSpeed>
					gameSpeed--;
     55e:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <gameSpeed+0x1>
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <gameSpeed+0x1>
     568:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <gameSpeed>
     56c:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <snakeBodyLength>
					
				GrowSnake(snake, snakeBodyLength);
     570:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <snakeBodyLength+0x1>
     574:	bc 01       	movw	r22, r24
     576:	83 e8       	ldi	r24, 0x83	; 131
     578:	95 e0       	ldi	r25, 0x05	; 5
     57a:	2c d7       	rcall	.+3672   	; 0x13d4 <GrowSnake>
     57c:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <scoreOnesCounter>
				
				if (scoreOnesCounter != 9)
     580:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <scoreOnesCounter+0x1>
     584:	09 97       	sbiw	r24, 0x09	; 9
     586:	51 f0       	breq	.+20     	; 0x59c <main+0x150>
     588:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <scoreOnesCounter>
				{
					scoreOnesCounter += 1;
     58c:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <scoreOnesCounter+0x1>
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <scoreOnesCounter+0x1>
     596:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <scoreOnesCounter>
     59a:	27 c0       	rjmp	.+78     	; 0x5ea <main+0x19e>
     59c:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <scoreTensCounter>
				} else if (scoreTensCounter != 9)
     5a0:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <scoreTensCounter+0x1>
     5a4:	09 97       	sbiw	r24, 0x09	; 9
     5a6:	71 f0       	breq	.+28     	; 0x5c4 <main+0x178>
     5a8:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <scoreTensCounter>
				{
					scoreTensCounter += 1;
     5ac:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <scoreTensCounter+0x1>
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	90 93 7c 05 	sts	0x057C, r25	; 0x80057c <scoreTensCounter+0x1>
     5b6:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <scoreTensCounter>
     5ba:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <scoreOnesCounter+0x1>
					scoreOnesCounter = 0;
     5be:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <scoreOnesCounter>
     5c2:	13 c0       	rjmp	.+38     	; 0x5ea <main+0x19e>
     5c4:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <scoreHundredsCounter>
				} else if (scoreHundredsCounter != 9)
     5c8:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <scoreHundredsCounter+0x1>
     5cc:	09 97       	sbiw	r24, 0x09	; 9
     5ce:	69 f0       	breq	.+26     	; 0x5ea <main+0x19e>
     5d0:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <scoreTensCounter+0x1>
				{
					scoreTensCounter = 0;
     5d4:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <scoreTensCounter>
     5d8:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <scoreHundredsCounter>
					scoreHundredsCounter += 1;
     5dc:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <scoreHundredsCounter+0x1>
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <scoreHundredsCounter+0x1>
     5e6:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <scoreHundredsCounter>
     5ea:	80 91 65 0b 	lds	r24, 0x0B65	; 0x800b65 <currentFoodPosition+0x2>
				}
			}

			DrawFood(currentFoodPosition.x ,currentFoodPosition.y, worldImage);
     5ee:	90 91 66 0b 	lds	r25, 0x0B66	; 0x800b66 <currentFoodPosition+0x3>
     5f2:	28 2f       	mov	r18, r24
     5f4:	80 91 63 0b 	lds	r24, 0x0B63	; 0x800b63 <currentFoodPosition>
     5f8:	90 91 64 0b 	lds	r25, 0x0B64	; 0x800b64 <currentFoodPosition+0x1>
     5fc:	4b e6       	ldi	r20, 0x6B	; 107
     5fe:	59 e0       	ldi	r21, 0x09	; 9
     600:	62 2f       	mov	r22, r18
     602:	0e 94 0b 0c 	call	0x1816	; 0x1816 <DrawFood>
     606:	1a 82       	std	Y+2, r1	; 0x02

			for(int x = 0; x < snakeBodyLength; x++)
     608:	19 82       	std	Y+1, r1	; 0x01
     60a:	2a c0       	rjmp	.+84     	; 0x660 <main+0x214>
     60c:	89 81       	ldd	r24, Y+1	; 0x01
			{
				DrawDot(snake[x].x, snake[x].y, worldImage);
     60e:	9a 81       	ldd	r25, Y+2	; 0x02
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	9c 01       	movw	r18, r24
     616:	22 0f       	add	r18, r18
     618:	33 1f       	adc	r19, r19
     61a:	22 0f       	add	r18, r18
     61c:	33 1f       	adc	r19, r19
     61e:	82 0f       	add	r24, r18
     620:	93 1f       	adc	r25, r19
     622:	8b 57       	subi	r24, 0x7B	; 123
     624:	9a 4f       	sbci	r25, 0xFA	; 250
     626:	fc 01       	movw	r30, r24
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	68 2f       	mov	r22, r24
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	9a 81       	ldd	r25, Y+2	; 0x02
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	9c 01       	movw	r18, r24
     638:	22 0f       	add	r18, r18
     63a:	33 1f       	adc	r19, r19
     63c:	22 0f       	add	r18, r18
     63e:	33 1f       	adc	r19, r19
     640:	82 0f       	add	r24, r18
     642:	93 1f       	adc	r25, r19
     644:	8d 57       	subi	r24, 0x7D	; 125
     646:	9a 4f       	sbci	r25, 0xFA	; 250
     648:	fc 01       	movw	r30, r24
     64a:	80 81       	ld	r24, Z
     64c:	91 81       	ldd	r25, Z+1	; 0x01
     64e:	4b e6       	ldi	r20, 0x6B	; 107
     650:	59 e0       	ldi	r21, 0x09	; 9
     652:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <DrawDot>
     656:	89 81       	ldd	r24, Y+1	; 0x01
				}
			}

			DrawFood(currentFoodPosition.x ,currentFoodPosition.y, worldImage);

			for(int x = 0; x < snakeBodyLength; x++)
     658:	9a 81       	ldd	r25, Y+2	; 0x02
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	9a 83       	std	Y+2, r25	; 0x02
     65e:	89 83       	std	Y+1, r24	; 0x01
     660:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <snakeBodyLength>
     664:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <snakeBodyLength+0x1>
     668:	29 81       	ldd	r18, Y+1	; 0x01
     66a:	3a 81       	ldd	r19, Y+2	; 0x02
     66c:	28 17       	cp	r18, r24
     66e:	39 07       	cpc	r19, r25
     670:	6c f2       	brlt	.-102    	; 0x60c <main+0x1c0>
			{
				DrawDot(snake[x].x, snake[x].y, worldImage);
			}
					
			if (SnakeHitSelf() == 1)
     672:	13 d7       	rcall	.+3622   	; 0x149a <SnakeHitSelf>
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	21 f4       	brne	.+8      	; 0x680 <main+0x234>
     678:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <gameState+0x1>
			{
				gameState = GAME_STATE_DEAD;
     67c:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <gameState>
     680:	8b e6       	ldi	r24, 0x6B	; 107
			}
					
			RenderWorld(worldImage);
     682:	99 e0       	ldi	r25, 0x09	; 9
     684:	0e 94 44 0c 	call	0x1888	; 0x1888 <RenderWorld>
     688:	50 c0       	rjmp	.+160    	; 0x72a <main+0x2de>
     68a:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <gameState>
		} else if (gameState == GAME_STATE_DEAD)
     68e:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <gameState+0x1>
     692:	89 2b       	or	r24, r25
     694:	09 f0       	breq	.+2      	; 0x698 <main+0x24c>
     696:	49 c0       	rjmp	.+146    	; 0x72a <main+0x2de>
		{
			DrawHighscoreText(HighscoreText);
     698:	8c e0       	ldi	r24, 0x0C	; 12
     69a:	94 e0       	ldi	r25, 0x04	; 4
     69c:	78 d7       	rcall	.+3824   	; 0x158e <DrawHighscoreText>
     69e:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <playerHighscoreTextOffset>
			
			// Draw player's current score
			DrawCharacter(CharacterMapper[scoreOnesCounter], playerHighscoreTextOffset + 20, 3, 8);
     6a2:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <playerHighscoreTextOffset+0x1>
     6a6:	54 e1       	ldi	r21, 0x14	; 20
     6a8:	58 0f       	add	r21, r24
     6aa:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <scoreOnesCounter>
     6ae:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <scoreOnesCounter+0x1>
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	87 5a       	subi	r24, 0xA7	; 167
     6b8:	9a 4f       	sbci	r25, 0xFA	; 250
     6ba:	fc 01       	movw	r30, r24
     6bc:	80 81       	ld	r24, Z
     6be:	91 81       	ldd	r25, Z+1	; 0x01
     6c0:	28 e0       	ldi	r18, 0x08	; 8
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	43 e0       	ldi	r20, 0x03	; 3
     6c6:	65 2f       	mov	r22, r21
     6c8:	91 d7       	rcall	.+3874   	; 0x15ec <DrawCharacter>
     6ca:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <playerHighscoreTextOffset>
			DrawCharacter(CharacterMapper[scoreTensCounter], playerHighscoreTextOffset + 10, 3, 8);
     6ce:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <playerHighscoreTextOffset+0x1>
     6d2:	5a e0       	ldi	r21, 0x0A	; 10
     6d4:	58 0f       	add	r21, r24
     6d6:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <scoreTensCounter>
     6da:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <scoreTensCounter+0x1>
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	87 5a       	subi	r24, 0xA7	; 167
     6e4:	9a 4f       	sbci	r25, 0xFA	; 250
     6e6:	fc 01       	movw	r30, r24
     6e8:	80 81       	ld	r24, Z
     6ea:	91 81       	ldd	r25, Z+1	; 0x01
     6ec:	28 e0       	ldi	r18, 0x08	; 8
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	43 e0       	ldi	r20, 0x03	; 3
     6f2:	65 2f       	mov	r22, r21
     6f4:	7b d7       	rcall	.+3830   	; 0x15ec <DrawCharacter>
     6f6:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <playerHighscoreTextOffset>
			DrawCharacter(CharacterMapper[scoreHundredsCounter], playerHighscoreTextOffset, 3, 8);
     6fa:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <playerHighscoreTextOffset+0x1>
     6fe:	58 2f       	mov	r21, r24
     700:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <scoreHundredsCounter>
     704:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <scoreHundredsCounter+0x1>
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	87 5a       	subi	r24, 0xA7	; 167
     70e:	9a 4f       	sbci	r25, 0xFA	; 250
     710:	fc 01       	movw	r30, r24
     712:	80 81       	ld	r24, Z
     714:	91 81       	ldd	r25, Z+1	; 0x01
     716:	28 e0       	ldi	r18, 0x08	; 8
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	43 e0       	ldi	r20, 0x03	; 3
     71c:	65 2f       	mov	r22, r21
			
			// Busy Wait until user press star button
			while (GetKey() != '*')
     71e:	66 d7       	rcall	.+3788   	; 0x15ec <DrawCharacter>
     720:	00 00       	nop
     722:	82 dd       	rcall	.-1276   	; 0x228 <GetKey>
     724:	8a 32       	cpi	r24, 0x2A	; 42
     726:	e9 f7       	brne	.-6      	; 0x722 <main+0x2d6>
			{
			}
			
			ResetGame();
     728:	7d d0       	rcall	.+250    	; 0x824 <ResetGame>
     72a:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <gameSpeed>
		}

		_delay_ms(gameSpeed);
     72e:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <gameSpeed+0x1>
     732:	09 2e       	mov	r0, r25
     734:	00 0c       	add	r0, r0
     736:	aa 0b       	sbc	r26, r26
     738:	bb 0b       	sbc	r27, r27
     73a:	bc 01       	movw	r22, r24
     73c:	cd 01       	movw	r24, r26
     73e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__floatsisf>
     742:	dc 01       	movw	r26, r24
     744:	cb 01       	movw	r24, r22
     746:	8b 83       	std	Y+3, r24	; 0x03
     748:	9c 83       	std	Y+4, r25	; 0x04
     74a:	ad 83       	std	Y+5, r26	; 0x05
     74c:	be 83       	std	Y+6, r27	; 0x06
     74e:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	4a e7       	ldi	r20, 0x7A	; 122
     754:	55 e4       	ldi	r21, 0x45	; 69
     756:	6b 81       	ldd	r22, Y+3	; 0x03
     758:	7c 81       	ldd	r23, Y+4	; 0x04
     75a:	8d 81       	ldd	r24, Y+5	; 0x05
     75c:	9e 81       	ldd	r25, Y+6	; 0x06
     75e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__mulsf3>
     762:	dc 01       	movw	r26, r24
     764:	cb 01       	movw	r24, r22
     766:	8f 83       	std	Y+7, r24	; 0x07
     768:	98 87       	std	Y+8, r25	; 0x08
     76a:	a9 87       	std	Y+9, r26	; 0x09
     76c:	ba 87       	std	Y+10, r27	; 0x0a
     76e:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	40 e8       	ldi	r20, 0x80	; 128
     774:	5f e3       	ldi	r21, 0x3F	; 63
     776:	6f 81       	ldd	r22, Y+7	; 0x07
     778:	78 85       	ldd	r23, Y+8	; 0x08
     77a:	89 85       	ldd	r24, Y+9	; 0x09
     77c:	9a 85       	ldd	r25, Y+10	; 0x0a
     77e:	0e 94 81 0c 	call	0x1902	; 0x1902 <__cmpsf2>
     782:	88 23       	and	r24, r24
     784:	2c f4       	brge	.+10     	; 0x790 <main+0x344>
     786:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	9c 87       	std	Y+12, r25	; 0x0c
     78c:	8b 87       	std	Y+11, r24	; 0x0b
     78e:	3f c0       	rjmp	.+126    	; 0x80e <main+0x3c2>
     790:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
     792:	3f ef       	ldi	r19, 0xFF	; 255
     794:	4f e7       	ldi	r20, 0x7F	; 127
     796:	57 e4       	ldi	r21, 0x47	; 71
     798:	6f 81       	ldd	r22, Y+7	; 0x07
     79a:	78 85       	ldd	r23, Y+8	; 0x08
     79c:	89 85       	ldd	r24, Y+9	; 0x09
     79e:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__gesf2>
     7a4:	18 16       	cp	r1, r24
     7a6:	4c f5       	brge	.+82     	; 0x7fa <main+0x3ae>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	40 e2       	ldi	r20, 0x20	; 32
     7ae:	51 e4       	ldi	r21, 0x41	; 65
     7b0:	6b 81       	ldd	r22, Y+3	; 0x03
     7b2:	7c 81       	ldd	r23, Y+4	; 0x04
     7b4:	8d 81       	ldd	r24, Y+5	; 0x05
     7b6:	9e 81       	ldd	r25, Y+6	; 0x06
     7b8:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__mulsf3>
     7bc:	dc 01       	movw	r26, r24
     7be:	cb 01       	movw	r24, r22
     7c0:	bc 01       	movw	r22, r24
     7c2:	cd 01       	movw	r24, r26
     7c4:	0e 94 85 0c 	call	0x190a	; 0x190a <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	9c 87       	std	Y+12, r25	; 0x0c
     7ce:	8b 87       	std	Y+11, r24	; 0x0b
     7d0:	0f c0       	rjmp	.+30     	; 0x7f0 <main+0x3a4>
     7d2:	80 e9       	ldi	r24, 0x90	; 144
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	9e 87       	std	Y+14, r25	; 0x0e
     7d8:	8d 87       	std	Y+13, r24	; 0x0d
     7da:	8d 85       	ldd	r24, Y+13	; 0x0d
     7dc:	9e 85       	ldd	r25, Y+14	; 0x0e
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <main+0x392>
     7e2:	9e 87       	std	Y+14, r25	; 0x0e
     7e4:	8d 87       	std	Y+13, r24	; 0x0d
     7e6:	8b 85       	ldd	r24, Y+11	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7e8:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	9c 87       	std	Y+12, r25	; 0x0c
     7ee:	8b 87       	std	Y+11, r24	; 0x0b
     7f0:	8b 85       	ldd	r24, Y+11	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     7f4:	89 2b       	or	r24, r25
     7f6:	69 f7       	brne	.-38     	; 0x7d2 <main+0x386>
     7f8:	14 c0       	rjmp	.+40     	; 0x822 <main+0x3d6>
     7fa:	6f 81       	ldd	r22, Y+7	; 0x07
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7fc:	78 85       	ldd	r23, Y+8	; 0x08
     7fe:	89 85       	ldd	r24, Y+9	; 0x09
     800:	9a 85       	ldd	r25, Y+10	; 0x0a
     802:	0e 94 85 0c 	call	0x190a	; 0x190a <__fixunssfsi>
     806:	dc 01       	movw	r26, r24
     808:	cb 01       	movw	r24, r22
     80a:	9c 87       	std	Y+12, r25	; 0x0c
     80c:	8b 87       	std	Y+11, r24	; 0x0b
     80e:	8b 85       	ldd	r24, Y+11	; 0x0b
     810:	9c 85       	ldd	r25, Y+12	; 0x0c
     812:	98 8b       	std	Y+16, r25	; 0x10
     814:	8f 87       	std	Y+15, r24	; 0x0f
     816:	8f 85       	ldd	r24, Y+15	; 0x0f
     818:	98 89       	ldd	r25, Y+16	; 0x10
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <main+0x3ce>
     81e:	98 8b       	std	Y+16, r25	; 0x10
     820:	8f 87       	std	Y+15, r24	; 0x0f
     822:	30 ce       	rjmp	.-928    	; 0x484 <main+0x38>

00000824 <ResetGame>:
    }
     824:	cf 93       	push	r28
}

void ResetGame()
{
     826:	df 93       	push	r29
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
	gameState = GAME_STATE_ALIVE;
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	90 93 70 05 	sts	0x0570, r25	; 0x800570 <gameState+0x1>
     834:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <gameState>
	setCursor(0, 0);
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	ff d0       	rcall	.+510    	; 0xa3c <setCursor>
	clearDisplay();
     83e:	50 d1       	rcall	.+672    	; 0xae0 <clearDisplay>
     840:	60 e0       	ldi	r22, 0x00	; 0
	setCursor(0, 0);
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	fb d0       	rcall	.+502    	; 0xa3c <setCursor>
     846:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <snakeBodyLength>
	InitSnake(snake, snakeBodyLength);
     84a:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <snakeBodyLength+0x1>
     84e:	bc 01       	movw	r22, r24
     850:	83 e8       	ldi	r24, 0x83	; 131
     852:	95 e0       	ldi	r25, 0x05	; 5
     854:	51 d2       	rcall	.+1186   	; 0xcf8 <InitSnake>
     856:	6f e2       	ldi	r22, 0x2F	; 47
	currentFoodPosition = GenerateFoodPosition(WORLD_WIDTH, WORLD_HEIGHT);
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	83 e5       	ldi	r24, 0x53	; 83
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	76 dc       	rcall	.-1812   	; 0x14c <GenerateFoodPosition>
     860:	dc 01       	movw	r26, r24
     862:	cb 01       	movw	r24, r22
     864:	80 93 63 0b 	sts	0x0B63, r24	; 0x800b63 <currentFoodPosition>
     868:	90 93 64 0b 	sts	0x0B64, r25	; 0x800b64 <currentFoodPosition+0x1>
     86c:	a0 93 65 0b 	sts	0x0B65, r26	; 0x800b65 <currentFoodPosition+0x2>
     870:	b0 93 66 0b 	sts	0x0B66, r27	; 0x800b66 <currentFoodPosition+0x3>
     874:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <scoreOnesCounter+0x1>
	
	scoreOnesCounter = 0;
     878:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <scoreOnesCounter>
     87c:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <scoreTensCounter+0x1>
	scoreTensCounter = 0;
     880:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <scoreTensCounter>
     884:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <scoreHundredsCounter+0x1>
	scoreHundredsCounter = 0;
     888:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <scoreHundredsCounter>
     88c:	8c e3       	ldi	r24, 0x3C	; 60
	
	gameSpeed = GAME_INITIAL_SPEED;
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <gameSpeed+0x1>
     894:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <gameSpeed>
     898:	00 00       	nop
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <initDisplay>:
#define RST_BIT 0 // PA0
#define DC_BIT 1 // PA1
#define LIGHT_BIT 2 // PA2

void initDisplay()
{
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
	SPI_MasterInit();
     8a8:	03 d6       	rcall	.+3078   	; 0x14b0 <SPI_MasterInit>
	
	// Set port to output
	DDRA |= 0b00000111;
     8aa:	81 e2       	ldi	r24, 0x21	; 33
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	21 e2       	ldi	r18, 0x21	; 33
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	f9 01       	movw	r30, r18
     8b4:	20 81       	ld	r18, Z
     8b6:	27 60       	ori	r18, 0x07	; 7
     8b8:	fc 01       	movw	r30, r24
     8ba:	20 83       	st	Z, r18
	
	// Turn on light
	PORTA &= ~(1 << LIGHT_BIT);
     8bc:	82 e2       	ldi	r24, 0x22	; 34
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	22 e2       	ldi	r18, 0x22	; 34
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	f9 01       	movw	r30, r18
     8c6:	20 81       	ld	r18, Z
     8c8:	2b 7f       	andi	r18, 0xFB	; 251
     8ca:	fc 01       	movw	r30, r24
     8cc:	20 83       	st	Z, r18
	
	// Set bits to high (active low)
	PORTA |= (1 << RST_BIT);
     8ce:	82 e2       	ldi	r24, 0x22	; 34
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	22 e2       	ldi	r18, 0x22	; 34
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	f9 01       	movw	r30, r18
     8d8:	20 81       	ld	r18, Z
     8da:	21 60       	ori	r18, 0x01	; 1
     8dc:	fc 01       	movw	r30, r24
     8de:	20 83       	st	Z, r18
	PORTA |= (1 << DC_BIT);
     8e0:	82 e2       	ldi	r24, 0x22	; 34
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	22 e2       	ldi	r18, 0x22	; 34
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	f9 01       	movw	r30, r18
     8ea:	20 81       	ld	r18, Z
     8ec:	22 60       	ori	r18, 0x02	; 2
     8ee:	fc 01       	movw	r30, r24
	
	// Required display reset
	// This has to be done before doing
	// Anything else with the display
	resetDisplay();
     8f0:	20 83       	st	Z, r18
	
	// Use extended instruction set
	sendIntruction(0x21);
     8f2:	0f d0       	rcall	.+30     	; 0x912 <resetDisplay>
     8f4:	81 e2       	ldi	r24, 0x21	; 33

	// Here we control operation voltage of the LCD
	// We set it to 6V (the minimum allowed voltage range)
	// If you do not set a VOP value, the internal voltage generator
	// Will be switched off, and thus the display won't function.
	sendIntruction(0xC0);
     8f6:	bf d0       	rcall	.+382    	; 0xa76 <sendIntruction>
     8f8:	80 ec       	ldi	r24, 0xC0	; 192

	// We set the bias voltage levels
	// The bias value is taken after the
	// optimum bias value described in official
	// data sheet.
	sendIntruction(0x13);
     8fa:	bd d0       	rcall	.+378    	; 0xa76 <sendIntruction>
     8fc:	83 e1       	ldi	r24, 0x13	; 19

	// Use basic instruction set
	sendIntruction(0x20);
     8fe:	bb d0       	rcall	.+374    	; 0xa76 <sendIntruction>
     900:	80 e2       	ldi	r24, 0x20	; 32
     902:	b9 d0       	rcall	.+370    	; 0xa76 <sendIntruction>

	// Set display mode normal
	sendIntruction(0b00001100);
     904:	8c e0       	ldi	r24, 0x0C	; 12
     906:	b7 d0       	rcall	.+366    	; 0xa76 <sendIntruction>
     908:	eb d0       	rcall	.+470    	; 0xae0 <clearDisplay>

	// Clear the display to make sure
	// No pixels are alive on startup
	clearDisplay();
     90a:	00 00       	nop
     90c:	df 91       	pop	r29
}
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <resetDisplay>:
     912:	cf 93       	push	r28
     914:	df 93       	push	r29


void resetDisplay()
{
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	2e 97       	sbiw	r28, 0x0e	; 14
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
	// Set RES low
	PORTA &= ~(1 << RST_BIT);
     926:	82 e2       	ldi	r24, 0x22	; 34
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	22 e2       	ldi	r18, 0x22	; 34
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	f9 01       	movw	r30, r18
     930:	20 81       	ld	r18, Z
     932:	2e 7f       	andi	r18, 0xFE	; 254
     934:	fc 01       	movw	r30, r24
     936:	20 83       	st	Z, r18
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a8 ec       	ldi	r26, 0xC8	; 200
     93e:	b2 e4       	ldi	r27, 0x42	; 66
     940:	89 83       	std	Y+1, r24	; 0x01
     942:	9a 83       	std	Y+2, r25	; 0x02
     944:	ab 83       	std	Y+3, r26	; 0x03
     946:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	4a e7       	ldi	r20, 0x7A	; 122
     94e:	55 e4       	ldi	r21, 0x45	; 69
     950:	69 81       	ldd	r22, Y+1	; 0x01
     952:	7a 81       	ldd	r23, Y+2	; 0x02
     954:	8b 81       	ldd	r24, Y+3	; 0x03
     956:	9c 81       	ldd	r25, Y+4	; 0x04
     958:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__mulsf3>
     95c:	dc 01       	movw	r26, r24
     95e:	cb 01       	movw	r24, r22
     960:	8d 83       	std	Y+5, r24	; 0x05
     962:	9e 83       	std	Y+6, r25	; 0x06
     964:	af 83       	std	Y+7, r26	; 0x07
     966:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 e8       	ldi	r20, 0x80	; 128
     96e:	5f e3       	ldi	r21, 0x3F	; 63
     970:	6d 81       	ldd	r22, Y+5	; 0x05
     972:	7e 81       	ldd	r23, Y+6	; 0x06
     974:	8f 81       	ldd	r24, Y+7	; 0x07
     976:	98 85       	ldd	r25, Y+8	; 0x08
     978:	c4 d7       	rcall	.+3976   	; 0x1902 <__cmpsf2>
     97a:	88 23       	and	r24, r24
     97c:	2c f4       	brge	.+10     	; 0x988 <resetDisplay+0x76>
		__ticks = 1;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	9a 87       	std	Y+10, r25	; 0x0a
     984:	89 87       	std	Y+9, r24	; 0x09
     986:	3d c0       	rjmp	.+122    	; 0xa02 <resetDisplay+0xf0>
	else if (__tmp > 65535)
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	3f ef       	ldi	r19, 0xFF	; 255
     98c:	4f e7       	ldi	r20, 0x7F	; 127
     98e:	57 e4       	ldi	r21, 0x47	; 71
     990:	6d 81       	ldd	r22, Y+5	; 0x05
     992:	7e 81       	ldd	r23, Y+6	; 0x06
     994:	8f 81       	ldd	r24, Y+7	; 0x07
     996:	98 85       	ldd	r25, Y+8	; 0x08
     998:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__gesf2>
     99c:	18 16       	cp	r1, r24
     99e:	44 f5       	brge	.+80     	; 0x9f0 <resetDisplay+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e2       	ldi	r20, 0x20	; 32
     9a6:	51 e4       	ldi	r21, 0x41	; 65
     9a8:	69 81       	ldd	r22, Y+1	; 0x01
     9aa:	7a 81       	ldd	r23, Y+2	; 0x02
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	9c 81       	ldd	r25, Y+4	; 0x04
     9b0:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__mulsf3>
     9b4:	dc 01       	movw	r26, r24
     9b6:	cb 01       	movw	r24, r22
     9b8:	bc 01       	movw	r22, r24
     9ba:	cd 01       	movw	r24, r26
     9bc:	a6 d7       	rcall	.+3916   	; 0x190a <__fixunssfsi>
     9be:	dc 01       	movw	r26, r24
     9c0:	cb 01       	movw	r24, r22
     9c2:	9a 87       	std	Y+10, r25	; 0x0a
     9c4:	89 87       	std	Y+9, r24	; 0x09
     9c6:	0f c0       	rjmp	.+30     	; 0x9e6 <resetDisplay+0xd4>
     9c8:	80 e9       	ldi	r24, 0x90	; 144
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	9c 87       	std	Y+12, r25	; 0x0c
     9ce:	8b 87       	std	Y+11, r24	; 0x0b
     9d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     9d2:	9c 85       	ldd	r25, Y+12	; 0x0c
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <resetDisplay+0xc2>
     9d8:	9c 87       	std	Y+12, r25	; 0x0c
     9da:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9dc:	89 85       	ldd	r24, Y+9	; 0x09
     9de:	9a 85       	ldd	r25, Y+10	; 0x0a
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	9a 87       	std	Y+10, r25	; 0x0a
     9e4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9e6:	89 85       	ldd	r24, Y+9	; 0x09
     9e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ea:	89 2b       	or	r24, r25
     9ec:	69 f7       	brne	.-38     	; 0x9c8 <resetDisplay+0xb6>
     9ee:	13 c0       	rjmp	.+38     	; 0xa16 <resetDisplay+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9f0:	6d 81       	ldd	r22, Y+5	; 0x05
     9f2:	7e 81       	ldd	r23, Y+6	; 0x06
     9f4:	8f 81       	ldd	r24, Y+7	; 0x07
     9f6:	98 85       	ldd	r25, Y+8	; 0x08
     9f8:	88 d7       	rcall	.+3856   	; 0x190a <__fixunssfsi>
     9fa:	dc 01       	movw	r26, r24
     9fc:	cb 01       	movw	r24, r22
     9fe:	9a 87       	std	Y+10, r25	; 0x0a
     a00:	89 87       	std	Y+9, r24	; 0x09
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	9a 85       	ldd	r25, Y+10	; 0x0a
     a06:	9e 87       	std	Y+14, r25	; 0x0e
     a08:	8d 87       	std	Y+13, r24	; 0x0d
     a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <resetDisplay+0xfc>
     a12:	9e 87       	std	Y+14, r25	; 0x0e
     a14:	8d 87       	std	Y+13, r24	; 0x0d
		
	// Delay of min 100 ns (0,1ms) p.20
	_delay_ms(100);
		
	// Set RES high
	PORTA |= (1 << RST_BIT);
     a16:	82 e2       	ldi	r24, 0x22	; 34
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	22 e2       	ldi	r18, 0x22	; 34
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	f9 01       	movw	r30, r18
     a20:	20 81       	ld	r18, Z
     a22:	21 60       	ori	r18, 0x01	; 1
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
}
     a28:	00 00       	nop
     a2a:	2e 96       	adiw	r28, 0x0e	; 14
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	cd bf       	out	0x3d, r28	; 61
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <setCursor>:

void setCursor(char x, char y)
{
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	1f 92       	push	r1
     a42:	1f 92       	push	r1
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
     a48:	89 83       	std	Y+1, r24	; 0x01
     a4a:	6a 83       	std	Y+2, r22	; 0x02
	if (x > 83 || x < 0)
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	84 35       	cpi	r24, 0x54	; 84
     a50:	50 f4       	brcc	.+20     	; 0xa66 <setCursor+0x2a>
		return;
		
	if (y > 5 || y < 0)
     a52:	8a 81       	ldd	r24, Y+2	; 0x02
     a54:	86 30       	cpi	r24, 0x06	; 6
     a56:	48 f4       	brcc	.+18     	; 0xa6a <setCursor+0x2e>
		return;
	
	sendIntruction(0b10000000 | x);
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	80 68       	ori	r24, 0x80	; 128
     a5c:	0c d0       	rcall	.+24     	; 0xa76 <sendIntruction>
	sendIntruction(0b01000000 | y);
     a5e:	8a 81       	ldd	r24, Y+2	; 0x02
     a60:	80 64       	ori	r24, 0x40	; 64
     a62:	09 d0       	rcall	.+18     	; 0xa76 <sendIntruction>
     a64:	03 c0       	rjmp	.+6      	; 0xa6c <setCursor+0x30>
}

void setCursor(char x, char y)
{
	if (x > 83 || x < 0)
		return;
     a66:	00 00       	nop
     a68:	01 c0       	rjmp	.+2      	; 0xa6c <setCursor+0x30>
		
	if (y > 5 || y < 0)
		return;
     a6a:	00 00       	nop
	
	sendIntruction(0b10000000 | x);
	sendIntruction(0b01000000 | y);
}
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <sendIntruction>:

void sendIntruction(unsigned char cmd)
{
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	1f 92       	push	r1
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	89 83       	std	Y+1, r24	; 0x01
	// Set DC low, Command
	PORTA &= ~(1 << DC_BIT);
     a82:	82 e2       	ldi	r24, 0x22	; 34
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	22 e2       	ldi	r18, 0x22	; 34
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	f9 01       	movw	r30, r18
     a8c:	20 81       	ld	r18, Z
     a8e:	2d 7f       	andi	r18, 0xFD	; 253
     a90:	fc 01       	movw	r30, r24
     a92:	20 83       	st	Z, r18
	SPI_MasterTransmit(cmd);
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	1e d5       	rcall	.+2620   	; 0x14d4 <SPI_MasterTransmit>
	PORTA |= 1 << DC_BIT;
     a98:	82 e2       	ldi	r24, 0x22	; 34
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	22 e2       	ldi	r18, 0x22	; 34
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	f9 01       	movw	r30, r18
     aa2:	20 81       	ld	r18, Z
     aa4:	22 60       	ori	r18, 0x02	; 2
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18
}
     aaa:	00 00       	nop
     aac:	0f 90       	pop	r0
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	08 95       	ret

00000ab4 <sendData>:

void sendData(unsigned char data)
{	
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	1f 92       	push	r1
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= 1 << DC_BIT;
     ac0:	82 e2       	ldi	r24, 0x22	; 34
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	22 e2       	ldi	r18, 0x22	; 34
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	f9 01       	movw	r30, r18
     aca:	20 81       	ld	r18, Z
     acc:	22 60       	ori	r18, 0x02	; 2
     ace:	fc 01       	movw	r30, r24
     ad0:	20 83       	st	Z, r18
	SPI_MasterTransmit(data);
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	ff d4       	rcall	.+2558   	; 0x14d4 <SPI_MasterTransmit>
}
     ad6:	00 00       	nop
     ad8:	0f 90       	pop	r0
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <clearDisplay>:

void clearDisplay()
{
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	1f 92       	push	r1
     ae6:	1f 92       	push	r1
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
	for (int k=0; k<504; k++)
     aec:	1a 82       	std	Y+2, r1	; 0x02
     aee:	19 82       	std	Y+1, r1	; 0x01
     af0:	07 c0       	rjmp	.+14     	; 0xb00 <clearDisplay+0x20>
	{
		sendData(0x00);
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	df df       	rcall	.-66     	; 0xab4 <sendData>
	SPI_MasterTransmit(data);
}

void clearDisplay()
{
	for (int k=0; k<504; k++)
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	9a 83       	std	Y+2, r25	; 0x02
     afe:	89 83       	std	Y+1, r24	; 0x01
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	9a 81       	ldd	r25, Y+2	; 0x02
     b04:	88 3f       	cpi	r24, 0xF8	; 248
     b06:	91 40       	sbci	r25, 0x01	; 1
     b08:	a4 f3       	brlt	.-24     	; 0xaf2 <clearDisplay+0x12>
	{
		sendData(0x00);
	}
     b0a:	00 00       	nop
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <GoLeft>:
int xDirection = 1;
int yDirection = 0;
int hitSelf = 0;

void GoLeft()
{
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
	if (xDirection == 1)
     b1e:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <xDirection>
     b22:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <xDirection+0x1>
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	59 f0       	breq	.+22     	; 0xb40 <GoLeft+0x2a>
		return;
	
	yDirection = 0;
     b2a:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <yDirection+0x1>
     b2e:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <yDirection>
	xDirection = -1;
     b32:	8f ef       	ldi	r24, 0xFF	; 255
     b34:	9f ef       	ldi	r25, 0xFF	; 255
     b36:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <xDirection+0x1>
     b3a:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <xDirection>
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <GoLeft+0x2c>
int hitSelf = 0;

void GoLeft()
{
	if (xDirection == 1)
		return;
     b40:	00 00       	nop
	
	yDirection = 0;
	xDirection = -1;
}
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <GoRight>:

void GoRight()
{
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	if (xDirection == -1)
     b50:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <xDirection>
     b54:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <xDirection+0x1>
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	59 f0       	breq	.+22     	; 0xb72 <GoRight+0x2a>
		return;
	
	yDirection = 0;
     b5c:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <yDirection+0x1>
     b60:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <yDirection>
	xDirection = 1;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <xDirection+0x1>
     b6c:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <xDirection>
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <GoRight+0x2c>
}

void GoRight()
{
	if (xDirection == -1)
		return;
     b72:	00 00       	nop
	
	yDirection = 0;
	xDirection = 1;
}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <GoUp>:

void GoUp()
{
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
	if (yDirection == 1)
     b82:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <yDirection>
     b86:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <yDirection+0x1>
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	59 f0       	breq	.+22     	; 0xba4 <GoUp+0x2a>
	return;
	
	yDirection = -1;
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	9f ef       	ldi	r25, 0xFF	; 255
     b92:	90 93 80 05 	sts	0x0580, r25	; 0x800580 <yDirection+0x1>
     b96:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <yDirection>
	xDirection = 0;
     b9a:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <xDirection+0x1>
     b9e:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <xDirection>
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <GoUp+0x2c>
}

void GoUp()
{
	if (yDirection == 1)
	return;
     ba4:	00 00       	nop
	
	yDirection = -1;
	xDirection = 0;
}
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	08 95       	ret

00000bac <GoDown>:

void GoDown()
{
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
	if (yDirection == -1)
     bb4:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <yDirection>
     bb8:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <yDirection+0x1>
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	59 f0       	breq	.+22     	; 0xbd6 <GoDown+0x2a>
	return;
	
	xDirection = 0;
     bc0:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <xDirection+0x1>
     bc4:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <xDirection>
	yDirection = 1;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	90 93 80 05 	sts	0x0580, r25	; 0x800580 <yDirection+0x1>
     bd0:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <yDirection>
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <GoDown+0x2c>
}

void GoDown()
{
	if (yDirection == -1)
	return;
     bd6:	00 00       	nop
	
	xDirection = 0;
	yDirection = 1;
}
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <CheckInput>:

void CheckInput()
{
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
	if (GetKey() == '8')
     be6:	20 db       	rcall	.-2496   	; 0x228 <GetKey>
     be8:	88 33       	cpi	r24, 0x38	; 56
     bea:	09 f4       	brne	.+2      	; 0xbee <CheckInput+0x10>
	{
		GoDown();
     bec:	df df       	rcall	.-66     	; 0xbac <GoDown>
	}

	if (GetKey() == '2')
     bee:	1c db       	rcall	.-2504   	; 0x228 <GetKey>
     bf0:	82 33       	cpi	r24, 0x32	; 50
	{
		GoUp();
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <CheckInput+0x18>
	}

	if (GetKey() == '6')
     bf4:	c2 df       	rcall	.-124    	; 0xb7a <GoUp>
     bf6:	18 db       	rcall	.-2512   	; 0x228 <GetKey>
     bf8:	86 33       	cpi	r24, 0x36	; 54
	{
		GoRight();
     bfa:	09 f4       	brne	.+2      	; 0xbfe <CheckInput+0x20>
     bfc:	a5 df       	rcall	.-182    	; 0xb48 <GoRight>
	}

	if (GetKey() == '4')
     bfe:	14 db       	rcall	.-2520   	; 0x228 <GetKey>
     c00:	84 33       	cpi	r24, 0x34	; 52
     c02:	09 f4       	brne	.+2      	; 0xc06 <CheckInput+0x28>
     c04:	88 df       	rcall	.-240    	; 0xb16 <GoLeft>
	{
		GoLeft();
     c06:	00 00       	nop
     c08:	df 91       	pop	r29
	}
}
     c0a:	cf 91       	pop	r28
     c0c:	08 95       	ret

00000c0e <CheckSnakeBodyCollision>:
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29

void CheckSnakeBodyCollision(struct SnakeBodyPart snakeArray[], int snakeLength)
{
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	6a 97       	sbiw	r28, 0x1a	; 26
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
     c22:	98 8f       	std	Y+24, r25	; 0x18
     c24:	8f 8b       	std	Y+23, r24	; 0x17
     c26:	7a 8f       	std	Y+26, r23	; 0x1a
     c28:	69 8f       	std	Y+25, r22	; 0x19
	struct SnakeBodyPart snakeHead = snakeArray[0];
     c2a:	8f 89       	ldd	r24, Y+23	; 0x17
     c2c:	98 8d       	ldd	r25, Y+24	; 0x18
     c2e:	2a e0       	ldi	r18, 0x0A	; 10
     c30:	fc 01       	movw	r30, r24
     c32:	de 01       	movw	r26, r28
     c34:	13 96       	adiw	r26, 0x03	; 3
     c36:	01 90       	ld	r0, Z+
     c38:	0d 92       	st	X+, r0
     c3a:	2a 95       	dec	r18
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <CheckSnakeBodyCollision+0x28>
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	9a 83       	std	Y+2, r25	; 0x02
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	46 c0       	rjmp	.+140    	; 0xcd4 <CheckSnakeBodyCollision+0xc6>
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	9c 01       	movw	r18, r24
     c52:	22 0f       	add	r18, r18
     c54:	33 1f       	adc	r19, r19
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	82 0f       	add	r24, r18
     c5c:	93 1f       	adc	r25, r19
     c5e:	2f 89       	ldd	r18, Y+23	; 0x17
     c60:	38 8d       	ldd	r19, Y+24	; 0x18
     c62:	82 0f       	add	r24, r18
     c64:	93 1f       	adc	r25, r19
     c66:	2a e0       	ldi	r18, 0x0A	; 10
     c68:	fc 01       	movw	r30, r24
     c6a:	de 01       	movw	r26, r28
     c6c:	1d 96       	adiw	r26, 0x0d	; 13
     c6e:	01 90       	ld	r0, Z+
     c70:	0d 92       	st	X+, r0
     c72:	2a 95       	dec	r18
     c74:	e1 f7       	brne	.-8      	; 0xc6e <CheckSnakeBodyCollision+0x60>
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
     c76:	2b 81       	ldd	r18, Y+3	; 0x03
     c78:	3c 81       	ldd	r19, Y+4	; 0x04
     c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c7e:	02 96       	adiw	r24, 0x02	; 2
     c80:	28 17       	cp	r18, r24
     c82:	39 07       	cpc	r19, r25
     c84:	14 f5       	brge	.+68     	; 0xcca <CheckSnakeBodyCollision+0xbc>
		(snakeHead.x + 2) > currentBodyPart.x &&
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	9c 01       	movw	r18, r24
     c8c:	2e 5f       	subi	r18, 0xFE	; 254
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	8d 85       	ldd	r24, Y+13	; 0x0d
     c92:	9e 85       	ldd	r25, Y+14	; 0x0e
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
     c94:	82 17       	cp	r24, r18
     c96:	93 07       	cpc	r25, r19
     c98:	c4 f4       	brge	.+48     	; 0xcca <CheckSnakeBodyCollision+0xbc>
		(snakeHead.x + 2) > currentBodyPart.x &&
		snakeHead.y < (currentBodyPart.y + 2) &&
     c9a:	2d 81       	ldd	r18, Y+5	; 0x05
     c9c:	3e 81       	ldd	r19, Y+6	; 0x06
     c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca0:	98 89       	ldd	r25, Y+16	; 0x10
     ca2:	02 96       	adiw	r24, 0x02	; 2
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
		(snakeHead.x + 2) > currentBodyPart.x &&
     ca4:	28 17       	cp	r18, r24
     ca6:	39 07       	cpc	r19, r25
     ca8:	84 f4       	brge	.+32     	; 0xcca <CheckSnakeBodyCollision+0xbc>
		snakeHead.y < (currentBodyPart.y + 2) &&
		(2 + snakeHead.y) > currentBodyPart.y)
     caa:	8d 81       	ldd	r24, Y+5	; 0x05
     cac:	9e 81       	ldd	r25, Y+6	; 0x06
     cae:	9c 01       	movw	r18, r24
     cb0:	2e 5f       	subi	r18, 0xFE	; 254
     cb2:	3f 4f       	sbci	r19, 0xFF	; 255
     cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb6:	98 89       	ldd	r25, Y+16	; 0x10
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
		(snakeHead.x + 2) > currentBodyPart.x &&
		snakeHead.y < (currentBodyPart.y + 2) &&
     cb8:	82 17       	cp	r24, r18
     cba:	93 07       	cpc	r25, r19
     cbc:	34 f4       	brge	.+12     	; 0xcca <CheckSnakeBodyCollision+0xbc>
		(2 + snakeHead.y) > currentBodyPart.y)
		{
			hitSelf = 1;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	90 93 82 05 	sts	0x0582, r25	; 0x800582 <hitSelf+0x1>
     cc6:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <hitSelf>

void CheckSnakeBodyCollision(struct SnakeBodyPart snakeArray[], int snakeLength)
{
	struct SnakeBodyPart snakeHead = snakeArray[0];
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	29 81       	ldd	r18, Y+1	; 0x01
     cd6:	3a 81       	ldd	r19, Y+2	; 0x02
     cd8:	89 8d       	ldd	r24, Y+25	; 0x19
     cda:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cdc:	28 17       	cp	r18, r24
     cde:	39 07       	cpc	r19, r25
     ce0:	0c f4       	brge	.+2      	; 0xce4 <CheckSnakeBodyCollision+0xd6>
     ce2:	b2 cf       	rjmp	.-156    	; 0xc48 <CheckSnakeBodyCollision+0x3a>
		(2 + snakeHead.y) > currentBodyPart.y)
		{
			hitSelf = 1;
		}
	}
}
     ce4:	00 00       	nop
     ce6:	6a 96       	adiw	r28, 0x1a	; 26
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	08 95       	ret

00000cf8 <InitSnake>:

void InitSnake(struct SnakeBodyPart snakeArray[], int snakeLength)
{
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	6a 97       	sbiw	r28, 0x1a	; 26
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	98 8f       	std	Y+24, r25	; 0x18
     d0e:	8f 8b       	std	Y+23, r24	; 0x17
     d10:	7a 8f       	std	Y+26, r23	; 0x1a
     d12:	69 8f       	std	Y+25, r22	; 0x19
	if (snakeLength <= 0)
     d14:	89 8d       	ldd	r24, Y+25	; 0x19
     d16:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d18:	18 16       	cp	r1, r24
     d1a:	19 06       	cpc	r1, r25
     d1c:	0c f0       	brlt	.+2      	; 0xd20 <InitSnake+0x28>
     d1e:	6d c0       	rjmp	.+218    	; 0xdfa <InitSnake+0x102>
		return;
		
	// Clear Array
	memset(snakeArray, 0, snakeLength);
     d20:	29 8d       	ldd	r18, Y+25	; 0x19
     d22:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d24:	8f 89       	ldd	r24, Y+23	; 0x17
     d26:	98 8d       	ldd	r25, Y+24	; 0x18
     d28:	a9 01       	movw	r20, r18
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	ae d7       	rcall	.+3932   	; 0x1c8c <memset>
	hitSelf = 0;
     d30:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <hitSelf+0x1>
     d34:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <hitSelf>
	
	xDirection = 1;
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <xDirection+0x1>
     d40:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <xDirection>
	yDirection = 0;
     d44:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <yDirection+0x1>
     d48:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <yDirection>
		
	struct SnakeBodyPart head;
	head.x = 0;
     d4c:	1c 82       	std	Y+4, r1	; 0x04
     d4e:	1b 82       	std	Y+3, r1	; 0x03
	head.y = 0;
     d50:	1e 82       	std	Y+6, r1	; 0x06
     d52:	1d 82       	std	Y+5, r1	; 0x05
	head.prevX = 0;
     d54:	18 86       	std	Y+8, r1	; 0x08
     d56:	1f 82       	std	Y+7, r1	; 0x07
	head.prevY = 0;
     d58:	1a 86       	std	Y+10, r1	; 0x0a
     d5a:	19 86       	std	Y+9, r1	; 0x09
	head.headPointer = 0;
     d5c:	1c 86       	std	Y+12, r1	; 0x0c
     d5e:	1b 86       	std	Y+11, r1	; 0x0b
	snakeArray[0] = head;
     d60:	8f 89       	ldd	r24, Y+23	; 0x17
     d62:	98 8d       	ldd	r25, Y+24	; 0x18
     d64:	2a e0       	ldi	r18, 0x0A	; 10
     d66:	fe 01       	movw	r30, r28
     d68:	33 96       	adiw	r30, 0x03	; 3
     d6a:	dc 01       	movw	r26, r24
     d6c:	01 90       	ld	r0, Z+
     d6e:	0d 92       	st	X+, r0
     d70:	2a 95       	dec	r18
     d72:	e1 f7       	brne	.-8      	; 0xd6c <InitSnake+0x74>
	
	for (int snakeBodyIndex = 1; snakeBodyIndex < (snakeLength); snakeBodyIndex++)
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	9a 83       	std	Y+2, r25	; 0x02
     d7a:	89 83       	std	Y+1, r24	; 0x01
     d7c:	36 c0       	rjmp	.+108    	; 0xdea <InitSnake+0xf2>
	{
		struct SnakeBodyPart newBodyPart;
		newBodyPart.x = -2;
     d7e:	8e ef       	ldi	r24, 0xFE	; 254
     d80:	9f ef       	ldi	r25, 0xFF	; 255
     d82:	9e 87       	std	Y+14, r25	; 0x0e
     d84:	8d 87       	std	Y+13, r24	; 0x0d
		newBodyPart.y = -2;
     d86:	8e ef       	ldi	r24, 0xFE	; 254
     d88:	9f ef       	ldi	r25, 0xFF	; 255
     d8a:	98 8b       	std	Y+16, r25	; 0x10
     d8c:	8f 87       	std	Y+15, r24	; 0x0f
		newBodyPart.headPointer = &snakeArray[snakeBodyIndex - 1];
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	9c 01       	movw	r18, r24
     d98:	22 0f       	add	r18, r18
     d9a:	33 1f       	adc	r19, r19
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	82 0f       	add	r24, r18
     da2:	93 1f       	adc	r25, r19
     da4:	0a 97       	sbiw	r24, 0x0a	; 10
     da6:	2f 89       	ldd	r18, Y+23	; 0x17
     da8:	38 8d       	ldd	r19, Y+24	; 0x18
     daa:	82 0f       	add	r24, r18
     dac:	93 1f       	adc	r25, r19
     dae:	9e 8b       	std	Y+22, r25	; 0x16
     db0:	8d 8b       	std	Y+21, r24	; 0x15
		snakeArray[snakeBodyIndex] = newBodyPart;
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	9c 01       	movw	r18, r24
     dbc:	22 0f       	add	r18, r18
     dbe:	33 1f       	adc	r19, r19
     dc0:	22 0f       	add	r18, r18
     dc2:	33 1f       	adc	r19, r19
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	2f 89       	ldd	r18, Y+23	; 0x17
     dca:	38 8d       	ldd	r19, Y+24	; 0x18
     dcc:	82 0f       	add	r24, r18
     dce:	93 1f       	adc	r25, r19
     dd0:	2a e0       	ldi	r18, 0x0A	; 10
     dd2:	fe 01       	movw	r30, r28
     dd4:	3d 96       	adiw	r30, 0x0d	; 13
     dd6:	dc 01       	movw	r26, r24
     dd8:	01 90       	ld	r0, Z+
     dda:	0d 92       	st	X+, r0
     ddc:	2a 95       	dec	r18
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <InitSnake+0xe0>
	head.prevX = 0;
	head.prevY = 0;
	head.headPointer = 0;
	snakeArray[0] = head;
	
	for (int snakeBodyIndex = 1; snakeBodyIndex < (snakeLength); snakeBodyIndex++)
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	9a 81       	ldd	r25, Y+2	; 0x02
     de4:	01 96       	adiw	r24, 0x01	; 1
     de6:	9a 83       	std	Y+2, r25	; 0x02
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	29 81       	ldd	r18, Y+1	; 0x01
     dec:	3a 81       	ldd	r19, Y+2	; 0x02
     dee:	89 8d       	ldd	r24, Y+25	; 0x19
     df0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     df2:	28 17       	cp	r18, r24
     df4:	39 07       	cpc	r19, r25
     df6:	1c f2       	brlt	.-122    	; 0xd7e <InitSnake+0x86>
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <InitSnake+0x104>
}

void InitSnake(struct SnakeBodyPart snakeArray[], int snakeLength)
{
	if (snakeLength <= 0)
		return;
     dfa:	00 00       	nop
		newBodyPart.x = -2;
		newBodyPart.y = -2;
		newBodyPart.headPointer = &snakeArray[snakeBodyIndex - 1];
		snakeArray[snakeBodyIndex] = newBodyPart;
	}
}
     dfc:	6a 96       	adiw	r28, 0x1a	; 26
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <UpdateSnake>:

void UpdateSnake(struct SnakeBodyPart snakeArray[], int snakeLength, int worldWidth, int worldHeight)
{
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	2a 97       	sbiw	r28, 0x0a	; 10
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	9c 83       	std	Y+4, r25	; 0x04
     e24:	8b 83       	std	Y+3, r24	; 0x03
     e26:	7e 83       	std	Y+6, r23	; 0x06
     e28:	6d 83       	std	Y+5, r22	; 0x05
     e2a:	58 87       	std	Y+8, r21	; 0x08
     e2c:	4f 83       	std	Y+7, r20	; 0x07
     e2e:	3a 87       	std	Y+10, r19	; 0x0a
     e30:	29 87       	std	Y+9, r18	; 0x09
	CheckInput();
     e32:	d5 de       	rcall	.-598    	; 0xbde <CheckInput>
	
	for (int bodyPartIndex = 0; bodyPartIndex < snakeLength; bodyPartIndex++)
     e34:	1a 82       	std	Y+2, r1	; 0x02
     e36:	19 82       	std	Y+1, r1	; 0x01
     e38:	b5 c2       	rjmp	.+1386   	; 0x13a4 <UpdateSnake+0x596>
	{
		// Check for head
		if (snakeArray[bodyPartIndex].headPointer == 0)
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	9c 01       	movw	r18, r24
     e44:	22 0f       	add	r18, r18
     e46:	33 1f       	adc	r19, r19
     e48:	22 0f       	add	r18, r18
     e4a:	33 1f       	adc	r19, r19
     e4c:	82 0f       	add	r24, r18
     e4e:	93 1f       	adc	r25, r19
     e50:	2b 81       	ldd	r18, Y+3	; 0x03
     e52:	3c 81       	ldd	r19, Y+4	; 0x04
     e54:	82 0f       	add	r24, r18
     e56:	93 1f       	adc	r25, r19
     e58:	fc 01       	movw	r30, r24
     e5a:	80 85       	ldd	r24, Z+8	; 0x08
     e5c:	91 85       	ldd	r25, Z+9	; 0x09
     e5e:	89 2b       	or	r24, r25
     e60:	09 f0       	breq	.+2      	; 0xe64 <UpdateSnake+0x56>
     e62:	05 c2       	rjmp	.+1034   	; 0x126e <UpdateSnake+0x460>
		{
			snakeArray[bodyPartIndex].prevX = snakeArray[bodyPartIndex].x;
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	9c 01       	movw	r18, r24
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	22 0f       	add	r18, r18
     e74:	33 1f       	adc	r19, r19
     e76:	82 0f       	add	r24, r18
     e78:	93 1f       	adc	r25, r19
     e7a:	2b 81       	ldd	r18, Y+3	; 0x03
     e7c:	3c 81       	ldd	r19, Y+4	; 0x04
     e7e:	28 0f       	add	r18, r24
     e80:	39 1f       	adc	r19, r25
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	ac 01       	movw	r20, r24
     e8c:	44 0f       	add	r20, r20
     e8e:	55 1f       	adc	r21, r21
     e90:	44 0f       	add	r20, r20
     e92:	55 1f       	adc	r21, r21
     e94:	84 0f       	add	r24, r20
     e96:	95 1f       	adc	r25, r21
     e98:	4b 81       	ldd	r20, Y+3	; 0x03
     e9a:	5c 81       	ldd	r21, Y+4	; 0x04
     e9c:	84 0f       	add	r24, r20
     e9e:	95 1f       	adc	r25, r21
     ea0:	fc 01       	movw	r30, r24
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	f9 01       	movw	r30, r18
     ea8:	95 83       	std	Z+5, r25	; 0x05
     eaa:	84 83       	std	Z+4, r24	; 0x04
			snakeArray[bodyPartIndex].prevY = snakeArray[bodyPartIndex].y;
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	9c 01       	movw	r18, r24
     eb6:	22 0f       	add	r18, r18
     eb8:	33 1f       	adc	r19, r19
     eba:	22 0f       	add	r18, r18
     ebc:	33 1f       	adc	r19, r19
     ebe:	82 0f       	add	r24, r18
     ec0:	93 1f       	adc	r25, r19
     ec2:	2b 81       	ldd	r18, Y+3	; 0x03
     ec4:	3c 81       	ldd	r19, Y+4	; 0x04
     ec6:	28 0f       	add	r18, r24
     ec8:	39 1f       	adc	r19, r25
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	ac 01       	movw	r20, r24
     ed4:	44 0f       	add	r20, r20
     ed6:	55 1f       	adc	r21, r21
     ed8:	44 0f       	add	r20, r20
     eda:	55 1f       	adc	r21, r21
     edc:	84 0f       	add	r24, r20
     ede:	95 1f       	adc	r25, r21
     ee0:	4b 81       	ldd	r20, Y+3	; 0x03
     ee2:	5c 81       	ldd	r21, Y+4	; 0x04
     ee4:	84 0f       	add	r24, r20
     ee6:	95 1f       	adc	r25, r21
     ee8:	fc 01       	movw	r30, r24
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	93 81       	ldd	r25, Z+3	; 0x03
     eee:	f9 01       	movw	r30, r18
     ef0:	97 83       	std	Z+7, r25	; 0x07
     ef2:	86 83       	std	Z+6, r24	; 0x06
					
			if ((snakeArray[bodyPartIndex].x + 1) > worldWidth)
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	9a 81       	ldd	r25, Y+2	; 0x02
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	9c 01       	movw	r18, r24
     efe:	22 0f       	add	r18, r18
     f00:	33 1f       	adc	r19, r19
     f02:	22 0f       	add	r18, r18
     f04:	33 1f       	adc	r19, r19
     f06:	82 0f       	add	r24, r18
     f08:	93 1f       	adc	r25, r19
     f0a:	2b 81       	ldd	r18, Y+3	; 0x03
     f0c:	3c 81       	ldd	r19, Y+4	; 0x04
     f0e:	82 0f       	add	r24, r18
     f10:	93 1f       	adc	r25, r19
     f12:	fc 01       	movw	r30, r24
     f14:	80 81       	ld	r24, Z
     f16:	91 81       	ldd	r25, Z+1	; 0x01
     f18:	9c 01       	movw	r18, r24
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	8f 81       	ldd	r24, Y+7	; 0x07
     f20:	98 85       	ldd	r25, Y+8	; 0x08
     f22:	82 17       	cp	r24, r18
     f24:	93 07       	cpc	r25, r19
     f26:	0c f0       	brlt	.+2      	; 0xf2a <UpdateSnake+0x11c>
     f28:	3f c0       	rjmp	.+126    	; 0xfa8 <UpdateSnake+0x19a>
			{
				snakeArray[bodyPartIndex].x = 0;
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	9c 01       	movw	r18, r24
     f34:	22 0f       	add	r18, r18
     f36:	33 1f       	adc	r19, r19
     f38:	22 0f       	add	r18, r18
     f3a:	33 1f       	adc	r19, r19
     f3c:	82 0f       	add	r24, r18
     f3e:	93 1f       	adc	r25, r19
     f40:	2b 81       	ldd	r18, Y+3	; 0x03
     f42:	3c 81       	ldd	r19, Y+4	; 0x04
     f44:	82 0f       	add	r24, r18
     f46:	93 1f       	adc	r25, r19
     f48:	fc 01       	movw	r30, r24
     f4a:	11 82       	std	Z+1, r1	; 0x01
     f4c:	10 82       	st	Z, r1
				snakeArray[bodyPartIndex].y += 2 * yDirection;
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	9a 81       	ldd	r25, Y+2	; 0x02
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	9c 01       	movw	r18, r24
     f58:	22 0f       	add	r18, r18
     f5a:	33 1f       	adc	r19, r19
     f5c:	22 0f       	add	r18, r18
     f5e:	33 1f       	adc	r19, r19
     f60:	82 0f       	add	r24, r18
     f62:	93 1f       	adc	r25, r19
     f64:	2b 81       	ldd	r18, Y+3	; 0x03
     f66:	3c 81       	ldd	r19, Y+4	; 0x04
     f68:	28 0f       	add	r18, r24
     f6a:	39 1f       	adc	r19, r25
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	ac 01       	movw	r20, r24
     f76:	44 0f       	add	r20, r20
     f78:	55 1f       	adc	r21, r21
     f7a:	44 0f       	add	r20, r20
     f7c:	55 1f       	adc	r21, r21
     f7e:	84 0f       	add	r24, r20
     f80:	95 1f       	adc	r25, r21
     f82:	4b 81       	ldd	r20, Y+3	; 0x03
     f84:	5c 81       	ldd	r21, Y+4	; 0x04
     f86:	84 0f       	add	r24, r20
     f88:	95 1f       	adc	r25, r21
     f8a:	fc 01       	movw	r30, r24
     f8c:	42 81       	ldd	r20, Z+2	; 0x02
     f8e:	53 81       	ldd	r21, Z+3	; 0x03
     f90:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <yDirection>
     f94:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <yDirection+0x1>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	84 0f       	add	r24, r20
     f9e:	95 1f       	adc	r25, r21
     fa0:	f9 01       	movw	r30, r18
     fa2:	93 83       	std	Z+3, r25	; 0x03
     fa4:	82 83       	std	Z+2, r24	; 0x02
     fa6:	f9 c1       	rjmp	.+1010   	; 0x139a <UpdateSnake+0x58c>
			}
			else if ((snakeArray[bodyPartIndex].x) < 0) {
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	9c 01       	movw	r18, r24
     fb2:	22 0f       	add	r18, r18
     fb4:	33 1f       	adc	r19, r19
     fb6:	22 0f       	add	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	82 0f       	add	r24, r18
     fbc:	93 1f       	adc	r25, r19
     fbe:	2b 81       	ldd	r18, Y+3	; 0x03
     fc0:	3c 81       	ldd	r19, Y+4	; 0x04
     fc2:	82 0f       	add	r24, r18
     fc4:	93 1f       	adc	r25, r19
     fc6:	fc 01       	movw	r30, r24
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	99 23       	and	r25, r25
     fce:	0c f0       	brlt	.+2      	; 0xfd2 <UpdateSnake+0x1c4>
     fd0:	43 c0       	rjmp	.+134    	; 0x1058 <UpdateSnake+0x24a>
				snakeArray[bodyPartIndex].x = worldWidth - 1;
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	9a 81       	ldd	r25, Y+2	; 0x02
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	9c 01       	movw	r18, r24
     fdc:	22 0f       	add	r18, r18
     fde:	33 1f       	adc	r19, r19
     fe0:	22 0f       	add	r18, r18
     fe2:	33 1f       	adc	r19, r19
     fe4:	82 0f       	add	r24, r18
     fe6:	93 1f       	adc	r25, r19
     fe8:	2b 81       	ldd	r18, Y+3	; 0x03
     fea:	3c 81       	ldd	r19, Y+4	; 0x04
     fec:	82 0f       	add	r24, r18
     fee:	93 1f       	adc	r25, r19
     ff0:	2f 81       	ldd	r18, Y+7	; 0x07
     ff2:	38 85       	ldd	r19, Y+8	; 0x08
     ff4:	21 50       	subi	r18, 0x01	; 1
     ff6:	31 09       	sbc	r19, r1
     ff8:	fc 01       	movw	r30, r24
     ffa:	31 83       	std	Z+1, r19	; 0x01
     ffc:	20 83       	st	Z, r18
				snakeArray[bodyPartIndex].y += 2 * yDirection;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	9c 01       	movw	r18, r24
    1008:	22 0f       	add	r18, r18
    100a:	33 1f       	adc	r19, r19
    100c:	22 0f       	add	r18, r18
    100e:	33 1f       	adc	r19, r19
    1010:	82 0f       	add	r24, r18
    1012:	93 1f       	adc	r25, r19
    1014:	2b 81       	ldd	r18, Y+3	; 0x03
    1016:	3c 81       	ldd	r19, Y+4	; 0x04
    1018:	28 0f       	add	r18, r24
    101a:	39 1f       	adc	r19, r25
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	9a 81       	ldd	r25, Y+2	; 0x02
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	ac 01       	movw	r20, r24
    1026:	44 0f       	add	r20, r20
    1028:	55 1f       	adc	r21, r21
    102a:	44 0f       	add	r20, r20
    102c:	55 1f       	adc	r21, r21
    102e:	84 0f       	add	r24, r20
    1030:	95 1f       	adc	r25, r21
    1032:	4b 81       	ldd	r20, Y+3	; 0x03
    1034:	5c 81       	ldd	r21, Y+4	; 0x04
    1036:	84 0f       	add	r24, r20
    1038:	95 1f       	adc	r25, r21
    103a:	fc 01       	movw	r30, r24
    103c:	42 81       	ldd	r20, Z+2	; 0x02
    103e:	53 81       	ldd	r21, Z+3	; 0x03
    1040:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <yDirection>
    1044:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <yDirection+0x1>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	84 0f       	add	r24, r20
    104e:	95 1f       	adc	r25, r21
    1050:	f9 01       	movw	r30, r18
    1052:	93 83       	std	Z+3, r25	; 0x03
    1054:	82 83       	std	Z+2, r24	; 0x02
    1056:	a1 c1       	rjmp	.+834    	; 0x139a <UpdateSnake+0x58c>
				} else if ((snakeArray[bodyPartIndex].y + 1) > worldHeight) {
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	9c 01       	movw	r18, r24
    1062:	22 0f       	add	r18, r18
    1064:	33 1f       	adc	r19, r19
    1066:	22 0f       	add	r18, r18
    1068:	33 1f       	adc	r19, r19
    106a:	82 0f       	add	r24, r18
    106c:	93 1f       	adc	r25, r19
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	3c 81       	ldd	r19, Y+4	; 0x04
    1072:	82 0f       	add	r24, r18
    1074:	93 1f       	adc	r25, r19
    1076:	fc 01       	movw	r30, r24
    1078:	82 81       	ldd	r24, Z+2	; 0x02
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	9c 01       	movw	r18, r24
    107e:	2f 5f       	subi	r18, 0xFF	; 255
    1080:	3f 4f       	sbci	r19, 0xFF	; 255
    1082:	89 85       	ldd	r24, Y+9	; 0x09
    1084:	9a 85       	ldd	r25, Y+10	; 0x0a
    1086:	82 17       	cp	r24, r18
    1088:	93 07       	cpc	r25, r19
    108a:	0c f0       	brlt	.+2      	; 0x108e <UpdateSnake+0x280>
    108c:	3f c0       	rjmp	.+126    	; 0x110c <UpdateSnake+0x2fe>
				snakeArray[bodyPartIndex].y = 0;
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	9c 01       	movw	r18, r24
    1098:	22 0f       	add	r18, r18
    109a:	33 1f       	adc	r19, r19
    109c:	22 0f       	add	r18, r18
    109e:	33 1f       	adc	r19, r19
    10a0:	82 0f       	add	r24, r18
    10a2:	93 1f       	adc	r25, r19
    10a4:	2b 81       	ldd	r18, Y+3	; 0x03
    10a6:	3c 81       	ldd	r19, Y+4	; 0x04
    10a8:	82 0f       	add	r24, r18
    10aa:	93 1f       	adc	r25, r19
    10ac:	fc 01       	movw	r30, r24
    10ae:	13 82       	std	Z+3, r1	; 0x03
    10b0:	12 82       	std	Z+2, r1	; 0x02
				snakeArray[bodyPartIndex].x += 2 * xDirection;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	9c 01       	movw	r18, r24
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	22 0f       	add	r18, r18
    10c2:	33 1f       	adc	r19, r19
    10c4:	82 0f       	add	r24, r18
    10c6:	93 1f       	adc	r25, r19
    10c8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ca:	3c 81       	ldd	r19, Y+4	; 0x04
    10cc:	28 0f       	add	r18, r24
    10ce:	39 1f       	adc	r19, r25
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	ac 01       	movw	r20, r24
    10da:	44 0f       	add	r20, r20
    10dc:	55 1f       	adc	r21, r21
    10de:	44 0f       	add	r20, r20
    10e0:	55 1f       	adc	r21, r21
    10e2:	84 0f       	add	r24, r20
    10e4:	95 1f       	adc	r25, r21
    10e6:	4b 81       	ldd	r20, Y+3	; 0x03
    10e8:	5c 81       	ldd	r21, Y+4	; 0x04
    10ea:	84 0f       	add	r24, r20
    10ec:	95 1f       	adc	r25, r21
    10ee:	fc 01       	movw	r30, r24
    10f0:	40 81       	ld	r20, Z
    10f2:	51 81       	ldd	r21, Z+1	; 0x01
    10f4:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <xDirection>
    10f8:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <xDirection+0x1>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	84 0f       	add	r24, r20
    1102:	95 1f       	adc	r25, r21
    1104:	f9 01       	movw	r30, r18
    1106:	91 83       	std	Z+1, r25	; 0x01
    1108:	80 83       	st	Z, r24
    110a:	47 c1       	rjmp	.+654    	; 0x139a <UpdateSnake+0x58c>
				} else if ((snakeArray[bodyPartIndex].y) < 0) {
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	9c 01       	movw	r18, r24
    1116:	22 0f       	add	r18, r18
    1118:	33 1f       	adc	r19, r19
    111a:	22 0f       	add	r18, r18
    111c:	33 1f       	adc	r19, r19
    111e:	82 0f       	add	r24, r18
    1120:	93 1f       	adc	r25, r19
    1122:	2b 81       	ldd	r18, Y+3	; 0x03
    1124:	3c 81       	ldd	r19, Y+4	; 0x04
    1126:	82 0f       	add	r24, r18
    1128:	93 1f       	adc	r25, r19
    112a:	fc 01       	movw	r30, r24
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	99 23       	and	r25, r25
    1132:	0c f0       	brlt	.+2      	; 0x1136 <UpdateSnake+0x328>
    1134:	43 c0       	rjmp	.+134    	; 0x11bc <UpdateSnake+0x3ae>
				snakeArray[bodyPartIndex].y = worldHeight - 1;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	9c 01       	movw	r18, r24
    1140:	22 0f       	add	r18, r18
    1142:	33 1f       	adc	r19, r19
    1144:	22 0f       	add	r18, r18
    1146:	33 1f       	adc	r19, r19
    1148:	82 0f       	add	r24, r18
    114a:	93 1f       	adc	r25, r19
    114c:	2b 81       	ldd	r18, Y+3	; 0x03
    114e:	3c 81       	ldd	r19, Y+4	; 0x04
    1150:	82 0f       	add	r24, r18
    1152:	93 1f       	adc	r25, r19
    1154:	29 85       	ldd	r18, Y+9	; 0x09
    1156:	3a 85       	ldd	r19, Y+10	; 0x0a
    1158:	21 50       	subi	r18, 0x01	; 1
    115a:	31 09       	sbc	r19, r1
    115c:	fc 01       	movw	r30, r24
    115e:	33 83       	std	Z+3, r19	; 0x03
    1160:	22 83       	std	Z+2, r18	; 0x02
				snakeArray[bodyPartIndex].x += 2 * xDirection;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	9a 81       	ldd	r25, Y+2	; 0x02
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	9c 01       	movw	r18, r24
    116c:	22 0f       	add	r18, r18
    116e:	33 1f       	adc	r19, r19
    1170:	22 0f       	add	r18, r18
    1172:	33 1f       	adc	r19, r19
    1174:	82 0f       	add	r24, r18
    1176:	93 1f       	adc	r25, r19
    1178:	2b 81       	ldd	r18, Y+3	; 0x03
    117a:	3c 81       	ldd	r19, Y+4	; 0x04
    117c:	28 0f       	add	r18, r24
    117e:	39 1f       	adc	r19, r25
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	ac 01       	movw	r20, r24
    118a:	44 0f       	add	r20, r20
    118c:	55 1f       	adc	r21, r21
    118e:	44 0f       	add	r20, r20
    1190:	55 1f       	adc	r21, r21
    1192:	84 0f       	add	r24, r20
    1194:	95 1f       	adc	r25, r21
    1196:	4b 81       	ldd	r20, Y+3	; 0x03
    1198:	5c 81       	ldd	r21, Y+4	; 0x04
    119a:	84 0f       	add	r24, r20
    119c:	95 1f       	adc	r25, r21
    119e:	fc 01       	movw	r30, r24
    11a0:	40 81       	ld	r20, Z
    11a2:	51 81       	ldd	r21, Z+1	; 0x01
    11a4:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <xDirection>
    11a8:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <xDirection+0x1>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	84 0f       	add	r24, r20
    11b2:	95 1f       	adc	r25, r21
    11b4:	f9 01       	movw	r30, r18
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
    11ba:	ef c0       	rjmp	.+478    	; 0x139a <UpdateSnake+0x58c>
			}
			else
			{
				snakeArray[bodyPartIndex].x += 2 * xDirection;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	9c 01       	movw	r18, r24
    11c6:	22 0f       	add	r18, r18
    11c8:	33 1f       	adc	r19, r19
    11ca:	22 0f       	add	r18, r18
    11cc:	33 1f       	adc	r19, r19
    11ce:	82 0f       	add	r24, r18
    11d0:	93 1f       	adc	r25, r19
    11d2:	2b 81       	ldd	r18, Y+3	; 0x03
    11d4:	3c 81       	ldd	r19, Y+4	; 0x04
    11d6:	28 0f       	add	r18, r24
    11d8:	39 1f       	adc	r19, r25
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	ac 01       	movw	r20, r24
    11e4:	44 0f       	add	r20, r20
    11e6:	55 1f       	adc	r21, r21
    11e8:	44 0f       	add	r20, r20
    11ea:	55 1f       	adc	r21, r21
    11ec:	84 0f       	add	r24, r20
    11ee:	95 1f       	adc	r25, r21
    11f0:	4b 81       	ldd	r20, Y+3	; 0x03
    11f2:	5c 81       	ldd	r21, Y+4	; 0x04
    11f4:	84 0f       	add	r24, r20
    11f6:	95 1f       	adc	r25, r21
    11f8:	fc 01       	movw	r30, r24
    11fa:	40 81       	ld	r20, Z
    11fc:	51 81       	ldd	r21, Z+1	; 0x01
    11fe:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <xDirection>
    1202:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <xDirection+0x1>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	84 0f       	add	r24, r20
    120c:	95 1f       	adc	r25, r21
    120e:	f9 01       	movw	r30, r18
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	80 83       	st	Z, r24
				snakeArray[bodyPartIndex].y += 2 * yDirection;
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	9c 01       	movw	r18, r24
    121e:	22 0f       	add	r18, r18
    1220:	33 1f       	adc	r19, r19
    1222:	22 0f       	add	r18, r18
    1224:	33 1f       	adc	r19, r19
    1226:	82 0f       	add	r24, r18
    1228:	93 1f       	adc	r25, r19
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	28 0f       	add	r18, r24
    1230:	39 1f       	adc	r19, r25
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	ac 01       	movw	r20, r24
    123c:	44 0f       	add	r20, r20
    123e:	55 1f       	adc	r21, r21
    1240:	44 0f       	add	r20, r20
    1242:	55 1f       	adc	r21, r21
    1244:	84 0f       	add	r24, r20
    1246:	95 1f       	adc	r25, r21
    1248:	4b 81       	ldd	r20, Y+3	; 0x03
    124a:	5c 81       	ldd	r21, Y+4	; 0x04
    124c:	84 0f       	add	r24, r20
    124e:	95 1f       	adc	r25, r21
    1250:	fc 01       	movw	r30, r24
    1252:	42 81       	ldd	r20, Z+2	; 0x02
    1254:	53 81       	ldd	r21, Z+3	; 0x03
    1256:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <yDirection>
    125a:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <yDirection+0x1>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	84 0f       	add	r24, r20
    1264:	95 1f       	adc	r25, r21
    1266:	f9 01       	movw	r30, r18
    1268:	93 83       	std	Z+3, r25	; 0x03
    126a:	82 83       	std	Z+2, r24	; 0x02
    126c:	96 c0       	rjmp	.+300    	; 0x139a <UpdateSnake+0x58c>
			}
		}
		else
		{
			snakeArray[bodyPartIndex].prevX = snakeArray[bodyPartIndex].x;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	9a 81       	ldd	r25, Y+2	; 0x02
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	9c 01       	movw	r18, r24
    1278:	22 0f       	add	r18, r18
    127a:	33 1f       	adc	r19, r19
    127c:	22 0f       	add	r18, r18
    127e:	33 1f       	adc	r19, r19
    1280:	82 0f       	add	r24, r18
    1282:	93 1f       	adc	r25, r19
    1284:	2b 81       	ldd	r18, Y+3	; 0x03
    1286:	3c 81       	ldd	r19, Y+4	; 0x04
    1288:	28 0f       	add	r18, r24
    128a:	39 1f       	adc	r19, r25
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	9a 81       	ldd	r25, Y+2	; 0x02
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	ac 01       	movw	r20, r24
    1296:	44 0f       	add	r20, r20
    1298:	55 1f       	adc	r21, r21
    129a:	44 0f       	add	r20, r20
    129c:	55 1f       	adc	r21, r21
    129e:	84 0f       	add	r24, r20
    12a0:	95 1f       	adc	r25, r21
    12a2:	4b 81       	ldd	r20, Y+3	; 0x03
    12a4:	5c 81       	ldd	r21, Y+4	; 0x04
    12a6:	84 0f       	add	r24, r20
    12a8:	95 1f       	adc	r25, r21
    12aa:	fc 01       	movw	r30, r24
    12ac:	80 81       	ld	r24, Z
    12ae:	91 81       	ldd	r25, Z+1	; 0x01
    12b0:	f9 01       	movw	r30, r18
    12b2:	95 83       	std	Z+5, r25	; 0x05
    12b4:	84 83       	std	Z+4, r24	; 0x04
			snakeArray[bodyPartIndex].prevY = snakeArray[bodyPartIndex].y;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	9c 01       	movw	r18, r24
    12c0:	22 0f       	add	r18, r18
    12c2:	33 1f       	adc	r19, r19
    12c4:	22 0f       	add	r18, r18
    12c6:	33 1f       	adc	r19, r19
    12c8:	82 0f       	add	r24, r18
    12ca:	93 1f       	adc	r25, r19
    12cc:	2b 81       	ldd	r18, Y+3	; 0x03
    12ce:	3c 81       	ldd	r19, Y+4	; 0x04
    12d0:	28 0f       	add	r18, r24
    12d2:	39 1f       	adc	r19, r25
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	ac 01       	movw	r20, r24
    12de:	44 0f       	add	r20, r20
    12e0:	55 1f       	adc	r21, r21
    12e2:	44 0f       	add	r20, r20
    12e4:	55 1f       	adc	r21, r21
    12e6:	84 0f       	add	r24, r20
    12e8:	95 1f       	adc	r25, r21
    12ea:	4b 81       	ldd	r20, Y+3	; 0x03
    12ec:	5c 81       	ldd	r21, Y+4	; 0x04
    12ee:	84 0f       	add	r24, r20
    12f0:	95 1f       	adc	r25, r21
    12f2:	fc 01       	movw	r30, r24
    12f4:	82 81       	ldd	r24, Z+2	; 0x02
    12f6:	93 81       	ldd	r25, Z+3	; 0x03
    12f8:	f9 01       	movw	r30, r18
    12fa:	97 83       	std	Z+7, r25	; 0x07
    12fc:	86 83       	std	Z+6, r24	; 0x06
			snakeArray[bodyPartIndex].x = snakeArray[bodyPartIndex].headPointer->prevX;
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	9c 01       	movw	r18, r24
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	22 0f       	add	r18, r18
    130e:	33 1f       	adc	r19, r19
    1310:	82 0f       	add	r24, r18
    1312:	93 1f       	adc	r25, r19
    1314:	2b 81       	ldd	r18, Y+3	; 0x03
    1316:	3c 81       	ldd	r19, Y+4	; 0x04
    1318:	28 0f       	add	r18, r24
    131a:	39 1f       	adc	r19, r25
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	ac 01       	movw	r20, r24
    1326:	44 0f       	add	r20, r20
    1328:	55 1f       	adc	r21, r21
    132a:	44 0f       	add	r20, r20
    132c:	55 1f       	adc	r21, r21
    132e:	84 0f       	add	r24, r20
    1330:	95 1f       	adc	r25, r21
    1332:	4b 81       	ldd	r20, Y+3	; 0x03
    1334:	5c 81       	ldd	r21, Y+4	; 0x04
    1336:	84 0f       	add	r24, r20
    1338:	95 1f       	adc	r25, r21
    133a:	fc 01       	movw	r30, r24
    133c:	80 85       	ldd	r24, Z+8	; 0x08
    133e:	91 85       	ldd	r25, Z+9	; 0x09
    1340:	fc 01       	movw	r30, r24
    1342:	84 81       	ldd	r24, Z+4	; 0x04
    1344:	95 81       	ldd	r25, Z+5	; 0x05
    1346:	f9 01       	movw	r30, r18
    1348:	91 83       	std	Z+1, r25	; 0x01
    134a:	80 83       	st	Z, r24
			snakeArray[bodyPartIndex].y = snakeArray[bodyPartIndex].headPointer->prevY;
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	9c 01       	movw	r18, r24
    1356:	22 0f       	add	r18, r18
    1358:	33 1f       	adc	r19, r19
    135a:	22 0f       	add	r18, r18
    135c:	33 1f       	adc	r19, r19
    135e:	82 0f       	add	r24, r18
    1360:	93 1f       	adc	r25, r19
    1362:	2b 81       	ldd	r18, Y+3	; 0x03
    1364:	3c 81       	ldd	r19, Y+4	; 0x04
    1366:	28 0f       	add	r18, r24
    1368:	39 1f       	adc	r19, r25
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	ac 01       	movw	r20, r24
    1374:	44 0f       	add	r20, r20
    1376:	55 1f       	adc	r21, r21
    1378:	44 0f       	add	r20, r20
    137a:	55 1f       	adc	r21, r21
    137c:	84 0f       	add	r24, r20
    137e:	95 1f       	adc	r25, r21
    1380:	4b 81       	ldd	r20, Y+3	; 0x03
    1382:	5c 81       	ldd	r21, Y+4	; 0x04
    1384:	84 0f       	add	r24, r20
    1386:	95 1f       	adc	r25, r21
    1388:	fc 01       	movw	r30, r24
    138a:	80 85       	ldd	r24, Z+8	; 0x08
    138c:	91 85       	ldd	r25, Z+9	; 0x09
    138e:	fc 01       	movw	r30, r24
    1390:	86 81       	ldd	r24, Z+6	; 0x06
    1392:	97 81       	ldd	r25, Z+7	; 0x07
    1394:	f9 01       	movw	r30, r18
    1396:	93 83       	std	Z+3, r25	; 0x03
    1398:	82 83       	std	Z+2, r24	; 0x02

void UpdateSnake(struct SnakeBodyPart snakeArray[], int snakeLength, int worldWidth, int worldHeight)
{
	CheckInput();
	
	for (int bodyPartIndex = 0; bodyPartIndex < snakeLength; bodyPartIndex++)
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	29 81       	ldd	r18, Y+1	; 0x01
    13a6:	3a 81       	ldd	r19, Y+2	; 0x02
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	9e 81       	ldd	r25, Y+6	; 0x06
    13ac:	28 17       	cp	r18, r24
    13ae:	39 07       	cpc	r19, r25
    13b0:	0c f4       	brge	.+2      	; 0x13b4 <UpdateSnake+0x5a6>
    13b2:	43 cd       	rjmp	.-1402   	; 0xe3a <UpdateSnake+0x2c>
			snakeArray[bodyPartIndex].x = snakeArray[bodyPartIndex].headPointer->prevX;
			snakeArray[bodyPartIndex].y = snakeArray[bodyPartIndex].headPointer->prevY;
		}
	}
	
	CheckSnakeBodyCollision(snakeArray, snakeLength);
    13b4:	2d 81       	ldd	r18, Y+5	; 0x05
    13b6:	3e 81       	ldd	r19, Y+6	; 0x06
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	b9 01       	movw	r22, r18
    13be:	27 dc       	rcall	.-1970   	; 0xc0e <CheckSnakeBodyCollision>
}
    13c0:	00 00       	nop
    13c2:	2a 96       	adiw	r28, 0x0a	; 10
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <GrowSnake>:

void GrowSnake(struct SnakeBodyPart snakeArray[], int snakeBodyLength)
{
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	68 97       	sbiw	r28, 0x18	; 24
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	9e 8b       	std	Y+22, r25	; 0x16
    13ea:	8d 8b       	std	Y+21, r24	; 0x15
    13ec:	78 8f       	std	Y+24, r23	; 0x18
    13ee:	6f 8b       	std	Y+23, r22	; 0x17
	struct SnakeBodyPart previousBodyPart = snakeArray[snakeBodyLength - 2]; 
    13f0:	8f 89       	ldd	r24, Y+23	; 0x17
    13f2:	98 8d       	ldd	r25, Y+24	; 0x18
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	9c 01       	movw	r18, r24
    13fa:	22 0f       	add	r18, r18
    13fc:	33 1f       	adc	r19, r19
    13fe:	22 0f       	add	r18, r18
    1400:	33 1f       	adc	r19, r19
    1402:	82 0f       	add	r24, r18
    1404:	93 1f       	adc	r25, r19
    1406:	44 97       	sbiw	r24, 0x14	; 20
    1408:	2d 89       	ldd	r18, Y+21	; 0x15
    140a:	3e 89       	ldd	r19, Y+22	; 0x16
    140c:	82 0f       	add	r24, r18
    140e:	93 1f       	adc	r25, r19
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	fc 01       	movw	r30, r24
    1414:	ce 01       	movw	r24, r28
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	dc 01       	movw	r26, r24
    141a:	01 90       	ld	r0, Z+
    141c:	0d 92       	st	X+, r0
    141e:	2a 95       	dec	r18
    1420:	e1 f7       	brne	.-8      	; 0x141a <GrowSnake+0x46>
	
	struct SnakeBodyPart newBodyPart;
	newBodyPart.x = previousBodyPart.prevX;
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	9e 81       	ldd	r25, Y+6	; 0x06
    1426:	9c 87       	std	Y+12, r25	; 0x0c
    1428:	8b 87       	std	Y+11, r24	; 0x0b
	newBodyPart.y = previousBodyPart.prevY;
    142a:	8f 81       	ldd	r24, Y+7	; 0x07
    142c:	98 85       	ldd	r25, Y+8	; 0x08
    142e:	9e 87       	std	Y+14, r25	; 0x0e
    1430:	8d 87       	std	Y+13, r24	; 0x0d
	newBodyPart.headPointer = &snakeArray[snakeBodyLength - 2];
    1432:	8f 89       	ldd	r24, Y+23	; 0x17
    1434:	98 8d       	ldd	r25, Y+24	; 0x18
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	9c 01       	movw	r18, r24
    143c:	22 0f       	add	r18, r18
    143e:	33 1f       	adc	r19, r19
    1440:	22 0f       	add	r18, r18
    1442:	33 1f       	adc	r19, r19
    1444:	82 0f       	add	r24, r18
    1446:	93 1f       	adc	r25, r19
    1448:	44 97       	sbiw	r24, 0x14	; 20
    144a:	2d 89       	ldd	r18, Y+21	; 0x15
    144c:	3e 89       	ldd	r19, Y+22	; 0x16
    144e:	82 0f       	add	r24, r18
    1450:	93 1f       	adc	r25, r19
    1452:	9c 8b       	std	Y+20, r25	; 0x14
    1454:	8b 8b       	std	Y+19, r24	; 0x13
	snakeArray[snakeBodyLength - 1] = newBodyPart;
    1456:	8f 89       	ldd	r24, Y+23	; 0x17
    1458:	98 8d       	ldd	r25, Y+24	; 0x18
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	9c 01       	movw	r18, r24
    1460:	22 0f       	add	r18, r18
    1462:	33 1f       	adc	r19, r19
    1464:	22 0f       	add	r18, r18
    1466:	33 1f       	adc	r19, r19
    1468:	82 0f       	add	r24, r18
    146a:	93 1f       	adc	r25, r19
    146c:	0a 97       	sbiw	r24, 0x0a	; 10
    146e:	2d 89       	ldd	r18, Y+21	; 0x15
    1470:	3e 89       	ldd	r19, Y+22	; 0x16
    1472:	82 0f       	add	r24, r18
    1474:	93 1f       	adc	r25, r19
    1476:	2a e0       	ldi	r18, 0x0A	; 10
    1478:	fe 01       	movw	r30, r28
    147a:	3b 96       	adiw	r30, 0x0b	; 11
    147c:	dc 01       	movw	r26, r24
    147e:	01 90       	ld	r0, Z+
    1480:	0d 92       	st	X+, r0
    1482:	2a 95       	dec	r18
    1484:	e1 f7       	brne	.-8      	; 0x147e <GrowSnake+0xaa>
}
    1486:	00 00       	nop
    1488:	68 96       	adiw	r28, 0x18	; 24
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <SnakeHitSelf>:

int SnakeHitSelf()
{
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
	return hitSelf;
    14a2:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <hitSelf>
    14a6:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <hitSelf+0x1>
}
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	08 95       	ret

000014b0 <SPI_MasterInit>:
#define DD_MOSI 2
#define DD_MISO 3
#define DD_DORD 5

void SPI_MasterInit(void)
{	
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS); //MOSI,SS & SCK output,others input
    14b8:	84 e2       	ldi	r24, 0x24	; 36
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	27 e0       	ldi	r18, 0x07	; 7
    14be:	fc 01       	movw	r30, r24
    14c0:	20 83       	st	Z, r18
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);  		   //SPI, Master, clock = fck/16
    14c2:	8c e4       	ldi	r24, 0x4C	; 76
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	21 e5       	ldi	r18, 0x51	; 81
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 83       	st	Z, r18
}
    14cc:	00 00       	nop
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	00 d0       	rcall	.+0      	; 0x14da <SPI_MasterTransmit+0x6>
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	8b 83       	std	Y+3, r24	; 0x03
	PORTB &= ~(1 << DD_SS);
    14e0:	85 e2       	ldi	r24, 0x25	; 37
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	25 e2       	ldi	r18, 0x25	; 37
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	f9 01       	movw	r30, r18
    14ea:	20 81       	ld	r18, Z
    14ec:	2e 7f       	andi	r18, 0xFE	; 254
    14ee:	fc 01       	movw	r30, r24
    14f0:	20 83       	st	Z, r18

	// Start transmission
	SPDR = cData;			
    14f2:	8e e4       	ldi	r24, 0x4E	; 78
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	2b 81       	ldd	r18, Y+3	; 0x03
    14f8:	fc 01       	movw	r30, r24
    14fa:	20 83       	st	Z, r18
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
    14fc:	1a 82       	std	Y+2, r1	; 0x02
    14fe:	19 82       	std	Y+1, r1	; 0x01
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
    1500:	05 c0       	rjmp	.+10     	; 0x150c <SPI_MasterTransmit+0x38>
	{
		k++;
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	9a 83       	std	Y+2, r25	; 0x02
    150a:	89 83       	std	Y+1, r24	; 0x01
	// Start transmission
	SPDR = cData;			
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
    150c:	8d e4       	ldi	r24, 0x4D	; 77
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	fc 01       	movw	r30, r24
    1512:	80 81       	ld	r24, Z
    1514:	88 23       	and	r24, r24
    1516:	ac f7       	brge	.-22     	; 0x1502 <SPI_MasterTransmit+0x2e>
	{
		k++;
	}			
	
	cData = SPDR;
    1518:	8e e4       	ldi	r24, 0x4E	; 78
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	fc 01       	movw	r30, r24
    151e:	80 81       	ld	r24, Z
    1520:	8b 83       	std	Y+3, r24	; 0x03

	PORTB|= 1 << DD_SS;
    1522:	85 e2       	ldi	r24, 0x25	; 37
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	25 e2       	ldi	r18, 0x25	; 37
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	f9 01       	movw	r30, r18
    152c:	20 81       	ld	r18, Z
    152e:	21 60       	ori	r18, 0x01	; 1
    1530:	fc 01       	movw	r30, r24
    1532:	20 83       	st	Z, r18
}
    1534:	00 00       	nop
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	08 95       	ret

00001542 <DrawIntroScreen>:
 */ 
#include "WorldDriver.h"
#include "Nokia5110Driver.h"

void DrawIntroScreen(unsigned char introScreen[])
{
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	00 d0       	rcall	.+0      	; 0x1548 <DrawIntroScreen+0x6>
    1548:	1f 92       	push	r1
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	9c 83       	std	Y+4, r25	; 0x04
    1550:	8b 83       	std	Y+3, r24	; 0x03
	for (int x = 0; x < 504; x++)
    1552:	1a 82       	std	Y+2, r1	; 0x02
    1554:	19 82       	std	Y+1, r1	; 0x01
    1556:	0e c0       	rjmp	.+28     	; 0x1574 <DrawIntroScreen+0x32>
	{
		sendData(introScreen[x]);
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	9a 81       	ldd	r25, Y+2	; 0x02
    155c:	2b 81       	ldd	r18, Y+3	; 0x03
    155e:	3c 81       	ldd	r19, Y+4	; 0x04
    1560:	82 0f       	add	r24, r18
    1562:	93 1f       	adc	r25, r19
    1564:	fc 01       	movw	r30, r24
    1566:	80 81       	ld	r24, Z
    1568:	a5 da       	rcall	.-2742   	; 0xab4 <sendData>
#include "WorldDriver.h"
#include "Nokia5110Driver.h"

void DrawIntroScreen(unsigned char introScreen[])
{
	for (int x = 0; x < 504; x++)
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	9a 81       	ldd	r25, Y+2	; 0x02
    156e:	01 96       	adiw	r24, 0x01	; 1
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	88 3f       	cpi	r24, 0xF8	; 248
    157a:	91 40       	sbci	r25, 0x01	; 1
    157c:	6c f3       	brlt	.-38     	; 0x1558 <DrawIntroScreen+0x16>
	{
		sendData(introScreen[x]);
	}
}
    157e:	00 00       	nop
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	08 95       	ret

0000158e <DrawHighscoreText>:

void DrawHighscoreText(unsigned char highscoreText[])
{
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	00 d0       	rcall	.+0      	; 0x1594 <DrawHighscoreText+0x6>
    1594:	1f 92       	push	r1
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	9c 83       	std	Y+4, r25	; 0x04
    159c:	8b 83       	std	Y+3, r24	; 0x03
	clearDisplay();
    159e:	a0 da       	rcall	.-2752   	; 0xae0 <clearDisplay>
	setCursor(0, 0);
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	4b da       	rcall	.-2922   	; 0xa3c <setCursor>
	int i = 0;
    15a6:	1a 82       	std	Y+2, r1	; 0x02
    15a8:	19 82       	std	Y+1, r1	; 0x01
	while (highscoreText[i] != '\\')
    15aa:	0e c0       	rjmp	.+28     	; 0x15c8 <DrawHighscoreText+0x3a>
	{
		sendData(highscoreText[i]);
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	2b 81       	ldd	r18, Y+3	; 0x03
    15b2:	3c 81       	ldd	r19, Y+4	; 0x04
    15b4:	82 0f       	add	r24, r18
    15b6:	93 1f       	adc	r25, r19
    15b8:	fc 01       	movw	r30, r24
    15ba:	80 81       	ld	r24, Z
    15bc:	7b da       	rcall	.-2826   	; 0xab4 <sendData>
		i++;
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	9a 81       	ldd	r25, Y+2	; 0x02
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	9a 83       	std	Y+2, r25	; 0x02
    15c6:	89 83       	std	Y+1, r24	; 0x01
void DrawHighscoreText(unsigned char highscoreText[])
{
	clearDisplay();
	setCursor(0, 0);
	int i = 0;
	while (highscoreText[i] != '\\')
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	2b 81       	ldd	r18, Y+3	; 0x03
    15ce:	3c 81       	ldd	r19, Y+4	; 0x04
    15d0:	82 0f       	add	r24, r18
    15d2:	93 1f       	adc	r25, r19
    15d4:	fc 01       	movw	r30, r24
    15d6:	80 81       	ld	r24, Z
    15d8:	8c 35       	cpi	r24, 0x5C	; 92
    15da:	41 f7       	brne	.-48     	; 0x15ac <DrawHighscoreText+0x1e>
	{
		sendData(highscoreText[i]);
		i++;
	}
}
    15dc:	00 00       	nop
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	08 95       	ret

000015ec <DrawCharacter>:

void DrawCharacter(unsigned char number[], char x, char y, int arrayLength)
{
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	28 97       	sbiw	r28, 0x08	; 8
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	9c 83       	std	Y+4, r25	; 0x04
    1602:	8b 83       	std	Y+3, r24	; 0x03
    1604:	6d 83       	std	Y+5, r22	; 0x05
    1606:	4e 83       	std	Y+6, r20	; 0x06
    1608:	38 87       	std	Y+8, r19	; 0x08
    160a:	2f 83       	std	Y+7, r18	; 0x07
	setCursor(x, y);
    160c:	6e 81       	ldd	r22, Y+6	; 0x06
    160e:	8d 81       	ldd	r24, Y+5	; 0x05
    1610:	15 da       	rcall	.-3030   	; 0xa3c <setCursor>
	
	for (int i = 0; i < arrayLength; i++)
    1612:	1a 82       	std	Y+2, r1	; 0x02
    1614:	19 82       	std	Y+1, r1	; 0x01
    1616:	0e c0       	rjmp	.+28     	; 0x1634 <DrawCharacter+0x48>
	{
		sendData(number[i]);
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	2b 81       	ldd	r18, Y+3	; 0x03
    161e:	3c 81       	ldd	r19, Y+4	; 0x04
    1620:	82 0f       	add	r24, r18
    1622:	93 1f       	adc	r25, r19
    1624:	fc 01       	movw	r30, r24
    1626:	80 81       	ld	r24, Z
    1628:	45 da       	rcall	.-2934   	; 0xab4 <sendData>

void DrawCharacter(unsigned char number[], char x, char y, int arrayLength)
{
	setCursor(x, y);
	
	for (int i = 0; i < arrayLength; i++)
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	9a 83       	std	Y+2, r25	; 0x02
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	29 81       	ldd	r18, Y+1	; 0x01
    1636:	3a 81       	ldd	r19, Y+2	; 0x02
    1638:	8f 81       	ldd	r24, Y+7	; 0x07
    163a:	98 85       	ldd	r25, Y+8	; 0x08
    163c:	28 17       	cp	r18, r24
    163e:	39 07       	cpc	r19, r25
    1640:	5c f3       	brlt	.-42     	; 0x1618 <DrawCharacter+0x2c>
	{
		sendData(number[i]);
	}
}
    1642:	00 00       	nop
    1644:	28 96       	adiw	r28, 0x08	; 8
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	df 91       	pop	r29
    1652:	cf 91       	pop	r28
    1654:	08 95       	ret

00001656 <DrawPixel>:

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	28 97       	sbiw	r28, 0x08	; 8
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	8d 83       	std	Y+5, r24	; 0x05
    166c:	6e 83       	std	Y+6, r22	; 0x06
    166e:	58 87       	std	Y+8, r21	; 0x08
    1670:	4f 83       	std	Y+7, r20	; 0x07
	if (x < 0 || x > 83)
    1672:	8d 81       	ldd	r24, Y+5	; 0x05
    1674:	84 35       	cpi	r24, 0x54	; 84
    1676:	08 f0       	brcs	.+2      	; 0x167a <DrawPixel+0x24>
    1678:	8c c0       	rjmp	.+280    	; 0x1792 <DrawPixel+0x13c>
		return;

	if (y < 0 || y > 47)
    167a:	8e 81       	ldd	r24, Y+6	; 0x06
    167c:	80 33       	cpi	r24, 0x30	; 48
    167e:	08 f0       	brcs	.+2      	; 0x1682 <DrawPixel+0x2c>
    1680:	8a c0       	rjmp	.+276    	; 0x1796 <DrawPixel+0x140>
		return;

	unsigned int baselineOffset = 0;
    1682:	1a 82       	std	Y+2, r1	; 0x02
    1684:	19 82       	std	Y+1, r1	; 0x01
	unsigned int verticalBitOffset = 0;
    1686:	1c 82       	std	Y+4, r1	; 0x04
    1688:	1b 82       	std	Y+3, r1	; 0x03

	if (y >= 0 && y <= 7)
    168a:	8e 81       	ldd	r24, Y+6	; 0x06
    168c:	88 30       	cpi	r24, 0x08	; 8
    168e:	40 f4       	brcc	.+16     	; 0x16a0 <DrawPixel+0x4a>
	{
		baselineOffset = 0;
    1690:	1a 82       	std	Y+2, r1	; 0x02
    1692:	19 82       	std	Y+1, r1	; 0x01
		verticalBitOffset = y;
    1694:	8e 81       	ldd	r24, Y+6	; 0x06
    1696:	88 2f       	mov	r24, r24
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	9c 83       	std	Y+4, r25	; 0x04
    169c:	8b 83       	std	Y+3, r24	; 0x03
    169e:	54 c0       	rjmp	.+168    	; 0x1748 <DrawPixel+0xf2>
	} 
	else if (y >= 8 && y <= 15)
    16a0:	8e 81       	ldd	r24, Y+6	; 0x06
    16a2:	88 30       	cpi	r24, 0x08	; 8
    16a4:	70 f0       	brcs	.+28     	; 0x16c2 <DrawPixel+0x6c>
    16a6:	8e 81       	ldd	r24, Y+6	; 0x06
    16a8:	80 31       	cpi	r24, 0x10	; 16
    16aa:	58 f4       	brcc	.+22     	; 0x16c2 <DrawPixel+0x6c>
	{
		baselineOffset = 84;
    16ac:	84 e5       	ldi	r24, 0x54	; 84
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	9a 83       	std	Y+2, r25	; 0x02
    16b2:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - 8;
    16b4:	8e 81       	ldd	r24, Y+6	; 0x06
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	08 97       	sbiw	r24, 0x08	; 8
    16bc:	9c 83       	std	Y+4, r25	; 0x04
    16be:	8b 83       	std	Y+3, r24	; 0x03
    16c0:	43 c0       	rjmp	.+134    	; 0x1748 <DrawPixel+0xf2>
	} 
	else if (y >= 16 && y <= 23)
    16c2:	8e 81       	ldd	r24, Y+6	; 0x06
    16c4:	80 31       	cpi	r24, 0x10	; 16
    16c6:	70 f0       	brcs	.+28     	; 0x16e4 <DrawPixel+0x8e>
    16c8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ca:	88 31       	cpi	r24, 0x18	; 24
    16cc:	58 f4       	brcc	.+22     	; 0x16e4 <DrawPixel+0x8e>
	{
		baselineOffset = 84 * 2;
    16ce:	88 ea       	ldi	r24, 0xA8	; 168
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9a 83       	std	Y+2, r25	; 0x02
    16d4:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 2);
    16d6:	8e 81       	ldd	r24, Y+6	; 0x06
    16d8:	88 2f       	mov	r24, r24
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	40 97       	sbiw	r24, 0x10	; 16
    16de:	9c 83       	std	Y+4, r25	; 0x04
    16e0:	8b 83       	std	Y+3, r24	; 0x03
    16e2:	32 c0       	rjmp	.+100    	; 0x1748 <DrawPixel+0xf2>
	} 
	else if (y >= 24 && y <= 31)
    16e4:	8e 81       	ldd	r24, Y+6	; 0x06
    16e6:	88 31       	cpi	r24, 0x18	; 24
    16e8:	70 f0       	brcs	.+28     	; 0x1706 <DrawPixel+0xb0>
    16ea:	8e 81       	ldd	r24, Y+6	; 0x06
    16ec:	80 32       	cpi	r24, 0x20	; 32
    16ee:	58 f4       	brcc	.+22     	; 0x1706 <DrawPixel+0xb0>
	{
		baselineOffset = 84 * 3;
    16f0:	8c ef       	ldi	r24, 0xFC	; 252
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9a 83       	std	Y+2, r25	; 0x02
    16f6:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 3);
    16f8:	8e 81       	ldd	r24, Y+6	; 0x06
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	48 97       	sbiw	r24, 0x18	; 24
    1700:	9c 83       	std	Y+4, r25	; 0x04
    1702:	8b 83       	std	Y+3, r24	; 0x03
    1704:	21 c0       	rjmp	.+66     	; 0x1748 <DrawPixel+0xf2>
	}
	else if (y >= 32 && y <= 39)
    1706:	8e 81       	ldd	r24, Y+6	; 0x06
    1708:	80 32       	cpi	r24, 0x20	; 32
    170a:	70 f0       	brcs	.+28     	; 0x1728 <DrawPixel+0xd2>
    170c:	8e 81       	ldd	r24, Y+6	; 0x06
    170e:	88 32       	cpi	r24, 0x28	; 40
    1710:	58 f4       	brcc	.+22     	; 0x1728 <DrawPixel+0xd2>
	{
		baselineOffset = 84 * 4;
    1712:	80 e5       	ldi	r24, 0x50	; 80
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 4);
    171a:	8e 81       	ldd	r24, Y+6	; 0x06
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	80 97       	sbiw	r24, 0x20	; 32
    1722:	9c 83       	std	Y+4, r25	; 0x04
    1724:	8b 83       	std	Y+3, r24	; 0x03
    1726:	10 c0       	rjmp	.+32     	; 0x1748 <DrawPixel+0xf2>
	}
	else if (y >= 40 && y <= 47)
    1728:	8e 81       	ldd	r24, Y+6	; 0x06
    172a:	88 32       	cpi	r24, 0x28	; 40
    172c:	68 f0       	brcs	.+26     	; 0x1748 <DrawPixel+0xf2>
    172e:	8e 81       	ldd	r24, Y+6	; 0x06
    1730:	80 33       	cpi	r24, 0x30	; 48
    1732:	50 f4       	brcc	.+20     	; 0x1748 <DrawPixel+0xf2>
	{
		baselineOffset = 84 * 5;
    1734:	84 ea       	ldi	r24, 0xA4	; 164
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	9a 83       	std	Y+2, r25	; 0x02
    173a:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 5);
    173c:	8e 81       	ldd	r24, Y+6	; 0x06
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	88 97       	sbiw	r24, 0x28	; 40
    1744:	9c 83       	std	Y+4, r25	; 0x04
    1746:	8b 83       	std	Y+3, r24	; 0x03
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	82 0f       	add	r24, r18
    1754:	93 1f       	adc	r25, r19
    1756:	2f 81       	ldd	r18, Y+7	; 0x07
    1758:	38 85       	ldd	r19, Y+8	; 0x08
    175a:	82 0f       	add	r24, r18
    175c:	93 1f       	adc	r25, r19
    175e:	2d 81       	ldd	r18, Y+5	; 0x05
    1760:	42 2f       	mov	r20, r18
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	29 81       	ldd	r18, Y+1	; 0x01
    1766:	3a 81       	ldd	r19, Y+2	; 0x02
    1768:	24 0f       	add	r18, r20
    176a:	35 1f       	adc	r19, r21
    176c:	4f 81       	ldd	r20, Y+7	; 0x07
    176e:	58 85       	ldd	r21, Y+8	; 0x08
    1770:	24 0f       	add	r18, r20
    1772:	35 1f       	adc	r19, r21
    1774:	f9 01       	movw	r30, r18
    1776:	20 81       	ld	r18, Z
    1778:	42 2f       	mov	r20, r18
    177a:	21 e0       	ldi	r18, 0x01	; 1
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	0b 80       	ldd	r0, Y+3	; 0x03
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <DrawPixel+0x130>
    1782:	22 0f       	add	r18, r18
    1784:	33 1f       	adc	r19, r19
    1786:	0a 94       	dec	r0
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <DrawPixel+0x12c>
    178a:	24 2b       	or	r18, r20
    178c:	fc 01       	movw	r30, r24
    178e:	20 83       	st	Z, r18
    1790:	03 c0       	rjmp	.+6      	; 0x1798 <DrawPixel+0x142>
}

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
	if (x < 0 || x > 83)
		return;
    1792:	00 00       	nop
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <DrawPixel+0x142>

	if (y < 0 || y > 47)
		return;
    1796:	00 00       	nop
		baselineOffset = 84 * 5;
		verticalBitOffset = y - (8 * 5);
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
}
    1798:	28 96       	adiw	r28, 0x08	; 8
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	08 95       	ret

000017aa <DrawDot>:

 void DrawDot(unsigned char x, unsigned char y, unsigned char* world)
 {
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <DrawDot+0x6>
    17b0:	1f 92       	push	r1
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	6a 83       	std	Y+2, r22	; 0x02
    17ba:	5c 83       	std	Y+4, r21	; 0x04
    17bc:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	9c 81       	ldd	r25, Y+4	; 0x04
    17c2:	ac 01       	movw	r20, r24
    17c4:	6a 81       	ldd	r22, Y+2	; 0x02
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	46 df       	rcall	.-372    	; 0x1656 <DrawPixel>
	DrawPixel(x + 1, y, world);
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	21 e0       	ldi	r18, 0x01	; 1
    17ce:	28 0f       	add	r18, r24
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	ac 01       	movw	r20, r24
    17d6:	6a 81       	ldd	r22, Y+2	; 0x02
    17d8:	82 2f       	mov	r24, r18
    17da:	3d df       	rcall	.-390    	; 0x1656 <DrawPixel>
	DrawPixel(x, y + 1, world);
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	21 e0       	ldi	r18, 0x01	; 1
    17e0:	28 0f       	add	r18, r24
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	ac 01       	movw	r20, r24
    17e8:	62 2f       	mov	r22, r18
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	34 df       	rcall	.-408    	; 0x1656 <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	31 e0       	ldi	r19, 0x01	; 1
    17f2:	38 0f       	add	r19, r24
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	21 e0       	ldi	r18, 0x01	; 1
    17f8:	28 0f       	add	r18, r24
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	ac 01       	movw	r20, r24
    1800:	63 2f       	mov	r22, r19
    1802:	82 2f       	mov	r24, r18
    1804:	28 df       	rcall	.-432    	; 0x1656 <DrawPixel>
 }
    1806:	00 00       	nop
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	08 95       	ret

00001816 <DrawFood>:
 
 void DrawFood(unsigned char x, unsigned char y, unsigned char* world)
 {
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	00 d0       	rcall	.+0      	; 0x181c <DrawFood+0x6>
    181c:	1f 92       	push	r1
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	6a 83       	std	Y+2, r22	; 0x02
    1826:	5c 83       	std	Y+4, r21	; 0x04
    1828:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	ac 01       	movw	r20, r24
    1830:	6a 81       	ldd	r22, Y+2	; 0x02
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	10 df       	rcall	.-480    	; 0x1656 <DrawPixel>
	DrawPixel(x + 2, y, world);
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	22 e0       	ldi	r18, 0x02	; 2
    183a:	28 0f       	add	r18, r24
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	ac 01       	movw	r20, r24
    1842:	6a 81       	ldd	r22, Y+2	; 0x02
    1844:	82 2f       	mov	r24, r18
    1846:	07 df       	rcall	.-498    	; 0x1656 <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	31 e0       	ldi	r19, 0x01	; 1
    184c:	38 0f       	add	r19, r24
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	21 e0       	ldi	r18, 0x01	; 1
    1852:	28 0f       	add	r18, r24
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	ac 01       	movw	r20, r24
    185a:	63 2f       	mov	r22, r19
    185c:	82 2f       	mov	r24, r18
    185e:	fb de       	rcall	.-522    	; 0x1656 <DrawPixel>
	DrawPixel(x + 1, y - 1, world);
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	3f ef       	ldi	r19, 0xFF	; 255
    1864:	38 0f       	add	r19, r24
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	21 e0       	ldi	r18, 0x01	; 1
    186a:	28 0f       	add	r18, r24
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	ac 01       	movw	r20, r24
    1872:	63 2f       	mov	r22, r19
    1874:	82 2f       	mov	r24, r18
    1876:	ef de       	rcall	.-546    	; 0x1656 <DrawPixel>
 }
    1878:	00 00       	nop
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	08 95       	ret

00001888 <RenderWorld>:

 void RenderWorld(unsigned char* world)
 {
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	00 d0       	rcall	.+0      	; 0x188e <RenderWorld+0x6>
    188e:	00 d0       	rcall	.+0      	; 0x1890 <RenderWorld+0x8>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	9e 83       	std	Y+6, r25	; 0x06
    1896:	8d 83       	std	Y+5, r24	; 0x05
	for (int x = 0; x < 504; x++)
    1898:	1a 82       	std	Y+2, r1	; 0x02
    189a:	19 82       	std	Y+1, r1	; 0x01
    189c:	0e c0       	rjmp	.+28     	; 0x18ba <RenderWorld+0x32>
	{
		sendData(world[x]);
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	9a 81       	ldd	r25, Y+2	; 0x02
    18a2:	2d 81       	ldd	r18, Y+5	; 0x05
    18a4:	3e 81       	ldd	r19, Y+6	; 0x06
    18a6:	82 0f       	add	r24, r18
    18a8:	93 1f       	adc	r25, r19
    18aa:	fc 01       	movw	r30, r24
    18ac:	80 81       	ld	r24, Z
    18ae:	02 d9       	rcall	.-3580   	; 0xab4 <sendData>
	DrawPixel(x + 1, y - 1, world);
 }

 void RenderWorld(unsigned char* world)
 {
	for (int x = 0; x < 504; x++)
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	9a 83       	std	Y+2, r25	; 0x02
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	9a 81       	ldd	r25, Y+2	; 0x02
    18be:	88 3f       	cpi	r24, 0xF8	; 248
    18c0:	91 40       	sbci	r25, 0x01	; 1
    18c2:	6c f3       	brlt	.-38     	; 0x189e <RenderWorld+0x16>
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
    18c4:	1c 82       	std	Y+4, r1	; 0x04
    18c6:	1b 82       	std	Y+3, r1	; 0x03
    18c8:	0d c0       	rjmp	.+26     	; 0x18e4 <RenderWorld+0x5c>
	{
		world[x] = 0x00;
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	9c 81       	ldd	r25, Y+4	; 0x04
    18ce:	2d 81       	ldd	r18, Y+5	; 0x05
    18d0:	3e 81       	ldd	r19, Y+6	; 0x06
    18d2:	82 0f       	add	r24, r18
    18d4:	93 1f       	adc	r25, r19
    18d6:	fc 01       	movw	r30, r24
    18d8:	10 82       	st	Z, r1
	for (int x = 0; x < 504; x++)
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	9c 83       	std	Y+4, r25	; 0x04
    18e2:	8b 83       	std	Y+3, r24	; 0x03
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	9c 81       	ldd	r25, Y+4	; 0x04
    18e8:	88 3f       	cpi	r24, 0xF8	; 248
    18ea:	91 40       	sbci	r25, 0x01	; 1
    18ec:	74 f3       	brlt	.-36     	; 0x18ca <RenderWorld+0x42>
	{
		world[x] = 0x00;
	}
    18ee:	00 00       	nop
    18f0:	26 96       	adiw	r28, 0x06	; 6
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	08 95       	ret

00001902 <__cmpsf2>:
    1902:	6c d0       	rcall	.+216    	; 0x19dc <__fp_cmp>
    1904:	08 f4       	brcc	.+2      	; 0x1908 <__cmpsf2+0x6>
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	08 95       	ret

0000190a <__fixunssfsi>:
    190a:	94 d0       	rcall	.+296    	; 0x1a34 <__fp_splitA>
    190c:	88 f0       	brcs	.+34     	; 0x1930 <__fixunssfsi+0x26>
    190e:	9f 57       	subi	r25, 0x7F	; 127
    1910:	90 f0       	brcs	.+36     	; 0x1936 <__fixunssfsi+0x2c>
    1912:	b9 2f       	mov	r27, r25
    1914:	99 27       	eor	r25, r25
    1916:	b7 51       	subi	r27, 0x17	; 23
    1918:	a0 f0       	brcs	.+40     	; 0x1942 <__fixunssfsi+0x38>
    191a:	d1 f0       	breq	.+52     	; 0x1950 <__fixunssfsi+0x46>
    191c:	66 0f       	add	r22, r22
    191e:	77 1f       	adc	r23, r23
    1920:	88 1f       	adc	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	1a f0       	brmi	.+6      	; 0x192c <__fixunssfsi+0x22>
    1926:	ba 95       	dec	r27
    1928:	c9 f7       	brne	.-14     	; 0x191c <__fixunssfsi+0x12>
    192a:	12 c0       	rjmp	.+36     	; 0x1950 <__fixunssfsi+0x46>
    192c:	b1 30       	cpi	r27, 0x01	; 1
    192e:	81 f0       	breq	.+32     	; 0x1950 <__fixunssfsi+0x46>
    1930:	9b d0       	rcall	.+310    	; 0x1a68 <__fp_zero>
    1932:	b1 e0       	ldi	r27, 0x01	; 1
    1934:	08 95       	ret
    1936:	98 c0       	rjmp	.+304    	; 0x1a68 <__fp_zero>
    1938:	67 2f       	mov	r22, r23
    193a:	78 2f       	mov	r23, r24
    193c:	88 27       	eor	r24, r24
    193e:	b8 5f       	subi	r27, 0xF8	; 248
    1940:	39 f0       	breq	.+14     	; 0x1950 <__fixunssfsi+0x46>
    1942:	b9 3f       	cpi	r27, 0xF9	; 249
    1944:	cc f3       	brlt	.-14     	; 0x1938 <__fixunssfsi+0x2e>
    1946:	86 95       	lsr	r24
    1948:	77 95       	ror	r23
    194a:	67 95       	ror	r22
    194c:	b3 95       	inc	r27
    194e:	d9 f7       	brne	.-10     	; 0x1946 <__fixunssfsi+0x3c>
    1950:	3e f4       	brtc	.+14     	; 0x1960 <__fixunssfsi+0x56>
    1952:	90 95       	com	r25
    1954:	80 95       	com	r24
    1956:	70 95       	com	r23
    1958:	61 95       	neg	r22
    195a:	7f 4f       	sbci	r23, 0xFF	; 255
    195c:	8f 4f       	sbci	r24, 0xFF	; 255
    195e:	9f 4f       	sbci	r25, 0xFF	; 255
    1960:	08 95       	ret

00001962 <__floatunsisf>:
    1962:	e8 94       	clt
    1964:	09 c0       	rjmp	.+18     	; 0x1978 <__floatsisf+0x12>

00001966 <__floatsisf>:
    1966:	97 fb       	bst	r25, 7
    1968:	3e f4       	brtc	.+14     	; 0x1978 <__floatsisf+0x12>
    196a:	90 95       	com	r25
    196c:	80 95       	com	r24
    196e:	70 95       	com	r23
    1970:	61 95       	neg	r22
    1972:	7f 4f       	sbci	r23, 0xFF	; 255
    1974:	8f 4f       	sbci	r24, 0xFF	; 255
    1976:	9f 4f       	sbci	r25, 0xFF	; 255
    1978:	99 23       	and	r25, r25
    197a:	a9 f0       	breq	.+42     	; 0x19a6 <__floatsisf+0x40>
    197c:	f9 2f       	mov	r31, r25
    197e:	96 e9       	ldi	r25, 0x96	; 150
    1980:	bb 27       	eor	r27, r27
    1982:	93 95       	inc	r25
    1984:	f6 95       	lsr	r31
    1986:	87 95       	ror	r24
    1988:	77 95       	ror	r23
    198a:	67 95       	ror	r22
    198c:	b7 95       	ror	r27
    198e:	f1 11       	cpse	r31, r1
    1990:	f8 cf       	rjmp	.-16     	; 0x1982 <__floatsisf+0x1c>
    1992:	fa f4       	brpl	.+62     	; 0x19d2 <__floatsisf+0x6c>
    1994:	bb 0f       	add	r27, r27
    1996:	11 f4       	brne	.+4      	; 0x199c <__floatsisf+0x36>
    1998:	60 ff       	sbrs	r22, 0
    199a:	1b c0       	rjmp	.+54     	; 0x19d2 <__floatsisf+0x6c>
    199c:	6f 5f       	subi	r22, 0xFF	; 255
    199e:	7f 4f       	sbci	r23, 0xFF	; 255
    19a0:	8f 4f       	sbci	r24, 0xFF	; 255
    19a2:	9f 4f       	sbci	r25, 0xFF	; 255
    19a4:	16 c0       	rjmp	.+44     	; 0x19d2 <__floatsisf+0x6c>
    19a6:	88 23       	and	r24, r24
    19a8:	11 f0       	breq	.+4      	; 0x19ae <__floatsisf+0x48>
    19aa:	96 e9       	ldi	r25, 0x96	; 150
    19ac:	11 c0       	rjmp	.+34     	; 0x19d0 <__floatsisf+0x6a>
    19ae:	77 23       	and	r23, r23
    19b0:	21 f0       	breq	.+8      	; 0x19ba <__floatsisf+0x54>
    19b2:	9e e8       	ldi	r25, 0x8E	; 142
    19b4:	87 2f       	mov	r24, r23
    19b6:	76 2f       	mov	r23, r22
    19b8:	05 c0       	rjmp	.+10     	; 0x19c4 <__floatsisf+0x5e>
    19ba:	66 23       	and	r22, r22
    19bc:	71 f0       	breq	.+28     	; 0x19da <__floatsisf+0x74>
    19be:	96 e8       	ldi	r25, 0x86	; 134
    19c0:	86 2f       	mov	r24, r22
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	2a f0       	brmi	.+10     	; 0x19d2 <__floatsisf+0x6c>
    19c8:	9a 95       	dec	r25
    19ca:	66 0f       	add	r22, r22
    19cc:	77 1f       	adc	r23, r23
    19ce:	88 1f       	adc	r24, r24
    19d0:	da f7       	brpl	.-10     	; 0x19c8 <__floatsisf+0x62>
    19d2:	88 0f       	add	r24, r24
    19d4:	96 95       	lsr	r25
    19d6:	87 95       	ror	r24
    19d8:	97 f9       	bld	r25, 7
    19da:	08 95       	ret

000019dc <__fp_cmp>:
    19dc:	99 0f       	add	r25, r25
    19de:	00 08       	sbc	r0, r0
    19e0:	55 0f       	add	r21, r21
    19e2:	aa 0b       	sbc	r26, r26
    19e4:	e0 e8       	ldi	r30, 0x80	; 128
    19e6:	fe ef       	ldi	r31, 0xFE	; 254
    19e8:	16 16       	cp	r1, r22
    19ea:	17 06       	cpc	r1, r23
    19ec:	e8 07       	cpc	r30, r24
    19ee:	f9 07       	cpc	r31, r25
    19f0:	c0 f0       	brcs	.+48     	; 0x1a22 <__fp_cmp+0x46>
    19f2:	12 16       	cp	r1, r18
    19f4:	13 06       	cpc	r1, r19
    19f6:	e4 07       	cpc	r30, r20
    19f8:	f5 07       	cpc	r31, r21
    19fa:	98 f0       	brcs	.+38     	; 0x1a22 <__fp_cmp+0x46>
    19fc:	62 1b       	sub	r22, r18
    19fe:	73 0b       	sbc	r23, r19
    1a00:	84 0b       	sbc	r24, r20
    1a02:	95 0b       	sbc	r25, r21
    1a04:	39 f4       	brne	.+14     	; 0x1a14 <__fp_cmp+0x38>
    1a06:	0a 26       	eor	r0, r26
    1a08:	61 f0       	breq	.+24     	; 0x1a22 <__fp_cmp+0x46>
    1a0a:	23 2b       	or	r18, r19
    1a0c:	24 2b       	or	r18, r20
    1a0e:	25 2b       	or	r18, r21
    1a10:	21 f4       	brne	.+8      	; 0x1a1a <__fp_cmp+0x3e>
    1a12:	08 95       	ret
    1a14:	0a 26       	eor	r0, r26
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <__fp_cmp+0x3e>
    1a18:	a1 40       	sbci	r26, 0x01	; 1
    1a1a:	a6 95       	lsr	r26
    1a1c:	8f ef       	ldi	r24, 0xFF	; 255
    1a1e:	81 1d       	adc	r24, r1
    1a20:	81 1d       	adc	r24, r1
    1a22:	08 95       	ret

00001a24 <__fp_split3>:
    1a24:	57 fd       	sbrc	r21, 7
    1a26:	90 58       	subi	r25, 0x80	; 128
    1a28:	44 0f       	add	r20, r20
    1a2a:	55 1f       	adc	r21, r21
    1a2c:	59 f0       	breq	.+22     	; 0x1a44 <__fp_splitA+0x10>
    1a2e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a30:	71 f0       	breq	.+28     	; 0x1a4e <__fp_splitA+0x1a>
    1a32:	47 95       	ror	r20

00001a34 <__fp_splitA>:
    1a34:	88 0f       	add	r24, r24
    1a36:	97 fb       	bst	r25, 7
    1a38:	99 1f       	adc	r25, r25
    1a3a:	61 f0       	breq	.+24     	; 0x1a54 <__fp_splitA+0x20>
    1a3c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a3e:	79 f0       	breq	.+30     	; 0x1a5e <__fp_splitA+0x2a>
    1a40:	87 95       	ror	r24
    1a42:	08 95       	ret
    1a44:	12 16       	cp	r1, r18
    1a46:	13 06       	cpc	r1, r19
    1a48:	14 06       	cpc	r1, r20
    1a4a:	55 1f       	adc	r21, r21
    1a4c:	f2 cf       	rjmp	.-28     	; 0x1a32 <__fp_split3+0xe>
    1a4e:	46 95       	lsr	r20
    1a50:	f1 df       	rcall	.-30     	; 0x1a34 <__fp_splitA>
    1a52:	08 c0       	rjmp	.+16     	; 0x1a64 <__fp_splitA+0x30>
    1a54:	16 16       	cp	r1, r22
    1a56:	17 06       	cpc	r1, r23
    1a58:	18 06       	cpc	r1, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	f1 cf       	rjmp	.-30     	; 0x1a40 <__fp_splitA+0xc>
    1a5e:	86 95       	lsr	r24
    1a60:	71 05       	cpc	r23, r1
    1a62:	61 05       	cpc	r22, r1
    1a64:	08 94       	sec
    1a66:	08 95       	ret

00001a68 <__fp_zero>:
    1a68:	e8 94       	clt

00001a6a <__fp_szero>:
    1a6a:	bb 27       	eor	r27, r27
    1a6c:	66 27       	eor	r22, r22
    1a6e:	77 27       	eor	r23, r23
    1a70:	cb 01       	movw	r24, r22
    1a72:	97 f9       	bld	r25, 7
    1a74:	08 95       	ret

00001a76 <__gesf2>:
    1a76:	b2 df       	rcall	.-156    	; 0x19dc <__fp_cmp>
    1a78:	08 f4       	brcc	.+2      	; 0x1a7c <__gesf2+0x6>
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	08 95       	ret

00001a7e <__mulsf3>:
    1a7e:	0b d0       	rcall	.+22     	; 0x1a96 <__mulsf3x>
    1a80:	78 c0       	rjmp	.+240    	; 0x1b72 <__fp_round>
    1a82:	69 d0       	rcall	.+210    	; 0x1b56 <__fp_pscA>
    1a84:	28 f0       	brcs	.+10     	; 0x1a90 <__mulsf3+0x12>
    1a86:	6e d0       	rcall	.+220    	; 0x1b64 <__fp_pscB>
    1a88:	18 f0       	brcs	.+6      	; 0x1a90 <__mulsf3+0x12>
    1a8a:	95 23       	and	r25, r21
    1a8c:	09 f0       	breq	.+2      	; 0x1a90 <__mulsf3+0x12>
    1a8e:	5a c0       	rjmp	.+180    	; 0x1b44 <__fp_inf>
    1a90:	5f c0       	rjmp	.+190    	; 0x1b50 <__fp_nan>
    1a92:	11 24       	eor	r1, r1
    1a94:	ea cf       	rjmp	.-44     	; 0x1a6a <__fp_szero>

00001a96 <__mulsf3x>:
    1a96:	c6 df       	rcall	.-116    	; 0x1a24 <__fp_split3>
    1a98:	a0 f3       	brcs	.-24     	; 0x1a82 <__mulsf3+0x4>

00001a9a <__mulsf3_pse>:
    1a9a:	95 9f       	mul	r25, r21
    1a9c:	d1 f3       	breq	.-12     	; 0x1a92 <__mulsf3+0x14>
    1a9e:	95 0f       	add	r25, r21
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
    1aa2:	55 1f       	adc	r21, r21
    1aa4:	62 9f       	mul	r22, r18
    1aa6:	f0 01       	movw	r30, r0
    1aa8:	72 9f       	mul	r23, r18
    1aaa:	bb 27       	eor	r27, r27
    1aac:	f0 0d       	add	r31, r0
    1aae:	b1 1d       	adc	r27, r1
    1ab0:	63 9f       	mul	r22, r19
    1ab2:	aa 27       	eor	r26, r26
    1ab4:	f0 0d       	add	r31, r0
    1ab6:	b1 1d       	adc	r27, r1
    1ab8:	aa 1f       	adc	r26, r26
    1aba:	64 9f       	mul	r22, r20
    1abc:	66 27       	eor	r22, r22
    1abe:	b0 0d       	add	r27, r0
    1ac0:	a1 1d       	adc	r26, r1
    1ac2:	66 1f       	adc	r22, r22
    1ac4:	82 9f       	mul	r24, r18
    1ac6:	22 27       	eor	r18, r18
    1ac8:	b0 0d       	add	r27, r0
    1aca:	a1 1d       	adc	r26, r1
    1acc:	62 1f       	adc	r22, r18
    1ace:	73 9f       	mul	r23, r19
    1ad0:	b0 0d       	add	r27, r0
    1ad2:	a1 1d       	adc	r26, r1
    1ad4:	62 1f       	adc	r22, r18
    1ad6:	83 9f       	mul	r24, r19
    1ad8:	a0 0d       	add	r26, r0
    1ada:	61 1d       	adc	r22, r1
    1adc:	22 1f       	adc	r18, r18
    1ade:	74 9f       	mul	r23, r20
    1ae0:	33 27       	eor	r19, r19
    1ae2:	a0 0d       	add	r26, r0
    1ae4:	61 1d       	adc	r22, r1
    1ae6:	23 1f       	adc	r18, r19
    1ae8:	84 9f       	mul	r24, r20
    1aea:	60 0d       	add	r22, r0
    1aec:	21 1d       	adc	r18, r1
    1aee:	82 2f       	mov	r24, r18
    1af0:	76 2f       	mov	r23, r22
    1af2:	6a 2f       	mov	r22, r26
    1af4:	11 24       	eor	r1, r1
    1af6:	9f 57       	subi	r25, 0x7F	; 127
    1af8:	50 40       	sbci	r21, 0x00	; 0
    1afa:	8a f0       	brmi	.+34     	; 0x1b1e <__mulsf3_pse+0x84>
    1afc:	e1 f0       	breq	.+56     	; 0x1b36 <__mulsf3_pse+0x9c>
    1afe:	88 23       	and	r24, r24
    1b00:	4a f0       	brmi	.+18     	; 0x1b14 <__mulsf3_pse+0x7a>
    1b02:	ee 0f       	add	r30, r30
    1b04:	ff 1f       	adc	r31, r31
    1b06:	bb 1f       	adc	r27, r27
    1b08:	66 1f       	adc	r22, r22
    1b0a:	77 1f       	adc	r23, r23
    1b0c:	88 1f       	adc	r24, r24
    1b0e:	91 50       	subi	r25, 0x01	; 1
    1b10:	50 40       	sbci	r21, 0x00	; 0
    1b12:	a9 f7       	brne	.-22     	; 0x1afe <__mulsf3_pse+0x64>
    1b14:	9e 3f       	cpi	r25, 0xFE	; 254
    1b16:	51 05       	cpc	r21, r1
    1b18:	70 f0       	brcs	.+28     	; 0x1b36 <__mulsf3_pse+0x9c>
    1b1a:	14 c0       	rjmp	.+40     	; 0x1b44 <__fp_inf>
    1b1c:	a6 cf       	rjmp	.-180    	; 0x1a6a <__fp_szero>
    1b1e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b20:	ec f3       	brlt	.-6      	; 0x1b1c <__mulsf3_pse+0x82>
    1b22:	98 3e       	cpi	r25, 0xE8	; 232
    1b24:	dc f3       	brlt	.-10     	; 0x1b1c <__mulsf3_pse+0x82>
    1b26:	86 95       	lsr	r24
    1b28:	77 95       	ror	r23
    1b2a:	67 95       	ror	r22
    1b2c:	b7 95       	ror	r27
    1b2e:	f7 95       	ror	r31
    1b30:	e7 95       	ror	r30
    1b32:	9f 5f       	subi	r25, 0xFF	; 255
    1b34:	c1 f7       	brne	.-16     	; 0x1b26 <__mulsf3_pse+0x8c>
    1b36:	fe 2b       	or	r31, r30
    1b38:	88 0f       	add	r24, r24
    1b3a:	91 1d       	adc	r25, r1
    1b3c:	96 95       	lsr	r25
    1b3e:	87 95       	ror	r24
    1b40:	97 f9       	bld	r25, 7
    1b42:	08 95       	ret

00001b44 <__fp_inf>:
    1b44:	97 f9       	bld	r25, 7
    1b46:	9f 67       	ori	r25, 0x7F	; 127
    1b48:	80 e8       	ldi	r24, 0x80	; 128
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	08 95       	ret

00001b50 <__fp_nan>:
    1b50:	9f ef       	ldi	r25, 0xFF	; 255
    1b52:	80 ec       	ldi	r24, 0xC0	; 192
    1b54:	08 95       	ret

00001b56 <__fp_pscA>:
    1b56:	00 24       	eor	r0, r0
    1b58:	0a 94       	dec	r0
    1b5a:	16 16       	cp	r1, r22
    1b5c:	17 06       	cpc	r1, r23
    1b5e:	18 06       	cpc	r1, r24
    1b60:	09 06       	cpc	r0, r25
    1b62:	08 95       	ret

00001b64 <__fp_pscB>:
    1b64:	00 24       	eor	r0, r0
    1b66:	0a 94       	dec	r0
    1b68:	12 16       	cp	r1, r18
    1b6a:	13 06       	cpc	r1, r19
    1b6c:	14 06       	cpc	r1, r20
    1b6e:	05 06       	cpc	r0, r21
    1b70:	08 95       	ret

00001b72 <__fp_round>:
    1b72:	09 2e       	mov	r0, r25
    1b74:	03 94       	inc	r0
    1b76:	00 0c       	add	r0, r0
    1b78:	11 f4       	brne	.+4      	; 0x1b7e <__fp_round+0xc>
    1b7a:	88 23       	and	r24, r24
    1b7c:	52 f0       	brmi	.+20     	; 0x1b92 <__fp_round+0x20>
    1b7e:	bb 0f       	add	r27, r27
    1b80:	40 f4       	brcc	.+16     	; 0x1b92 <__fp_round+0x20>
    1b82:	bf 2b       	or	r27, r31
    1b84:	11 f4       	brne	.+4      	; 0x1b8a <__fp_round+0x18>
    1b86:	60 ff       	sbrs	r22, 0
    1b88:	04 c0       	rjmp	.+8      	; 0x1b92 <__fp_round+0x20>
    1b8a:	6f 5f       	subi	r22, 0xFF	; 255
    1b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b90:	9f 4f       	sbci	r25, 0xFF	; 255
    1b92:	08 95       	ret

00001b94 <__divmodhi4>:
    1b94:	97 fb       	bst	r25, 7
    1b96:	07 2e       	mov	r0, r23
    1b98:	16 f4       	brtc	.+4      	; 0x1b9e <__divmodhi4+0xa>
    1b9a:	00 94       	com	r0
    1b9c:	06 d0       	rcall	.+12     	; 0x1baa <__divmodhi4_neg1>
    1b9e:	77 fd       	sbrc	r23, 7
    1ba0:	08 d0       	rcall	.+16     	; 0x1bb2 <__divmodhi4_neg2>
    1ba2:	0b d0       	rcall	.+22     	; 0x1bba <__udivmodhi4>
    1ba4:	07 fc       	sbrc	r0, 7
    1ba6:	05 d0       	rcall	.+10     	; 0x1bb2 <__divmodhi4_neg2>
    1ba8:	3e f4       	brtc	.+14     	; 0x1bb8 <__divmodhi4_exit>

00001baa <__divmodhi4_neg1>:
    1baa:	90 95       	com	r25
    1bac:	81 95       	neg	r24
    1bae:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb0:	08 95       	ret

00001bb2 <__divmodhi4_neg2>:
    1bb2:	70 95       	com	r23
    1bb4:	61 95       	neg	r22
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255

00001bb8 <__divmodhi4_exit>:
    1bb8:	08 95       	ret

00001bba <__udivmodhi4>:
    1bba:	aa 1b       	sub	r26, r26
    1bbc:	bb 1b       	sub	r27, r27
    1bbe:	51 e1       	ldi	r21, 0x11	; 17
    1bc0:	07 c0       	rjmp	.+14     	; 0x1bd0 <__udivmodhi4_ep>

00001bc2 <__udivmodhi4_loop>:
    1bc2:	aa 1f       	adc	r26, r26
    1bc4:	bb 1f       	adc	r27, r27
    1bc6:	a6 17       	cp	r26, r22
    1bc8:	b7 07       	cpc	r27, r23
    1bca:	10 f0       	brcs	.+4      	; 0x1bd0 <__udivmodhi4_ep>
    1bcc:	a6 1b       	sub	r26, r22
    1bce:	b7 0b       	sbc	r27, r23

00001bd0 <__udivmodhi4_ep>:
    1bd0:	88 1f       	adc	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	5a 95       	dec	r21
    1bd6:	a9 f7       	brne	.-22     	; 0x1bc2 <__udivmodhi4_loop>
    1bd8:	80 95       	com	r24
    1bda:	90 95       	com	r25
    1bdc:	bc 01       	movw	r22, r24
    1bde:	cd 01       	movw	r24, r26
    1be0:	08 95       	ret

00001be2 <do_rand>:
    1be2:	8f 92       	push	r8
    1be4:	9f 92       	push	r9
    1be6:	af 92       	push	r10
    1be8:	bf 92       	push	r11
    1bea:	cf 92       	push	r12
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	ec 01       	movw	r28, r24
    1bf8:	68 81       	ld	r22, Y
    1bfa:	79 81       	ldd	r23, Y+1	; 0x01
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1c00:	61 15       	cp	r22, r1
    1c02:	71 05       	cpc	r23, r1
    1c04:	81 05       	cpc	r24, r1
    1c06:	91 05       	cpc	r25, r1
    1c08:	21 f4       	brne	.+8      	; 0x1c12 <do_rand+0x30>
    1c0a:	64 e2       	ldi	r22, 0x24	; 36
    1c0c:	79 ed       	ldi	r23, 0xD9	; 217
    1c0e:	8b e5       	ldi	r24, 0x5B	; 91
    1c10:	97 e0       	ldi	r25, 0x07	; 7
    1c12:	2d e1       	ldi	r18, 0x1D	; 29
    1c14:	33 ef       	ldi	r19, 0xF3	; 243
    1c16:	41 e0       	ldi	r20, 0x01	; 1
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	3f d0       	rcall	.+126    	; 0x1c9a <__divmodsi4>
    1c1c:	49 01       	movw	r8, r18
    1c1e:	5a 01       	movw	r10, r20
    1c20:	9b 01       	movw	r18, r22
    1c22:	ac 01       	movw	r20, r24
    1c24:	a7 ea       	ldi	r26, 0xA7	; 167
    1c26:	b1 e4       	ldi	r27, 0x41	; 65
    1c28:	54 d0       	rcall	.+168    	; 0x1cd2 <__muluhisi3>
    1c2a:	6b 01       	movw	r12, r22
    1c2c:	7c 01       	movw	r14, r24
    1c2e:	ac ee       	ldi	r26, 0xEC	; 236
    1c30:	b4 ef       	ldi	r27, 0xF4	; 244
    1c32:	a5 01       	movw	r20, r10
    1c34:	94 01       	movw	r18, r8
    1c36:	59 d0       	rcall	.+178    	; 0x1cea <__mulohisi3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	8c 0d       	add	r24, r12
    1c3e:	9d 1d       	adc	r25, r13
    1c40:	ae 1d       	adc	r26, r14
    1c42:	bf 1d       	adc	r27, r15
    1c44:	b7 ff       	sbrs	r27, 7
    1c46:	03 c0       	rjmp	.+6      	; 0x1c4e <do_rand+0x6c>
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	a1 09       	sbc	r26, r1
    1c4c:	b0 48       	sbci	r27, 0x80	; 128
    1c4e:	88 83       	st	Y, r24
    1c50:	99 83       	std	Y+1, r25	; 0x01
    1c52:	aa 83       	std	Y+2, r26	; 0x02
    1c54:	bb 83       	std	Y+3, r27	; 0x03
    1c56:	9f 77       	andi	r25, 0x7F	; 127
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	ff 90       	pop	r15
    1c5e:	ef 90       	pop	r14
    1c60:	df 90       	pop	r13
    1c62:	cf 90       	pop	r12
    1c64:	bf 90       	pop	r11
    1c66:	af 90       	pop	r10
    1c68:	9f 90       	pop	r9
    1c6a:	8f 90       	pop	r8
    1c6c:	08 95       	ret

00001c6e <rand_r>:
    1c6e:	b9 cf       	rjmp	.-142    	; 0x1be2 <do_rand>

00001c70 <rand>:
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	92 e0       	ldi	r25, 0x02	; 2
    1c74:	b6 cf       	rjmp	.-148    	; 0x1be2 <do_rand>

00001c76 <srand>:
    1c76:	a0 e0       	ldi	r26, 0x00	; 0
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    1c7e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    1c82:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    1c86:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    1c8a:	08 95       	ret

00001c8c <memset>:
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	01 c0       	rjmp	.+2      	; 0x1c92 <memset+0x6>
    1c90:	6d 93       	st	X+, r22
    1c92:	41 50       	subi	r20, 0x01	; 1
    1c94:	50 40       	sbci	r21, 0x00	; 0
    1c96:	e0 f7       	brcc	.-8      	; 0x1c90 <memset+0x4>
    1c98:	08 95       	ret

00001c9a <__divmodsi4>:
    1c9a:	05 2e       	mov	r0, r21
    1c9c:	97 fb       	bst	r25, 7
    1c9e:	16 f4       	brtc	.+4      	; 0x1ca4 <__divmodsi4+0xa>
    1ca0:	00 94       	com	r0
    1ca2:	0f d0       	rcall	.+30     	; 0x1cc2 <__negsi2>
    1ca4:	57 fd       	sbrc	r21, 7
    1ca6:	05 d0       	rcall	.+10     	; 0x1cb2 <__divmodsi4_neg2>
    1ca8:	24 d0       	rcall	.+72     	; 0x1cf2 <__udivmodsi4>
    1caa:	07 fc       	sbrc	r0, 7
    1cac:	02 d0       	rcall	.+4      	; 0x1cb2 <__divmodsi4_neg2>
    1cae:	46 f4       	brtc	.+16     	; 0x1cc0 <__divmodsi4_exit>
    1cb0:	08 c0       	rjmp	.+16     	; 0x1cc2 <__negsi2>

00001cb2 <__divmodsi4_neg2>:
    1cb2:	50 95       	com	r21
    1cb4:	40 95       	com	r20
    1cb6:	30 95       	com	r19
    1cb8:	21 95       	neg	r18
    1cba:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbc:	4f 4f       	sbci	r20, 0xFF	; 255
    1cbe:	5f 4f       	sbci	r21, 0xFF	; 255

00001cc0 <__divmodsi4_exit>:
    1cc0:	08 95       	ret

00001cc2 <__negsi2>:
    1cc2:	90 95       	com	r25
    1cc4:	80 95       	com	r24
    1cc6:	70 95       	com	r23
    1cc8:	61 95       	neg	r22
    1cca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ccc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cce:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd0:	08 95       	ret

00001cd2 <__muluhisi3>:
    1cd2:	31 d0       	rcall	.+98     	; 0x1d36 <__umulhisi3>
    1cd4:	a5 9f       	mul	r26, r21
    1cd6:	90 0d       	add	r25, r0
    1cd8:	b4 9f       	mul	r27, r20
    1cda:	90 0d       	add	r25, r0
    1cdc:	a4 9f       	mul	r26, r20
    1cde:	80 0d       	add	r24, r0
    1ce0:	91 1d       	adc	r25, r1
    1ce2:	11 24       	eor	r1, r1
    1ce4:	08 95       	ret

00001ce6 <__mulshisi3>:
    1ce6:	b7 ff       	sbrs	r27, 7
    1ce8:	f4 cf       	rjmp	.-24     	; 0x1cd2 <__muluhisi3>

00001cea <__mulohisi3>:
    1cea:	f3 df       	rcall	.-26     	; 0x1cd2 <__muluhisi3>
    1cec:	82 1b       	sub	r24, r18
    1cee:	93 0b       	sbc	r25, r19
    1cf0:	08 95       	ret

00001cf2 <__udivmodsi4>:
    1cf2:	a1 e2       	ldi	r26, 0x21	; 33
    1cf4:	1a 2e       	mov	r1, r26
    1cf6:	aa 1b       	sub	r26, r26
    1cf8:	bb 1b       	sub	r27, r27
    1cfa:	fd 01       	movw	r30, r26
    1cfc:	0d c0       	rjmp	.+26     	; 0x1d18 <__udivmodsi4_ep>

00001cfe <__udivmodsi4_loop>:
    1cfe:	aa 1f       	adc	r26, r26
    1d00:	bb 1f       	adc	r27, r27
    1d02:	ee 1f       	adc	r30, r30
    1d04:	ff 1f       	adc	r31, r31
    1d06:	a2 17       	cp	r26, r18
    1d08:	b3 07       	cpc	r27, r19
    1d0a:	e4 07       	cpc	r30, r20
    1d0c:	f5 07       	cpc	r31, r21
    1d0e:	20 f0       	brcs	.+8      	; 0x1d18 <__udivmodsi4_ep>
    1d10:	a2 1b       	sub	r26, r18
    1d12:	b3 0b       	sbc	r27, r19
    1d14:	e4 0b       	sbc	r30, r20
    1d16:	f5 0b       	sbc	r31, r21

00001d18 <__udivmodsi4_ep>:
    1d18:	66 1f       	adc	r22, r22
    1d1a:	77 1f       	adc	r23, r23
    1d1c:	88 1f       	adc	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	1a 94       	dec	r1
    1d22:	69 f7       	brne	.-38     	; 0x1cfe <__udivmodsi4_loop>
    1d24:	60 95       	com	r22
    1d26:	70 95       	com	r23
    1d28:	80 95       	com	r24
    1d2a:	90 95       	com	r25
    1d2c:	9b 01       	movw	r18, r22
    1d2e:	ac 01       	movw	r20, r24
    1d30:	bd 01       	movw	r22, r26
    1d32:	cf 01       	movw	r24, r30
    1d34:	08 95       	ret

00001d36 <__umulhisi3>:
    1d36:	a2 9f       	mul	r26, r18
    1d38:	b0 01       	movw	r22, r0
    1d3a:	b3 9f       	mul	r27, r19
    1d3c:	c0 01       	movw	r24, r0
    1d3e:	a3 9f       	mul	r26, r19
    1d40:	70 0d       	add	r23, r0
    1d42:	81 1d       	adc	r24, r1
    1d44:	11 24       	eor	r1, r1
    1d46:	91 1d       	adc	r25, r1
    1d48:	b2 9f       	mul	r27, r18
    1d4a:	70 0d       	add	r23, r0
    1d4c:	81 1d       	adc	r24, r1
    1d4e:	11 24       	eor	r1, r1
    1d50:	91 1d       	adc	r25, r1
    1d52:	08 95       	ret

00001d54 <_exit>:
    1d54:	f8 94       	cli

00001d56 <__stop_program>:
    1d56:	ff cf       	rjmp	.-2      	; 0x1d56 <__stop_program>
