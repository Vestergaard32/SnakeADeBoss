
SnakeADDeBoss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000384  00800200  00002714  000027c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .flashwriter  00000100  0003fe00  0003fe00  00002b4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002714  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          000005f5  00800584  00800584  00002c4c  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002c4c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ca8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001c0  00000000  00000000  00002ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001cf5  00000000  00000000  00002ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001246  00000000  00000000  00004b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001350  00000000  00000000  00005de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004a0  00000000  00000000  00007134  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a73  00000000  00000000  000075d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000873  00000000  00000000  00008047  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  000088ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .flashwriter:

0003fe00 <FlashWrite>:
#define PAGE_SIZE_BYTES 256


__attribute__((section (".flashwriter")))
void FlashWrite(unsigned char* dataptr)
{
   3fe00:	cf 93       	push	r28
   3fe02:	df 93       	push	r29
   3fe04:	1f 92       	push	r1
   3fe06:	1f 92       	push	r1
   3fe08:	cd b7       	in	r28, 0x3d	; 61
   3fe0a:	de b7       	in	r29, 0x3e	; 62
   3fe0c:	9a 83       	std	Y+2, r25	; 0x02
   3fe0e:	89 83       	std	Y+1, r24	; 0x01
	boot_page_erase( (long) PAGE_NUMBER * (long) PAGE_SIZE_BYTES);
   3fe10:	23 e0       	ldi	r18, 0x03	; 3
   3fe12:	80 e0       	ldi	r24, 0x00	; 0
   3fe14:	9d ef       	ldi	r25, 0xFD	; 253
   3fe16:	a0 e0       	ldi	r26, 0x00	; 0
   3fe18:	b0 e0       	ldi	r27, 0x00	; 0
   3fe1a:	fc 01       	movw	r30, r24
   3fe1c:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3fe20:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3fe24:	e8 95       	spm
	boot_spm_busy_wait();
   3fe26:	87 e5       	ldi	r24, 0x57	; 87
   3fe28:	90 e0       	ldi	r25, 0x00	; 0
   3fe2a:	fc 01       	movw	r30, r24
   3fe2c:	80 81       	ld	r24, Z
   3fe2e:	88 2f       	mov	r24, r24
   3fe30:	90 e0       	ldi	r25, 0x00	; 0
   3fe32:	81 70       	andi	r24, 0x01	; 1
   3fe34:	99 27       	eor	r25, r25
   3fe36:	89 2b       	or	r24, r25
   3fe38:	b1 f7       	brne	.-20     	; 0x3fe26 <FlashWrite+0x26>
	
	boot_page_fill(0, dataptr[0]);
   3fe3a:	89 81       	ldd	r24, Y+1	; 0x01
   3fe3c:	9a 81       	ldd	r25, Y+2	; 0x02
   3fe3e:	fc 01       	movw	r30, r24
   3fe40:	80 81       	ld	r24, Z
   3fe42:	28 2f       	mov	r18, r24
   3fe44:	30 e0       	ldi	r19, 0x00	; 0
   3fe46:	41 e0       	ldi	r20, 0x01	; 1
   3fe48:	80 e0       	ldi	r24, 0x00	; 0
   3fe4a:	90 e0       	ldi	r25, 0x00	; 0
   3fe4c:	dc 01       	movw	r26, r24
   3fe4e:	09 01       	movw	r0, r18
   3fe50:	fc 01       	movw	r30, r24
   3fe52:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3fe56:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3fe5a:	e8 95       	spm
   3fe5c:	11 24       	eor	r1, r1
	boot_page_fill(2, dataptr[1]);
   3fe5e:	89 81       	ldd	r24, Y+1	; 0x01
   3fe60:	9a 81       	ldd	r25, Y+2	; 0x02
   3fe62:	01 96       	adiw	r24, 0x01	; 1
   3fe64:	fc 01       	movw	r30, r24
   3fe66:	80 81       	ld	r24, Z
   3fe68:	28 2f       	mov	r18, r24
   3fe6a:	30 e0       	ldi	r19, 0x00	; 0
   3fe6c:	41 e0       	ldi	r20, 0x01	; 1
   3fe6e:	82 e0       	ldi	r24, 0x02	; 2
   3fe70:	90 e0       	ldi	r25, 0x00	; 0
   3fe72:	a0 e0       	ldi	r26, 0x00	; 0
   3fe74:	b0 e0       	ldi	r27, 0x00	; 0
   3fe76:	09 01       	movw	r0, r18
   3fe78:	fc 01       	movw	r30, r24
   3fe7a:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3fe7e:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3fe82:	e8 95       	spm
   3fe84:	11 24       	eor	r1, r1
	boot_page_fill(4, dataptr[2]);
   3fe86:	89 81       	ldd	r24, Y+1	; 0x01
   3fe88:	9a 81       	ldd	r25, Y+2	; 0x02
   3fe8a:	02 96       	adiw	r24, 0x02	; 2
   3fe8c:	fc 01       	movw	r30, r24
   3fe8e:	80 81       	ld	r24, Z
   3fe90:	28 2f       	mov	r18, r24
   3fe92:	30 e0       	ldi	r19, 0x00	; 0
   3fe94:	41 e0       	ldi	r20, 0x01	; 1
   3fe96:	84 e0       	ldi	r24, 0x04	; 4
   3fe98:	90 e0       	ldi	r25, 0x00	; 0
   3fe9a:	a0 e0       	ldi	r26, 0x00	; 0
   3fe9c:	b0 e0       	ldi	r27, 0x00	; 0
   3fe9e:	09 01       	movw	r0, r18
   3fea0:	fc 01       	movw	r30, r24
   3fea2:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3fea6:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3feaa:	e8 95       	spm
   3feac:	11 24       	eor	r1, r1
	
	boot_page_write((long) PAGE_NUMBER * (long) PAGE_SIZE_BYTES);
   3feae:	25 e0       	ldi	r18, 0x05	; 5
   3feb0:	80 e0       	ldi	r24, 0x00	; 0
   3feb2:	9d ef       	ldi	r25, 0xFD	; 253
   3feb4:	a0 e0       	ldi	r26, 0x00	; 0
   3feb6:	b0 e0       	ldi	r27, 0x00	; 0
   3feb8:	fc 01       	movw	r30, r24
   3feba:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3febe:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3fec2:	e8 95       	spm
	boot_spm_busy_wait();
   3fec4:	87 e5       	ldi	r24, 0x57	; 87
   3fec6:	90 e0       	ldi	r25, 0x00	; 0
   3fec8:	fc 01       	movw	r30, r24
   3feca:	80 81       	ld	r24, Z
   3fecc:	88 2f       	mov	r24, r24
   3fece:	90 e0       	ldi	r25, 0x00	; 0
   3fed0:	81 70       	andi	r24, 0x01	; 1
   3fed2:	99 27       	eor	r25, r25
   3fed4:	89 2b       	or	r24, r25
   3fed6:	b1 f7       	brne	.-20     	; 0x3fec4 <FlashWrite+0xc4>
	
	boot_rww_enable();
   3fed8:	81 e1       	ldi	r24, 0x11	; 17
   3feda:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3fede:	e8 95       	spm
	boot_spm_busy_wait();	
   3fee0:	87 e5       	ldi	r24, 0x57	; 87
   3fee2:	90 e0       	ldi	r25, 0x00	; 0
   3fee4:	fc 01       	movw	r30, r24
   3fee6:	80 81       	ld	r24, Z
   3fee8:	88 2f       	mov	r24, r24
   3feea:	90 e0       	ldi	r25, 0x00	; 0
   3feec:	81 70       	andi	r24, 0x01	; 1
   3feee:	99 27       	eor	r25, r25
   3fef0:	89 2b       	or	r24, r25
   3fef2:	b1 f7       	brne	.-20     	; 0x3fee0 <FlashWrite+0xe0>
}
   3fef4:	00 00       	nop
   3fef6:	0f 90       	pop	r0
   3fef8:	0f 90       	pop	r0
   3fefa:	df 91       	pop	r29
   3fefc:	cf 91       	pop	r28
   3fefe:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	15 e0       	ldi	r17, 0x05	; 5
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e1       	ldi	r30, 0x14	; 20
      fc:	f7 e2       	ldi	r31, 0x27	; 39
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 38       	cpi	r26, 0x84	; 132
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2b e0       	ldi	r18, 0x0B	; 11
     110:	a4 e8       	ldi	r26, 0x84	; 132
     112:	b5 e0       	ldi	r27, 0x05	; 5
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a9 37       	cpi	r26, 0x79	; 121
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	09 d2       	rcall	.+1042   	; 0x532 <main>
     120:	0c 94 88 13 	jmp	0x2710	; 0x2710 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <time>:
     126:	fc 01       	movw	r30, r24
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	f8 94       	cli
     12c:	60 91 75 0b 	lds	r22, 0x0B75	; 0x800b75 <__system_time>
     130:	70 91 76 0b 	lds	r23, 0x0B76	; 0x800b76 <__system_time+0x1>
     134:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <__system_time+0x2>
     138:	90 91 78 0b 	lds	r25, 0x0B78	; 0x800b78 <__system_time+0x3>
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	30 97       	sbiw	r30, 0x00	; 0
     140:	21 f0       	breq	.+8      	; 0x14a <time+0x24>
     142:	60 83       	st	Z, r22
     144:	71 83       	std	Z+1, r23	; 0x01
     146:	82 83       	std	Z+2, r24	; 0x02
     148:	93 83       	std	Z+3, r25	; 0x03
     14a:	08 95       	ret

0000014c <FlashRead>:

void FlashRead(unsigned char* dataptr)
{
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	6d 97       	sbiw	r28, 0x1d	; 29
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	cd bf       	out	0x3d, r28	; 61
     160:	9d 8f       	std	Y+29, r25	; 0x1d
     162:	8c 8f       	std	Y+28, r24	; 0x1c
	long first = (long) PAGE_NUMBER* (long) PAGE_SIZE_BYTES;
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	9d ef       	ldi	r25, 0xFD	; 253
     168:	a0 e0       	ldi	r26, 0x00	; 0
     16a:	b0 e0       	ldi	r27, 0x00	; 0
     16c:	89 83       	std	Y+1, r24	; 0x01
     16e:	9a 83       	std	Y+2, r25	; 0x02
     170:	ab 83       	std	Y+3, r26	; 0x03
     172:	bc 83       	std	Y+4, r27	; 0x04
	long second = ((long) PAGE_NUMBER * (long)PAGE_SIZE_BYTES)+2;
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	9d ef       	ldi	r25, 0xFD	; 253
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	8d 83       	std	Y+5, r24	; 0x05
     17e:	9e 83       	std	Y+6, r25	; 0x06
     180:	af 83       	std	Y+7, r26	; 0x07
     182:	b8 87       	std	Y+8, r27	; 0x08
	long third = ((long) PAGE_NUMBER* (long)PAGE_SIZE_BYTES)+4;
     184:	84 e0       	ldi	r24, 0x04	; 4
     186:	9d ef       	ldi	r25, 0xFD	; 253
     188:	a0 e0       	ldi	r26, 0x00	; 0
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	89 87       	std	Y+9, r24	; 0x09
     18e:	9a 87       	std	Y+10, r25	; 0x0a
     190:	ab 87       	std	Y+11, r26	; 0x0b
     192:	bc 87       	std	Y+12, r27	; 0x0c
	
	dataptr[0] = pgm_read_byte_far(first);
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	9a 81       	ldd	r25, Y+2	; 0x02
     198:	ab 81       	ldd	r26, Y+3	; 0x03
     19a:	bc 81       	ldd	r27, Y+4	; 0x04
     19c:	8d 87       	std	Y+13, r24	; 0x0d
     19e:	9e 87       	std	Y+14, r25	; 0x0e
     1a0:	af 87       	std	Y+15, r26	; 0x0f
     1a2:	b8 8b       	std	Y+16, r27	; 0x10
     1a4:	8d 85       	ldd	r24, Y+13	; 0x0d
     1a6:	9e 85       	ldd	r25, Y+14	; 0x0e
     1a8:	af 85       	ldd	r26, Y+15	; 0x0f
     1aa:	b8 89       	ldd	r27, Y+16	; 0x10
     1ac:	ab bf       	out	0x3b, r26	; 59
     1ae:	fc 01       	movw	r30, r24
     1b0:	87 91       	elpm	r24, Z+
     1b2:	89 8b       	std	Y+17, r24	; 0x11
     1b4:	29 89       	ldd	r18, Y+17	; 0x11
     1b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     1b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
	dataptr[1] = pgm_read_byte_far(second);
     1be:	8c 8d       	ldd	r24, Y+28	; 0x1c
     1c0:	9d 8d       	ldd	r25, Y+29	; 0x1d
     1c2:	9c 01       	movw	r18, r24
     1c4:	2f 5f       	subi	r18, 0xFF	; 255
     1c6:	3f 4f       	sbci	r19, 0xFF	; 255
     1c8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ca:	9e 81       	ldd	r25, Y+6	; 0x06
     1cc:	af 81       	ldd	r26, Y+7	; 0x07
     1ce:	b8 85       	ldd	r27, Y+8	; 0x08
     1d0:	8a 8b       	std	Y+18, r24	; 0x12
     1d2:	9b 8b       	std	Y+19, r25	; 0x13
     1d4:	ac 8b       	std	Y+20, r26	; 0x14
     1d6:	bd 8b       	std	Y+21, r27	; 0x15
     1d8:	8a 89       	ldd	r24, Y+18	; 0x12
     1da:	9b 89       	ldd	r25, Y+19	; 0x13
     1dc:	ac 89       	ldd	r26, Y+20	; 0x14
     1de:	bd 89       	ldd	r27, Y+21	; 0x15
     1e0:	ab bf       	out	0x3b, r26	; 59
     1e2:	fc 01       	movw	r30, r24
     1e4:	87 91       	elpm	r24, Z+
     1e6:	8e 8b       	std	Y+22, r24	; 0x16
     1e8:	8e 89       	ldd	r24, Y+22	; 0x16
     1ea:	f9 01       	movw	r30, r18
     1ec:	80 83       	st	Z, r24
	dataptr[2] = pgm_read_byte_far(third);
     1ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
     1f0:	9d 8d       	ldd	r25, Y+29	; 0x1d
     1f2:	9c 01       	movw	r18, r24
     1f4:	2e 5f       	subi	r18, 0xFE	; 254
     1f6:	3f 4f       	sbci	r19, 0xFF	; 255
     1f8:	89 85       	ldd	r24, Y+9	; 0x09
     1fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     1fc:	ab 85       	ldd	r26, Y+11	; 0x0b
     1fe:	bc 85       	ldd	r27, Y+12	; 0x0c
     200:	8f 8b       	std	Y+23, r24	; 0x17
     202:	98 8f       	std	Y+24, r25	; 0x18
     204:	a9 8f       	std	Y+25, r26	; 0x19
     206:	ba 8f       	std	Y+26, r27	; 0x1a
     208:	8f 89       	ldd	r24, Y+23	; 0x17
     20a:	98 8d       	ldd	r25, Y+24	; 0x18
     20c:	a9 8d       	ldd	r26, Y+25	; 0x19
     20e:	ba 8d       	ldd	r27, Y+26	; 0x1a
     210:	ab bf       	out	0x3b, r26	; 59
     212:	fc 01       	movw	r30, r24
     214:	87 91       	elpm	r24, Z+
     216:	8b 8f       	std	Y+27, r24	; 0x1b
     218:	8b 8d       	ldd	r24, Y+27	; 0x1b
     21a:	f9 01       	movw	r30, r18
     21c:	80 83       	st	Z, r24
     21e:	00 00       	nop
     220:	6d 96       	adiw	r28, 0x1d	; 29
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	f8 94       	cli
     226:	de bf       	out	0x3e, r29	; 62
     228:	0f be       	out	0x3f, r0	; 63
     22a:	cd bf       	out	0x3d, r28	; 61
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <GenerateFoodPosition>:
#include "FoodProcessor.h"
#include <stdlib.h>
#include <time.h>

struct Position GenerateFoodPosition(int worldWidth, int worldHeight)
{	
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	2c 97       	sbiw	r28, 0x0c	; 12
     23c:	0f b6       	in	r0, 0x3f	; 63
     23e:	f8 94       	cli
     240:	de bf       	out	0x3e, r29	; 62
     242:	0f be       	out	0x3f, r0	; 63
     244:	cd bf       	out	0x3d, r28	; 61
     246:	9a 87       	std	Y+10, r25	; 0x0a
     248:	89 87       	std	Y+9, r24	; 0x09
     24a:	7c 87       	std	Y+12, r23	; 0x0c
     24c:	6b 87       	std	Y+11, r22	; 0x0b
	int newXPos = rand() % (worldWidth-2);
     24e:	0e 94 3b 10 	call	0x2076	; 0x2076 <rand>
     252:	ac 01       	movw	r20, r24
     254:	89 85       	ldd	r24, Y+9	; 0x09
     256:	9a 85       	ldd	r25, Y+10	; 0x0a
     258:	9c 01       	movw	r18, r24
     25a:	22 50       	subi	r18, 0x02	; 2
     25c:	31 09       	sbc	r19, r1
     25e:	ca 01       	movw	r24, r20
     260:	b9 01       	movw	r22, r18
     262:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__divmodhi4>
     266:	9a 83       	std	Y+2, r25	; 0x02
     268:	89 83       	std	Y+1, r24	; 0x01
	int newYPos = rand() & (worldHeight-2);
     26a:	0e 94 3b 10 	call	0x2076	; 0x2076 <rand>
     26e:	9c 01       	movw	r18, r24
     270:	8b 85       	ldd	r24, Y+11	; 0x0b
     272:	9c 85       	ldd	r25, Y+12	; 0x0c
     274:	02 97       	sbiw	r24, 0x02	; 2
     276:	82 23       	and	r24, r18
     278:	93 23       	and	r25, r19
     27a:	9c 83       	std	Y+4, r25	; 0x04
     27c:	8b 83       	std	Y+3, r24	; 0x03
	
	struct Position newPosition;
	newPosition.x = newXPos;
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	9a 81       	ldd	r25, Y+2	; 0x02
     282:	9e 83       	std	Y+6, r25	; 0x06
     284:	8d 83       	std	Y+5, r24	; 0x05
	newPosition.y = newYPos;
     286:	8b 81       	ldd	r24, Y+3	; 0x03
     288:	9c 81       	ldd	r25, Y+4	; 0x04
     28a:	98 87       	std	Y+8, r25	; 0x08
     28c:	8f 83       	std	Y+7, r24	; 0x07
		
	return newPosition;
     28e:	8d 81       	ldd	r24, Y+5	; 0x05
     290:	9e 81       	ldd	r25, Y+6	; 0x06
     292:	af 81       	ldd	r26, Y+7	; 0x07
     294:	b8 85       	ldd	r27, Y+8	; 0x08
     296:	bc 01       	movw	r22, r24
     298:	cd 01       	movw	r24, r26
     29a:	2c 96       	adiw	r28, 0x0c	; 12
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	f8 94       	cli
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	0f be       	out	0x3f, r0	; 63
     2a4:	cd bf       	out	0x3d, r28	; 61
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	08 95       	ret

000002ac <InitKeypad>:
	{ '3', '6', '9', '#' },
	{ 'A', 'B', 'C', 'D' }
};

void InitKeypad()
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
	// Setup input pins to keyboard
	// These are pins PA6 (Row 2) and PA4 (Row 1), and C7 (Row 3) and C5 (Row 4)
	DDRA &= ~(0b01010000);
     2b4:	81 e2       	ldi	r24, 0x21	; 33
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	21 e2       	ldi	r18, 0x21	; 33
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	f9 01       	movw	r30, r18
     2be:	20 81       	ld	r18, Z
     2c0:	2f 7a       	andi	r18, 0xAF	; 175
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
	DDRC &= ~(0b10100000);
     2c6:	87 e2       	ldi	r24, 0x27	; 39
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	27 e2       	ldi	r18, 0x27	; 39
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	f9 01       	movw	r30, r18
     2d0:	20 81       	ld	r18, Z
     2d2:	2f 75       	andi	r18, 0x5F	; 95
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 83       	st	Z, r18

	// Setup output pins to keyboard
	// PD0 = Column 1, PD1 = Column 2, PD2 = Column 3, PD3 = Column 4
	DDRD |= 0b00001111;
     2d8:	8a e2       	ldi	r24, 0x2A	; 42
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	2a e2       	ldi	r18, 0x2A	; 42
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	f9 01       	movw	r30, r18
     2e2:	20 81       	ld	r18, Z
     2e4:	2f 60       	ori	r18, 0x0F	; 15
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
	PORTD |= 0b00001111;
     2ea:	8b e2       	ldi	r24, 0x2B	; 43
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	2b e2       	ldi	r18, 0x2B	; 43
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	f9 01       	movw	r30, r18
     2f4:	20 81       	ld	r18, Z
     2f6:	2f 60       	ori	r18, 0x0F	; 15
     2f8:	fc 01       	movw	r30, r24
     2fa:	20 83       	st	Z, r18

	DDRB = 0b11111111;
     2fc:	84 e2       	ldi	r24, 0x24	; 36
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	2f ef       	ldi	r18, 0xFF	; 255
     302:	fc 01       	movw	r30, r24
     304:	20 83       	st	Z, r18

	//PORTB = 0xFF;
}
     306:	00 00       	nop
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <GetKey>:

char GetKey()
{
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	60 97       	sbiw	r28, 0x10	; 16
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
	keyPressed = 0;
     322:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <__data_end>
	
	for (int columnIndex = 0; columnIndex < 4; columnIndex++)
     326:	1a 82       	std	Y+2, r1	; 0x02
     328:	19 82       	std	Y+1, r1	; 0x01
     32a:	f3 c0       	rjmp	.+486    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
	{
		// Scan Column 1 (1, 4, 7, and *)
		PORTD |= 0b00001111;
     32c:	8b e2       	ldi	r24, 0x2B	; 43
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	2b e2       	ldi	r18, 0x2B	; 43
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	f9 01       	movw	r30, r18
     336:	20 81       	ld	r18, Z
     338:	2f 60       	ori	r18, 0x0F	; 15
     33a:	fc 01       	movw	r30, r24
     33c:	20 83       	st	Z, r18
		PORTD &= ~(1 << columnIndex);
     33e:	8b e2       	ldi	r24, 0x2B	; 43
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	2b e2       	ldi	r18, 0x2B	; 43
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	f9 01       	movw	r30, r18
     348:	20 81       	ld	r18, Z
     34a:	42 2f       	mov	r20, r18
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	09 80       	ldd	r0, Y+1	; 0x01
     352:	02 c0       	rjmp	.+4      	; 0x358 <GetKey+0x4a>
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	0a 94       	dec	r0
     35a:	e2 f7       	brpl	.-8      	; 0x354 <GetKey+0x46>
     35c:	20 95       	com	r18
     35e:	24 23       	and	r18, r20
     360:	fc 01       	movw	r30, r24
     362:	20 83       	st	Z, r18
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	a0 e8       	ldi	r26, 0x80	; 128
     36a:	bf e3       	ldi	r27, 0x3F	; 63
     36c:	8b 83       	std	Y+3, r24	; 0x03
     36e:	9c 83       	std	Y+4, r25	; 0x04
     370:	ad 83       	std	Y+5, r26	; 0x05
     372:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	4a e7       	ldi	r20, 0x7A	; 122
     37a:	55 e4       	ldi	r21, 0x45	; 69
     37c:	6b 81       	ldd	r22, Y+3	; 0x03
     37e:	7c 81       	ldd	r23, Y+4	; 0x04
     380:	8d 81       	ldd	r24, Y+5	; 0x05
     382:	9e 81       	ldd	r25, Y+6	; 0x06
     384:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8f 83       	std	Y+7, r24	; 0x07
     38e:	98 87       	std	Y+8, r25	; 0x08
     390:	a9 87       	std	Y+9, r26	; 0x09
     392:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	40 e8       	ldi	r20, 0x80	; 128
     39a:	5f e3       	ldi	r21, 0x3F	; 63
     39c:	6f 81       	ldd	r22, Y+7	; 0x07
     39e:	78 85       	ldd	r23, Y+8	; 0x08
     3a0:	89 85       	ldd	r24, Y+9	; 0x09
     3a2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3a4:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__cmpsf2>
     3a8:	88 23       	and	r24, r24
     3aa:	2c f4       	brge	.+10     	; 0x3b6 <GetKey+0xa8>
		__ticks = 1;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	9c 87       	std	Y+12, r25	; 0x0c
     3b2:	8b 87       	std	Y+11, r24	; 0x0b
     3b4:	3f c0       	rjmp	.+126    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	else if (__tmp > 65535)
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	3f ef       	ldi	r19, 0xFF	; 255
     3ba:	4f e7       	ldi	r20, 0x7F	; 127
     3bc:	57 e4       	ldi	r21, 0x47	; 71
     3be:	6f 81       	ldd	r22, Y+7	; 0x07
     3c0:	78 85       	ldd	r23, Y+8	; 0x08
     3c2:	89 85       	ldd	r24, Y+9	; 0x09
     3c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3c6:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__gesf2>
     3ca:	18 16       	cp	r1, r24
     3cc:	4c f5       	brge	.+82     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	40 e2       	ldi	r20, 0x20	; 32
     3d4:	51 e4       	ldi	r21, 0x41	; 65
     3d6:	6b 81       	ldd	r22, Y+3	; 0x03
     3d8:	7c 81       	ldd	r23, Y+4	; 0x04
     3da:	8d 81       	ldd	r24, Y+5	; 0x05
     3dc:	9e 81       	ldd	r25, Y+6	; 0x06
     3de:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__mulsf3>
     3e2:	dc 01       	movw	r26, r24
     3e4:	cb 01       	movw	r24, r22
     3e6:	bc 01       	movw	r22, r24
     3e8:	cd 01       	movw	r24, r26
     3ea:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__fixunssfsi>
     3ee:	dc 01       	movw	r26, r24
     3f0:	cb 01       	movw	r24, r22
     3f2:	9c 87       	std	Y+12, r25	; 0x0c
     3f4:	8b 87       	std	Y+11, r24	; 0x0b
     3f6:	0f c0       	rjmp	.+30     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3f8:	80 e9       	ldi	r24, 0x90	; 144
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	9e 87       	std	Y+14, r25	; 0x0e
     3fe:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     400:	8d 85       	ldd	r24, Y+13	; 0x0d
     402:	9e 85       	ldd	r25, Y+14	; 0x0e
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	9e 87       	std	Y+14, r25	; 0x0e
     40a:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     40c:	8b 85       	ldd	r24, Y+11	; 0x0b
     40e:	9c 85       	ldd	r25, Y+12	; 0x0c
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	9c 87       	std	Y+12, r25	; 0x0c
     414:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     416:	8b 85       	ldd	r24, Y+11	; 0x0b
     418:	9c 85       	ldd	r25, Y+12	; 0x0c
     41a:	89 2b       	or	r24, r25
     41c:	69 f7       	brne	.-38     	; 0x3f8 <GetKey+0xea>
     41e:	14 c0       	rjmp	.+40     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     420:	6f 81       	ldd	r22, Y+7	; 0x07
     422:	78 85       	ldd	r23, Y+8	; 0x08
     424:	89 85       	ldd	r24, Y+9	; 0x09
     426:	9a 85       	ldd	r25, Y+10	; 0x0a
     428:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__fixunssfsi>
     42c:	dc 01       	movw	r26, r24
     42e:	cb 01       	movw	r24, r22
     430:	9c 87       	std	Y+12, r25	; 0x0c
     432:	8b 87       	std	Y+11, r24	; 0x0b
     434:	8b 85       	ldd	r24, Y+11	; 0x0b
     436:	9c 85       	ldd	r25, Y+12	; 0x0c
     438:	98 8b       	std	Y+16, r25	; 0x10
     43a:	8f 87       	std	Y+15, r24	; 0x0f
     43c:	8f 85       	ldd	r24, Y+15	; 0x0f
     43e:	98 89       	ldd	r25, Y+16	; 0x10
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     444:	98 8b       	std	Y+16, r25	; 0x10
     446:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
			
		// Key '1'
		if ((PINA & (1 << ROW_1)) == 0)
     448:	80 e2       	ldi	r24, 0x20	; 32
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	fc 01       	movw	r30, r24
     44e:	80 81       	ld	r24, Z
     450:	88 2f       	mov	r24, r24
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	80 71       	andi	r24, 0x10	; 16
     456:	99 27       	eor	r25, r25
     458:	89 2b       	or	r24, r25
     45a:	79 f4       	brne	.+30     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		{
			keyPressed = characterColumns[columnIndex][0]; 
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	9a 81       	ldd	r25, Y+2	; 0x02
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	8c 5f       	subi	r24, 0xFC	; 252
     46a:	9d 4f       	sbci	r25, 0xFD	; 253
     46c:	fc 01       	movw	r30, r24
     46e:	80 81       	ld	r24, Z
     470:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <__data_end>
			return keyPressed;
     474:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <__data_end>
     478:	53 c0       	rjmp	.+166    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		}

		// Key '4'
		if ((PINA & (1 << ROW_2)) == 0)
     47a:	80 e2       	ldi	r24, 0x20	; 32
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	fc 01       	movw	r30, r24
     480:	80 81       	ld	r24, Z
     482:	88 2f       	mov	r24, r24
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	80 74       	andi	r24, 0x40	; 64
     488:	99 27       	eor	r25, r25
     48a:	89 2b       	or	r24, r25
     48c:	79 f4       	brne	.+30     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		{
			keyPressed = characterColumns[columnIndex][1];
     48e:	89 81       	ldd	r24, Y+1	; 0x01
     490:	9a 81       	ldd	r25, Y+2	; 0x02
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	88 0f       	add	r24, r24
     498:	99 1f       	adc	r25, r25
     49a:	8b 5f       	subi	r24, 0xFB	; 251
     49c:	9d 4f       	sbci	r25, 0xFD	; 253
     49e:	fc 01       	movw	r30, r24
     4a0:	80 81       	ld	r24, Z
     4a2:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <__data_end>
			return keyPressed;
     4a6:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <__data_end>
     4aa:	3a c0       	rjmp	.+116    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		}

		// Key '7'
		if ((PINC & (1 << ROW_3)) == 0)
     4ac:	86 e2       	ldi	r24, 0x26	; 38
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	fc 01       	movw	r30, r24
     4b2:	80 81       	ld	r24, Z
     4b4:	88 23       	and	r24, r24
     4b6:	7c f0       	brlt	.+30     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
		{
			keyPressed = characterColumns[columnIndex][2];
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	9a 81       	ldd	r25, Y+2	; 0x02
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	8a 5f       	subi	r24, 0xFA	; 250
     4c6:	9d 4f       	sbci	r25, 0xFD	; 253
     4c8:	fc 01       	movw	r30, r24
     4ca:	80 81       	ld	r24, Z
     4cc:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <__data_end>
			return keyPressed;
     4d0:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <__data_end>
     4d4:	25 c0       	rjmp	.+74     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
		}

		// Key '*'
		if ((PINC & (1 << ROW_4)) == 0)
     4d6:	86 e2       	ldi	r24, 0x26	; 38
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	fc 01       	movw	r30, r24
     4dc:	80 81       	ld	r24, Z
     4de:	88 2f       	mov	r24, r24
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	80 72       	andi	r24, 0x20	; 32
     4e4:	99 27       	eor	r25, r25
     4e6:	89 2b       	or	r24, r25
     4e8:	79 f4       	brne	.+30     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
		{
			keyPressed = characterColumns[columnIndex][3];
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	9a 81       	ldd	r25, Y+2	; 0x02
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	88 0f       	add	r24, r24
     4f4:	99 1f       	adc	r25, r25
     4f6:	89 5f       	subi	r24, 0xF9	; 249
     4f8:	9d 4f       	sbci	r25, 0xFD	; 253
     4fa:	fc 01       	movw	r30, r24
     4fc:	80 81       	ld	r24, Z
     4fe:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <__data_end>
			return keyPressed;
     502:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <__data_end>
     506:	0c c0       	rjmp	.+24     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

char GetKey()
{
	keyPressed = 0;
	
	for (int columnIndex = 0; columnIndex < 4; columnIndex++)
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	9a 81       	ldd	r25, Y+2	; 0x02
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	9a 83       	std	Y+2, r25	; 0x02
     510:	89 83       	std	Y+1, r24	; 0x01
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	9a 81       	ldd	r25, Y+2	; 0x02
     516:	04 97       	sbiw	r24, 0x04	; 4
     518:	0c f4       	brge	.+2      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     51a:	08 cf       	rjmp	.-496    	; 0x32c <GetKey+0x1e>
			keyPressed = characterColumns[columnIndex][3];
			return keyPressed;
		}
	}
	
	return keyPressed;
     51c:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <__data_end>
     520:	60 96       	adiw	r28, 0x10	; 16
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <main>:
int scoreHundredsCounter = 0;
int playerHighscoreTextOffset = 60;
int storedHighscoreTextOffset = 0;

int main(void)
{
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	ae 97       	sbiw	r28, 0x2e	; 46
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
	InitKeypad();
     546:	b2 de       	rcall	.-668    	; 0x2ac <InitKeypad>
	initDisplay();
     548:	ae d3       	rcall	.+1884   	; 0xca6 <initDisplay>
     54a:	80 e0       	ldi	r24, 0x00	; 0
	
	// Seed number generator
	srand(time(NULL));
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	eb dd       	rcall	.-1066   	; 0x126 <time>
     550:	dc 01       	movw	r26, r24
     552:	cb 01       	movw	r24, r22
     554:	0e 94 3e 10 	call	0x207c	; 0x207c <srand>
	
	ResetGame();
     558:	68 d3       	rcall	.+1744   	; 0xc2a <ResetGame>
     55a:	84 e1       	ldi	r24, 0x14	; 20

	DrawIntroScreen(IntroScreenImage);
     55c:	92 e0       	ldi	r25, 0x02	; 2
     55e:	0e 94 a4 0c 	call	0x1948	; 0x1948 <DrawIntroScreen>
	
	// Busy Wait until user press star button
	while (GetKey() != '*')
     562:	00 00       	nop
     564:	d4 de       	rcall	.-600    	; 0x30e <GetKey>
     566:	8a 32       	cpi	r24, 0x2A	; 42
     568:	e9 f7       	brne	.-6      	; 0x564 <main+0x32>
     56a:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <gameState>
	}

	// Main Game Loop
    while (1) 
	{
		if (gameState == GAME_STATE_ALIVE)
     56e:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <gameState+0x1>
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	09 f0       	breq	.+2      	; 0x578 <main+0x46>
     576:	10 c1       	rjmp	.+544    	; 0x798 <main+0x266>
     578:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <snakeBodyLength>
		{
			UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);
     57c:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <snakeBodyLength+0x1>
     580:	2f e2       	ldi	r18, 0x2F	; 47
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	43 e5       	ldi	r20, 0x53	; 83
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	bc 01       	movw	r22, r24
     58a:	81 e9       	ldi	r24, 0x91	; 145
     58c:	95 e0       	ldi	r25, 0x05	; 5
     58e:	42 d6       	rcall	.+3204   	; 0x1214 <UpdateSnake>
     590:	8a e0       	ldi	r24, 0x0A	; 10

			struct SnakeBodyPart snakeHead = snake[0];
     592:	e1 e9       	ldi	r30, 0x91	; 145
     594:	f5 e0       	ldi	r31, 0x05	; 5
     596:	de 01       	movw	r26, r28
     598:	58 96       	adiw	r26, 0x18	; 24
     59a:	01 90       	ld	r0, Z+
     59c:	0d 92       	st	X+, r0
     59e:	8a 95       	dec	r24
     5a0:	e1 f7       	brne	.-8      	; 0x59a <main+0x68>
     5a2:	28 8d       	ldd	r18, Y+24	; 0x18
			if (snakeHead.x < (currentFoodPosition.x + 3) &&
     5a4:	39 8d       	ldd	r19, Y+25	; 0x19
     5a6:	80 91 71 0b 	lds	r24, 0x0B71	; 0x800b71 <currentFoodPosition>
     5aa:	90 91 72 0b 	lds	r25, 0x0B72	; 0x800b72 <currentFoodPosition+0x1>
     5ae:	03 96       	adiw	r24, 0x03	; 3
     5b0:	28 17       	cp	r18, r24
     5b2:	39 07       	cpc	r19, r25
     5b4:	0c f0       	brlt	.+2      	; 0x5b8 <main+0x86>
     5b6:	9f c0       	rjmp	.+318    	; 0x6f6 <main+0x1c4>
     5b8:	88 8d       	ldd	r24, Y+24	; 0x18
			(snakeHead.x + 2) > currentFoodPosition.x &&
     5ba:	99 8d       	ldd	r25, Y+25	; 0x19
     5bc:	9c 01       	movw	r18, r24
     5be:	2e 5f       	subi	r18, 0xFE	; 254
     5c0:	3f 4f       	sbci	r19, 0xFF	; 255
     5c2:	80 91 71 0b 	lds	r24, 0x0B71	; 0x800b71 <currentFoodPosition>
     5c6:	90 91 72 0b 	lds	r25, 0x0B72	; 0x800b72 <currentFoodPosition+0x1>
     5ca:	82 17       	cp	r24, r18
		if (gameState == GAME_STATE_ALIVE)
		{
			UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

			struct SnakeBodyPart snakeHead = snake[0];
			if (snakeHead.x < (currentFoodPosition.x + 3) &&
     5cc:	93 07       	cpc	r25, r19
     5ce:	0c f0       	brlt	.+2      	; 0x5d2 <main+0xa0>
     5d0:	92 c0       	rjmp	.+292    	; 0x6f6 <main+0x1c4>
     5d2:	2a 8d       	ldd	r18, Y+26	; 0x1a
			(snakeHead.x + 2) > currentFoodPosition.x &&
			snakeHead.y < (currentFoodPosition.y + 2) &&
     5d4:	3b 8d       	ldd	r19, Y+27	; 0x1b
     5d6:	80 91 73 0b 	lds	r24, 0x0B73	; 0x800b73 <currentFoodPosition+0x2>
     5da:	90 91 74 0b 	lds	r25, 0x0B74	; 0x800b74 <currentFoodPosition+0x3>
     5de:	02 96       	adiw	r24, 0x02	; 2
     5e0:	28 17       	cp	r18, r24
		{
			UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

			struct SnakeBodyPart snakeHead = snake[0];
			if (snakeHead.x < (currentFoodPosition.x + 3) &&
			(snakeHead.x + 2) > currentFoodPosition.x &&
     5e2:	39 07       	cpc	r19, r25
     5e4:	0c f0       	brlt	.+2      	; 0x5e8 <main+0xb6>
     5e6:	87 c0       	rjmp	.+270    	; 0x6f6 <main+0x1c4>
     5e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
			snakeHead.y < (currentFoodPosition.y + 2) &&
			(2 + snakeHead.y) > (currentFoodPosition.y -1))
     5ea:	9b 8d       	ldd	r25, Y+27	; 0x1b
     5ec:	9c 01       	movw	r18, r24
     5ee:	2e 5f       	subi	r18, 0xFE	; 254
     5f0:	3f 4f       	sbci	r19, 0xFF	; 255
     5f2:	80 91 73 0b 	lds	r24, 0x0B73	; 0x800b73 <currentFoodPosition+0x2>
     5f6:	90 91 74 0b 	lds	r25, 0x0B74	; 0x800b74 <currentFoodPosition+0x3>
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	82 17       	cp	r24, r18
			UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

			struct SnakeBodyPart snakeHead = snake[0];
			if (snakeHead.x < (currentFoodPosition.x + 3) &&
			(snakeHead.x + 2) > currentFoodPosition.x &&
			snakeHead.y < (currentFoodPosition.y + 2) &&
     5fe:	93 07       	cpc	r25, r19
     600:	0c f0       	brlt	.+2      	; 0x604 <main+0xd2>
     602:	79 c0       	rjmp	.+242    	; 0x6f6 <main+0x1c4>
			(2 + snakeHead.y) > (currentFoodPosition.y -1))
			{
				currentFoodPosition = GenerateFoodPosition(WORLD_WIDTH, WORLD_HEIGHT);
     604:	6f e2       	ldi	r22, 0x2F	; 47
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	83 e5       	ldi	r24, 0x53	; 83
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	12 de       	rcall	.-988    	; 0x232 <GenerateFoodPosition>
     60e:	dc 01       	movw	r26, r24
     610:	cb 01       	movw	r24, r22
     612:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <currentFoodPosition>
     616:	90 93 72 0b 	sts	0x0B72, r25	; 0x800b72 <currentFoodPosition+0x1>
     61a:	a0 93 73 0b 	sts	0x0B73, r26	; 0x800b73 <currentFoodPosition+0x2>
     61e:	b0 93 74 0b 	sts	0x0B74, r27	; 0x800b74 <currentFoodPosition+0x3>
     622:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <snakeBodyLength>
				snakeBodyLength++;
     626:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <snakeBodyLength+0x1>
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <snakeBodyLength+0x1>
     630:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <snakeBodyLength>
     634:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <gameSpeed>
				
				if(gameSpeed !=  0)
     638:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <gameSpeed+0x1>
     63c:	89 2b       	or	r24, r25
     63e:	49 f0       	breq	.+18     	; 0x652 <main+0x120>
     640:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <gameSpeed>
					gameSpeed--;
     644:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <gameSpeed+0x1>
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <gameSpeed+0x1>
     64e:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <gameSpeed>
     652:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <snakeBodyLength>
					
				GrowSnake(snake, snakeBodyLength);
     656:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <snakeBodyLength+0x1>
     65a:	bc 01       	movw	r22, r24
     65c:	81 e9       	ldi	r24, 0x91	; 145
     65e:	95 e0       	ldi	r25, 0x05	; 5
     660:	0e 94 ed 0b 	call	0x17da	; 0x17da <GrowSnake>
     664:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <snakeBodyLength>
				snakeBodyLength++;
     668:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <snakeBodyLength+0x1>
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <snakeBodyLength+0x1>
     672:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <snakeBodyLength>
     676:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <snakeBodyLength>
				GrowSnake(snake, snakeBodyLength);
     67a:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <snakeBodyLength+0x1>
     67e:	bc 01       	movw	r22, r24
     680:	81 e9       	ldi	r24, 0x91	; 145
     682:	95 e0       	ldi	r25, 0x05	; 5
     684:	0e 94 ed 0b 	call	0x17da	; 0x17da <GrowSnake>
     688:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <scoreOnesCounter>
				
				if (scoreOnesCounter != 9)
     68c:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <scoreOnesCounter+0x1>
     690:	09 97       	sbiw	r24, 0x09	; 9
     692:	51 f0       	breq	.+20     	; 0x6a8 <main+0x176>
     694:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <scoreOnesCounter>
				{
					scoreOnesCounter += 1;
     698:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <scoreOnesCounter+0x1>
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <scoreOnesCounter+0x1>
     6a2:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <scoreOnesCounter>
     6a6:	27 c0       	rjmp	.+78     	; 0x6f6 <main+0x1c4>
     6a8:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <scoreTensCounter>
				} else if (scoreTensCounter != 9)
     6ac:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <scoreTensCounter+0x1>
     6b0:	09 97       	sbiw	r24, 0x09	; 9
     6b2:	71 f0       	breq	.+28     	; 0x6d0 <main+0x19e>
     6b4:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <scoreTensCounter>
				{
					scoreTensCounter += 1;
     6b8:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <scoreTensCounter+0x1>
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <scoreTensCounter+0x1>
     6c2:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <scoreTensCounter>
     6c6:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <scoreOnesCounter+0x1>
					scoreOnesCounter = 0;
     6ca:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <scoreOnesCounter>
     6ce:	13 c0       	rjmp	.+38     	; 0x6f6 <main+0x1c4>
     6d0:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <scoreHundredsCounter>
				} else if (scoreHundredsCounter != 9)
     6d4:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <scoreHundredsCounter+0x1>
     6d8:	09 97       	sbiw	r24, 0x09	; 9
     6da:	69 f0       	breq	.+26     	; 0x6f6 <main+0x1c4>
     6dc:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <scoreTensCounter+0x1>
				{
					scoreTensCounter = 0;
     6e0:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <scoreTensCounter>
     6e4:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <scoreHundredsCounter>
					scoreHundredsCounter += 1;
     6e8:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <scoreHundredsCounter+0x1>
     6ec:	01 96       	adiw	r24, 0x01	; 1
     6ee:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <scoreHundredsCounter+0x1>
     6f2:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <scoreHundredsCounter>
     6f6:	80 91 73 0b 	lds	r24, 0x0B73	; 0x800b73 <currentFoodPosition+0x2>
				}
			}

			DrawFood(currentFoodPosition.x ,currentFoodPosition.y, worldImage);
     6fa:	90 91 74 0b 	lds	r25, 0x0B74	; 0x800b74 <currentFoodPosition+0x3>
     6fe:	28 2f       	mov	r18, r24
     700:	80 91 71 0b 	lds	r24, 0x0B71	; 0x800b71 <currentFoodPosition>
     704:	90 91 72 0b 	lds	r25, 0x0B72	; 0x800b72 <currentFoodPosition+0x1>
     708:	49 e7       	ldi	r20, 0x79	; 121
     70a:	59 e0       	ldi	r21, 0x09	; 9
     70c:	62 2f       	mov	r22, r18
     70e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <DrawFood>
     712:	1a 82       	std	Y+2, r1	; 0x02

			for(int i = 0; i < snakeBodyLength; i++)
     714:	19 82       	std	Y+1, r1	; 0x01
     716:	2a c0       	rjmp	.+84     	; 0x76c <main+0x23a>
     718:	89 81       	ldd	r24, Y+1	; 0x01
			{
				DrawDot(snake[i].x, snake[i].y, worldImage);
     71a:	9a 81       	ldd	r25, Y+2	; 0x02
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	9c 01       	movw	r18, r24
     722:	22 0f       	add	r18, r18
     724:	33 1f       	adc	r19, r19
     726:	22 0f       	add	r18, r18
     728:	33 1f       	adc	r19, r19
     72a:	82 0f       	add	r24, r18
     72c:	93 1f       	adc	r25, r19
     72e:	8d 56       	subi	r24, 0x6D	; 109
     730:	9a 4f       	sbci	r25, 0xFA	; 250
     732:	fc 01       	movw	r30, r24
     734:	80 81       	ld	r24, Z
     736:	91 81       	ldd	r25, Z+1	; 0x01
     738:	68 2f       	mov	r22, r24
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	9a 81       	ldd	r25, Y+2	; 0x02
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	9c 01       	movw	r18, r24
     744:	22 0f       	add	r18, r18
     746:	33 1f       	adc	r19, r19
     748:	22 0f       	add	r18, r18
     74a:	33 1f       	adc	r19, r19
     74c:	82 0f       	add	r24, r18
     74e:	93 1f       	adc	r25, r19
     750:	8f 56       	subi	r24, 0x6F	; 111
     752:	9a 4f       	sbci	r25, 0xFA	; 250
     754:	fc 01       	movw	r30, r24
     756:	80 81       	ld	r24, Z
     758:	91 81       	ldd	r25, Z+1	; 0x01
     75a:	49 e7       	ldi	r20, 0x79	; 121
     75c:	59 e0       	ldi	r21, 0x09	; 9
     75e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DrawDot>
     762:	89 81       	ldd	r24, Y+1	; 0x01
				}
			}

			DrawFood(currentFoodPosition.x ,currentFoodPosition.y, worldImage);

			for(int i = 0; i < snakeBodyLength; i++)
     764:	9a 81       	ldd	r25, Y+2	; 0x02
     766:	01 96       	adiw	r24, 0x01	; 1
     768:	9a 83       	std	Y+2, r25	; 0x02
     76a:	89 83       	std	Y+1, r24	; 0x01
     76c:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <snakeBodyLength>
     770:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <snakeBodyLength+0x1>
     774:	29 81       	ldd	r18, Y+1	; 0x01
     776:	3a 81       	ldd	r19, Y+2	; 0x02
     778:	28 17       	cp	r18, r24
     77a:	39 07       	cpc	r19, r25
     77c:	6c f2       	brlt	.-102    	; 0x718 <main+0x1e6>
     77e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <SnakeHitSelf>
			{
				DrawDot(snake[i].x, snake[i].y, worldImage);
			}
					
			if (SnakeHitSelf() == 1)
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	21 f4       	brne	.+8      	; 0x78e <main+0x25c>
     786:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <gameState+0x1>
			{
				gameState = GAME_STATE_DEAD;
     78a:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <gameState>
     78e:	89 e7       	ldi	r24, 0x79	; 121
			}
					
			RenderWorld(worldImage);
     790:	99 e0       	ldi	r25, 0x09	; 9
     792:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <RenderWorld>
     796:	cc c1       	rjmp	.+920    	; 0xb30 <main+0x5fe>
     798:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <gameState>
		} else if (gameState == GAME_STATE_DEAD)
     79c:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <gameState+0x1>
     7a0:	89 2b       	or	r24, r25
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <main+0x274>
     7a4:	c5 c1       	rjmp	.+906    	; 0xb30 <main+0x5fe>
     7a6:	8c e0       	ldi	r24, 0x0C	; 12
		{
			DrawHighscoreText(HighscoreText);
     7a8:	94 e0       	ldi	r25, 0x04	; 4
     7aa:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DrawHighscoreText>
     7ae:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <playerHighscoreTextOffset>
			
			// Draw player's current score
			DrawCharacter(CharacterMapper[scoreOnesCounter], playerHighscoreTextOffset + 16, 3, 8);
     7b2:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <playerHighscoreTextOffset+0x1>
     7b6:	50 e1       	ldi	r21, 0x10	; 16
     7b8:	58 0f       	add	r21, r24
     7ba:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <scoreOnesCounter>
     7be:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <scoreOnesCounter+0x1>
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	8f 59       	subi	r24, 0x9F	; 159
     7c8:	9a 4f       	sbci	r25, 0xFA	; 250
     7ca:	fc 01       	movw	r30, r24
     7cc:	80 81       	ld	r24, Z
     7ce:	91 81       	ldd	r25, Z+1	; 0x01
     7d0:	28 e0       	ldi	r18, 0x08	; 8
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	43 e0       	ldi	r20, 0x03	; 3
     7d6:	65 2f       	mov	r22, r21
     7d8:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <DrawCharacter>
     7dc:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <playerHighscoreTextOffset>
			DrawCharacter(CharacterMapper[scoreTensCounter], playerHighscoreTextOffset + 8, 3, 8);
     7e0:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <playerHighscoreTextOffset+0x1>
     7e4:	58 e0       	ldi	r21, 0x08	; 8
     7e6:	58 0f       	add	r21, r24
     7e8:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <scoreTensCounter>
     7ec:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <scoreTensCounter+0x1>
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	8f 59       	subi	r24, 0x9F	; 159
     7f6:	9a 4f       	sbci	r25, 0xFA	; 250
     7f8:	fc 01       	movw	r30, r24
     7fa:	80 81       	ld	r24, Z
     7fc:	91 81       	ldd	r25, Z+1	; 0x01
     7fe:	28 e0       	ldi	r18, 0x08	; 8
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	43 e0       	ldi	r20, 0x03	; 3
     804:	65 2f       	mov	r22, r21
     806:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <DrawCharacter>
			
			// Read stored player scores
			unsigned char storedScores[3];
			FlashRead(storedScores);
     80a:	ce 01       	movw	r24, r28
     80c:	82 96       	adiw	r24, 0x22	; 34
     80e:	9e dc       	rcall	.-1732   	; 0x14c <FlashRead>
     810:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <scoreTensCounter>
			
			unsigned char currentPlayerScore = (scoreTensCounter * 10) + scoreOnesCounter;
     814:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <scoreTensCounter+0x1>
     818:	88 0f       	add	r24, r24
     81a:	98 2f       	mov	r25, r24
     81c:	99 0f       	add	r25, r25
     81e:	99 0f       	add	r25, r25
     820:	28 2f       	mov	r18, r24
     822:	29 0f       	add	r18, r25
     824:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <scoreOnesCounter>
     828:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <scoreOnesCounter+0x1>
     82c:	82 0f       	add	r24, r18
     82e:	8e 83       	std	Y+6, r24	; 0x06
     830:	8e 81       	ldd	r24, Y+6	; 0x06
			
			// Check if current score should be in stored scores
			unsigned char highscoreComparer = currentPlayerScore;
     832:	8b 83       	std	Y+3, r24	; 0x03
     834:	1d 82       	std	Y+5, r1	; 0x05
			for (int x = 0; x < 3; x++)
     836:	1c 82       	std	Y+4, r1	; 0x04
     838:	3b c0       	rjmp	.+118    	; 0x8b0 <main+0x37e>
     83a:	9e 01       	movw	r18, r28
			{
				if (storedScores[x] >= 100 || storedScores[x] < 0)
     83c:	2e 5d       	subi	r18, 0xDE	; 222
     83e:	3f 4f       	sbci	r19, 0xFF	; 255
     840:	8c 81       	ldd	r24, Y+4	; 0x04
     842:	9d 81       	ldd	r25, Y+5	; 0x05
     844:	82 0f       	add	r24, r18
     846:	93 1f       	adc	r25, r19
     848:	fc 01       	movw	r30, r24
     84a:	80 81       	ld	r24, Z
     84c:	84 36       	cpi	r24, 0x64	; 100
     84e:	48 f0       	brcs	.+18     	; 0x862 <main+0x330>
     850:	9e 01       	movw	r18, r28
				{
					storedScores[x] = 0;
     852:	2e 5d       	subi	r18, 0xDE	; 222
     854:	3f 4f       	sbci	r19, 0xFF	; 255
     856:	8c 81       	ldd	r24, Y+4	; 0x04
     858:	9d 81       	ldd	r25, Y+5	; 0x05
     85a:	82 0f       	add	r24, r18
     85c:	93 1f       	adc	r25, r19
     85e:	fc 01       	movw	r30, r24
     860:	10 82       	st	Z, r1
     862:	9e 01       	movw	r18, r28
				}
				
				if (highscoreComparer > storedScores[x])
     864:	2e 5d       	subi	r18, 0xDE	; 222
     866:	3f 4f       	sbci	r19, 0xFF	; 255
     868:	8c 81       	ldd	r24, Y+4	; 0x04
     86a:	9d 81       	ldd	r25, Y+5	; 0x05
     86c:	82 0f       	add	r24, r18
     86e:	93 1f       	adc	r25, r19
     870:	fc 01       	movw	r30, r24
     872:	90 81       	ld	r25, Z
     874:	8b 81       	ldd	r24, Y+3	; 0x03
     876:	98 17       	cp	r25, r24
     878:	b0 f4       	brcc	.+44     	; 0x8a6 <main+0x374>
     87a:	9e 01       	movw	r18, r28
				{
					unsigned char currentHighscoreInSpot = storedScores[x];
     87c:	2e 5d       	subi	r18, 0xDE	; 222
     87e:	3f 4f       	sbci	r19, 0xFF	; 255
     880:	8c 81       	ldd	r24, Y+4	; 0x04
     882:	9d 81       	ldd	r25, Y+5	; 0x05
     884:	82 0f       	add	r24, r18
     886:	93 1f       	adc	r25, r19
     888:	fc 01       	movw	r30, r24
     88a:	80 81       	ld	r24, Z
     88c:	8f 83       	std	Y+7, r24	; 0x07
     88e:	9e 01       	movw	r18, r28
					storedScores[x] = highscoreComparer;
     890:	2e 5d       	subi	r18, 0xDE	; 222
     892:	3f 4f       	sbci	r19, 0xFF	; 255
     894:	8c 81       	ldd	r24, Y+4	; 0x04
     896:	9d 81       	ldd	r25, Y+5	; 0x05
     898:	82 0f       	add	r24, r18
     89a:	93 1f       	adc	r25, r19
     89c:	2b 81       	ldd	r18, Y+3	; 0x03
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18
     8a2:	8f 81       	ldd	r24, Y+7	; 0x07
					highscoreComparer = currentHighscoreInSpot;
     8a4:	8b 83       	std	Y+3, r24	; 0x03
     8a6:	8c 81       	ldd	r24, Y+4	; 0x04
			
			unsigned char currentPlayerScore = (scoreTensCounter * 10) + scoreOnesCounter;
			
			// Check if current score should be in stored scores
			unsigned char highscoreComparer = currentPlayerScore;
			for (int x = 0; x < 3; x++)
     8a8:	9d 81       	ldd	r25, Y+5	; 0x05
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	9d 83       	std	Y+5, r25	; 0x05
     8ae:	8c 83       	std	Y+4, r24	; 0x04
     8b0:	8c 81       	ldd	r24, Y+4	; 0x04
     8b2:	9d 81       	ldd	r25, Y+5	; 0x05
     8b4:	03 97       	sbiw	r24, 0x03	; 3
     8b6:	0c f2       	brlt	.-126    	; 0x83a <main+0x308>
     8b8:	18 86       	std	Y+8, r1	; 0x08
					storedScores[x] = highscoreComparer;
					highscoreComparer = currentHighscoreInSpot;
				}
			}
			
			unsigned char onesDigit = 0;
     8ba:	19 86       	std	Y+9, r1	; 0x09
			unsigned char tensDigit = 0;
     8bc:	8a a1       	ldd	r24, Y+34	; 0x22
	
			// Draw 1. highscore
			char scoreString[10];
			sprintf(scoreString, "%02d", storedScores[0]);
     8be:	88 2f       	mov	r24, r24
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	29 2f       	mov	r18, r25
     8c4:	2f 93       	push	r18
     8c6:	8f 93       	push	r24
     8c8:	8f e7       	ldi	r24, 0x7F	; 127
     8ca:	95 e0       	ldi	r25, 0x05	; 5
     8cc:	89 2f       	mov	r24, r25
     8ce:	8f 93       	push	r24
     8d0:	8f e7       	ldi	r24, 0x7F	; 127
     8d2:	95 e0       	ldi	r25, 0x05	; 5
     8d4:	8f 93       	push	r24
     8d6:	ce 01       	movw	r24, r28
     8d8:	85 96       	adiw	r24, 0x25	; 37
     8da:	29 2f       	mov	r18, r25
     8dc:	2f 93       	push	r18
     8de:	8f 93       	push	r24
     8e0:	0e 94 50 10 	call	0x20a0	; 0x20a0 <sprintf>
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	8e a1       	ldd	r24, Y+38	; 0x26
			
			onesDigit = scoreString[1] - 48;
     8f2:	80 53       	subi	r24, 0x30	; 48
     8f4:	88 87       	std	Y+8, r24	; 0x08
     8f6:	8d a1       	ldd	r24, Y+37	; 0x25
			tensDigit = scoreString[0] - 48;
     8f8:	80 53       	subi	r24, 0x30	; 48
     8fa:	89 87       	std	Y+9, r24	; 0x09
     8fc:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			
			DrawCharacter(CharacterMapper[1], storedHighscoreTextOffset, 2, 8);
     900:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     904:	58 2f       	mov	r21, r24
     906:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <CharacterMapper+0x2>
     90a:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <CharacterMapper+0x3>
     90e:	28 e0       	ldi	r18, 0x08	; 8
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	42 e0       	ldi	r20, 0x02	; 2
     914:	65 2f       	mov	r22, r21
     916:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <DrawCharacter>
     91a:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(Dot, storedHighscoreTextOffset + 8, 2, 8);
     91e:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     922:	88 5f       	subi	r24, 0xF8	; 248
     924:	28 e0       	ldi	r18, 0x08	; 8
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	42 e0       	ldi	r20, 0x02	; 2
     92a:	68 2f       	mov	r22, r24
     92c:	89 e5       	ldi	r24, 0x59	; 89
     92e:	95 e0       	ldi	r25, 0x05	; 5
     930:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <DrawCharacter>
     934:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(CharacterMapper[tensDigit], storedHighscoreTextOffset + 16, 2, 8);
     938:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     93c:	50 e1       	ldi	r21, 0x10	; 16
     93e:	58 0f       	add	r21, r24
     940:	89 85       	ldd	r24, Y+9	; 0x09
     942:	88 2f       	mov	r24, r24
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	8f 59       	subi	r24, 0x9F	; 159
     94c:	9a 4f       	sbci	r25, 0xFA	; 250
     94e:	fc 01       	movw	r30, r24
     950:	80 81       	ld	r24, Z
     952:	91 81       	ldd	r25, Z+1	; 0x01
     954:	28 e0       	ldi	r18, 0x08	; 8
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	42 e0       	ldi	r20, 0x02	; 2
     95a:	65 2f       	mov	r22, r21
     95c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <DrawCharacter>
     960:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(CharacterMapper[onesDigit], storedHighscoreTextOffset + 24, 2, 8);
     964:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     968:	58 e1       	ldi	r21, 0x18	; 24
     96a:	58 0f       	add	r21, r24
     96c:	88 85       	ldd	r24, Y+8	; 0x08
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	88 0f       	add	r24, r24
     974:	99 1f       	adc	r25, r25
     976:	8f 59       	subi	r24, 0x9F	; 159
     978:	9a 4f       	sbci	r25, 0xFA	; 250
     97a:	fc 01       	movw	r30, r24
     97c:	80 81       	ld	r24, Z
     97e:	91 81       	ldd	r25, Z+1	; 0x01
     980:	28 e0       	ldi	r18, 0x08	; 8
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	42 e0       	ldi	r20, 0x02	; 2
     986:	65 2f       	mov	r22, r21
     988:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <DrawCharacter>
     98c:	8b a1       	ldd	r24, Y+35	; 0x23
		
			// Draw 2. highscore
			sprintf(scoreString, "%02d", storedScores[1]);
     98e:	88 2f       	mov	r24, r24
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	29 2f       	mov	r18, r25
     994:	2f 93       	push	r18
     996:	8f 93       	push	r24
     998:	8f e7       	ldi	r24, 0x7F	; 127
     99a:	95 e0       	ldi	r25, 0x05	; 5
     99c:	89 2f       	mov	r24, r25
     99e:	8f 93       	push	r24
     9a0:	8f e7       	ldi	r24, 0x7F	; 127
     9a2:	95 e0       	ldi	r25, 0x05	; 5
     9a4:	8f 93       	push	r24
     9a6:	ce 01       	movw	r24, r28
     9a8:	85 96       	adiw	r24, 0x25	; 37
     9aa:	29 2f       	mov	r18, r25
     9ac:	2f 93       	push	r18
     9ae:	8f 93       	push	r24
     9b0:	0e 94 50 10 	call	0x20a0	; 0x20a0 <sprintf>
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	8e a1       	ldd	r24, Y+38	; 0x26
			
			onesDigit = scoreString[1] - 48;
     9c2:	80 53       	subi	r24, 0x30	; 48
     9c4:	88 87       	std	Y+8, r24	; 0x08
     9c6:	8d a1       	ldd	r24, Y+37	; 0x25
			tensDigit = scoreString[0] - 48;
     9c8:	80 53       	subi	r24, 0x30	; 48
     9ca:	89 87       	std	Y+9, r24	; 0x09
     9cc:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
						
			DrawCharacter(CharacterMapper[2], storedHighscoreTextOffset, 3, 8);
     9d0:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     9d4:	58 2f       	mov	r21, r24
     9d6:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <CharacterMapper+0x4>
     9da:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <CharacterMapper+0x5>
     9de:	28 e0       	ldi	r18, 0x08	; 8
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	43 e0       	ldi	r20, 0x03	; 3
     9e4:	65 2f       	mov	r22, r21
     9e6:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <DrawCharacter>
     9ea:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(Dot, storedHighscoreTextOffset + 8, 3, 8);
     9ee:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     9f2:	88 5f       	subi	r24, 0xF8	; 248
     9f4:	28 e0       	ldi	r18, 0x08	; 8
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	43 e0       	ldi	r20, 0x03	; 3
     9fa:	68 2f       	mov	r22, r24
     9fc:	89 e5       	ldi	r24, 0x59	; 89
     9fe:	95 e0       	ldi	r25, 0x05	; 5
     a00:	f8 d7       	rcall	.+4080   	; 0x19f2 <DrawCharacter>
     a02:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(CharacterMapper[tensDigit], storedHighscoreTextOffset + 16, 3, 8);
     a06:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     a0a:	50 e1       	ldi	r21, 0x10	; 16
     a0c:	58 0f       	add	r21, r24
     a0e:	89 85       	ldd	r24, Y+9	; 0x09
     a10:	88 2f       	mov	r24, r24
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	8f 59       	subi	r24, 0x9F	; 159
     a1a:	9a 4f       	sbci	r25, 0xFA	; 250
     a1c:	fc 01       	movw	r30, r24
     a1e:	80 81       	ld	r24, Z
     a20:	91 81       	ldd	r25, Z+1	; 0x01
     a22:	28 e0       	ldi	r18, 0x08	; 8
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	43 e0       	ldi	r20, 0x03	; 3
     a28:	65 2f       	mov	r22, r21
     a2a:	e3 d7       	rcall	.+4038   	; 0x19f2 <DrawCharacter>
     a2c:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(CharacterMapper[onesDigit], storedHighscoreTextOffset + 24, 3, 8);
     a30:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     a34:	58 e1       	ldi	r21, 0x18	; 24
     a36:	58 0f       	add	r21, r24
     a38:	88 85       	ldd	r24, Y+8	; 0x08
     a3a:	88 2f       	mov	r24, r24
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	88 0f       	add	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	8f 59       	subi	r24, 0x9F	; 159
     a44:	9a 4f       	sbci	r25, 0xFA	; 250
     a46:	fc 01       	movw	r30, r24
     a48:	80 81       	ld	r24, Z
     a4a:	91 81       	ldd	r25, Z+1	; 0x01
     a4c:	28 e0       	ldi	r18, 0x08	; 8
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	43 e0       	ldi	r20, 0x03	; 3
     a52:	65 2f       	mov	r22, r21
     a54:	ce d7       	rcall	.+3996   	; 0x19f2 <DrawCharacter>
     a56:	8c a1       	ldd	r24, Y+36	; 0x24
			
			// Draw 3. highscore
			sprintf(scoreString, "%02d", storedScores[2]);
     a58:	88 2f       	mov	r24, r24
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	29 2f       	mov	r18, r25
     a5e:	2f 93       	push	r18
     a60:	8f 93       	push	r24
     a62:	8f e7       	ldi	r24, 0x7F	; 127
     a64:	95 e0       	ldi	r25, 0x05	; 5
     a66:	89 2f       	mov	r24, r25
     a68:	8f 93       	push	r24
     a6a:	8f e7       	ldi	r24, 0x7F	; 127
     a6c:	95 e0       	ldi	r25, 0x05	; 5
     a6e:	8f 93       	push	r24
     a70:	ce 01       	movw	r24, r28
     a72:	85 96       	adiw	r24, 0x25	; 37
     a74:	29 2f       	mov	r18, r25
     a76:	2f 93       	push	r18
     a78:	8f 93       	push	r24
     a7a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <sprintf>
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	8e a1       	ldd	r24, Y+38	; 0x26
						
			onesDigit = scoreString[1] - 48;
     a8c:	80 53       	subi	r24, 0x30	; 48
     a8e:	88 87       	std	Y+8, r24	; 0x08
     a90:	8d a1       	ldd	r24, Y+37	; 0x25
			tensDigit = scoreString[0] - 48;
     a92:	80 53       	subi	r24, 0x30	; 48
     a94:	89 87       	std	Y+9, r24	; 0x09
     a96:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
						
			DrawCharacter(CharacterMapper[3], storedHighscoreTextOffset, 4, 8);
     a9a:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     a9e:	58 2f       	mov	r21, r24
     aa0:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <CharacterMapper+0x6>
     aa4:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <CharacterMapper+0x7>
     aa8:	28 e0       	ldi	r18, 0x08	; 8
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	44 e0       	ldi	r20, 0x04	; 4
     aae:	65 2f       	mov	r22, r21
     ab0:	a0 d7       	rcall	.+3904   	; 0x19f2 <DrawCharacter>
     ab2:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(Dot, storedHighscoreTextOffset + 8, 4, 8);
     ab6:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     aba:	88 5f       	subi	r24, 0xF8	; 248
     abc:	28 e0       	ldi	r18, 0x08	; 8
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	44 e0       	ldi	r20, 0x04	; 4
     ac2:	68 2f       	mov	r22, r24
     ac4:	89 e5       	ldi	r24, 0x59	; 89
     ac6:	95 e0       	ldi	r25, 0x05	; 5
     ac8:	94 d7       	rcall	.+3880   	; 0x19f2 <DrawCharacter>
     aca:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(CharacterMapper[tensDigit], storedHighscoreTextOffset + 16, 4, 8);
     ace:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     ad2:	50 e1       	ldi	r21, 0x10	; 16
     ad4:	58 0f       	add	r21, r24
     ad6:	89 85       	ldd	r24, Y+9	; 0x09
     ad8:	88 2f       	mov	r24, r24
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	88 0f       	add	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	8f 59       	subi	r24, 0x9F	; 159
     ae2:	9a 4f       	sbci	r25, 0xFA	; 250
     ae4:	fc 01       	movw	r30, r24
     ae6:	80 81       	ld	r24, Z
     ae8:	91 81       	ldd	r25, Z+1	; 0x01
     aea:	28 e0       	ldi	r18, 0x08	; 8
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	44 e0       	ldi	r20, 0x04	; 4
     af0:	65 2f       	mov	r22, r21
     af2:	7f d7       	rcall	.+3838   	; 0x19f2 <DrawCharacter>
     af4:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(CharacterMapper[onesDigit], storedHighscoreTextOffset + 24, 4, 8);
     af8:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     afc:	58 e1       	ldi	r21, 0x18	; 24
     afe:	58 0f       	add	r21, r24
     b00:	88 85       	ldd	r24, Y+8	; 0x08
     b02:	88 2f       	mov	r24, r24
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	8f 59       	subi	r24, 0x9F	; 159
     b0c:	9a 4f       	sbci	r25, 0xFA	; 250
     b0e:	fc 01       	movw	r30, r24
     b10:	80 81       	ld	r24, Z
     b12:	91 81       	ldd	r25, Z+1	; 0x01
     b14:	28 e0       	ldi	r18, 0x08	; 8
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	44 e0       	ldi	r20, 0x04	; 4
     b1a:	65 2f       	mov	r22, r21
			
			FlashWrite(storedScores);
     b1c:	6a d7       	rcall	.+3796   	; 0x19f2 <DrawCharacter>
     b1e:	ce 01       	movw	r24, r28
     b20:	82 96       	adiw	r24, 0x22	; 34
     b22:	0f 94 00 ff 	call	0x3fe00	; 0x3fe00 <FlashWrite>
			
			// Busy Wait until user press star button
			while (GetKey() != '*')
     b26:	00 00       	nop
     b28:	f2 db       	rcall	.-2076   	; 0x30e <GetKey>
     b2a:	8a 32       	cpi	r24, 0x2A	; 42
     b2c:	e9 f7       	brne	.-6      	; 0xb28 <main+0x5f6>
			{
			}
			
			ResetGame();
     b2e:	7d d0       	rcall	.+250    	; 0xc2a <ResetGame>
     b30:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <gameSpeed>
		}

		_delay_ms(gameSpeed);
     b34:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <gameSpeed+0x1>
     b38:	09 2e       	mov	r0, r25
     b3a:	00 0c       	add	r0, r0
     b3c:	aa 0b       	sbc	r26, r26
     b3e:	bb 0b       	sbc	r27, r27
     b40:	bc 01       	movw	r22, r24
     b42:	cd 01       	movw	r24, r26
     b44:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__floatsisf>
     b48:	dc 01       	movw	r26, r24
     b4a:	cb 01       	movw	r24, r22
     b4c:	8a 87       	std	Y+10, r24	; 0x0a
     b4e:	9b 87       	std	Y+11, r25	; 0x0b
     b50:	ac 87       	std	Y+12, r26	; 0x0c
     b52:	bd 87       	std	Y+13, r27	; 0x0d
     b54:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	4a e7       	ldi	r20, 0x7A	; 122
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	6a 85       	ldd	r22, Y+10	; 0x0a
     b5e:	7b 85       	ldd	r23, Y+11	; 0x0b
     b60:	8c 85       	ldd	r24, Y+12	; 0x0c
     b62:	9d 85       	ldd	r25, Y+13	; 0x0d
     b64:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__mulsf3>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	8e 87       	std	Y+14, r24	; 0x0e
     b6e:	9f 87       	std	Y+15, r25	; 0x0f
     b70:	a8 8b       	std	Y+16, r26	; 0x10
     b72:	b9 8b       	std	Y+17, r27	; 0x11
     b74:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	6e 85       	ldd	r22, Y+14	; 0x0e
     b7e:	7f 85       	ldd	r23, Y+15	; 0x0f
     b80:	88 89       	ldd	r24, Y+16	; 0x10
     b82:	99 89       	ldd	r25, Y+17	; 0x11
     b84:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__cmpsf2>
     b88:	88 23       	and	r24, r24
     b8a:	2c f4       	brge	.+10     	; 0xb96 <main+0x664>
     b8c:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	9b 8b       	std	Y+19, r25	; 0x13
     b92:	8a 8b       	std	Y+18, r24	; 0x12
     b94:	3f c0       	rjmp	.+126    	; 0xc14 <main+0x6e2>
     b96:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	6e 85       	ldd	r22, Y+14	; 0x0e
     ba0:	7f 85       	ldd	r23, Y+15	; 0x0f
     ba2:	88 89       	ldd	r24, Y+16	; 0x10
     ba4:	99 89       	ldd	r25, Y+17	; 0x11
     ba6:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__gesf2>
     baa:	18 16       	cp	r1, r24
     bac:	4c f5       	brge	.+82     	; 0xc00 <main+0x6ce>
     bae:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	6a 85       	ldd	r22, Y+10	; 0x0a
     bb8:	7b 85       	ldd	r23, Y+11	; 0x0b
     bba:	8c 85       	ldd	r24, Y+12	; 0x0c
     bbc:	9d 85       	ldd	r25, Y+13	; 0x0d
     bbe:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__mulsf3>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	bc 01       	movw	r22, r24
     bc8:	cd 01       	movw	r24, r26
     bca:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__fixunssfsi>
     bce:	dc 01       	movw	r26, r24
     bd0:	cb 01       	movw	r24, r22
     bd2:	9b 8b       	std	Y+19, r25	; 0x13
     bd4:	8a 8b       	std	Y+18, r24	; 0x12
     bd6:	0f c0       	rjmp	.+30     	; 0xbf6 <main+0x6c4>
     bd8:	80 e9       	ldi	r24, 0x90	; 144
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	9d 8b       	std	Y+21, r25	; 0x15
     bde:	8c 8b       	std	Y+20, r24	; 0x14
     be0:	8c 89       	ldd	r24, Y+20	; 0x14
     be2:	9d 89       	ldd	r25, Y+21	; 0x15
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <main+0x6b2>
     be8:	9d 8b       	std	Y+21, r25	; 0x15
     bea:	8c 8b       	std	Y+20, r24	; 0x14
     bec:	8a 89       	ldd	r24, Y+18	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bee:	9b 89       	ldd	r25, Y+19	; 0x13
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	9b 8b       	std	Y+19, r25	; 0x13
     bf4:	8a 8b       	std	Y+18, r24	; 0x12
     bf6:	8a 89       	ldd	r24, Y+18	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bf8:	9b 89       	ldd	r25, Y+19	; 0x13
     bfa:	89 2b       	or	r24, r25
     bfc:	69 f7       	brne	.-38     	; 0xbd8 <main+0x6a6>
     bfe:	14 c0       	rjmp	.+40     	; 0xc28 <main+0x6f6>
     c00:	6e 85       	ldd	r22, Y+14	; 0x0e
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c02:	7f 85       	ldd	r23, Y+15	; 0x0f
     c04:	88 89       	ldd	r24, Y+16	; 0x10
     c06:	99 89       	ldd	r25, Y+17	; 0x11
     c08:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9b 8b       	std	Y+19, r25	; 0x13
     c12:	8a 8b       	std	Y+18, r24	; 0x12
     c14:	8a 89       	ldd	r24, Y+18	; 0x12
     c16:	9b 89       	ldd	r25, Y+19	; 0x13
     c18:	9f 8b       	std	Y+23, r25	; 0x17
     c1a:	8e 8b       	std	Y+22, r24	; 0x16
     c1c:	8e 89       	ldd	r24, Y+22	; 0x16
     c1e:	9f 89       	ldd	r25, Y+23	; 0x17
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <main+0x6ee>
     c24:	9f 8b       	std	Y+23, r25	; 0x17
     c26:	8e 8b       	std	Y+22, r24	; 0x16
     c28:	a0 cc       	rjmp	.-1728   	; 0x56a <main+0x38>

00000c2a <ResetGame>:
    }
     c2a:	cf 93       	push	r28
}

void ResetGame()
{
     c2c:	df 93       	push	r29
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
	gameState = GAME_STATE_ALIVE;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <gameState+0x1>
     c3a:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <gameState>
	setCursor(0, 0);
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	ff d0       	rcall	.+510    	; 0xe42 <setCursor>
	clearDisplay();
     c44:	50 d1       	rcall	.+672    	; 0xee6 <clearDisplay>
     c46:	60 e0       	ldi	r22, 0x00	; 0
	setCursor(0, 0);
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	fb d0       	rcall	.+502    	; 0xe42 <setCursor>
     c4c:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <snakeBodyLength>
	InitSnake(snake, snakeBodyLength);
     c50:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <snakeBodyLength+0x1>
     c54:	bc 01       	movw	r22, r24
     c56:	81 e9       	ldi	r24, 0x91	; 145
     c58:	95 e0       	ldi	r25, 0x05	; 5
     c5a:	51 d2       	rcall	.+1186   	; 0x10fe <InitSnake>
     c5c:	6f e2       	ldi	r22, 0x2F	; 47
	currentFoodPosition = GenerateFoodPosition(WORLD_WIDTH, WORLD_HEIGHT);
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	83 e5       	ldi	r24, 0x53	; 83
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	e6 da       	rcall	.-2612   	; 0x232 <GenerateFoodPosition>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <currentFoodPosition>
     c6e:	90 93 72 0b 	sts	0x0B72, r25	; 0x800b72 <currentFoodPosition+0x1>
     c72:	a0 93 73 0b 	sts	0x0B73, r26	; 0x800b73 <currentFoodPosition+0x2>
     c76:	b0 93 74 0b 	sts	0x0B74, r27	; 0x800b74 <currentFoodPosition+0x3>
     c7a:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <scoreOnesCounter+0x1>
	
	scoreOnesCounter = 0;
     c7e:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <scoreOnesCounter>
     c82:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <scoreTensCounter+0x1>
	scoreTensCounter = 0;
     c86:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <scoreTensCounter>
     c8a:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <scoreHundredsCounter+0x1>
	scoreHundredsCounter = 0;
     c8e:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <scoreHundredsCounter>
     c92:	8c e3       	ldi	r24, 0x3C	; 60
	
	gameSpeed = GAME_INITIAL_SPEED;
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <gameSpeed+0x1>
     c9a:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <gameSpeed>
     c9e:	00 00       	nop
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <initDisplay>:
#define RST_BIT 0 // PA0
#define DC_BIT 1 // PA1
#define LIGHT_BIT 2 // PA2

void initDisplay()
{
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
	SPI_MasterInit();
     cae:	03 d6       	rcall	.+3078   	; 0x18b6 <SPI_MasterInit>
	
	// Set port to output
	DDRA |= 0b00000111;
     cb0:	81 e2       	ldi	r24, 0x21	; 33
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	21 e2       	ldi	r18, 0x21	; 33
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	f9 01       	movw	r30, r18
     cba:	20 81       	ld	r18, Z
     cbc:	27 60       	ori	r18, 0x07	; 7
     cbe:	fc 01       	movw	r30, r24
     cc0:	20 83       	st	Z, r18
	
	// Turn on light
	PORTA &= ~(1 << LIGHT_BIT);
     cc2:	82 e2       	ldi	r24, 0x22	; 34
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	22 e2       	ldi	r18, 0x22	; 34
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	f9 01       	movw	r30, r18
     ccc:	20 81       	ld	r18, Z
     cce:	2b 7f       	andi	r18, 0xFB	; 251
     cd0:	fc 01       	movw	r30, r24
     cd2:	20 83       	st	Z, r18
	
	// Set bits to high (active low)
	PORTA |= (1 << RST_BIT);
     cd4:	82 e2       	ldi	r24, 0x22	; 34
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	22 e2       	ldi	r18, 0x22	; 34
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	f9 01       	movw	r30, r18
     cde:	20 81       	ld	r18, Z
     ce0:	21 60       	ori	r18, 0x01	; 1
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 83       	st	Z, r18
	PORTA |= (1 << DC_BIT);
     ce6:	82 e2       	ldi	r24, 0x22	; 34
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	22 e2       	ldi	r18, 0x22	; 34
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	f9 01       	movw	r30, r18
     cf0:	20 81       	ld	r18, Z
     cf2:	22 60       	ori	r18, 0x02	; 2
     cf4:	fc 01       	movw	r30, r24
	
	// Required display reset
	// This has to be done before doing
	// Anything else with the display
	resetDisplay();
     cf6:	20 83       	st	Z, r18
	
	// Use extended instruction set
	sendIntruction(0x21);
     cf8:	0f d0       	rcall	.+30     	; 0xd18 <resetDisplay>
     cfa:	81 e2       	ldi	r24, 0x21	; 33

	// Here we control operation voltage of the LCD
	// We set it to 6V (the minimum allowed voltage range)
	// If you do not set a VOP value, the internal voltage generator
	// Will be switched off, and thus the display won't function.
	sendIntruction(0xC0);
     cfc:	bf d0       	rcall	.+382    	; 0xe7c <sendIntruction>
     cfe:	80 ec       	ldi	r24, 0xC0	; 192

	// We set the bias voltage levels
	// The bias value is taken after the
	// optimum bias value described in official
	// data sheet.
	sendIntruction(0x13);
     d00:	bd d0       	rcall	.+378    	; 0xe7c <sendIntruction>
     d02:	83 e1       	ldi	r24, 0x13	; 19

	// Use basic instruction set
	sendIntruction(0x20);
     d04:	bb d0       	rcall	.+374    	; 0xe7c <sendIntruction>
     d06:	80 e2       	ldi	r24, 0x20	; 32
     d08:	b9 d0       	rcall	.+370    	; 0xe7c <sendIntruction>

	// Set display mode normal
	sendIntruction(0b00001100);
     d0a:	8c e0       	ldi	r24, 0x0C	; 12
     d0c:	b7 d0       	rcall	.+366    	; 0xe7c <sendIntruction>
     d0e:	eb d0       	rcall	.+470    	; 0xee6 <clearDisplay>

	// Clear the display to make sure
	// No pixels are alive on startup
	clearDisplay();
     d10:	00 00       	nop
     d12:	df 91       	pop	r29
}
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <resetDisplay>:
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29


void resetDisplay()
{
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	2e 97       	sbiw	r28, 0x0e	; 14
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
	// Set RES low
	PORTA &= ~(1 << RST_BIT);
     d2c:	82 e2       	ldi	r24, 0x22	; 34
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	22 e2       	ldi	r18, 0x22	; 34
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	f9 01       	movw	r30, r18
     d36:	20 81       	ld	r18, Z
     d38:	2e 7f       	andi	r18, 0xFE	; 254
     d3a:	fc 01       	movw	r30, r24
     d3c:	20 83       	st	Z, r18
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	a8 ec       	ldi	r26, 0xC8	; 200
     d44:	b2 e4       	ldi	r27, 0x42	; 66
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	9a 83       	std	Y+2, r25	; 0x02
     d4a:	ab 83       	std	Y+3, r26	; 0x03
     d4c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	4a e7       	ldi	r20, 0x7A	; 122
     d54:	55 e4       	ldi	r21, 0x45	; 69
     d56:	69 81       	ldd	r22, Y+1	; 0x01
     d58:	7a 81       	ldd	r23, Y+2	; 0x02
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__mulsf3>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	8d 83       	std	Y+5, r24	; 0x05
     d68:	9e 83       	std	Y+6, r25	; 0x06
     d6a:	af 83       	std	Y+7, r26	; 0x07
     d6c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e8       	ldi	r20, 0x80	; 128
     d74:	5f e3       	ldi	r21, 0x3F	; 63
     d76:	6d 81       	ldd	r22, Y+5	; 0x05
     d78:	7e 81       	ldd	r23, Y+6	; 0x06
     d7a:	8f 81       	ldd	r24, Y+7	; 0x07
     d7c:	98 85       	ldd	r25, Y+8	; 0x08
     d7e:	c4 d7       	rcall	.+3976   	; 0x1d08 <__cmpsf2>
     d80:	88 23       	and	r24, r24
     d82:	2c f4       	brge	.+10     	; 0xd8e <resetDisplay+0x76>
		__ticks = 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	9a 87       	std	Y+10, r25	; 0x0a
     d8a:	89 87       	std	Y+9, r24	; 0x09
     d8c:	3d c0       	rjmp	.+122    	; 0xe08 <resetDisplay+0xf0>
	else if (__tmp > 65535)
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	3f ef       	ldi	r19, 0xFF	; 255
     d92:	4f e7       	ldi	r20, 0x7F	; 127
     d94:	57 e4       	ldi	r21, 0x47	; 71
     d96:	6d 81       	ldd	r22, Y+5	; 0x05
     d98:	7e 81       	ldd	r23, Y+6	; 0x06
     d9a:	8f 81       	ldd	r24, Y+7	; 0x07
     d9c:	98 85       	ldd	r25, Y+8	; 0x08
     d9e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <__gesf2>
     da2:	18 16       	cp	r1, r24
     da4:	44 f5       	brge	.+80     	; 0xdf6 <resetDisplay+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e2       	ldi	r20, 0x20	; 32
     dac:	51 e4       	ldi	r21, 0x41	; 65
     dae:	69 81       	ldd	r22, Y+1	; 0x01
     db0:	7a 81       	ldd	r23, Y+2	; 0x02
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <__mulsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	bc 01       	movw	r22, r24
     dc0:	cd 01       	movw	r24, r26
     dc2:	a6 d7       	rcall	.+3916   	; 0x1d10 <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	9a 87       	std	Y+10, r25	; 0x0a
     dca:	89 87       	std	Y+9, r24	; 0x09
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <resetDisplay+0xd4>
     dce:	80 e9       	ldi	r24, 0x90	; 144
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	9c 87       	std	Y+12, r25	; 0x0c
     dd4:	8b 87       	std	Y+11, r24	; 0x0b
     dd6:	8b 85       	ldd	r24, Y+11	; 0x0b
     dd8:	9c 85       	ldd	r25, Y+12	; 0x0c
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <resetDisplay+0xc2>
     dde:	9c 87       	std	Y+12, r25	; 0x0c
     de0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de2:	89 85       	ldd	r24, Y+9	; 0x09
     de4:	9a 85       	ldd	r25, Y+10	; 0x0a
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	9a 87       	std	Y+10, r25	; 0x0a
     dea:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dec:	89 85       	ldd	r24, Y+9	; 0x09
     dee:	9a 85       	ldd	r25, Y+10	; 0x0a
     df0:	89 2b       	or	r24, r25
     df2:	69 f7       	brne	.-38     	; 0xdce <resetDisplay+0xb6>
     df4:	13 c0       	rjmp	.+38     	; 0xe1c <resetDisplay+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df6:	6d 81       	ldd	r22, Y+5	; 0x05
     df8:	7e 81       	ldd	r23, Y+6	; 0x06
     dfa:	8f 81       	ldd	r24, Y+7	; 0x07
     dfc:	98 85       	ldd	r25, Y+8	; 0x08
     dfe:	88 d7       	rcall	.+3856   	; 0x1d10 <__fixunssfsi>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	9a 87       	std	Y+10, r25	; 0x0a
     e06:	89 87       	std	Y+9, r24	; 0x09
     e08:	89 85       	ldd	r24, Y+9	; 0x09
     e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0c:	9e 87       	std	Y+14, r25	; 0x0e
     e0e:	8d 87       	std	Y+13, r24	; 0x0d
     e10:	8d 85       	ldd	r24, Y+13	; 0x0d
     e12:	9e 85       	ldd	r25, Y+14	; 0x0e
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <resetDisplay+0xfc>
     e18:	9e 87       	std	Y+14, r25	; 0x0e
     e1a:	8d 87       	std	Y+13, r24	; 0x0d
		
	// Delay of min 100 ns (0,1ms) p.20
	_delay_ms(100);
		
	// Set RES high
	PORTA |= (1 << RST_BIT);
     e1c:	82 e2       	ldi	r24, 0x22	; 34
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	22 e2       	ldi	r18, 0x22	; 34
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	f9 01       	movw	r30, r18
     e26:	20 81       	ld	r18, Z
     e28:	21 60       	ori	r18, 0x01	; 1
     e2a:	fc 01       	movw	r30, r24
     e2c:	20 83       	st	Z, r18
}
     e2e:	00 00       	nop
     e30:	2e 96       	adiw	r28, 0x0e	; 14
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	08 95       	ret

00000e42 <setCursor>:

void setCursor(char x, char y)
{
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	1f 92       	push	r1
     e48:	1f 92       	push	r1
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	6a 83       	std	Y+2, r22	; 0x02
	if (x > 83 || x < 0)
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	84 35       	cpi	r24, 0x54	; 84
     e56:	50 f4       	brcc	.+20     	; 0xe6c <setCursor+0x2a>
		return;
		
	if (y > 5 || y < 0)
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	86 30       	cpi	r24, 0x06	; 6
     e5c:	48 f4       	brcc	.+18     	; 0xe70 <setCursor+0x2e>
		return;
	
	sendIntruction(0b10000000 | x);
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	80 68       	ori	r24, 0x80	; 128
     e62:	0c d0       	rcall	.+24     	; 0xe7c <sendIntruction>
	sendIntruction(0b01000000 | y);
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	80 64       	ori	r24, 0x40	; 64
     e68:	09 d0       	rcall	.+18     	; 0xe7c <sendIntruction>
     e6a:	03 c0       	rjmp	.+6      	; 0xe72 <setCursor+0x30>
}

void setCursor(char x, char y)
{
	if (x > 83 || x < 0)
		return;
     e6c:	00 00       	nop
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <setCursor+0x30>
		
	if (y > 5 || y < 0)
		return;
     e70:	00 00       	nop
	
	sendIntruction(0b10000000 | x);
	sendIntruction(0b01000000 | y);
}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <sendIntruction>:

void sendIntruction(unsigned char cmd)
{
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	1f 92       	push	r1
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
     e86:	89 83       	std	Y+1, r24	; 0x01
	// Set DC low, Command
	PORTA &= ~(1 << DC_BIT);
     e88:	82 e2       	ldi	r24, 0x22	; 34
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	22 e2       	ldi	r18, 0x22	; 34
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	f9 01       	movw	r30, r18
     e92:	20 81       	ld	r18, Z
     e94:	2d 7f       	andi	r18, 0xFD	; 253
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18
	SPI_MasterTransmit(cmd);
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	1e d5       	rcall	.+2620   	; 0x18da <SPI_MasterTransmit>
	PORTA |= 1 << DC_BIT;
     e9e:	82 e2       	ldi	r24, 0x22	; 34
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	22 e2       	ldi	r18, 0x22	; 34
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	f9 01       	movw	r30, r18
     ea8:	20 81       	ld	r18, Z
     eaa:	22 60       	ori	r18, 0x02	; 2
     eac:	fc 01       	movw	r30, r24
     eae:	20 83       	st	Z, r18
}
     eb0:	00 00       	nop
     eb2:	0f 90       	pop	r0
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <sendData>:

void sendData(unsigned char data)
{	
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	1f 92       	push	r1
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= 1 << DC_BIT;
     ec6:	82 e2       	ldi	r24, 0x22	; 34
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	22 e2       	ldi	r18, 0x22	; 34
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	f9 01       	movw	r30, r18
     ed0:	20 81       	ld	r18, Z
     ed2:	22 60       	ori	r18, 0x02	; 2
     ed4:	fc 01       	movw	r30, r24
     ed6:	20 83       	st	Z, r18
	SPI_MasterTransmit(data);
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	ff d4       	rcall	.+2558   	; 0x18da <SPI_MasterTransmit>
}
     edc:	00 00       	nop
     ede:	0f 90       	pop	r0
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <clearDisplay>:

void clearDisplay()
{
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	1f 92       	push	r1
     eec:	1f 92       	push	r1
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	for (int k=0; k<504; k++)
     ef2:	1a 82       	std	Y+2, r1	; 0x02
     ef4:	19 82       	std	Y+1, r1	; 0x01
     ef6:	07 c0       	rjmp	.+14     	; 0xf06 <clearDisplay+0x20>
	{
		sendData(0x00);
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	df df       	rcall	.-66     	; 0xeba <sendData>
	SPI_MasterTransmit(data);
}

void clearDisplay()
{
	for (int k=0; k<504; k++)
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	88 3f       	cpi	r24, 0xF8	; 248
     f0c:	91 40       	sbci	r25, 0x01	; 1
     f0e:	a4 f3       	brlt	.-24     	; 0xef8 <clearDisplay+0x12>
	{
		sendData(0x00);
	}
     f10:	00 00       	nop
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <GoLeft>:
int xDirection = 1;
int yDirection = 0;
int hitSelf = 0;

void GoLeft()
{
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	if (xDirection == 1)
     f24:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <xDirection>
     f28:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <xDirection+0x1>
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	59 f0       	breq	.+22     	; 0xf46 <GoLeft+0x2a>
		return;
	
	yDirection = 0;
     f30:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <yDirection+0x1>
     f34:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <yDirection>
	xDirection = -1;
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	9f ef       	ldi	r25, 0xFF	; 255
     f3c:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <xDirection+0x1>
     f40:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <xDirection>
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <GoLeft+0x2c>
int hitSelf = 0;

void GoLeft()
{
	if (xDirection == 1)
		return;
     f46:	00 00       	nop
	
	yDirection = 0;
	xDirection = -1;
}
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <GoRight>:

void GoRight()
{
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	if (xDirection == -1)
     f56:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <xDirection>
     f5a:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <xDirection+0x1>
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	59 f0       	breq	.+22     	; 0xf78 <GoRight+0x2a>
		return;
	
	yDirection = 0;
     f62:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <yDirection+0x1>
     f66:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <yDirection>
	xDirection = 1;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <xDirection+0x1>
     f72:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <xDirection>
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <GoRight+0x2c>
}

void GoRight()
{
	if (xDirection == -1)
		return;
     f78:	00 00       	nop
	
	yDirection = 0;
	xDirection = 1;
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <GoUp>:

void GoUp()
{
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
	if (yDirection == 1)
     f88:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <yDirection>
     f8c:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <yDirection+0x1>
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	59 f0       	breq	.+22     	; 0xfaa <GoUp+0x2a>
	return;
	
	yDirection = -1;
     f94:	8f ef       	ldi	r24, 0xFF	; 255
     f96:	9f ef       	ldi	r25, 0xFF	; 255
     f98:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <yDirection+0x1>
     f9c:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <yDirection>
	xDirection = 0;
     fa0:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <xDirection+0x1>
     fa4:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <xDirection>
     fa8:	01 c0       	rjmp	.+2      	; 0xfac <GoUp+0x2c>
}

void GoUp()
{
	if (yDirection == 1)
	return;
     faa:	00 00       	nop
	
	yDirection = -1;
	xDirection = 0;
}
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	08 95       	ret

00000fb2 <GoDown>:

void GoDown()
{
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	if (yDirection == -1)
     fba:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <yDirection>
     fbe:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <yDirection+0x1>
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	59 f0       	breq	.+22     	; 0xfdc <GoDown+0x2a>
	return;
	
	xDirection = 0;
     fc6:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <xDirection+0x1>
     fca:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <xDirection>
	yDirection = 1;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <yDirection+0x1>
     fd6:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <yDirection>
     fda:	01 c0       	rjmp	.+2      	; 0xfde <GoDown+0x2c>
}

void GoDown()
{
	if (yDirection == -1)
	return;
     fdc:	00 00       	nop
	
	xDirection = 0;
	yDirection = 1;
}
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <CheckInput>:

void CheckInput()
{
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
	if (GetKey() == '8')
     fec:	90 d9       	rcall	.-3296   	; 0x30e <GetKey>
     fee:	88 33       	cpi	r24, 0x38	; 56
     ff0:	09 f4       	brne	.+2      	; 0xff4 <CheckInput+0x10>
	{
		GoDown();
     ff2:	df df       	rcall	.-66     	; 0xfb2 <GoDown>
	}

	if (GetKey() == '2')
     ff4:	8c d9       	rcall	.-3304   	; 0x30e <GetKey>
     ff6:	82 33       	cpi	r24, 0x32	; 50
	{
		GoUp();
     ff8:	09 f4       	brne	.+2      	; 0xffc <CheckInput+0x18>
	}

	if (GetKey() == '6')
     ffa:	c2 df       	rcall	.-124    	; 0xf80 <GoUp>
     ffc:	88 d9       	rcall	.-3312   	; 0x30e <GetKey>
     ffe:	86 33       	cpi	r24, 0x36	; 54
	{
		GoRight();
    1000:	09 f4       	brne	.+2      	; 0x1004 <CheckInput+0x20>
    1002:	a5 df       	rcall	.-182    	; 0xf4e <GoRight>
	}

	if (GetKey() == '4')
    1004:	84 d9       	rcall	.-3320   	; 0x30e <GetKey>
    1006:	84 33       	cpi	r24, 0x34	; 52
    1008:	09 f4       	brne	.+2      	; 0x100c <CheckInput+0x28>
    100a:	88 df       	rcall	.-240    	; 0xf1c <GoLeft>
	{
		GoLeft();
    100c:	00 00       	nop
    100e:	df 91       	pop	r29
	}
}
    1010:	cf 91       	pop	r28
    1012:	08 95       	ret

00001014 <CheckSnakeBodyCollision>:
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29

void CheckSnakeBodyCollision(struct SnakeBodyPart snakeArray[], int snakeLength)
{
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	6a 97       	sbiw	r28, 0x1a	; 26
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	98 8f       	std	Y+24, r25	; 0x18
    102a:	8f 8b       	std	Y+23, r24	; 0x17
    102c:	7a 8f       	std	Y+26, r23	; 0x1a
    102e:	69 8f       	std	Y+25, r22	; 0x19
	struct SnakeBodyPart snakeHead = snakeArray[0];
    1030:	8f 89       	ldd	r24, Y+23	; 0x17
    1032:	98 8d       	ldd	r25, Y+24	; 0x18
    1034:	2a e0       	ldi	r18, 0x0A	; 10
    1036:	fc 01       	movw	r30, r24
    1038:	de 01       	movw	r26, r28
    103a:	13 96       	adiw	r26, 0x03	; 3
    103c:	01 90       	ld	r0, Z+
    103e:	0d 92       	st	X+, r0
    1040:	2a 95       	dec	r18
    1042:	e1 f7       	brne	.-8      	; 0x103c <CheckSnakeBodyCollision+0x28>
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9a 83       	std	Y+2, r25	; 0x02
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	46 c0       	rjmp	.+140    	; 0x10da <CheckSnakeBodyCollision+0xc6>
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	9c 01       	movw	r18, r24
    1058:	22 0f       	add	r18, r18
    105a:	33 1f       	adc	r19, r19
    105c:	22 0f       	add	r18, r18
    105e:	33 1f       	adc	r19, r19
    1060:	82 0f       	add	r24, r18
    1062:	93 1f       	adc	r25, r19
    1064:	2f 89       	ldd	r18, Y+23	; 0x17
    1066:	38 8d       	ldd	r19, Y+24	; 0x18
    1068:	82 0f       	add	r24, r18
    106a:	93 1f       	adc	r25, r19
    106c:	2a e0       	ldi	r18, 0x0A	; 10
    106e:	fc 01       	movw	r30, r24
    1070:	de 01       	movw	r26, r28
    1072:	1d 96       	adiw	r26, 0x0d	; 13
    1074:	01 90       	ld	r0, Z+
    1076:	0d 92       	st	X+, r0
    1078:	2a 95       	dec	r18
    107a:	e1 f7       	brne	.-8      	; 0x1074 <CheckSnakeBodyCollision+0x60>
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
    107c:	2b 81       	ldd	r18, Y+3	; 0x03
    107e:	3c 81       	ldd	r19, Y+4	; 0x04
    1080:	8d 85       	ldd	r24, Y+13	; 0x0d
    1082:	9e 85       	ldd	r25, Y+14	; 0x0e
    1084:	02 96       	adiw	r24, 0x02	; 2
    1086:	28 17       	cp	r18, r24
    1088:	39 07       	cpc	r19, r25
    108a:	14 f5       	brge	.+68     	; 0x10d0 <CheckSnakeBodyCollision+0xbc>
		(snakeHead.x + 2) > currentBodyPart.x &&
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	9c 81       	ldd	r25, Y+4	; 0x04
    1090:	9c 01       	movw	r18, r24
    1092:	2e 5f       	subi	r18, 0xFE	; 254
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	8d 85       	ldd	r24, Y+13	; 0x0d
    1098:	9e 85       	ldd	r25, Y+14	; 0x0e
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
    109a:	82 17       	cp	r24, r18
    109c:	93 07       	cpc	r25, r19
    109e:	c4 f4       	brge	.+48     	; 0x10d0 <CheckSnakeBodyCollision+0xbc>
		(snakeHead.x + 2) > currentBodyPart.x &&
		snakeHead.y < (currentBodyPart.y + 2) &&
    10a0:	2d 81       	ldd	r18, Y+5	; 0x05
    10a2:	3e 81       	ldd	r19, Y+6	; 0x06
    10a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a6:	98 89       	ldd	r25, Y+16	; 0x10
    10a8:	02 96       	adiw	r24, 0x02	; 2
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
		(snakeHead.x + 2) > currentBodyPart.x &&
    10aa:	28 17       	cp	r18, r24
    10ac:	39 07       	cpc	r19, r25
    10ae:	84 f4       	brge	.+32     	; 0x10d0 <CheckSnakeBodyCollision+0xbc>
		snakeHead.y < (currentBodyPart.y + 2) &&
		(2 + snakeHead.y) > currentBodyPart.y)
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	9e 81       	ldd	r25, Y+6	; 0x06
    10b4:	9c 01       	movw	r18, r24
    10b6:	2e 5f       	subi	r18, 0xFE	; 254
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    10bc:	98 89       	ldd	r25, Y+16	; 0x10
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
		(snakeHead.x + 2) > currentBodyPart.x &&
		snakeHead.y < (currentBodyPart.y + 2) &&
    10be:	82 17       	cp	r24, r18
    10c0:	93 07       	cpc	r25, r19
    10c2:	34 f4       	brge	.+12     	; 0x10d0 <CheckSnakeBodyCollision+0xbc>
		(2 + snakeHead.y) > currentBodyPart.y)
		{
			hitSelf = 1;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <hitSelf+0x1>
    10cc:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <hitSelf>

void CheckSnakeBodyCollision(struct SnakeBodyPart snakeArray[], int snakeLength)
{
	struct SnakeBodyPart snakeHead = snakeArray[0];
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	9a 83       	std	Y+2, r25	; 0x02
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	29 81       	ldd	r18, Y+1	; 0x01
    10dc:	3a 81       	ldd	r19, Y+2	; 0x02
    10de:	89 8d       	ldd	r24, Y+25	; 0x19
    10e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10e2:	28 17       	cp	r18, r24
    10e4:	39 07       	cpc	r19, r25
    10e6:	0c f4       	brge	.+2      	; 0x10ea <CheckSnakeBodyCollision+0xd6>
    10e8:	b2 cf       	rjmp	.-156    	; 0x104e <CheckSnakeBodyCollision+0x3a>
		(2 + snakeHead.y) > currentBodyPart.y)
		{
			hitSelf = 1;
		}
	}
}
    10ea:	00 00       	nop
    10ec:	6a 96       	adiw	r28, 0x1a	; 26
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <InitSnake>:

void InitSnake(struct SnakeBodyPart snakeArray[], int snakeLength)
{
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	6a 97       	sbiw	r28, 0x1a	; 26
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	98 8f       	std	Y+24, r25	; 0x18
    1114:	8f 8b       	std	Y+23, r24	; 0x17
    1116:	7a 8f       	std	Y+26, r23	; 0x1a
    1118:	69 8f       	std	Y+25, r22	; 0x19
	if (snakeLength <= 0)
    111a:	89 8d       	ldd	r24, Y+25	; 0x19
    111c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    111e:	18 16       	cp	r1, r24
    1120:	19 06       	cpc	r1, r25
    1122:	0c f0       	brlt	.+2      	; 0x1126 <InitSnake+0x28>
    1124:	6d c0       	rjmp	.+218    	; 0x1200 <InitSnake+0x102>
		return;
		
	// Clear Array
	memset(snakeArray, 0, snakeLength);
    1126:	29 8d       	ldd	r18, Y+25	; 0x19
    1128:	3a 8d       	ldd	r19, Y+26	; 0x1a
    112a:	8f 89       	ldd	r24, Y+23	; 0x17
    112c:	98 8d       	ldd	r25, Y+24	; 0x18
    112e:	a9 01       	movw	r20, r18
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	ae d7       	rcall	.+3932   	; 0x2092 <memset>
	hitSelf = 0;
    1136:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <hitSelf+0x1>
    113a:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <hitSelf>
	
	xDirection = 1;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <xDirection+0x1>
    1146:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <xDirection>
	yDirection = 0;
    114a:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <yDirection+0x1>
    114e:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <yDirection>
		
	struct SnakeBodyPart head;
	head.x = 0;
    1152:	1c 82       	std	Y+4, r1	; 0x04
    1154:	1b 82       	std	Y+3, r1	; 0x03
	head.y = 0;
    1156:	1e 82       	std	Y+6, r1	; 0x06
    1158:	1d 82       	std	Y+5, r1	; 0x05
	head.prevX = 0;
    115a:	18 86       	std	Y+8, r1	; 0x08
    115c:	1f 82       	std	Y+7, r1	; 0x07
	head.prevY = 0;
    115e:	1a 86       	std	Y+10, r1	; 0x0a
    1160:	19 86       	std	Y+9, r1	; 0x09
	head.headPointer = 0;
    1162:	1c 86       	std	Y+12, r1	; 0x0c
    1164:	1b 86       	std	Y+11, r1	; 0x0b
	snakeArray[0] = head;
    1166:	8f 89       	ldd	r24, Y+23	; 0x17
    1168:	98 8d       	ldd	r25, Y+24	; 0x18
    116a:	2a e0       	ldi	r18, 0x0A	; 10
    116c:	fe 01       	movw	r30, r28
    116e:	33 96       	adiw	r30, 0x03	; 3
    1170:	dc 01       	movw	r26, r24
    1172:	01 90       	ld	r0, Z+
    1174:	0d 92       	st	X+, r0
    1176:	2a 95       	dec	r18
    1178:	e1 f7       	brne	.-8      	; 0x1172 <InitSnake+0x74>
	
	for (int snakeBodyIndex = 1; snakeBodyIndex < (snakeLength); snakeBodyIndex++)
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	36 c0       	rjmp	.+108    	; 0x11f0 <InitSnake+0xf2>
	{
		struct SnakeBodyPart newBodyPart;
		newBodyPart.x = -2;
    1184:	8e ef       	ldi	r24, 0xFE	; 254
    1186:	9f ef       	ldi	r25, 0xFF	; 255
    1188:	9e 87       	std	Y+14, r25	; 0x0e
    118a:	8d 87       	std	Y+13, r24	; 0x0d
		newBodyPart.y = -2;
    118c:	8e ef       	ldi	r24, 0xFE	; 254
    118e:	9f ef       	ldi	r25, 0xFF	; 255
    1190:	98 8b       	std	Y+16, r25	; 0x10
    1192:	8f 87       	std	Y+15, r24	; 0x0f
		newBodyPart.headPointer = &snakeArray[snakeBodyIndex - 1];
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	9c 01       	movw	r18, r24
    119e:	22 0f       	add	r18, r18
    11a0:	33 1f       	adc	r19, r19
    11a2:	22 0f       	add	r18, r18
    11a4:	33 1f       	adc	r19, r19
    11a6:	82 0f       	add	r24, r18
    11a8:	93 1f       	adc	r25, r19
    11aa:	0a 97       	sbiw	r24, 0x0a	; 10
    11ac:	2f 89       	ldd	r18, Y+23	; 0x17
    11ae:	38 8d       	ldd	r19, Y+24	; 0x18
    11b0:	82 0f       	add	r24, r18
    11b2:	93 1f       	adc	r25, r19
    11b4:	9e 8b       	std	Y+22, r25	; 0x16
    11b6:	8d 8b       	std	Y+21, r24	; 0x15
		snakeArray[snakeBodyIndex] = newBodyPart;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	9c 01       	movw	r18, r24
    11c2:	22 0f       	add	r18, r18
    11c4:	33 1f       	adc	r19, r19
    11c6:	22 0f       	add	r18, r18
    11c8:	33 1f       	adc	r19, r19
    11ca:	82 0f       	add	r24, r18
    11cc:	93 1f       	adc	r25, r19
    11ce:	2f 89       	ldd	r18, Y+23	; 0x17
    11d0:	38 8d       	ldd	r19, Y+24	; 0x18
    11d2:	82 0f       	add	r24, r18
    11d4:	93 1f       	adc	r25, r19
    11d6:	2a e0       	ldi	r18, 0x0A	; 10
    11d8:	fe 01       	movw	r30, r28
    11da:	3d 96       	adiw	r30, 0x0d	; 13
    11dc:	dc 01       	movw	r26, r24
    11de:	01 90       	ld	r0, Z+
    11e0:	0d 92       	st	X+, r0
    11e2:	2a 95       	dec	r18
    11e4:	e1 f7       	brne	.-8      	; 0x11de <InitSnake+0xe0>
	head.prevX = 0;
	head.prevY = 0;
	head.headPointer = 0;
	snakeArray[0] = head;
	
	for (int snakeBodyIndex = 1; snakeBodyIndex < (snakeLength); snakeBodyIndex++)
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	29 81       	ldd	r18, Y+1	; 0x01
    11f2:	3a 81       	ldd	r19, Y+2	; 0x02
    11f4:	89 8d       	ldd	r24, Y+25	; 0x19
    11f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11f8:	28 17       	cp	r18, r24
    11fa:	39 07       	cpc	r19, r25
    11fc:	1c f2       	brlt	.-122    	; 0x1184 <InitSnake+0x86>
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <InitSnake+0x104>
}

void InitSnake(struct SnakeBodyPart snakeArray[], int snakeLength)
{
	if (snakeLength <= 0)
		return;
    1200:	00 00       	nop
		newBodyPart.x = -2;
		newBodyPart.y = -2;
		newBodyPart.headPointer = &snakeArray[snakeBodyIndex - 1];
		snakeArray[snakeBodyIndex] = newBodyPart;
	}
}
    1202:	6a 96       	adiw	r28, 0x1a	; 26
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <UpdateSnake>:

void UpdateSnake(struct SnakeBodyPart snakeArray[], int snakeLength, int worldWidth, int worldHeight)
{
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	2a 97       	sbiw	r28, 0x0a	; 10
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	9c 83       	std	Y+4, r25	; 0x04
    122a:	8b 83       	std	Y+3, r24	; 0x03
    122c:	7e 83       	std	Y+6, r23	; 0x06
    122e:	6d 83       	std	Y+5, r22	; 0x05
    1230:	58 87       	std	Y+8, r21	; 0x08
    1232:	4f 83       	std	Y+7, r20	; 0x07
    1234:	3a 87       	std	Y+10, r19	; 0x0a
    1236:	29 87       	std	Y+9, r18	; 0x09
	CheckInput();
    1238:	d5 de       	rcall	.-598    	; 0xfe4 <CheckInput>
	
	for (int bodyPartIndex = 0; bodyPartIndex < snakeLength; bodyPartIndex++)
    123a:	1a 82       	std	Y+2, r1	; 0x02
    123c:	19 82       	std	Y+1, r1	; 0x01
    123e:	b5 c2       	rjmp	.+1386   	; 0x17aa <UpdateSnake+0x596>
	{
		// Check for head
		if (snakeArray[bodyPartIndex].headPointer == 0)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	9a 81       	ldd	r25, Y+2	; 0x02
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	9c 01       	movw	r18, r24
    124a:	22 0f       	add	r18, r18
    124c:	33 1f       	adc	r19, r19
    124e:	22 0f       	add	r18, r18
    1250:	33 1f       	adc	r19, r19
    1252:	82 0f       	add	r24, r18
    1254:	93 1f       	adc	r25, r19
    1256:	2b 81       	ldd	r18, Y+3	; 0x03
    1258:	3c 81       	ldd	r19, Y+4	; 0x04
    125a:	82 0f       	add	r24, r18
    125c:	93 1f       	adc	r25, r19
    125e:	fc 01       	movw	r30, r24
    1260:	80 85       	ldd	r24, Z+8	; 0x08
    1262:	91 85       	ldd	r25, Z+9	; 0x09
    1264:	89 2b       	or	r24, r25
    1266:	09 f0       	breq	.+2      	; 0x126a <UpdateSnake+0x56>
    1268:	05 c2       	rjmp	.+1034   	; 0x1674 <UpdateSnake+0x460>
		{
			snakeArray[bodyPartIndex].prevX = snakeArray[bodyPartIndex].x;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	9c 01       	movw	r18, r24
    1274:	22 0f       	add	r18, r18
    1276:	33 1f       	adc	r19, r19
    1278:	22 0f       	add	r18, r18
    127a:	33 1f       	adc	r19, r19
    127c:	82 0f       	add	r24, r18
    127e:	93 1f       	adc	r25, r19
    1280:	2b 81       	ldd	r18, Y+3	; 0x03
    1282:	3c 81       	ldd	r19, Y+4	; 0x04
    1284:	28 0f       	add	r18, r24
    1286:	39 1f       	adc	r19, r25
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	ac 01       	movw	r20, r24
    1292:	44 0f       	add	r20, r20
    1294:	55 1f       	adc	r21, r21
    1296:	44 0f       	add	r20, r20
    1298:	55 1f       	adc	r21, r21
    129a:	84 0f       	add	r24, r20
    129c:	95 1f       	adc	r25, r21
    129e:	4b 81       	ldd	r20, Y+3	; 0x03
    12a0:	5c 81       	ldd	r21, Y+4	; 0x04
    12a2:	84 0f       	add	r24, r20
    12a4:	95 1f       	adc	r25, r21
    12a6:	fc 01       	movw	r30, r24
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	f9 01       	movw	r30, r18
    12ae:	95 83       	std	Z+5, r25	; 0x05
    12b0:	84 83       	std	Z+4, r24	; 0x04
			snakeArray[bodyPartIndex].prevY = snakeArray[bodyPartIndex].y;
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	9c 01       	movw	r18, r24
    12bc:	22 0f       	add	r18, r18
    12be:	33 1f       	adc	r19, r19
    12c0:	22 0f       	add	r18, r18
    12c2:	33 1f       	adc	r19, r19
    12c4:	82 0f       	add	r24, r18
    12c6:	93 1f       	adc	r25, r19
    12c8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ca:	3c 81       	ldd	r19, Y+4	; 0x04
    12cc:	28 0f       	add	r18, r24
    12ce:	39 1f       	adc	r19, r25
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	ac 01       	movw	r20, r24
    12da:	44 0f       	add	r20, r20
    12dc:	55 1f       	adc	r21, r21
    12de:	44 0f       	add	r20, r20
    12e0:	55 1f       	adc	r21, r21
    12e2:	84 0f       	add	r24, r20
    12e4:	95 1f       	adc	r25, r21
    12e6:	4b 81       	ldd	r20, Y+3	; 0x03
    12e8:	5c 81       	ldd	r21, Y+4	; 0x04
    12ea:	84 0f       	add	r24, r20
    12ec:	95 1f       	adc	r25, r21
    12ee:	fc 01       	movw	r30, r24
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	93 81       	ldd	r25, Z+3	; 0x03
    12f4:	f9 01       	movw	r30, r18
    12f6:	97 83       	std	Z+7, r25	; 0x07
    12f8:	86 83       	std	Z+6, r24	; 0x06
					
			if ((snakeArray[bodyPartIndex].x + 1) > worldWidth)
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	9c 01       	movw	r18, r24
    1304:	22 0f       	add	r18, r18
    1306:	33 1f       	adc	r19, r19
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	82 0f       	add	r24, r18
    130e:	93 1f       	adc	r25, r19
    1310:	2b 81       	ldd	r18, Y+3	; 0x03
    1312:	3c 81       	ldd	r19, Y+4	; 0x04
    1314:	82 0f       	add	r24, r18
    1316:	93 1f       	adc	r25, r19
    1318:	fc 01       	movw	r30, r24
    131a:	80 81       	ld	r24, Z
    131c:	91 81       	ldd	r25, Z+1	; 0x01
    131e:	9c 01       	movw	r18, r24
    1320:	2f 5f       	subi	r18, 0xFF	; 255
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	8f 81       	ldd	r24, Y+7	; 0x07
    1326:	98 85       	ldd	r25, Y+8	; 0x08
    1328:	82 17       	cp	r24, r18
    132a:	93 07       	cpc	r25, r19
    132c:	0c f0       	brlt	.+2      	; 0x1330 <UpdateSnake+0x11c>
    132e:	3f c0       	rjmp	.+126    	; 0x13ae <UpdateSnake+0x19a>
			{
				snakeArray[bodyPartIndex].x = 0;
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	9c 01       	movw	r18, r24
    133a:	22 0f       	add	r18, r18
    133c:	33 1f       	adc	r19, r19
    133e:	22 0f       	add	r18, r18
    1340:	33 1f       	adc	r19, r19
    1342:	82 0f       	add	r24, r18
    1344:	93 1f       	adc	r25, r19
    1346:	2b 81       	ldd	r18, Y+3	; 0x03
    1348:	3c 81       	ldd	r19, Y+4	; 0x04
    134a:	82 0f       	add	r24, r18
    134c:	93 1f       	adc	r25, r19
    134e:	fc 01       	movw	r30, r24
    1350:	11 82       	std	Z+1, r1	; 0x01
    1352:	10 82       	st	Z, r1
				snakeArray[bodyPartIndex].y += 2 * yDirection;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	9a 81       	ldd	r25, Y+2	; 0x02
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	9c 01       	movw	r18, r24
    135e:	22 0f       	add	r18, r18
    1360:	33 1f       	adc	r19, r19
    1362:	22 0f       	add	r18, r18
    1364:	33 1f       	adc	r19, r19
    1366:	82 0f       	add	r24, r18
    1368:	93 1f       	adc	r25, r19
    136a:	2b 81       	ldd	r18, Y+3	; 0x03
    136c:	3c 81       	ldd	r19, Y+4	; 0x04
    136e:	28 0f       	add	r18, r24
    1370:	39 1f       	adc	r19, r25
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	9a 81       	ldd	r25, Y+2	; 0x02
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	ac 01       	movw	r20, r24
    137c:	44 0f       	add	r20, r20
    137e:	55 1f       	adc	r21, r21
    1380:	44 0f       	add	r20, r20
    1382:	55 1f       	adc	r21, r21
    1384:	84 0f       	add	r24, r20
    1386:	95 1f       	adc	r25, r21
    1388:	4b 81       	ldd	r20, Y+3	; 0x03
    138a:	5c 81       	ldd	r21, Y+4	; 0x04
    138c:	84 0f       	add	r24, r20
    138e:	95 1f       	adc	r25, r21
    1390:	fc 01       	movw	r30, r24
    1392:	42 81       	ldd	r20, Z+2	; 0x02
    1394:	53 81       	ldd	r21, Z+3	; 0x03
    1396:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <yDirection>
    139a:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <yDirection+0x1>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	84 0f       	add	r24, r20
    13a4:	95 1f       	adc	r25, r21
    13a6:	f9 01       	movw	r30, r18
    13a8:	93 83       	std	Z+3, r25	; 0x03
    13aa:	82 83       	std	Z+2, r24	; 0x02
    13ac:	f9 c1       	rjmp	.+1010   	; 0x17a0 <UpdateSnake+0x58c>
			}
			else if ((snakeArray[bodyPartIndex].x) < 0) {
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	9c 01       	movw	r18, r24
    13b8:	22 0f       	add	r18, r18
    13ba:	33 1f       	adc	r19, r19
    13bc:	22 0f       	add	r18, r18
    13be:	33 1f       	adc	r19, r19
    13c0:	82 0f       	add	r24, r18
    13c2:	93 1f       	adc	r25, r19
    13c4:	2b 81       	ldd	r18, Y+3	; 0x03
    13c6:	3c 81       	ldd	r19, Y+4	; 0x04
    13c8:	82 0f       	add	r24, r18
    13ca:	93 1f       	adc	r25, r19
    13cc:	fc 01       	movw	r30, r24
    13ce:	80 81       	ld	r24, Z
    13d0:	91 81       	ldd	r25, Z+1	; 0x01
    13d2:	99 23       	and	r25, r25
    13d4:	0c f0       	brlt	.+2      	; 0x13d8 <UpdateSnake+0x1c4>
    13d6:	43 c0       	rjmp	.+134    	; 0x145e <UpdateSnake+0x24a>
				snakeArray[bodyPartIndex].x = worldWidth - 1;
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	9a 81       	ldd	r25, Y+2	; 0x02
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	9c 01       	movw	r18, r24
    13e2:	22 0f       	add	r18, r18
    13e4:	33 1f       	adc	r19, r19
    13e6:	22 0f       	add	r18, r18
    13e8:	33 1f       	adc	r19, r19
    13ea:	82 0f       	add	r24, r18
    13ec:	93 1f       	adc	r25, r19
    13ee:	2b 81       	ldd	r18, Y+3	; 0x03
    13f0:	3c 81       	ldd	r19, Y+4	; 0x04
    13f2:	82 0f       	add	r24, r18
    13f4:	93 1f       	adc	r25, r19
    13f6:	2f 81       	ldd	r18, Y+7	; 0x07
    13f8:	38 85       	ldd	r19, Y+8	; 0x08
    13fa:	21 50       	subi	r18, 0x01	; 1
    13fc:	31 09       	sbc	r19, r1
    13fe:	fc 01       	movw	r30, r24
    1400:	31 83       	std	Z+1, r19	; 0x01
    1402:	20 83       	st	Z, r18
				snakeArray[bodyPartIndex].y += 2 * yDirection;
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	9c 01       	movw	r18, r24
    140e:	22 0f       	add	r18, r18
    1410:	33 1f       	adc	r19, r19
    1412:	22 0f       	add	r18, r18
    1414:	33 1f       	adc	r19, r19
    1416:	82 0f       	add	r24, r18
    1418:	93 1f       	adc	r25, r19
    141a:	2b 81       	ldd	r18, Y+3	; 0x03
    141c:	3c 81       	ldd	r19, Y+4	; 0x04
    141e:	28 0f       	add	r18, r24
    1420:	39 1f       	adc	r19, r25
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	ac 01       	movw	r20, r24
    142c:	44 0f       	add	r20, r20
    142e:	55 1f       	adc	r21, r21
    1430:	44 0f       	add	r20, r20
    1432:	55 1f       	adc	r21, r21
    1434:	84 0f       	add	r24, r20
    1436:	95 1f       	adc	r25, r21
    1438:	4b 81       	ldd	r20, Y+3	; 0x03
    143a:	5c 81       	ldd	r21, Y+4	; 0x04
    143c:	84 0f       	add	r24, r20
    143e:	95 1f       	adc	r25, r21
    1440:	fc 01       	movw	r30, r24
    1442:	42 81       	ldd	r20, Z+2	; 0x02
    1444:	53 81       	ldd	r21, Z+3	; 0x03
    1446:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <yDirection>
    144a:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <yDirection+0x1>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	84 0f       	add	r24, r20
    1454:	95 1f       	adc	r25, r21
    1456:	f9 01       	movw	r30, r18
    1458:	93 83       	std	Z+3, r25	; 0x03
    145a:	82 83       	std	Z+2, r24	; 0x02
    145c:	a1 c1       	rjmp	.+834    	; 0x17a0 <UpdateSnake+0x58c>
				} else if ((snakeArray[bodyPartIndex].y + 1) > worldHeight) {
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	9a 81       	ldd	r25, Y+2	; 0x02
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	9c 01       	movw	r18, r24
    1468:	22 0f       	add	r18, r18
    146a:	33 1f       	adc	r19, r19
    146c:	22 0f       	add	r18, r18
    146e:	33 1f       	adc	r19, r19
    1470:	82 0f       	add	r24, r18
    1472:	93 1f       	adc	r25, r19
    1474:	2b 81       	ldd	r18, Y+3	; 0x03
    1476:	3c 81       	ldd	r19, Y+4	; 0x04
    1478:	82 0f       	add	r24, r18
    147a:	93 1f       	adc	r25, r19
    147c:	fc 01       	movw	r30, r24
    147e:	82 81       	ldd	r24, Z+2	; 0x02
    1480:	93 81       	ldd	r25, Z+3	; 0x03
    1482:	9c 01       	movw	r18, r24
    1484:	2f 5f       	subi	r18, 0xFF	; 255
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	89 85       	ldd	r24, Y+9	; 0x09
    148a:	9a 85       	ldd	r25, Y+10	; 0x0a
    148c:	82 17       	cp	r24, r18
    148e:	93 07       	cpc	r25, r19
    1490:	0c f0       	brlt	.+2      	; 0x1494 <UpdateSnake+0x280>
    1492:	3f c0       	rjmp	.+126    	; 0x1512 <UpdateSnake+0x2fe>
				snakeArray[bodyPartIndex].y = 0;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	9c 01       	movw	r18, r24
    149e:	22 0f       	add	r18, r18
    14a0:	33 1f       	adc	r19, r19
    14a2:	22 0f       	add	r18, r18
    14a4:	33 1f       	adc	r19, r19
    14a6:	82 0f       	add	r24, r18
    14a8:	93 1f       	adc	r25, r19
    14aa:	2b 81       	ldd	r18, Y+3	; 0x03
    14ac:	3c 81       	ldd	r19, Y+4	; 0x04
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	fc 01       	movw	r30, r24
    14b4:	13 82       	std	Z+3, r1	; 0x03
    14b6:	12 82       	std	Z+2, r1	; 0x02
				snakeArray[bodyPartIndex].x += 2 * xDirection;
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	9a 81       	ldd	r25, Y+2	; 0x02
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	9c 01       	movw	r18, r24
    14c2:	22 0f       	add	r18, r18
    14c4:	33 1f       	adc	r19, r19
    14c6:	22 0f       	add	r18, r18
    14c8:	33 1f       	adc	r19, r19
    14ca:	82 0f       	add	r24, r18
    14cc:	93 1f       	adc	r25, r19
    14ce:	2b 81       	ldd	r18, Y+3	; 0x03
    14d0:	3c 81       	ldd	r19, Y+4	; 0x04
    14d2:	28 0f       	add	r18, r24
    14d4:	39 1f       	adc	r19, r25
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	ac 01       	movw	r20, r24
    14e0:	44 0f       	add	r20, r20
    14e2:	55 1f       	adc	r21, r21
    14e4:	44 0f       	add	r20, r20
    14e6:	55 1f       	adc	r21, r21
    14e8:	84 0f       	add	r24, r20
    14ea:	95 1f       	adc	r25, r21
    14ec:	4b 81       	ldd	r20, Y+3	; 0x03
    14ee:	5c 81       	ldd	r21, Y+4	; 0x04
    14f0:	84 0f       	add	r24, r20
    14f2:	95 1f       	adc	r25, r21
    14f4:	fc 01       	movw	r30, r24
    14f6:	40 81       	ld	r20, Z
    14f8:	51 81       	ldd	r21, Z+1	; 0x01
    14fa:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <xDirection>
    14fe:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <xDirection+0x1>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	84 0f       	add	r24, r20
    1508:	95 1f       	adc	r25, r21
    150a:	f9 01       	movw	r30, r18
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	80 83       	st	Z, r24
    1510:	47 c1       	rjmp	.+654    	; 0x17a0 <UpdateSnake+0x58c>
				} else if ((snakeArray[bodyPartIndex].y) < 0) {
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	9c 01       	movw	r18, r24
    151c:	22 0f       	add	r18, r18
    151e:	33 1f       	adc	r19, r19
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	82 0f       	add	r24, r18
    1526:	93 1f       	adc	r25, r19
    1528:	2b 81       	ldd	r18, Y+3	; 0x03
    152a:	3c 81       	ldd	r19, Y+4	; 0x04
    152c:	82 0f       	add	r24, r18
    152e:	93 1f       	adc	r25, r19
    1530:	fc 01       	movw	r30, r24
    1532:	82 81       	ldd	r24, Z+2	; 0x02
    1534:	93 81       	ldd	r25, Z+3	; 0x03
    1536:	99 23       	and	r25, r25
    1538:	0c f0       	brlt	.+2      	; 0x153c <UpdateSnake+0x328>
    153a:	43 c0       	rjmp	.+134    	; 0x15c2 <UpdateSnake+0x3ae>
				snakeArray[bodyPartIndex].y = worldHeight - 1;
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	9c 01       	movw	r18, r24
    1546:	22 0f       	add	r18, r18
    1548:	33 1f       	adc	r19, r19
    154a:	22 0f       	add	r18, r18
    154c:	33 1f       	adc	r19, r19
    154e:	82 0f       	add	r24, r18
    1550:	93 1f       	adc	r25, r19
    1552:	2b 81       	ldd	r18, Y+3	; 0x03
    1554:	3c 81       	ldd	r19, Y+4	; 0x04
    1556:	82 0f       	add	r24, r18
    1558:	93 1f       	adc	r25, r19
    155a:	29 85       	ldd	r18, Y+9	; 0x09
    155c:	3a 85       	ldd	r19, Y+10	; 0x0a
    155e:	21 50       	subi	r18, 0x01	; 1
    1560:	31 09       	sbc	r19, r1
    1562:	fc 01       	movw	r30, r24
    1564:	33 83       	std	Z+3, r19	; 0x03
    1566:	22 83       	std	Z+2, r18	; 0x02
				snakeArray[bodyPartIndex].x += 2 * xDirection;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	9a 81       	ldd	r25, Y+2	; 0x02
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	9c 01       	movw	r18, r24
    1572:	22 0f       	add	r18, r18
    1574:	33 1f       	adc	r19, r19
    1576:	22 0f       	add	r18, r18
    1578:	33 1f       	adc	r19, r19
    157a:	82 0f       	add	r24, r18
    157c:	93 1f       	adc	r25, r19
    157e:	2b 81       	ldd	r18, Y+3	; 0x03
    1580:	3c 81       	ldd	r19, Y+4	; 0x04
    1582:	28 0f       	add	r18, r24
    1584:	39 1f       	adc	r19, r25
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	9a 81       	ldd	r25, Y+2	; 0x02
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	ac 01       	movw	r20, r24
    1590:	44 0f       	add	r20, r20
    1592:	55 1f       	adc	r21, r21
    1594:	44 0f       	add	r20, r20
    1596:	55 1f       	adc	r21, r21
    1598:	84 0f       	add	r24, r20
    159a:	95 1f       	adc	r25, r21
    159c:	4b 81       	ldd	r20, Y+3	; 0x03
    159e:	5c 81       	ldd	r21, Y+4	; 0x04
    15a0:	84 0f       	add	r24, r20
    15a2:	95 1f       	adc	r25, r21
    15a4:	fc 01       	movw	r30, r24
    15a6:	40 81       	ld	r20, Z
    15a8:	51 81       	ldd	r21, Z+1	; 0x01
    15aa:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <xDirection>
    15ae:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <xDirection+0x1>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	84 0f       	add	r24, r20
    15b8:	95 1f       	adc	r25, r21
    15ba:	f9 01       	movw	r30, r18
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	80 83       	st	Z, r24
    15c0:	ef c0       	rjmp	.+478    	; 0x17a0 <UpdateSnake+0x58c>
			}
			else
			{
				snakeArray[bodyPartIndex].x += 2 * xDirection;
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	9c 01       	movw	r18, r24
    15cc:	22 0f       	add	r18, r18
    15ce:	33 1f       	adc	r19, r19
    15d0:	22 0f       	add	r18, r18
    15d2:	33 1f       	adc	r19, r19
    15d4:	82 0f       	add	r24, r18
    15d6:	93 1f       	adc	r25, r19
    15d8:	2b 81       	ldd	r18, Y+3	; 0x03
    15da:	3c 81       	ldd	r19, Y+4	; 0x04
    15dc:	28 0f       	add	r18, r24
    15de:	39 1f       	adc	r19, r25
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	ac 01       	movw	r20, r24
    15ea:	44 0f       	add	r20, r20
    15ec:	55 1f       	adc	r21, r21
    15ee:	44 0f       	add	r20, r20
    15f0:	55 1f       	adc	r21, r21
    15f2:	84 0f       	add	r24, r20
    15f4:	95 1f       	adc	r25, r21
    15f6:	4b 81       	ldd	r20, Y+3	; 0x03
    15f8:	5c 81       	ldd	r21, Y+4	; 0x04
    15fa:	84 0f       	add	r24, r20
    15fc:	95 1f       	adc	r25, r21
    15fe:	fc 01       	movw	r30, r24
    1600:	40 81       	ld	r20, Z
    1602:	51 81       	ldd	r21, Z+1	; 0x01
    1604:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <xDirection>
    1608:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <xDirection+0x1>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	84 0f       	add	r24, r20
    1612:	95 1f       	adc	r25, r21
    1614:	f9 01       	movw	r30, r18
    1616:	91 83       	std	Z+1, r25	; 0x01
    1618:	80 83       	st	Z, r24
				snakeArray[bodyPartIndex].y += 2 * yDirection;
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	9a 81       	ldd	r25, Y+2	; 0x02
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	9c 01       	movw	r18, r24
    1624:	22 0f       	add	r18, r18
    1626:	33 1f       	adc	r19, r19
    1628:	22 0f       	add	r18, r18
    162a:	33 1f       	adc	r19, r19
    162c:	82 0f       	add	r24, r18
    162e:	93 1f       	adc	r25, r19
    1630:	2b 81       	ldd	r18, Y+3	; 0x03
    1632:	3c 81       	ldd	r19, Y+4	; 0x04
    1634:	28 0f       	add	r18, r24
    1636:	39 1f       	adc	r19, r25
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	9a 81       	ldd	r25, Y+2	; 0x02
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	ac 01       	movw	r20, r24
    1642:	44 0f       	add	r20, r20
    1644:	55 1f       	adc	r21, r21
    1646:	44 0f       	add	r20, r20
    1648:	55 1f       	adc	r21, r21
    164a:	84 0f       	add	r24, r20
    164c:	95 1f       	adc	r25, r21
    164e:	4b 81       	ldd	r20, Y+3	; 0x03
    1650:	5c 81       	ldd	r21, Y+4	; 0x04
    1652:	84 0f       	add	r24, r20
    1654:	95 1f       	adc	r25, r21
    1656:	fc 01       	movw	r30, r24
    1658:	42 81       	ldd	r20, Z+2	; 0x02
    165a:	53 81       	ldd	r21, Z+3	; 0x03
    165c:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <yDirection>
    1660:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <yDirection+0x1>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	84 0f       	add	r24, r20
    166a:	95 1f       	adc	r25, r21
    166c:	f9 01       	movw	r30, r18
    166e:	93 83       	std	Z+3, r25	; 0x03
    1670:	82 83       	std	Z+2, r24	; 0x02
    1672:	96 c0       	rjmp	.+300    	; 0x17a0 <UpdateSnake+0x58c>
			}
		}
		else
		{
			snakeArray[bodyPartIndex].prevX = snakeArray[bodyPartIndex].x;
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	9c 01       	movw	r18, r24
    167e:	22 0f       	add	r18, r18
    1680:	33 1f       	adc	r19, r19
    1682:	22 0f       	add	r18, r18
    1684:	33 1f       	adc	r19, r19
    1686:	82 0f       	add	r24, r18
    1688:	93 1f       	adc	r25, r19
    168a:	2b 81       	ldd	r18, Y+3	; 0x03
    168c:	3c 81       	ldd	r19, Y+4	; 0x04
    168e:	28 0f       	add	r18, r24
    1690:	39 1f       	adc	r19, r25
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	ac 01       	movw	r20, r24
    169c:	44 0f       	add	r20, r20
    169e:	55 1f       	adc	r21, r21
    16a0:	44 0f       	add	r20, r20
    16a2:	55 1f       	adc	r21, r21
    16a4:	84 0f       	add	r24, r20
    16a6:	95 1f       	adc	r25, r21
    16a8:	4b 81       	ldd	r20, Y+3	; 0x03
    16aa:	5c 81       	ldd	r21, Y+4	; 0x04
    16ac:	84 0f       	add	r24, r20
    16ae:	95 1f       	adc	r25, r21
    16b0:	fc 01       	movw	r30, r24
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	f9 01       	movw	r30, r18
    16b8:	95 83       	std	Z+5, r25	; 0x05
    16ba:	84 83       	std	Z+4, r24	; 0x04
			snakeArray[bodyPartIndex].prevY = snakeArray[bodyPartIndex].y;
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	9c 01       	movw	r18, r24
    16c6:	22 0f       	add	r18, r18
    16c8:	33 1f       	adc	r19, r19
    16ca:	22 0f       	add	r18, r18
    16cc:	33 1f       	adc	r19, r19
    16ce:	82 0f       	add	r24, r18
    16d0:	93 1f       	adc	r25, r19
    16d2:	2b 81       	ldd	r18, Y+3	; 0x03
    16d4:	3c 81       	ldd	r19, Y+4	; 0x04
    16d6:	28 0f       	add	r18, r24
    16d8:	39 1f       	adc	r19, r25
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	ac 01       	movw	r20, r24
    16e4:	44 0f       	add	r20, r20
    16e6:	55 1f       	adc	r21, r21
    16e8:	44 0f       	add	r20, r20
    16ea:	55 1f       	adc	r21, r21
    16ec:	84 0f       	add	r24, r20
    16ee:	95 1f       	adc	r25, r21
    16f0:	4b 81       	ldd	r20, Y+3	; 0x03
    16f2:	5c 81       	ldd	r21, Y+4	; 0x04
    16f4:	84 0f       	add	r24, r20
    16f6:	95 1f       	adc	r25, r21
    16f8:	fc 01       	movw	r30, r24
    16fa:	82 81       	ldd	r24, Z+2	; 0x02
    16fc:	93 81       	ldd	r25, Z+3	; 0x03
    16fe:	f9 01       	movw	r30, r18
    1700:	97 83       	std	Z+7, r25	; 0x07
    1702:	86 83       	std	Z+6, r24	; 0x06
			snakeArray[bodyPartIndex].x = snakeArray[bodyPartIndex].headPointer->prevX;
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	9c 01       	movw	r18, r24
    170e:	22 0f       	add	r18, r18
    1710:	33 1f       	adc	r19, r19
    1712:	22 0f       	add	r18, r18
    1714:	33 1f       	adc	r19, r19
    1716:	82 0f       	add	r24, r18
    1718:	93 1f       	adc	r25, r19
    171a:	2b 81       	ldd	r18, Y+3	; 0x03
    171c:	3c 81       	ldd	r19, Y+4	; 0x04
    171e:	28 0f       	add	r18, r24
    1720:	39 1f       	adc	r19, r25
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	ac 01       	movw	r20, r24
    172c:	44 0f       	add	r20, r20
    172e:	55 1f       	adc	r21, r21
    1730:	44 0f       	add	r20, r20
    1732:	55 1f       	adc	r21, r21
    1734:	84 0f       	add	r24, r20
    1736:	95 1f       	adc	r25, r21
    1738:	4b 81       	ldd	r20, Y+3	; 0x03
    173a:	5c 81       	ldd	r21, Y+4	; 0x04
    173c:	84 0f       	add	r24, r20
    173e:	95 1f       	adc	r25, r21
    1740:	fc 01       	movw	r30, r24
    1742:	80 85       	ldd	r24, Z+8	; 0x08
    1744:	91 85       	ldd	r25, Z+9	; 0x09
    1746:	fc 01       	movw	r30, r24
    1748:	84 81       	ldd	r24, Z+4	; 0x04
    174a:	95 81       	ldd	r25, Z+5	; 0x05
    174c:	f9 01       	movw	r30, r18
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	80 83       	st	Z, r24
			snakeArray[bodyPartIndex].y = snakeArray[bodyPartIndex].headPointer->prevY;
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	9a 81       	ldd	r25, Y+2	; 0x02
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	9c 01       	movw	r18, r24
    175c:	22 0f       	add	r18, r18
    175e:	33 1f       	adc	r19, r19
    1760:	22 0f       	add	r18, r18
    1762:	33 1f       	adc	r19, r19
    1764:	82 0f       	add	r24, r18
    1766:	93 1f       	adc	r25, r19
    1768:	2b 81       	ldd	r18, Y+3	; 0x03
    176a:	3c 81       	ldd	r19, Y+4	; 0x04
    176c:	28 0f       	add	r18, r24
    176e:	39 1f       	adc	r19, r25
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	ac 01       	movw	r20, r24
    177a:	44 0f       	add	r20, r20
    177c:	55 1f       	adc	r21, r21
    177e:	44 0f       	add	r20, r20
    1780:	55 1f       	adc	r21, r21
    1782:	84 0f       	add	r24, r20
    1784:	95 1f       	adc	r25, r21
    1786:	4b 81       	ldd	r20, Y+3	; 0x03
    1788:	5c 81       	ldd	r21, Y+4	; 0x04
    178a:	84 0f       	add	r24, r20
    178c:	95 1f       	adc	r25, r21
    178e:	fc 01       	movw	r30, r24
    1790:	80 85       	ldd	r24, Z+8	; 0x08
    1792:	91 85       	ldd	r25, Z+9	; 0x09
    1794:	fc 01       	movw	r30, r24
    1796:	86 81       	ldd	r24, Z+6	; 0x06
    1798:	97 81       	ldd	r25, Z+7	; 0x07
    179a:	f9 01       	movw	r30, r18
    179c:	93 83       	std	Z+3, r25	; 0x03
    179e:	82 83       	std	Z+2, r24	; 0x02

void UpdateSnake(struct SnakeBodyPart snakeArray[], int snakeLength, int worldWidth, int worldHeight)
{
	CheckInput();
	
	for (int bodyPartIndex = 0; bodyPartIndex < snakeLength; bodyPartIndex++)
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	9a 81       	ldd	r25, Y+2	; 0x02
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	9a 83       	std	Y+2, r25	; 0x02
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	29 81       	ldd	r18, Y+1	; 0x01
    17ac:	3a 81       	ldd	r19, Y+2	; 0x02
    17ae:	8d 81       	ldd	r24, Y+5	; 0x05
    17b0:	9e 81       	ldd	r25, Y+6	; 0x06
    17b2:	28 17       	cp	r18, r24
    17b4:	39 07       	cpc	r19, r25
    17b6:	0c f4       	brge	.+2      	; 0x17ba <UpdateSnake+0x5a6>
    17b8:	43 cd       	rjmp	.-1402   	; 0x1240 <UpdateSnake+0x2c>
			snakeArray[bodyPartIndex].x = snakeArray[bodyPartIndex].headPointer->prevX;
			snakeArray[bodyPartIndex].y = snakeArray[bodyPartIndex].headPointer->prevY;
		}
	}
	
	CheckSnakeBodyCollision(snakeArray, snakeLength);
    17ba:	2d 81       	ldd	r18, Y+5	; 0x05
    17bc:	3e 81       	ldd	r19, Y+6	; 0x06
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	9c 81       	ldd	r25, Y+4	; 0x04
    17c2:	b9 01       	movw	r22, r18
    17c4:	27 dc       	rcall	.-1970   	; 0x1014 <CheckSnakeBodyCollision>
}
    17c6:	00 00       	nop
    17c8:	2a 96       	adiw	r28, 0x0a	; 10
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	08 95       	ret

000017da <GrowSnake>:

void GrowSnake(struct SnakeBodyPart snakeArray[], int snakeBodyLength)
{
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	68 97       	sbiw	r28, 0x18	; 24
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	9e 8b       	std	Y+22, r25	; 0x16
    17f0:	8d 8b       	std	Y+21, r24	; 0x15
    17f2:	78 8f       	std	Y+24, r23	; 0x18
    17f4:	6f 8b       	std	Y+23, r22	; 0x17
	struct SnakeBodyPart previousBodyPart = snakeArray[snakeBodyLength - 2]; 
    17f6:	8f 89       	ldd	r24, Y+23	; 0x17
    17f8:	98 8d       	ldd	r25, Y+24	; 0x18
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	9c 01       	movw	r18, r24
    1800:	22 0f       	add	r18, r18
    1802:	33 1f       	adc	r19, r19
    1804:	22 0f       	add	r18, r18
    1806:	33 1f       	adc	r19, r19
    1808:	82 0f       	add	r24, r18
    180a:	93 1f       	adc	r25, r19
    180c:	44 97       	sbiw	r24, 0x14	; 20
    180e:	2d 89       	ldd	r18, Y+21	; 0x15
    1810:	3e 89       	ldd	r19, Y+22	; 0x16
    1812:	82 0f       	add	r24, r18
    1814:	93 1f       	adc	r25, r19
    1816:	2a e0       	ldi	r18, 0x0A	; 10
    1818:	fc 01       	movw	r30, r24
    181a:	ce 01       	movw	r24, r28
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	dc 01       	movw	r26, r24
    1820:	01 90       	ld	r0, Z+
    1822:	0d 92       	st	X+, r0
    1824:	2a 95       	dec	r18
    1826:	e1 f7       	brne	.-8      	; 0x1820 <GrowSnake+0x46>
	
	struct SnakeBodyPart newBodyPart;
	newBodyPart.x = previousBodyPart.prevX;
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	9c 87       	std	Y+12, r25	; 0x0c
    182e:	8b 87       	std	Y+11, r24	; 0x0b
	newBodyPart.y = previousBodyPart.prevY;
    1830:	8f 81       	ldd	r24, Y+7	; 0x07
    1832:	98 85       	ldd	r25, Y+8	; 0x08
    1834:	9e 87       	std	Y+14, r25	; 0x0e
    1836:	8d 87       	std	Y+13, r24	; 0x0d
	newBodyPart.headPointer = &snakeArray[snakeBodyLength - 2];
    1838:	8f 89       	ldd	r24, Y+23	; 0x17
    183a:	98 8d       	ldd	r25, Y+24	; 0x18
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	9c 01       	movw	r18, r24
    1842:	22 0f       	add	r18, r18
    1844:	33 1f       	adc	r19, r19
    1846:	22 0f       	add	r18, r18
    1848:	33 1f       	adc	r19, r19
    184a:	82 0f       	add	r24, r18
    184c:	93 1f       	adc	r25, r19
    184e:	44 97       	sbiw	r24, 0x14	; 20
    1850:	2d 89       	ldd	r18, Y+21	; 0x15
    1852:	3e 89       	ldd	r19, Y+22	; 0x16
    1854:	82 0f       	add	r24, r18
    1856:	93 1f       	adc	r25, r19
    1858:	9c 8b       	std	Y+20, r25	; 0x14
    185a:	8b 8b       	std	Y+19, r24	; 0x13
	snakeArray[snakeBodyLength - 1] = newBodyPart;
    185c:	8f 89       	ldd	r24, Y+23	; 0x17
    185e:	98 8d       	ldd	r25, Y+24	; 0x18
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	9c 01       	movw	r18, r24
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	22 0f       	add	r18, r18
    186c:	33 1f       	adc	r19, r19
    186e:	82 0f       	add	r24, r18
    1870:	93 1f       	adc	r25, r19
    1872:	0a 97       	sbiw	r24, 0x0a	; 10
    1874:	2d 89       	ldd	r18, Y+21	; 0x15
    1876:	3e 89       	ldd	r19, Y+22	; 0x16
    1878:	82 0f       	add	r24, r18
    187a:	93 1f       	adc	r25, r19
    187c:	2a e0       	ldi	r18, 0x0A	; 10
    187e:	fe 01       	movw	r30, r28
    1880:	3b 96       	adiw	r30, 0x0b	; 11
    1882:	dc 01       	movw	r26, r24
    1884:	01 90       	ld	r0, Z+
    1886:	0d 92       	st	X+, r0
    1888:	2a 95       	dec	r18
    188a:	e1 f7       	brne	.-8      	; 0x1884 <GrowSnake+0xaa>
}
    188c:	00 00       	nop
    188e:	68 96       	adiw	r28, 0x18	; 24
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <SnakeHitSelf>:

int SnakeHitSelf()
{
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
	return hitSelf;
    18a8:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <hitSelf>
    18ac:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <hitSelf+0x1>
}
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	08 95       	ret

000018b6 <SPI_MasterInit>:
#define DD_MOSI 2
#define DD_MISO 3
#define DD_DORD 5

void SPI_MasterInit(void)
{	
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS); //MOSI,SS & SCK output,others input
    18be:	84 e2       	ldi	r24, 0x24	; 36
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	27 e0       	ldi	r18, 0x07	; 7
    18c4:	fc 01       	movw	r30, r24
    18c6:	20 83       	st	Z, r18
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);  		   //SPI, Master, clock = fck/16
    18c8:	8c e4       	ldi	r24, 0x4C	; 76
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	21 e5       	ldi	r18, 0x51	; 81
    18ce:	fc 01       	movw	r30, r24
    18d0:	20 83       	st	Z, r18
}
    18d2:	00 00       	nop
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	08 95       	ret

000018da <SPI_MasterTransmit>:

void SPI_MasterTransmit(char data)
{
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <SPI_MasterTransmit+0x6>
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	8b 83       	std	Y+3, r24	; 0x03
	PORTB &= ~(1 << DD_SS);
    18e6:	85 e2       	ldi	r24, 0x25	; 37
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	25 e2       	ldi	r18, 0x25	; 37
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	f9 01       	movw	r30, r18
    18f0:	20 81       	ld	r18, Z
    18f2:	2e 7f       	andi	r18, 0xFE	; 254
    18f4:	fc 01       	movw	r30, r24
    18f6:	20 83       	st	Z, r18

	// Start transmission
	SPDR = data;			
    18f8:	8e e4       	ldi	r24, 0x4E	; 78
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	2b 81       	ldd	r18, Y+3	; 0x03
    18fe:	fc 01       	movw	r30, r24
    1900:	20 83       	st	Z, r18
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
    1902:	1a 82       	std	Y+2, r1	; 0x02
    1904:	19 82       	std	Y+1, r1	; 0x01
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
    1906:	05 c0       	rjmp	.+10     	; 0x1912 <SPI_MasterTransmit+0x38>
	{
		k++;
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	01 96       	adiw	r24, 0x01	; 1
    190e:	9a 83       	std	Y+2, r25	; 0x02
    1910:	89 83       	std	Y+1, r24	; 0x01
	// Start transmission
	SPDR = data;			
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
    1912:	8d e4       	ldi	r24, 0x4D	; 77
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	fc 01       	movw	r30, r24
    1918:	80 81       	ld	r24, Z
    191a:	88 23       	and	r24, r24
    191c:	ac f7       	brge	.-22     	; 0x1908 <SPI_MasterTransmit+0x2e>
	{
		k++;
	}			
	
	data = SPDR;
    191e:	8e e4       	ldi	r24, 0x4E	; 78
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	fc 01       	movw	r30, r24
    1924:	80 81       	ld	r24, Z
    1926:	8b 83       	std	Y+3, r24	; 0x03

	PORTB|= 1 << DD_SS;
    1928:	85 e2       	ldi	r24, 0x25	; 37
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	25 e2       	ldi	r18, 0x25	; 37
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	f9 01       	movw	r30, r18
    1932:	20 81       	ld	r18, Z
    1934:	21 60       	ori	r18, 0x01	; 1
    1936:	fc 01       	movw	r30, r24
    1938:	20 83       	st	Z, r18
}
    193a:	00 00       	nop
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret

00001948 <DrawIntroScreen>:
 */ 
#include "WorldDriver.h"
#include "Nokia5110Driver.h"

void DrawIntroScreen(unsigned char introScreen[])
{
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	00 d0       	rcall	.+0      	; 0x194e <DrawIntroScreen+0x6>
    194e:	1f 92       	push	r1
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	9c 83       	std	Y+4, r25	; 0x04
    1956:	8b 83       	std	Y+3, r24	; 0x03
	for (int x = 0; x < 504; x++)
    1958:	1a 82       	std	Y+2, r1	; 0x02
    195a:	19 82       	std	Y+1, r1	; 0x01
    195c:	0e c0       	rjmp	.+28     	; 0x197a <DrawIntroScreen+0x32>
	{
		sendData(introScreen[x]);
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	2b 81       	ldd	r18, Y+3	; 0x03
    1964:	3c 81       	ldd	r19, Y+4	; 0x04
    1966:	82 0f       	add	r24, r18
    1968:	93 1f       	adc	r25, r19
    196a:	fc 01       	movw	r30, r24
    196c:	80 81       	ld	r24, Z
    196e:	a5 da       	rcall	.-2742   	; 0xeba <sendData>
#include "WorldDriver.h"
#include "Nokia5110Driver.h"

void DrawIntroScreen(unsigned char introScreen[])
{
	for (int x = 0; x < 504; x++)
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	9a 83       	std	Y+2, r25	; 0x02
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	9a 81       	ldd	r25, Y+2	; 0x02
    197e:	88 3f       	cpi	r24, 0xF8	; 248
    1980:	91 40       	sbci	r25, 0x01	; 1
    1982:	6c f3       	brlt	.-38     	; 0x195e <DrawIntroScreen+0x16>
	{
		sendData(introScreen[x]);
	}
}
    1984:	00 00       	nop
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	08 95       	ret

00001994 <DrawHighscoreText>:

void DrawHighscoreText(unsigned char highscoreText[])
{
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	00 d0       	rcall	.+0      	; 0x199a <DrawHighscoreText+0x6>
    199a:	1f 92       	push	r1
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	8b 83       	std	Y+3, r24	; 0x03
	clearDisplay();
    19a4:	a0 da       	rcall	.-2752   	; 0xee6 <clearDisplay>
	setCursor(0, 0);
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	4b da       	rcall	.-2922   	; 0xe42 <setCursor>
	int i = 0;
    19ac:	1a 82       	std	Y+2, r1	; 0x02
    19ae:	19 82       	std	Y+1, r1	; 0x01
	while (highscoreText[i] != '\\')
    19b0:	0e c0       	rjmp	.+28     	; 0x19ce <DrawHighscoreText+0x3a>
	{
		sendData(highscoreText[i]);
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	2b 81       	ldd	r18, Y+3	; 0x03
    19b8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ba:	82 0f       	add	r24, r18
    19bc:	93 1f       	adc	r25, r19
    19be:	fc 01       	movw	r30, r24
    19c0:	80 81       	ld	r24, Z
    19c2:	7b da       	rcall	.-2826   	; 0xeba <sendData>
		i++;
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	9a 81       	ldd	r25, Y+2	; 0x02
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
void DrawHighscoreText(unsigned char highscoreText[])
{
	clearDisplay();
	setCursor(0, 0);
	int i = 0;
	while (highscoreText[i] != '\\')
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	2b 81       	ldd	r18, Y+3	; 0x03
    19d4:	3c 81       	ldd	r19, Y+4	; 0x04
    19d6:	82 0f       	add	r24, r18
    19d8:	93 1f       	adc	r25, r19
    19da:	fc 01       	movw	r30, r24
    19dc:	80 81       	ld	r24, Z
    19de:	8c 35       	cpi	r24, 0x5C	; 92
    19e0:	41 f7       	brne	.-48     	; 0x19b2 <DrawHighscoreText+0x1e>
	{
		sendData(highscoreText[i]);
		i++;
	}
}
    19e2:	00 00       	nop
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	08 95       	ret

000019f2 <DrawCharacter>:

void DrawCharacter(unsigned char number[], char x, char y, int arrayLength)
{
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	28 97       	sbiw	r28, 0x08	; 8
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	9c 83       	std	Y+4, r25	; 0x04
    1a08:	8b 83       	std	Y+3, r24	; 0x03
    1a0a:	6d 83       	std	Y+5, r22	; 0x05
    1a0c:	4e 83       	std	Y+6, r20	; 0x06
    1a0e:	38 87       	std	Y+8, r19	; 0x08
    1a10:	2f 83       	std	Y+7, r18	; 0x07
	setCursor(x, y);
    1a12:	6e 81       	ldd	r22, Y+6	; 0x06
    1a14:	8d 81       	ldd	r24, Y+5	; 0x05
    1a16:	15 da       	rcall	.-3030   	; 0xe42 <setCursor>
	
	for (int i = 0; i < arrayLength; i++)
    1a18:	1a 82       	std	Y+2, r1	; 0x02
    1a1a:	19 82       	std	Y+1, r1	; 0x01
    1a1c:	0e c0       	rjmp	.+28     	; 0x1a3a <DrawCharacter+0x48>
	{
		sendData(number[i]);
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	2b 81       	ldd	r18, Y+3	; 0x03
    1a24:	3c 81       	ldd	r19, Y+4	; 0x04
    1a26:	82 0f       	add	r24, r18
    1a28:	93 1f       	adc	r25, r19
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	80 81       	ld	r24, Z
    1a2e:	45 da       	rcall	.-2934   	; 0xeba <sendData>

void DrawCharacter(unsigned char number[], char x, char y, int arrayLength)
{
	setCursor(x, y);
	
	for (int i = 0; i < arrayLength; i++)
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	9a 81       	ldd	r25, Y+2	; 0x02
    1a34:	01 96       	adiw	r24, 0x01	; 1
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	29 81       	ldd	r18, Y+1	; 0x01
    1a3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a40:	98 85       	ldd	r25, Y+8	; 0x08
    1a42:	28 17       	cp	r18, r24
    1a44:	39 07       	cpc	r19, r25
    1a46:	5c f3       	brlt	.-42     	; 0x1a1e <DrawCharacter+0x2c>
	{
		sendData(number[i]);
	}
}
    1a48:	00 00       	nop
    1a4a:	28 96       	adiw	r28, 0x08	; 8
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <DrawPixel>:

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	28 97       	sbiw	r28, 0x08	; 8
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	8d 83       	std	Y+5, r24	; 0x05
    1a72:	6e 83       	std	Y+6, r22	; 0x06
    1a74:	58 87       	std	Y+8, r21	; 0x08
    1a76:	4f 83       	std	Y+7, r20	; 0x07
	if (x < 0 || x > 83)
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	84 35       	cpi	r24, 0x54	; 84
    1a7c:	08 f0       	brcs	.+2      	; 0x1a80 <DrawPixel+0x24>
    1a7e:	8c c0       	rjmp	.+280    	; 0x1b98 <DrawPixel+0x13c>
		return;

	if (y < 0 || y > 47)
    1a80:	8e 81       	ldd	r24, Y+6	; 0x06
    1a82:	80 33       	cpi	r24, 0x30	; 48
    1a84:	08 f0       	brcs	.+2      	; 0x1a88 <DrawPixel+0x2c>
    1a86:	8a c0       	rjmp	.+276    	; 0x1b9c <DrawPixel+0x140>
		return;

	unsigned int baselineOffset = 0;
    1a88:	1a 82       	std	Y+2, r1	; 0x02
    1a8a:	19 82       	std	Y+1, r1	; 0x01
	unsigned int verticalBitOffset = 0;
    1a8c:	1c 82       	std	Y+4, r1	; 0x04
    1a8e:	1b 82       	std	Y+3, r1	; 0x03

	if (y >= 0 && y <= 7)
    1a90:	8e 81       	ldd	r24, Y+6	; 0x06
    1a92:	88 30       	cpi	r24, 0x08	; 8
    1a94:	40 f4       	brcc	.+16     	; 0x1aa6 <DrawPixel+0x4a>
	{
		baselineOffset = 0;
    1a96:	1a 82       	std	Y+2, r1	; 0x02
    1a98:	19 82       	std	Y+1, r1	; 0x01
		verticalBitOffset = y;
    1a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9c:	88 2f       	mov	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9c 83       	std	Y+4, r25	; 0x04
    1aa2:	8b 83       	std	Y+3, r24	; 0x03
    1aa4:	54 c0       	rjmp	.+168    	; 0x1b4e <DrawPixel+0xf2>
	} 
	else if (y >= 8 && y <= 15)
    1aa6:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa8:	88 30       	cpi	r24, 0x08	; 8
    1aaa:	70 f0       	brcs	.+28     	; 0x1ac8 <DrawPixel+0x6c>
    1aac:	8e 81       	ldd	r24, Y+6	; 0x06
    1aae:	80 31       	cpi	r24, 0x10	; 16
    1ab0:	58 f4       	brcc	.+22     	; 0x1ac8 <DrawPixel+0x6c>
	{
		baselineOffset = 84;
    1ab2:	84 e5       	ldi	r24, 0x54	; 84
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	9a 83       	std	Y+2, r25	; 0x02
    1ab8:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - 8;
    1aba:	8e 81       	ldd	r24, Y+6	; 0x06
    1abc:	88 2f       	mov	r24, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	08 97       	sbiw	r24, 0x08	; 8
    1ac2:	9c 83       	std	Y+4, r25	; 0x04
    1ac4:	8b 83       	std	Y+3, r24	; 0x03
    1ac6:	43 c0       	rjmp	.+134    	; 0x1b4e <DrawPixel+0xf2>
	} 
	else if (y >= 16 && y <= 23)
    1ac8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aca:	80 31       	cpi	r24, 0x10	; 16
    1acc:	70 f0       	brcs	.+28     	; 0x1aea <DrawPixel+0x8e>
    1ace:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad0:	88 31       	cpi	r24, 0x18	; 24
    1ad2:	58 f4       	brcc	.+22     	; 0x1aea <DrawPixel+0x8e>
	{
		baselineOffset = 84 * 2;
    1ad4:	88 ea       	ldi	r24, 0xA8	; 168
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 2);
    1adc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ade:	88 2f       	mov	r24, r24
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	40 97       	sbiw	r24, 0x10	; 16
    1ae4:	9c 83       	std	Y+4, r25	; 0x04
    1ae6:	8b 83       	std	Y+3, r24	; 0x03
    1ae8:	32 c0       	rjmp	.+100    	; 0x1b4e <DrawPixel+0xf2>
	} 
	else if (y >= 24 && y <= 31)
    1aea:	8e 81       	ldd	r24, Y+6	; 0x06
    1aec:	88 31       	cpi	r24, 0x18	; 24
    1aee:	70 f0       	brcs	.+28     	; 0x1b0c <DrawPixel+0xb0>
    1af0:	8e 81       	ldd	r24, Y+6	; 0x06
    1af2:	80 32       	cpi	r24, 0x20	; 32
    1af4:	58 f4       	brcc	.+22     	; 0x1b0c <DrawPixel+0xb0>
	{
		baselineOffset = 84 * 3;
    1af6:	8c ef       	ldi	r24, 0xFC	; 252
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9a 83       	std	Y+2, r25	; 0x02
    1afc:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 3);
    1afe:	8e 81       	ldd	r24, Y+6	; 0x06
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	48 97       	sbiw	r24, 0x18	; 24
    1b06:	9c 83       	std	Y+4, r25	; 0x04
    1b08:	8b 83       	std	Y+3, r24	; 0x03
    1b0a:	21 c0       	rjmp	.+66     	; 0x1b4e <DrawPixel+0xf2>
	}
	else if (y >= 32 && y <= 39)
    1b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0e:	80 32       	cpi	r24, 0x20	; 32
    1b10:	70 f0       	brcs	.+28     	; 0x1b2e <DrawPixel+0xd2>
    1b12:	8e 81       	ldd	r24, Y+6	; 0x06
    1b14:	88 32       	cpi	r24, 0x28	; 40
    1b16:	58 f4       	brcc	.+22     	; 0x1b2e <DrawPixel+0xd2>
	{
		baselineOffset = 84 * 4;
    1b18:	80 e5       	ldi	r24, 0x50	; 80
    1b1a:	91 e0       	ldi	r25, 0x01	; 1
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 4);
    1b20:	8e 81       	ldd	r24, Y+6	; 0x06
    1b22:	88 2f       	mov	r24, r24
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	80 97       	sbiw	r24, 0x20	; 32
    1b28:	9c 83       	std	Y+4, r25	; 0x04
    1b2a:	8b 83       	std	Y+3, r24	; 0x03
    1b2c:	10 c0       	rjmp	.+32     	; 0x1b4e <DrawPixel+0xf2>
	}
	else if (y >= 40 && y <= 47)
    1b2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b30:	88 32       	cpi	r24, 0x28	; 40
    1b32:	68 f0       	brcs	.+26     	; 0x1b4e <DrawPixel+0xf2>
    1b34:	8e 81       	ldd	r24, Y+6	; 0x06
    1b36:	80 33       	cpi	r24, 0x30	; 48
    1b38:	50 f4       	brcc	.+20     	; 0x1b4e <DrawPixel+0xf2>
	{
		baselineOffset = 84 * 5;
    1b3a:	84 ea       	ldi	r24, 0xA4	; 164
    1b3c:	91 e0       	ldi	r25, 0x01	; 1
    1b3e:	9a 83       	std	Y+2, r25	; 0x02
    1b40:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 5);
    1b42:	8e 81       	ldd	r24, Y+6	; 0x06
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	88 97       	sbiw	r24, 0x28	; 40
    1b4a:	9c 83       	std	Y+4, r25	; 0x04
    1b4c:	8b 83       	std	Y+3, r24	; 0x03
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	9a 81       	ldd	r25, Y+2	; 0x02
    1b58:	82 0f       	add	r24, r18
    1b5a:	93 1f       	adc	r25, r19
    1b5c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b5e:	38 85       	ldd	r19, Y+8	; 0x08
    1b60:	82 0f       	add	r24, r18
    1b62:	93 1f       	adc	r25, r19
    1b64:	2d 81       	ldd	r18, Y+5	; 0x05
    1b66:	42 2f       	mov	r20, r18
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	29 81       	ldd	r18, Y+1	; 0x01
    1b6c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b6e:	24 0f       	add	r18, r20
    1b70:	35 1f       	adc	r19, r21
    1b72:	4f 81       	ldd	r20, Y+7	; 0x07
    1b74:	58 85       	ldd	r21, Y+8	; 0x08
    1b76:	24 0f       	add	r18, r20
    1b78:	35 1f       	adc	r19, r21
    1b7a:	f9 01       	movw	r30, r18
    1b7c:	20 81       	ld	r18, Z
    1b7e:	42 2f       	mov	r20, r18
    1b80:	21 e0       	ldi	r18, 0x01	; 1
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	0b 80       	ldd	r0, Y+3	; 0x03
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <DrawPixel+0x130>
    1b88:	22 0f       	add	r18, r18
    1b8a:	33 1f       	adc	r19, r19
    1b8c:	0a 94       	dec	r0
    1b8e:	e2 f7       	brpl	.-8      	; 0x1b88 <DrawPixel+0x12c>
    1b90:	24 2b       	or	r18, r20
    1b92:	fc 01       	movw	r30, r24
    1b94:	20 83       	st	Z, r18
    1b96:	03 c0       	rjmp	.+6      	; 0x1b9e <DrawPixel+0x142>
}

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
	if (x < 0 || x > 83)
		return;
    1b98:	00 00       	nop
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <DrawPixel+0x142>

	if (y < 0 || y > 47)
		return;
    1b9c:	00 00       	nop
		baselineOffset = 84 * 5;
		verticalBitOffset = y - (8 * 5);
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
}
    1b9e:	28 96       	adiw	r28, 0x08	; 8
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret

00001bb0 <DrawDot>:

 void DrawDot(unsigned char x, unsigned char y, unsigned char* world)
 {
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <DrawDot+0x6>
    1bb6:	1f 92       	push	r1
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	6a 83       	std	Y+2, r22	; 0x02
    1bc0:	5c 83       	std	Y+4, r21	; 0x04
    1bc2:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	ac 01       	movw	r20, r24
    1bca:	6a 81       	ldd	r22, Y+2	; 0x02
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	46 df       	rcall	.-372    	; 0x1a5c <DrawPixel>
	DrawPixel(x + 1, y, world);
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	21 e0       	ldi	r18, 0x01	; 1
    1bd4:	28 0f       	add	r18, r24
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	ac 01       	movw	r20, r24
    1bdc:	6a 81       	ldd	r22, Y+2	; 0x02
    1bde:	82 2f       	mov	r24, r18
    1be0:	3d df       	rcall	.-390    	; 0x1a5c <DrawPixel>
	DrawPixel(x, y + 1, world);
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	21 e0       	ldi	r18, 0x01	; 1
    1be6:	28 0f       	add	r18, r24
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	9c 81       	ldd	r25, Y+4	; 0x04
    1bec:	ac 01       	movw	r20, r24
    1bee:	62 2f       	mov	r22, r18
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	34 df       	rcall	.-408    	; 0x1a5c <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	31 e0       	ldi	r19, 0x01	; 1
    1bf8:	38 0f       	add	r19, r24
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	21 e0       	ldi	r18, 0x01	; 1
    1bfe:	28 0f       	add	r18, r24
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	9c 81       	ldd	r25, Y+4	; 0x04
    1c04:	ac 01       	movw	r20, r24
    1c06:	63 2f       	mov	r22, r19
    1c08:	82 2f       	mov	r24, r18
    1c0a:	28 df       	rcall	.-432    	; 0x1a5c <DrawPixel>
 }
    1c0c:	00 00       	nop
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	08 95       	ret

00001c1c <DrawFood>:
 
 void DrawFood(unsigned char x, unsigned char y, unsigned char* world)
 {
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <DrawFood+0x6>
    1c22:	1f 92       	push	r1
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	6a 83       	std	Y+2, r22	; 0x02
    1c2c:	5c 83       	std	Y+4, r21	; 0x04
    1c2e:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	ac 01       	movw	r20, r24
    1c36:	6a 81       	ldd	r22, Y+2	; 0x02
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	10 df       	rcall	.-480    	; 0x1a5c <DrawPixel>
	DrawPixel(x + 2, y, world);
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	22 e0       	ldi	r18, 0x02	; 2
    1c40:	28 0f       	add	r18, r24
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	ac 01       	movw	r20, r24
    1c48:	6a 81       	ldd	r22, Y+2	; 0x02
    1c4a:	82 2f       	mov	r24, r18
    1c4c:	07 df       	rcall	.-498    	; 0x1a5c <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	31 e0       	ldi	r19, 0x01	; 1
    1c52:	38 0f       	add	r19, r24
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	21 e0       	ldi	r18, 0x01	; 1
    1c58:	28 0f       	add	r18, r24
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	ac 01       	movw	r20, r24
    1c60:	63 2f       	mov	r22, r19
    1c62:	82 2f       	mov	r24, r18
    1c64:	fb de       	rcall	.-522    	; 0x1a5c <DrawPixel>
	DrawPixel(x + 1, y - 1, world);
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	38 0f       	add	r19, r24
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	21 e0       	ldi	r18, 0x01	; 1
    1c70:	28 0f       	add	r18, r24
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	ac 01       	movw	r20, r24
    1c78:	63 2f       	mov	r22, r19
    1c7a:	82 2f       	mov	r24, r18
    1c7c:	ef de       	rcall	.-546    	; 0x1a5c <DrawPixel>
 }
    1c7e:	00 00       	nop
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	08 95       	ret

00001c8e <RenderWorld>:

 void RenderWorld(unsigned char* world)
 {
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <RenderWorld+0x6>
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <RenderWorld+0x8>
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
	for (int x = 0; x < 504; x++)
    1c9e:	1a 82       	std	Y+2, r1	; 0x02
    1ca0:	19 82       	std	Y+1, r1	; 0x01
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <RenderWorld+0x32>
	{
		sendData(world[x]);
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca8:	2d 81       	ldd	r18, Y+5	; 0x05
    1caa:	3e 81       	ldd	r19, Y+6	; 0x06
    1cac:	82 0f       	add	r24, r18
    1cae:	93 1f       	adc	r25, r19
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	80 81       	ld	r24, Z
    1cb4:	02 d9       	rcall	.-3580   	; 0xeba <sendData>
	DrawPixel(x + 1, y - 1, world);
 }

 void RenderWorld(unsigned char* world)
 {
	for (int x = 0; x < 504; x++)
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cba:	01 96       	adiw	r24, 0x01	; 1
    1cbc:	9a 83       	std	Y+2, r25	; 0x02
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	88 3f       	cpi	r24, 0xF8	; 248
    1cc6:	91 40       	sbci	r25, 0x01	; 1
    1cc8:	6c f3       	brlt	.-38     	; 0x1ca4 <RenderWorld+0x16>
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
    1cca:	1c 82       	std	Y+4, r1	; 0x04
    1ccc:	1b 82       	std	Y+3, r1	; 0x03
    1cce:	0d c0       	rjmp	.+26     	; 0x1cea <RenderWorld+0x5c>
	{
		world[x] = 0x00;
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd4:	2d 81       	ldd	r18, Y+5	; 0x05
    1cd6:	3e 81       	ldd	r19, Y+6	; 0x06
    1cd8:	82 0f       	add	r24, r18
    1cda:	93 1f       	adc	r25, r19
    1cdc:	fc 01       	movw	r30, r24
    1cde:	10 82       	st	Z, r1
	for (int x = 0; x < 504; x++)
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
    1ce8:	8b 83       	std	Y+3, r24	; 0x03
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	88 3f       	cpi	r24, 0xF8	; 248
    1cf0:	91 40       	sbci	r25, 0x01	; 1
    1cf2:	74 f3       	brlt	.-36     	; 0x1cd0 <RenderWorld+0x42>
	{
		world[x] = 0x00;
	}
    1cf4:	00 00       	nop
    1cf6:	26 96       	adiw	r28, 0x06	; 6
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	de bf       	out	0x3e, r29	; 62
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	cd bf       	out	0x3d, r28	; 61
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	08 95       	ret

00001d08 <__cmpsf2>:
    1d08:	6c d0       	rcall	.+216    	; 0x1de2 <__fp_cmp>
    1d0a:	08 f4       	brcc	.+2      	; 0x1d0e <__cmpsf2+0x6>
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	08 95       	ret

00001d10 <__fixunssfsi>:
    1d10:	94 d0       	rcall	.+296    	; 0x1e3a <__fp_splitA>
    1d12:	88 f0       	brcs	.+34     	; 0x1d36 <__fixunssfsi+0x26>
    1d14:	9f 57       	subi	r25, 0x7F	; 127
    1d16:	90 f0       	brcs	.+36     	; 0x1d3c <__fixunssfsi+0x2c>
    1d18:	b9 2f       	mov	r27, r25
    1d1a:	99 27       	eor	r25, r25
    1d1c:	b7 51       	subi	r27, 0x17	; 23
    1d1e:	a0 f0       	brcs	.+40     	; 0x1d48 <__fixunssfsi+0x38>
    1d20:	d1 f0       	breq	.+52     	; 0x1d56 <__fixunssfsi+0x46>
    1d22:	66 0f       	add	r22, r22
    1d24:	77 1f       	adc	r23, r23
    1d26:	88 1f       	adc	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	1a f0       	brmi	.+6      	; 0x1d32 <__fixunssfsi+0x22>
    1d2c:	ba 95       	dec	r27
    1d2e:	c9 f7       	brne	.-14     	; 0x1d22 <__fixunssfsi+0x12>
    1d30:	12 c0       	rjmp	.+36     	; 0x1d56 <__fixunssfsi+0x46>
    1d32:	b1 30       	cpi	r27, 0x01	; 1
    1d34:	81 f0       	breq	.+32     	; 0x1d56 <__fixunssfsi+0x46>
    1d36:	9b d0       	rcall	.+310    	; 0x1e6e <__fp_zero>
    1d38:	b1 e0       	ldi	r27, 0x01	; 1
    1d3a:	08 95       	ret
    1d3c:	98 c0       	rjmp	.+304    	; 0x1e6e <__fp_zero>
    1d3e:	67 2f       	mov	r22, r23
    1d40:	78 2f       	mov	r23, r24
    1d42:	88 27       	eor	r24, r24
    1d44:	b8 5f       	subi	r27, 0xF8	; 248
    1d46:	39 f0       	breq	.+14     	; 0x1d56 <__fixunssfsi+0x46>
    1d48:	b9 3f       	cpi	r27, 0xF9	; 249
    1d4a:	cc f3       	brlt	.-14     	; 0x1d3e <__fixunssfsi+0x2e>
    1d4c:	86 95       	lsr	r24
    1d4e:	77 95       	ror	r23
    1d50:	67 95       	ror	r22
    1d52:	b3 95       	inc	r27
    1d54:	d9 f7       	brne	.-10     	; 0x1d4c <__fixunssfsi+0x3c>
    1d56:	3e f4       	brtc	.+14     	; 0x1d66 <__fixunssfsi+0x56>
    1d58:	90 95       	com	r25
    1d5a:	80 95       	com	r24
    1d5c:	70 95       	com	r23
    1d5e:	61 95       	neg	r22
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	8f 4f       	sbci	r24, 0xFF	; 255
    1d64:	9f 4f       	sbci	r25, 0xFF	; 255
    1d66:	08 95       	ret

00001d68 <__floatunsisf>:
    1d68:	e8 94       	clt
    1d6a:	09 c0       	rjmp	.+18     	; 0x1d7e <__floatsisf+0x12>

00001d6c <__floatsisf>:
    1d6c:	97 fb       	bst	r25, 7
    1d6e:	3e f4       	brtc	.+14     	; 0x1d7e <__floatsisf+0x12>
    1d70:	90 95       	com	r25
    1d72:	80 95       	com	r24
    1d74:	70 95       	com	r23
    1d76:	61 95       	neg	r22
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7e:	99 23       	and	r25, r25
    1d80:	a9 f0       	breq	.+42     	; 0x1dac <__floatsisf+0x40>
    1d82:	f9 2f       	mov	r31, r25
    1d84:	96 e9       	ldi	r25, 0x96	; 150
    1d86:	bb 27       	eor	r27, r27
    1d88:	93 95       	inc	r25
    1d8a:	f6 95       	lsr	r31
    1d8c:	87 95       	ror	r24
    1d8e:	77 95       	ror	r23
    1d90:	67 95       	ror	r22
    1d92:	b7 95       	ror	r27
    1d94:	f1 11       	cpse	r31, r1
    1d96:	f8 cf       	rjmp	.-16     	; 0x1d88 <__floatsisf+0x1c>
    1d98:	fa f4       	brpl	.+62     	; 0x1dd8 <__floatsisf+0x6c>
    1d9a:	bb 0f       	add	r27, r27
    1d9c:	11 f4       	brne	.+4      	; 0x1da2 <__floatsisf+0x36>
    1d9e:	60 ff       	sbrs	r22, 0
    1da0:	1b c0       	rjmp	.+54     	; 0x1dd8 <__floatsisf+0x6c>
    1da2:	6f 5f       	subi	r22, 0xFF	; 255
    1da4:	7f 4f       	sbci	r23, 0xFF	; 255
    1da6:	8f 4f       	sbci	r24, 0xFF	; 255
    1da8:	9f 4f       	sbci	r25, 0xFF	; 255
    1daa:	16 c0       	rjmp	.+44     	; 0x1dd8 <__floatsisf+0x6c>
    1dac:	88 23       	and	r24, r24
    1dae:	11 f0       	breq	.+4      	; 0x1db4 <__floatsisf+0x48>
    1db0:	96 e9       	ldi	r25, 0x96	; 150
    1db2:	11 c0       	rjmp	.+34     	; 0x1dd6 <__floatsisf+0x6a>
    1db4:	77 23       	and	r23, r23
    1db6:	21 f0       	breq	.+8      	; 0x1dc0 <__floatsisf+0x54>
    1db8:	9e e8       	ldi	r25, 0x8E	; 142
    1dba:	87 2f       	mov	r24, r23
    1dbc:	76 2f       	mov	r23, r22
    1dbe:	05 c0       	rjmp	.+10     	; 0x1dca <__floatsisf+0x5e>
    1dc0:	66 23       	and	r22, r22
    1dc2:	71 f0       	breq	.+28     	; 0x1de0 <__floatsisf+0x74>
    1dc4:	96 e8       	ldi	r25, 0x86	; 134
    1dc6:	86 2f       	mov	r24, r22
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	2a f0       	brmi	.+10     	; 0x1dd8 <__floatsisf+0x6c>
    1dce:	9a 95       	dec	r25
    1dd0:	66 0f       	add	r22, r22
    1dd2:	77 1f       	adc	r23, r23
    1dd4:	88 1f       	adc	r24, r24
    1dd6:	da f7       	brpl	.-10     	; 0x1dce <__floatsisf+0x62>
    1dd8:	88 0f       	add	r24, r24
    1dda:	96 95       	lsr	r25
    1ddc:	87 95       	ror	r24
    1dde:	97 f9       	bld	r25, 7
    1de0:	08 95       	ret

00001de2 <__fp_cmp>:
    1de2:	99 0f       	add	r25, r25
    1de4:	00 08       	sbc	r0, r0
    1de6:	55 0f       	add	r21, r21
    1de8:	aa 0b       	sbc	r26, r26
    1dea:	e0 e8       	ldi	r30, 0x80	; 128
    1dec:	fe ef       	ldi	r31, 0xFE	; 254
    1dee:	16 16       	cp	r1, r22
    1df0:	17 06       	cpc	r1, r23
    1df2:	e8 07       	cpc	r30, r24
    1df4:	f9 07       	cpc	r31, r25
    1df6:	c0 f0       	brcs	.+48     	; 0x1e28 <__fp_cmp+0x46>
    1df8:	12 16       	cp	r1, r18
    1dfa:	13 06       	cpc	r1, r19
    1dfc:	e4 07       	cpc	r30, r20
    1dfe:	f5 07       	cpc	r31, r21
    1e00:	98 f0       	brcs	.+38     	; 0x1e28 <__fp_cmp+0x46>
    1e02:	62 1b       	sub	r22, r18
    1e04:	73 0b       	sbc	r23, r19
    1e06:	84 0b       	sbc	r24, r20
    1e08:	95 0b       	sbc	r25, r21
    1e0a:	39 f4       	brne	.+14     	; 0x1e1a <__fp_cmp+0x38>
    1e0c:	0a 26       	eor	r0, r26
    1e0e:	61 f0       	breq	.+24     	; 0x1e28 <__fp_cmp+0x46>
    1e10:	23 2b       	or	r18, r19
    1e12:	24 2b       	or	r18, r20
    1e14:	25 2b       	or	r18, r21
    1e16:	21 f4       	brne	.+8      	; 0x1e20 <__fp_cmp+0x3e>
    1e18:	08 95       	ret
    1e1a:	0a 26       	eor	r0, r26
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <__fp_cmp+0x3e>
    1e1e:	a1 40       	sbci	r26, 0x01	; 1
    1e20:	a6 95       	lsr	r26
    1e22:	8f ef       	ldi	r24, 0xFF	; 255
    1e24:	81 1d       	adc	r24, r1
    1e26:	81 1d       	adc	r24, r1
    1e28:	08 95       	ret

00001e2a <__fp_split3>:
    1e2a:	57 fd       	sbrc	r21, 7
    1e2c:	90 58       	subi	r25, 0x80	; 128
    1e2e:	44 0f       	add	r20, r20
    1e30:	55 1f       	adc	r21, r21
    1e32:	59 f0       	breq	.+22     	; 0x1e4a <__fp_splitA+0x10>
    1e34:	5f 3f       	cpi	r21, 0xFF	; 255
    1e36:	71 f0       	breq	.+28     	; 0x1e54 <__fp_splitA+0x1a>
    1e38:	47 95       	ror	r20

00001e3a <__fp_splitA>:
    1e3a:	88 0f       	add	r24, r24
    1e3c:	97 fb       	bst	r25, 7
    1e3e:	99 1f       	adc	r25, r25
    1e40:	61 f0       	breq	.+24     	; 0x1e5a <__fp_splitA+0x20>
    1e42:	9f 3f       	cpi	r25, 0xFF	; 255
    1e44:	79 f0       	breq	.+30     	; 0x1e64 <__fp_splitA+0x2a>
    1e46:	87 95       	ror	r24
    1e48:	08 95       	ret
    1e4a:	12 16       	cp	r1, r18
    1e4c:	13 06       	cpc	r1, r19
    1e4e:	14 06       	cpc	r1, r20
    1e50:	55 1f       	adc	r21, r21
    1e52:	f2 cf       	rjmp	.-28     	; 0x1e38 <__fp_split3+0xe>
    1e54:	46 95       	lsr	r20
    1e56:	f1 df       	rcall	.-30     	; 0x1e3a <__fp_splitA>
    1e58:	08 c0       	rjmp	.+16     	; 0x1e6a <__fp_splitA+0x30>
    1e5a:	16 16       	cp	r1, r22
    1e5c:	17 06       	cpc	r1, r23
    1e5e:	18 06       	cpc	r1, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	f1 cf       	rjmp	.-30     	; 0x1e46 <__fp_splitA+0xc>
    1e64:	86 95       	lsr	r24
    1e66:	71 05       	cpc	r23, r1
    1e68:	61 05       	cpc	r22, r1
    1e6a:	08 94       	sec
    1e6c:	08 95       	ret

00001e6e <__fp_zero>:
    1e6e:	e8 94       	clt

00001e70 <__fp_szero>:
    1e70:	bb 27       	eor	r27, r27
    1e72:	66 27       	eor	r22, r22
    1e74:	77 27       	eor	r23, r23
    1e76:	cb 01       	movw	r24, r22
    1e78:	97 f9       	bld	r25, 7
    1e7a:	08 95       	ret

00001e7c <__gesf2>:
    1e7c:	b2 df       	rcall	.-156    	; 0x1de2 <__fp_cmp>
    1e7e:	08 f4       	brcc	.+2      	; 0x1e82 <__gesf2+0x6>
    1e80:	8f ef       	ldi	r24, 0xFF	; 255
    1e82:	08 95       	ret

00001e84 <__mulsf3>:
    1e84:	0b d0       	rcall	.+22     	; 0x1e9c <__mulsf3x>
    1e86:	78 c0       	rjmp	.+240    	; 0x1f78 <__fp_round>
    1e88:	69 d0       	rcall	.+210    	; 0x1f5c <__fp_pscA>
    1e8a:	28 f0       	brcs	.+10     	; 0x1e96 <__mulsf3+0x12>
    1e8c:	6e d0       	rcall	.+220    	; 0x1f6a <__fp_pscB>
    1e8e:	18 f0       	brcs	.+6      	; 0x1e96 <__mulsf3+0x12>
    1e90:	95 23       	and	r25, r21
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <__mulsf3+0x12>
    1e94:	5a c0       	rjmp	.+180    	; 0x1f4a <__fp_inf>
    1e96:	5f c0       	rjmp	.+190    	; 0x1f56 <__fp_nan>
    1e98:	11 24       	eor	r1, r1
    1e9a:	ea cf       	rjmp	.-44     	; 0x1e70 <__fp_szero>

00001e9c <__mulsf3x>:
    1e9c:	c6 df       	rcall	.-116    	; 0x1e2a <__fp_split3>
    1e9e:	a0 f3       	brcs	.-24     	; 0x1e88 <__mulsf3+0x4>

00001ea0 <__mulsf3_pse>:
    1ea0:	95 9f       	mul	r25, r21
    1ea2:	d1 f3       	breq	.-12     	; 0x1e98 <__mulsf3+0x14>
    1ea4:	95 0f       	add	r25, r21
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	55 1f       	adc	r21, r21
    1eaa:	62 9f       	mul	r22, r18
    1eac:	f0 01       	movw	r30, r0
    1eae:	72 9f       	mul	r23, r18
    1eb0:	bb 27       	eor	r27, r27
    1eb2:	f0 0d       	add	r31, r0
    1eb4:	b1 1d       	adc	r27, r1
    1eb6:	63 9f       	mul	r22, r19
    1eb8:	aa 27       	eor	r26, r26
    1eba:	f0 0d       	add	r31, r0
    1ebc:	b1 1d       	adc	r27, r1
    1ebe:	aa 1f       	adc	r26, r26
    1ec0:	64 9f       	mul	r22, r20
    1ec2:	66 27       	eor	r22, r22
    1ec4:	b0 0d       	add	r27, r0
    1ec6:	a1 1d       	adc	r26, r1
    1ec8:	66 1f       	adc	r22, r22
    1eca:	82 9f       	mul	r24, r18
    1ecc:	22 27       	eor	r18, r18
    1ece:	b0 0d       	add	r27, r0
    1ed0:	a1 1d       	adc	r26, r1
    1ed2:	62 1f       	adc	r22, r18
    1ed4:	73 9f       	mul	r23, r19
    1ed6:	b0 0d       	add	r27, r0
    1ed8:	a1 1d       	adc	r26, r1
    1eda:	62 1f       	adc	r22, r18
    1edc:	83 9f       	mul	r24, r19
    1ede:	a0 0d       	add	r26, r0
    1ee0:	61 1d       	adc	r22, r1
    1ee2:	22 1f       	adc	r18, r18
    1ee4:	74 9f       	mul	r23, r20
    1ee6:	33 27       	eor	r19, r19
    1ee8:	a0 0d       	add	r26, r0
    1eea:	61 1d       	adc	r22, r1
    1eec:	23 1f       	adc	r18, r19
    1eee:	84 9f       	mul	r24, r20
    1ef0:	60 0d       	add	r22, r0
    1ef2:	21 1d       	adc	r18, r1
    1ef4:	82 2f       	mov	r24, r18
    1ef6:	76 2f       	mov	r23, r22
    1ef8:	6a 2f       	mov	r22, r26
    1efa:	11 24       	eor	r1, r1
    1efc:	9f 57       	subi	r25, 0x7F	; 127
    1efe:	50 40       	sbci	r21, 0x00	; 0
    1f00:	8a f0       	brmi	.+34     	; 0x1f24 <__mulsf3_pse+0x84>
    1f02:	e1 f0       	breq	.+56     	; 0x1f3c <__mulsf3_pse+0x9c>
    1f04:	88 23       	and	r24, r24
    1f06:	4a f0       	brmi	.+18     	; 0x1f1a <__mulsf3_pse+0x7a>
    1f08:	ee 0f       	add	r30, r30
    1f0a:	ff 1f       	adc	r31, r31
    1f0c:	bb 1f       	adc	r27, r27
    1f0e:	66 1f       	adc	r22, r22
    1f10:	77 1f       	adc	r23, r23
    1f12:	88 1f       	adc	r24, r24
    1f14:	91 50       	subi	r25, 0x01	; 1
    1f16:	50 40       	sbci	r21, 0x00	; 0
    1f18:	a9 f7       	brne	.-22     	; 0x1f04 <__mulsf3_pse+0x64>
    1f1a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f1c:	51 05       	cpc	r21, r1
    1f1e:	70 f0       	brcs	.+28     	; 0x1f3c <__mulsf3_pse+0x9c>
    1f20:	14 c0       	rjmp	.+40     	; 0x1f4a <__fp_inf>
    1f22:	a6 cf       	rjmp	.-180    	; 0x1e70 <__fp_szero>
    1f24:	5f 3f       	cpi	r21, 0xFF	; 255
    1f26:	ec f3       	brlt	.-6      	; 0x1f22 <__mulsf3_pse+0x82>
    1f28:	98 3e       	cpi	r25, 0xE8	; 232
    1f2a:	dc f3       	brlt	.-10     	; 0x1f22 <__mulsf3_pse+0x82>
    1f2c:	86 95       	lsr	r24
    1f2e:	77 95       	ror	r23
    1f30:	67 95       	ror	r22
    1f32:	b7 95       	ror	r27
    1f34:	f7 95       	ror	r31
    1f36:	e7 95       	ror	r30
    1f38:	9f 5f       	subi	r25, 0xFF	; 255
    1f3a:	c1 f7       	brne	.-16     	; 0x1f2c <__mulsf3_pse+0x8c>
    1f3c:	fe 2b       	or	r31, r30
    1f3e:	88 0f       	add	r24, r24
    1f40:	91 1d       	adc	r25, r1
    1f42:	96 95       	lsr	r25
    1f44:	87 95       	ror	r24
    1f46:	97 f9       	bld	r25, 7
    1f48:	08 95       	ret

00001f4a <__fp_inf>:
    1f4a:	97 f9       	bld	r25, 7
    1f4c:	9f 67       	ori	r25, 0x7F	; 127
    1f4e:	80 e8       	ldi	r24, 0x80	; 128
    1f50:	70 e0       	ldi	r23, 0x00	; 0
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	08 95       	ret

00001f56 <__fp_nan>:
    1f56:	9f ef       	ldi	r25, 0xFF	; 255
    1f58:	80 ec       	ldi	r24, 0xC0	; 192
    1f5a:	08 95       	ret

00001f5c <__fp_pscA>:
    1f5c:	00 24       	eor	r0, r0
    1f5e:	0a 94       	dec	r0
    1f60:	16 16       	cp	r1, r22
    1f62:	17 06       	cpc	r1, r23
    1f64:	18 06       	cpc	r1, r24
    1f66:	09 06       	cpc	r0, r25
    1f68:	08 95       	ret

00001f6a <__fp_pscB>:
    1f6a:	00 24       	eor	r0, r0
    1f6c:	0a 94       	dec	r0
    1f6e:	12 16       	cp	r1, r18
    1f70:	13 06       	cpc	r1, r19
    1f72:	14 06       	cpc	r1, r20
    1f74:	05 06       	cpc	r0, r21
    1f76:	08 95       	ret

00001f78 <__fp_round>:
    1f78:	09 2e       	mov	r0, r25
    1f7a:	03 94       	inc	r0
    1f7c:	00 0c       	add	r0, r0
    1f7e:	11 f4       	brne	.+4      	; 0x1f84 <__fp_round+0xc>
    1f80:	88 23       	and	r24, r24
    1f82:	52 f0       	brmi	.+20     	; 0x1f98 <__fp_round+0x20>
    1f84:	bb 0f       	add	r27, r27
    1f86:	40 f4       	brcc	.+16     	; 0x1f98 <__fp_round+0x20>
    1f88:	bf 2b       	or	r27, r31
    1f8a:	11 f4       	brne	.+4      	; 0x1f90 <__fp_round+0x18>
    1f8c:	60 ff       	sbrs	r22, 0
    1f8e:	04 c0       	rjmp	.+8      	; 0x1f98 <__fp_round+0x20>
    1f90:	6f 5f       	subi	r22, 0xFF	; 255
    1f92:	7f 4f       	sbci	r23, 0xFF	; 255
    1f94:	8f 4f       	sbci	r24, 0xFF	; 255
    1f96:	9f 4f       	sbci	r25, 0xFF	; 255
    1f98:	08 95       	ret

00001f9a <__divmodhi4>:
    1f9a:	97 fb       	bst	r25, 7
    1f9c:	07 2e       	mov	r0, r23
    1f9e:	16 f4       	brtc	.+4      	; 0x1fa4 <__divmodhi4+0xa>
    1fa0:	00 94       	com	r0
    1fa2:	06 d0       	rcall	.+12     	; 0x1fb0 <__divmodhi4_neg1>
    1fa4:	77 fd       	sbrc	r23, 7
    1fa6:	08 d0       	rcall	.+16     	; 0x1fb8 <__divmodhi4_neg2>
    1fa8:	0b d0       	rcall	.+22     	; 0x1fc0 <__udivmodhi4>
    1faa:	07 fc       	sbrc	r0, 7
    1fac:	05 d0       	rcall	.+10     	; 0x1fb8 <__divmodhi4_neg2>
    1fae:	3e f4       	brtc	.+14     	; 0x1fbe <__divmodhi4_exit>

00001fb0 <__divmodhi4_neg1>:
    1fb0:	90 95       	com	r25
    1fb2:	81 95       	neg	r24
    1fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb6:	08 95       	ret

00001fb8 <__divmodhi4_neg2>:
    1fb8:	70 95       	com	r23
    1fba:	61 95       	neg	r22
    1fbc:	7f 4f       	sbci	r23, 0xFF	; 255

00001fbe <__divmodhi4_exit>:
    1fbe:	08 95       	ret

00001fc0 <__udivmodhi4>:
    1fc0:	aa 1b       	sub	r26, r26
    1fc2:	bb 1b       	sub	r27, r27
    1fc4:	51 e1       	ldi	r21, 0x11	; 17
    1fc6:	07 c0       	rjmp	.+14     	; 0x1fd6 <__udivmodhi4_ep>

00001fc8 <__udivmodhi4_loop>:
    1fc8:	aa 1f       	adc	r26, r26
    1fca:	bb 1f       	adc	r27, r27
    1fcc:	a6 17       	cp	r26, r22
    1fce:	b7 07       	cpc	r27, r23
    1fd0:	10 f0       	brcs	.+4      	; 0x1fd6 <__udivmodhi4_ep>
    1fd2:	a6 1b       	sub	r26, r22
    1fd4:	b7 0b       	sbc	r27, r23

00001fd6 <__udivmodhi4_ep>:
    1fd6:	88 1f       	adc	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	5a 95       	dec	r21
    1fdc:	a9 f7       	brne	.-22     	; 0x1fc8 <__udivmodhi4_loop>
    1fde:	80 95       	com	r24
    1fe0:	90 95       	com	r25
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	08 95       	ret

00001fe8 <do_rand>:
    1fe8:	8f 92       	push	r8
    1fea:	9f 92       	push	r9
    1fec:	af 92       	push	r10
    1fee:	bf 92       	push	r11
    1ff0:	cf 92       	push	r12
    1ff2:	df 92       	push	r13
    1ff4:	ef 92       	push	r14
    1ff6:	ff 92       	push	r15
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	ec 01       	movw	r28, r24
    1ffe:	68 81       	ld	r22, Y
    2000:	79 81       	ldd	r23, Y+1	; 0x01
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	9b 81       	ldd	r25, Y+3	; 0x03
    2006:	61 15       	cp	r22, r1
    2008:	71 05       	cpc	r23, r1
    200a:	81 05       	cpc	r24, r1
    200c:	91 05       	cpc	r25, r1
    200e:	21 f4       	brne	.+8      	; 0x2018 <do_rand+0x30>
    2010:	64 e2       	ldi	r22, 0x24	; 36
    2012:	79 ed       	ldi	r23, 0xD9	; 217
    2014:	8b e5       	ldi	r24, 0x5B	; 91
    2016:	97 e0       	ldi	r25, 0x07	; 7
    2018:	2d e1       	ldi	r18, 0x1D	; 29
    201a:	33 ef       	ldi	r19, 0xF3	; 243
    201c:	41 e0       	ldi	r20, 0x01	; 1
    201e:	50 e0       	ldi	r21, 0x00	; 0
    2020:	1a d3       	rcall	.+1588   	; 0x2656 <__divmodsi4>
    2022:	49 01       	movw	r8, r18
    2024:	5a 01       	movw	r10, r20
    2026:	9b 01       	movw	r18, r22
    2028:	ac 01       	movw	r20, r24
    202a:	a7 ea       	ldi	r26, 0xA7	; 167
    202c:	b1 e4       	ldi	r27, 0x41	; 65
    202e:	2f d3       	rcall	.+1630   	; 0x268e <__muluhisi3>
    2030:	6b 01       	movw	r12, r22
    2032:	7c 01       	movw	r14, r24
    2034:	ac ee       	ldi	r26, 0xEC	; 236
    2036:	b4 ef       	ldi	r27, 0xF4	; 244
    2038:	a5 01       	movw	r20, r10
    203a:	94 01       	movw	r18, r8
    203c:	34 d3       	rcall	.+1640   	; 0x26a6 <__mulohisi3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	8c 0d       	add	r24, r12
    2044:	9d 1d       	adc	r25, r13
    2046:	ae 1d       	adc	r26, r14
    2048:	bf 1d       	adc	r27, r15
    204a:	b7 ff       	sbrs	r27, 7
    204c:	03 c0       	rjmp	.+6      	; 0x2054 <do_rand+0x6c>
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	a1 09       	sbc	r26, r1
    2052:	b0 48       	sbci	r27, 0x80	; 128
    2054:	88 83       	st	Y, r24
    2056:	99 83       	std	Y+1, r25	; 0x01
    2058:	aa 83       	std	Y+2, r26	; 0x02
    205a:	bb 83       	std	Y+3, r27	; 0x03
    205c:	9f 77       	andi	r25, 0x7F	; 127
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	ff 90       	pop	r15
    2064:	ef 90       	pop	r14
    2066:	df 90       	pop	r13
    2068:	cf 90       	pop	r12
    206a:	bf 90       	pop	r11
    206c:	af 90       	pop	r10
    206e:	9f 90       	pop	r9
    2070:	8f 90       	pop	r8
    2072:	08 95       	ret

00002074 <rand_r>:
    2074:	b9 cf       	rjmp	.-142    	; 0x1fe8 <do_rand>

00002076 <rand>:
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	92 e0       	ldi	r25, 0x02	; 2
    207a:	b6 cf       	rjmp	.-148    	; 0x1fe8 <do_rand>

0000207c <srand>:
    207c:	a0 e0       	ldi	r26, 0x00	; 0
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    2084:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    2088:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    208c:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    2090:	08 95       	ret

00002092 <memset>:
    2092:	dc 01       	movw	r26, r24
    2094:	01 c0       	rjmp	.+2      	; 0x2098 <memset+0x6>
    2096:	6d 93       	st	X+, r22
    2098:	41 50       	subi	r20, 0x01	; 1
    209a:	50 40       	sbci	r21, 0x00	; 0
    209c:	e0 f7       	brcc	.-8      	; 0x2096 <memset+0x4>
    209e:	08 95       	ret

000020a0 <sprintf>:
    20a0:	0f 93       	push	r16
    20a2:	1f 93       	push	r17
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	2e 97       	sbiw	r28, 0x0e	; 14
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	0e 89       	ldd	r16, Y+22	; 0x16
    20ba:	1f 89       	ldd	r17, Y+23	; 0x17
    20bc:	86 e0       	ldi	r24, 0x06	; 6
    20be:	8c 83       	std	Y+4, r24	; 0x04
    20c0:	1a 83       	std	Y+2, r17	; 0x02
    20c2:	09 83       	std	Y+1, r16	; 0x01
    20c4:	8f ef       	ldi	r24, 0xFF	; 255
    20c6:	9f e7       	ldi	r25, 0x7F	; 127
    20c8:	9e 83       	std	Y+6, r25	; 0x06
    20ca:	8d 83       	std	Y+5, r24	; 0x05
    20cc:	ae 01       	movw	r20, r28
    20ce:	46 5e       	subi	r20, 0xE6	; 230
    20d0:	5f 4f       	sbci	r21, 0xFF	; 255
    20d2:	68 8d       	ldd	r22, Y+24	; 0x18
    20d4:	79 8d       	ldd	r23, Y+25	; 0x19
    20d6:	ce 01       	movw	r24, r28
    20d8:	01 96       	adiw	r24, 0x01	; 1
    20da:	10 d0       	rcall	.+32     	; 0x20fc <vfprintf>
    20dc:	ef 81       	ldd	r30, Y+7	; 0x07
    20de:	f8 85       	ldd	r31, Y+8	; 0x08
    20e0:	e0 0f       	add	r30, r16
    20e2:	f1 1f       	adc	r31, r17
    20e4:	10 82       	st	Z, r1
    20e6:	2e 96       	adiw	r28, 0x0e	; 14
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	1f 91       	pop	r17
    20f8:	0f 91       	pop	r16
    20fa:	08 95       	ret

000020fc <vfprintf>:
    20fc:	2f 92       	push	r2
    20fe:	3f 92       	push	r3
    2100:	4f 92       	push	r4
    2102:	5f 92       	push	r5
    2104:	6f 92       	push	r6
    2106:	7f 92       	push	r7
    2108:	8f 92       	push	r8
    210a:	9f 92       	push	r9
    210c:	af 92       	push	r10
    210e:	bf 92       	push	r11
    2110:	cf 92       	push	r12
    2112:	df 92       	push	r13
    2114:	ef 92       	push	r14
    2116:	ff 92       	push	r15
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	2b 97       	sbiw	r28, 0x0b	; 11
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	6c 01       	movw	r12, r24
    2132:	7b 01       	movw	r14, r22
    2134:	8a 01       	movw	r16, r20
    2136:	fc 01       	movw	r30, r24
    2138:	17 82       	std	Z+7, r1	; 0x07
    213a:	16 82       	std	Z+6, r1	; 0x06
    213c:	83 81       	ldd	r24, Z+3	; 0x03
    213e:	81 ff       	sbrs	r24, 1
    2140:	bf c1       	rjmp	.+894    	; 0x24c0 <__stack+0x2c1>
    2142:	ce 01       	movw	r24, r28
    2144:	01 96       	adiw	r24, 0x01	; 1
    2146:	3c 01       	movw	r6, r24
    2148:	f6 01       	movw	r30, r12
    214a:	93 81       	ldd	r25, Z+3	; 0x03
    214c:	f7 01       	movw	r30, r14
    214e:	93 fd       	sbrc	r25, 3
    2150:	85 91       	lpm	r24, Z+
    2152:	93 ff       	sbrs	r25, 3
    2154:	81 91       	ld	r24, Z+
    2156:	7f 01       	movw	r14, r30
    2158:	88 23       	and	r24, r24
    215a:	09 f4       	brne	.+2      	; 0x215e <vfprintf+0x62>
    215c:	ad c1       	rjmp	.+858    	; 0x24b8 <__stack+0x2b9>
    215e:	85 32       	cpi	r24, 0x25	; 37
    2160:	39 f4       	brne	.+14     	; 0x2170 <vfprintf+0x74>
    2162:	93 fd       	sbrc	r25, 3
    2164:	85 91       	lpm	r24, Z+
    2166:	93 ff       	sbrs	r25, 3
    2168:	81 91       	ld	r24, Z+
    216a:	7f 01       	movw	r14, r30
    216c:	85 32       	cpi	r24, 0x25	; 37
    216e:	21 f4       	brne	.+8      	; 0x2178 <vfprintf+0x7c>
    2170:	b6 01       	movw	r22, r12
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	d6 d1       	rcall	.+940    	; 0x2522 <fputc>
    2176:	e8 cf       	rjmp	.-48     	; 0x2148 <vfprintf+0x4c>
    2178:	91 2c       	mov	r9, r1
    217a:	21 2c       	mov	r2, r1
    217c:	31 2c       	mov	r3, r1
    217e:	ff e1       	ldi	r31, 0x1F	; 31
    2180:	f3 15       	cp	r31, r3
    2182:	d8 f0       	brcs	.+54     	; 0x21ba <vfprintf+0xbe>
    2184:	8b 32       	cpi	r24, 0x2B	; 43
    2186:	79 f0       	breq	.+30     	; 0x21a6 <vfprintf+0xaa>
    2188:	38 f4       	brcc	.+14     	; 0x2198 <vfprintf+0x9c>
    218a:	80 32       	cpi	r24, 0x20	; 32
    218c:	79 f0       	breq	.+30     	; 0x21ac <vfprintf+0xb0>
    218e:	83 32       	cpi	r24, 0x23	; 35
    2190:	a1 f4       	brne	.+40     	; 0x21ba <vfprintf+0xbe>
    2192:	23 2d       	mov	r18, r3
    2194:	20 61       	ori	r18, 0x10	; 16
    2196:	1d c0       	rjmp	.+58     	; 0x21d2 <vfprintf+0xd6>
    2198:	8d 32       	cpi	r24, 0x2D	; 45
    219a:	61 f0       	breq	.+24     	; 0x21b4 <vfprintf+0xb8>
    219c:	80 33       	cpi	r24, 0x30	; 48
    219e:	69 f4       	brne	.+26     	; 0x21ba <vfprintf+0xbe>
    21a0:	23 2d       	mov	r18, r3
    21a2:	21 60       	ori	r18, 0x01	; 1
    21a4:	16 c0       	rjmp	.+44     	; 0x21d2 <vfprintf+0xd6>
    21a6:	83 2d       	mov	r24, r3
    21a8:	82 60       	ori	r24, 0x02	; 2
    21aa:	38 2e       	mov	r3, r24
    21ac:	e3 2d       	mov	r30, r3
    21ae:	e4 60       	ori	r30, 0x04	; 4
    21b0:	3e 2e       	mov	r3, r30
    21b2:	2a c0       	rjmp	.+84     	; 0x2208 <__stack+0x9>
    21b4:	f3 2d       	mov	r31, r3
    21b6:	f8 60       	ori	r31, 0x08	; 8
    21b8:	1d c0       	rjmp	.+58     	; 0x21f4 <vfprintf+0xf8>
    21ba:	37 fc       	sbrc	r3, 7
    21bc:	2d c0       	rjmp	.+90     	; 0x2218 <__stack+0x19>
    21be:	20 ed       	ldi	r18, 0xD0	; 208
    21c0:	28 0f       	add	r18, r24
    21c2:	2a 30       	cpi	r18, 0x0A	; 10
    21c4:	40 f0       	brcs	.+16     	; 0x21d6 <vfprintf+0xda>
    21c6:	8e 32       	cpi	r24, 0x2E	; 46
    21c8:	b9 f4       	brne	.+46     	; 0x21f8 <vfprintf+0xfc>
    21ca:	36 fc       	sbrc	r3, 6
    21cc:	75 c1       	rjmp	.+746    	; 0x24b8 <__stack+0x2b9>
    21ce:	23 2d       	mov	r18, r3
    21d0:	20 64       	ori	r18, 0x40	; 64
    21d2:	32 2e       	mov	r3, r18
    21d4:	19 c0       	rjmp	.+50     	; 0x2208 <__stack+0x9>
    21d6:	36 fe       	sbrs	r3, 6
    21d8:	06 c0       	rjmp	.+12     	; 0x21e6 <vfprintf+0xea>
    21da:	8a e0       	ldi	r24, 0x0A	; 10
    21dc:	98 9e       	mul	r9, r24
    21de:	20 0d       	add	r18, r0
    21e0:	11 24       	eor	r1, r1
    21e2:	92 2e       	mov	r9, r18
    21e4:	11 c0       	rjmp	.+34     	; 0x2208 <__stack+0x9>
    21e6:	ea e0       	ldi	r30, 0x0A	; 10
    21e8:	2e 9e       	mul	r2, r30
    21ea:	20 0d       	add	r18, r0
    21ec:	11 24       	eor	r1, r1
    21ee:	22 2e       	mov	r2, r18
    21f0:	f3 2d       	mov	r31, r3
    21f2:	f0 62       	ori	r31, 0x20	; 32
    21f4:	3f 2e       	mov	r3, r31
    21f6:	08 c0       	rjmp	.+16     	; 0x2208 <__stack+0x9>
    21f8:	8c 36       	cpi	r24, 0x6C	; 108
    21fa:	21 f4       	brne	.+8      	; 0x2204 <__stack+0x5>
    21fc:	83 2d       	mov	r24, r3
    21fe:	80 68       	ori	r24, 0x80	; 128
    2200:	38 2e       	mov	r3, r24
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <__stack+0x9>
    2204:	88 36       	cpi	r24, 0x68	; 104
    2206:	41 f4       	brne	.+16     	; 0x2218 <__stack+0x19>
    2208:	f7 01       	movw	r30, r14
    220a:	93 fd       	sbrc	r25, 3
    220c:	85 91       	lpm	r24, Z+
    220e:	93 ff       	sbrs	r25, 3
    2210:	81 91       	ld	r24, Z+
    2212:	7f 01       	movw	r14, r30
    2214:	81 11       	cpse	r24, r1
    2216:	b3 cf       	rjmp	.-154    	; 0x217e <vfprintf+0x82>
    2218:	98 2f       	mov	r25, r24
    221a:	9f 7d       	andi	r25, 0xDF	; 223
    221c:	95 54       	subi	r25, 0x45	; 69
    221e:	93 30       	cpi	r25, 0x03	; 3
    2220:	28 f4       	brcc	.+10     	; 0x222c <__stack+0x2d>
    2222:	0c 5f       	subi	r16, 0xFC	; 252
    2224:	1f 4f       	sbci	r17, 0xFF	; 255
    2226:	9f e3       	ldi	r25, 0x3F	; 63
    2228:	99 83       	std	Y+1, r25	; 0x01
    222a:	0d c0       	rjmp	.+26     	; 0x2246 <__stack+0x47>
    222c:	83 36       	cpi	r24, 0x63	; 99
    222e:	31 f0       	breq	.+12     	; 0x223c <__stack+0x3d>
    2230:	83 37       	cpi	r24, 0x73	; 115
    2232:	71 f0       	breq	.+28     	; 0x2250 <__stack+0x51>
    2234:	83 35       	cpi	r24, 0x53	; 83
    2236:	09 f0       	breq	.+2      	; 0x223a <__stack+0x3b>
    2238:	55 c0       	rjmp	.+170    	; 0x22e4 <__stack+0xe5>
    223a:	20 c0       	rjmp	.+64     	; 0x227c <__stack+0x7d>
    223c:	f8 01       	movw	r30, r16
    223e:	80 81       	ld	r24, Z
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	0e 5f       	subi	r16, 0xFE	; 254
    2244:	1f 4f       	sbci	r17, 0xFF	; 255
    2246:	88 24       	eor	r8, r8
    2248:	83 94       	inc	r8
    224a:	91 2c       	mov	r9, r1
    224c:	53 01       	movw	r10, r6
    224e:	12 c0       	rjmp	.+36     	; 0x2274 <__stack+0x75>
    2250:	28 01       	movw	r4, r16
    2252:	f2 e0       	ldi	r31, 0x02	; 2
    2254:	4f 0e       	add	r4, r31
    2256:	51 1c       	adc	r5, r1
    2258:	f8 01       	movw	r30, r16
    225a:	a0 80       	ld	r10, Z
    225c:	b1 80       	ldd	r11, Z+1	; 0x01
    225e:	36 fe       	sbrs	r3, 6
    2260:	03 c0       	rjmp	.+6      	; 0x2268 <__stack+0x69>
    2262:	69 2d       	mov	r22, r9
    2264:	70 e0       	ldi	r23, 0x00	; 0
    2266:	02 c0       	rjmp	.+4      	; 0x226c <__stack+0x6d>
    2268:	6f ef       	ldi	r22, 0xFF	; 255
    226a:	7f ef       	ldi	r23, 0xFF	; 255
    226c:	c5 01       	movw	r24, r10
    226e:	4e d1       	rcall	.+668    	; 0x250c <strnlen>
    2270:	4c 01       	movw	r8, r24
    2272:	82 01       	movw	r16, r4
    2274:	f3 2d       	mov	r31, r3
    2276:	ff 77       	andi	r31, 0x7F	; 127
    2278:	3f 2e       	mov	r3, r31
    227a:	15 c0       	rjmp	.+42     	; 0x22a6 <__stack+0xa7>
    227c:	28 01       	movw	r4, r16
    227e:	22 e0       	ldi	r18, 0x02	; 2
    2280:	42 0e       	add	r4, r18
    2282:	51 1c       	adc	r5, r1
    2284:	f8 01       	movw	r30, r16
    2286:	a0 80       	ld	r10, Z
    2288:	b1 80       	ldd	r11, Z+1	; 0x01
    228a:	36 fe       	sbrs	r3, 6
    228c:	03 c0       	rjmp	.+6      	; 0x2294 <__stack+0x95>
    228e:	69 2d       	mov	r22, r9
    2290:	70 e0       	ldi	r23, 0x00	; 0
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <__stack+0x99>
    2294:	6f ef       	ldi	r22, 0xFF	; 255
    2296:	7f ef       	ldi	r23, 0xFF	; 255
    2298:	c5 01       	movw	r24, r10
    229a:	2d d1       	rcall	.+602    	; 0x24f6 <strnlen_P>
    229c:	4c 01       	movw	r8, r24
    229e:	f3 2d       	mov	r31, r3
    22a0:	f0 68       	ori	r31, 0x80	; 128
    22a2:	3f 2e       	mov	r3, r31
    22a4:	82 01       	movw	r16, r4
    22a6:	33 fc       	sbrc	r3, 3
    22a8:	19 c0       	rjmp	.+50     	; 0x22dc <__stack+0xdd>
    22aa:	82 2d       	mov	r24, r2
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	88 16       	cp	r8, r24
    22b0:	99 06       	cpc	r9, r25
    22b2:	a0 f4       	brcc	.+40     	; 0x22dc <__stack+0xdd>
    22b4:	b6 01       	movw	r22, r12
    22b6:	80 e2       	ldi	r24, 0x20	; 32
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	33 d1       	rcall	.+614    	; 0x2522 <fputc>
    22bc:	2a 94       	dec	r2
    22be:	f5 cf       	rjmp	.-22     	; 0x22aa <__stack+0xab>
    22c0:	f5 01       	movw	r30, r10
    22c2:	37 fc       	sbrc	r3, 7
    22c4:	85 91       	lpm	r24, Z+
    22c6:	37 fe       	sbrs	r3, 7
    22c8:	81 91       	ld	r24, Z+
    22ca:	5f 01       	movw	r10, r30
    22cc:	b6 01       	movw	r22, r12
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	28 d1       	rcall	.+592    	; 0x2522 <fputc>
    22d2:	21 10       	cpse	r2, r1
    22d4:	2a 94       	dec	r2
    22d6:	21 e0       	ldi	r18, 0x01	; 1
    22d8:	82 1a       	sub	r8, r18
    22da:	91 08       	sbc	r9, r1
    22dc:	81 14       	cp	r8, r1
    22de:	91 04       	cpc	r9, r1
    22e0:	79 f7       	brne	.-34     	; 0x22c0 <__stack+0xc1>
    22e2:	e1 c0       	rjmp	.+450    	; 0x24a6 <__stack+0x2a7>
    22e4:	84 36       	cpi	r24, 0x64	; 100
    22e6:	11 f0       	breq	.+4      	; 0x22ec <__stack+0xed>
    22e8:	89 36       	cpi	r24, 0x69	; 105
    22ea:	39 f5       	brne	.+78     	; 0x233a <__stack+0x13b>
    22ec:	f8 01       	movw	r30, r16
    22ee:	37 fe       	sbrs	r3, 7
    22f0:	07 c0       	rjmp	.+14     	; 0x2300 <__stack+0x101>
    22f2:	60 81       	ld	r22, Z
    22f4:	71 81       	ldd	r23, Z+1	; 0x01
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	93 81       	ldd	r25, Z+3	; 0x03
    22fa:	0c 5f       	subi	r16, 0xFC	; 252
    22fc:	1f 4f       	sbci	r17, 0xFF	; 255
    22fe:	08 c0       	rjmp	.+16     	; 0x2310 <__stack+0x111>
    2300:	60 81       	ld	r22, Z
    2302:	71 81       	ldd	r23, Z+1	; 0x01
    2304:	07 2e       	mov	r0, r23
    2306:	00 0c       	add	r0, r0
    2308:	88 0b       	sbc	r24, r24
    230a:	99 0b       	sbc	r25, r25
    230c:	0e 5f       	subi	r16, 0xFE	; 254
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	f3 2d       	mov	r31, r3
    2312:	ff 76       	andi	r31, 0x6F	; 111
    2314:	3f 2e       	mov	r3, r31
    2316:	97 ff       	sbrs	r25, 7
    2318:	09 c0       	rjmp	.+18     	; 0x232c <__stack+0x12d>
    231a:	90 95       	com	r25
    231c:	80 95       	com	r24
    231e:	70 95       	com	r23
    2320:	61 95       	neg	r22
    2322:	7f 4f       	sbci	r23, 0xFF	; 255
    2324:	8f 4f       	sbci	r24, 0xFF	; 255
    2326:	9f 4f       	sbci	r25, 0xFF	; 255
    2328:	f0 68       	ori	r31, 0x80	; 128
    232a:	3f 2e       	mov	r3, r31
    232c:	2a e0       	ldi	r18, 0x0A	; 10
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	a3 01       	movw	r20, r6
    2332:	33 d1       	rcall	.+614    	; 0x259a <__ultoa_invert>
    2334:	88 2e       	mov	r8, r24
    2336:	86 18       	sub	r8, r6
    2338:	44 c0       	rjmp	.+136    	; 0x23c2 <__stack+0x1c3>
    233a:	85 37       	cpi	r24, 0x75	; 117
    233c:	31 f4       	brne	.+12     	; 0x234a <__stack+0x14b>
    233e:	23 2d       	mov	r18, r3
    2340:	2f 7e       	andi	r18, 0xEF	; 239
    2342:	b2 2e       	mov	r11, r18
    2344:	2a e0       	ldi	r18, 0x0A	; 10
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	25 c0       	rjmp	.+74     	; 0x2394 <__stack+0x195>
    234a:	93 2d       	mov	r25, r3
    234c:	99 7f       	andi	r25, 0xF9	; 249
    234e:	b9 2e       	mov	r11, r25
    2350:	8f 36       	cpi	r24, 0x6F	; 111
    2352:	c1 f0       	breq	.+48     	; 0x2384 <__stack+0x185>
    2354:	18 f4       	brcc	.+6      	; 0x235c <__stack+0x15d>
    2356:	88 35       	cpi	r24, 0x58	; 88
    2358:	79 f0       	breq	.+30     	; 0x2378 <__stack+0x179>
    235a:	ae c0       	rjmp	.+348    	; 0x24b8 <__stack+0x2b9>
    235c:	80 37       	cpi	r24, 0x70	; 112
    235e:	19 f0       	breq	.+6      	; 0x2366 <__stack+0x167>
    2360:	88 37       	cpi	r24, 0x78	; 120
    2362:	21 f0       	breq	.+8      	; 0x236c <__stack+0x16d>
    2364:	a9 c0       	rjmp	.+338    	; 0x24b8 <__stack+0x2b9>
    2366:	e9 2f       	mov	r30, r25
    2368:	e0 61       	ori	r30, 0x10	; 16
    236a:	be 2e       	mov	r11, r30
    236c:	b4 fe       	sbrs	r11, 4
    236e:	0d c0       	rjmp	.+26     	; 0x238a <__stack+0x18b>
    2370:	fb 2d       	mov	r31, r11
    2372:	f4 60       	ori	r31, 0x04	; 4
    2374:	bf 2e       	mov	r11, r31
    2376:	09 c0       	rjmp	.+18     	; 0x238a <__stack+0x18b>
    2378:	34 fe       	sbrs	r3, 4
    237a:	0a c0       	rjmp	.+20     	; 0x2390 <__stack+0x191>
    237c:	29 2f       	mov	r18, r25
    237e:	26 60       	ori	r18, 0x06	; 6
    2380:	b2 2e       	mov	r11, r18
    2382:	06 c0       	rjmp	.+12     	; 0x2390 <__stack+0x191>
    2384:	28 e0       	ldi	r18, 0x08	; 8
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	05 c0       	rjmp	.+10     	; 0x2394 <__stack+0x195>
    238a:	20 e1       	ldi	r18, 0x10	; 16
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <__stack+0x195>
    2390:	20 e1       	ldi	r18, 0x10	; 16
    2392:	32 e0       	ldi	r19, 0x02	; 2
    2394:	f8 01       	movw	r30, r16
    2396:	b7 fe       	sbrs	r11, 7
    2398:	07 c0       	rjmp	.+14     	; 0x23a8 <__stack+0x1a9>
    239a:	60 81       	ld	r22, Z
    239c:	71 81       	ldd	r23, Z+1	; 0x01
    239e:	82 81       	ldd	r24, Z+2	; 0x02
    23a0:	93 81       	ldd	r25, Z+3	; 0x03
    23a2:	0c 5f       	subi	r16, 0xFC	; 252
    23a4:	1f 4f       	sbci	r17, 0xFF	; 255
    23a6:	06 c0       	rjmp	.+12     	; 0x23b4 <__stack+0x1b5>
    23a8:	60 81       	ld	r22, Z
    23aa:	71 81       	ldd	r23, Z+1	; 0x01
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	0e 5f       	subi	r16, 0xFE	; 254
    23b2:	1f 4f       	sbci	r17, 0xFF	; 255
    23b4:	a3 01       	movw	r20, r6
    23b6:	f1 d0       	rcall	.+482    	; 0x259a <__ultoa_invert>
    23b8:	88 2e       	mov	r8, r24
    23ba:	86 18       	sub	r8, r6
    23bc:	fb 2d       	mov	r31, r11
    23be:	ff 77       	andi	r31, 0x7F	; 127
    23c0:	3f 2e       	mov	r3, r31
    23c2:	36 fe       	sbrs	r3, 6
    23c4:	0d c0       	rjmp	.+26     	; 0x23e0 <__stack+0x1e1>
    23c6:	23 2d       	mov	r18, r3
    23c8:	2e 7f       	andi	r18, 0xFE	; 254
    23ca:	a2 2e       	mov	r10, r18
    23cc:	89 14       	cp	r8, r9
    23ce:	58 f4       	brcc	.+22     	; 0x23e6 <__stack+0x1e7>
    23d0:	34 fe       	sbrs	r3, 4
    23d2:	0b c0       	rjmp	.+22     	; 0x23ea <__stack+0x1eb>
    23d4:	32 fc       	sbrc	r3, 2
    23d6:	09 c0       	rjmp	.+18     	; 0x23ea <__stack+0x1eb>
    23d8:	83 2d       	mov	r24, r3
    23da:	8e 7e       	andi	r24, 0xEE	; 238
    23dc:	a8 2e       	mov	r10, r24
    23de:	05 c0       	rjmp	.+10     	; 0x23ea <__stack+0x1eb>
    23e0:	b8 2c       	mov	r11, r8
    23e2:	a3 2c       	mov	r10, r3
    23e4:	03 c0       	rjmp	.+6      	; 0x23ec <__stack+0x1ed>
    23e6:	b8 2c       	mov	r11, r8
    23e8:	01 c0       	rjmp	.+2      	; 0x23ec <__stack+0x1ed>
    23ea:	b9 2c       	mov	r11, r9
    23ec:	a4 fe       	sbrs	r10, 4
    23ee:	0f c0       	rjmp	.+30     	; 0x240e <__stack+0x20f>
    23f0:	fe 01       	movw	r30, r28
    23f2:	e8 0d       	add	r30, r8
    23f4:	f1 1d       	adc	r31, r1
    23f6:	80 81       	ld	r24, Z
    23f8:	80 33       	cpi	r24, 0x30	; 48
    23fa:	21 f4       	brne	.+8      	; 0x2404 <__stack+0x205>
    23fc:	9a 2d       	mov	r25, r10
    23fe:	99 7e       	andi	r25, 0xE9	; 233
    2400:	a9 2e       	mov	r10, r25
    2402:	09 c0       	rjmp	.+18     	; 0x2416 <__stack+0x217>
    2404:	a2 fe       	sbrs	r10, 2
    2406:	06 c0       	rjmp	.+12     	; 0x2414 <__stack+0x215>
    2408:	b3 94       	inc	r11
    240a:	b3 94       	inc	r11
    240c:	04 c0       	rjmp	.+8      	; 0x2416 <__stack+0x217>
    240e:	8a 2d       	mov	r24, r10
    2410:	86 78       	andi	r24, 0x86	; 134
    2412:	09 f0       	breq	.+2      	; 0x2416 <__stack+0x217>
    2414:	b3 94       	inc	r11
    2416:	a3 fc       	sbrc	r10, 3
    2418:	10 c0       	rjmp	.+32     	; 0x243a <__stack+0x23b>
    241a:	a0 fe       	sbrs	r10, 0
    241c:	06 c0       	rjmp	.+12     	; 0x242a <__stack+0x22b>
    241e:	b2 14       	cp	r11, r2
    2420:	80 f4       	brcc	.+32     	; 0x2442 <__stack+0x243>
    2422:	28 0c       	add	r2, r8
    2424:	92 2c       	mov	r9, r2
    2426:	9b 18       	sub	r9, r11
    2428:	0d c0       	rjmp	.+26     	; 0x2444 <__stack+0x245>
    242a:	b2 14       	cp	r11, r2
    242c:	58 f4       	brcc	.+22     	; 0x2444 <__stack+0x245>
    242e:	b6 01       	movw	r22, r12
    2430:	80 e2       	ldi	r24, 0x20	; 32
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	76 d0       	rcall	.+236    	; 0x2522 <fputc>
    2436:	b3 94       	inc	r11
    2438:	f8 cf       	rjmp	.-16     	; 0x242a <__stack+0x22b>
    243a:	b2 14       	cp	r11, r2
    243c:	18 f4       	brcc	.+6      	; 0x2444 <__stack+0x245>
    243e:	2b 18       	sub	r2, r11
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <__stack+0x247>
    2442:	98 2c       	mov	r9, r8
    2444:	21 2c       	mov	r2, r1
    2446:	a4 fe       	sbrs	r10, 4
    2448:	0f c0       	rjmp	.+30     	; 0x2468 <__stack+0x269>
    244a:	b6 01       	movw	r22, r12
    244c:	80 e3       	ldi	r24, 0x30	; 48
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	68 d0       	rcall	.+208    	; 0x2522 <fputc>
    2452:	a2 fe       	sbrs	r10, 2
    2454:	16 c0       	rjmp	.+44     	; 0x2482 <__stack+0x283>
    2456:	a1 fc       	sbrc	r10, 1
    2458:	03 c0       	rjmp	.+6      	; 0x2460 <__stack+0x261>
    245a:	88 e7       	ldi	r24, 0x78	; 120
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <__stack+0x265>
    2460:	88 e5       	ldi	r24, 0x58	; 88
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	b6 01       	movw	r22, r12
    2466:	0c c0       	rjmp	.+24     	; 0x2480 <__stack+0x281>
    2468:	8a 2d       	mov	r24, r10
    246a:	86 78       	andi	r24, 0x86	; 134
    246c:	51 f0       	breq	.+20     	; 0x2482 <__stack+0x283>
    246e:	a1 fe       	sbrs	r10, 1
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <__stack+0x277>
    2472:	8b e2       	ldi	r24, 0x2B	; 43
    2474:	01 c0       	rjmp	.+2      	; 0x2478 <__stack+0x279>
    2476:	80 e2       	ldi	r24, 0x20	; 32
    2478:	a7 fc       	sbrc	r10, 7
    247a:	8d e2       	ldi	r24, 0x2D	; 45
    247c:	b6 01       	movw	r22, r12
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	50 d0       	rcall	.+160    	; 0x2522 <fputc>
    2482:	89 14       	cp	r8, r9
    2484:	30 f4       	brcc	.+12     	; 0x2492 <__stack+0x293>
    2486:	b6 01       	movw	r22, r12
    2488:	80 e3       	ldi	r24, 0x30	; 48
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	4a d0       	rcall	.+148    	; 0x2522 <fputc>
    248e:	9a 94       	dec	r9
    2490:	f8 cf       	rjmp	.-16     	; 0x2482 <__stack+0x283>
    2492:	8a 94       	dec	r8
    2494:	f3 01       	movw	r30, r6
    2496:	e8 0d       	add	r30, r8
    2498:	f1 1d       	adc	r31, r1
    249a:	80 81       	ld	r24, Z
    249c:	b6 01       	movw	r22, r12
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	40 d0       	rcall	.+128    	; 0x2522 <fputc>
    24a2:	81 10       	cpse	r8, r1
    24a4:	f6 cf       	rjmp	.-20     	; 0x2492 <__stack+0x293>
    24a6:	22 20       	and	r2, r2
    24a8:	09 f4       	brne	.+2      	; 0x24ac <__stack+0x2ad>
    24aa:	4e ce       	rjmp	.-868    	; 0x2148 <vfprintf+0x4c>
    24ac:	b6 01       	movw	r22, r12
    24ae:	80 e2       	ldi	r24, 0x20	; 32
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	37 d0       	rcall	.+110    	; 0x2522 <fputc>
    24b4:	2a 94       	dec	r2
    24b6:	f7 cf       	rjmp	.-18     	; 0x24a6 <__stack+0x2a7>
    24b8:	f6 01       	movw	r30, r12
    24ba:	86 81       	ldd	r24, Z+6	; 0x06
    24bc:	97 81       	ldd	r25, Z+7	; 0x07
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <__stack+0x2c5>
    24c0:	8f ef       	ldi	r24, 0xFF	; 255
    24c2:	9f ef       	ldi	r25, 0xFF	; 255
    24c4:	2b 96       	adiw	r28, 0x0b	; 11
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	1f 91       	pop	r17
    24d6:	0f 91       	pop	r16
    24d8:	ff 90       	pop	r15
    24da:	ef 90       	pop	r14
    24dc:	df 90       	pop	r13
    24de:	cf 90       	pop	r12
    24e0:	bf 90       	pop	r11
    24e2:	af 90       	pop	r10
    24e4:	9f 90       	pop	r9
    24e6:	8f 90       	pop	r8
    24e8:	7f 90       	pop	r7
    24ea:	6f 90       	pop	r6
    24ec:	5f 90       	pop	r5
    24ee:	4f 90       	pop	r4
    24f0:	3f 90       	pop	r3
    24f2:	2f 90       	pop	r2
    24f4:	08 95       	ret

000024f6 <strnlen_P>:
    24f6:	fc 01       	movw	r30, r24
    24f8:	05 90       	lpm	r0, Z+
    24fa:	61 50       	subi	r22, 0x01	; 1
    24fc:	70 40       	sbci	r23, 0x00	; 0
    24fe:	01 10       	cpse	r0, r1
    2500:	d8 f7       	brcc	.-10     	; 0x24f8 <strnlen_P+0x2>
    2502:	80 95       	com	r24
    2504:	90 95       	com	r25
    2506:	8e 0f       	add	r24, r30
    2508:	9f 1f       	adc	r25, r31
    250a:	08 95       	ret

0000250c <strnlen>:
    250c:	fc 01       	movw	r30, r24
    250e:	61 50       	subi	r22, 0x01	; 1
    2510:	70 40       	sbci	r23, 0x00	; 0
    2512:	01 90       	ld	r0, Z+
    2514:	01 10       	cpse	r0, r1
    2516:	d8 f7       	brcc	.-10     	; 0x250e <strnlen+0x2>
    2518:	80 95       	com	r24
    251a:	90 95       	com	r25
    251c:	8e 0f       	add	r24, r30
    251e:	9f 1f       	adc	r25, r31
    2520:	08 95       	ret

00002522 <fputc>:
    2522:	0f 93       	push	r16
    2524:	1f 93       	push	r17
    2526:	cf 93       	push	r28
    2528:	df 93       	push	r29
    252a:	fb 01       	movw	r30, r22
    252c:	23 81       	ldd	r18, Z+3	; 0x03
    252e:	21 fd       	sbrc	r18, 1
    2530:	03 c0       	rjmp	.+6      	; 0x2538 <fputc+0x16>
    2532:	8f ef       	ldi	r24, 0xFF	; 255
    2534:	9f ef       	ldi	r25, 0xFF	; 255
    2536:	2c c0       	rjmp	.+88     	; 0x2590 <fputc+0x6e>
    2538:	22 ff       	sbrs	r18, 2
    253a:	16 c0       	rjmp	.+44     	; 0x2568 <fputc+0x46>
    253c:	46 81       	ldd	r20, Z+6	; 0x06
    253e:	57 81       	ldd	r21, Z+7	; 0x07
    2540:	24 81       	ldd	r18, Z+4	; 0x04
    2542:	35 81       	ldd	r19, Z+5	; 0x05
    2544:	42 17       	cp	r20, r18
    2546:	53 07       	cpc	r21, r19
    2548:	44 f4       	brge	.+16     	; 0x255a <fputc+0x38>
    254a:	a0 81       	ld	r26, Z
    254c:	b1 81       	ldd	r27, Z+1	; 0x01
    254e:	9d 01       	movw	r18, r26
    2550:	2f 5f       	subi	r18, 0xFF	; 255
    2552:	3f 4f       	sbci	r19, 0xFF	; 255
    2554:	31 83       	std	Z+1, r19	; 0x01
    2556:	20 83       	st	Z, r18
    2558:	8c 93       	st	X, r24
    255a:	26 81       	ldd	r18, Z+6	; 0x06
    255c:	37 81       	ldd	r19, Z+7	; 0x07
    255e:	2f 5f       	subi	r18, 0xFF	; 255
    2560:	3f 4f       	sbci	r19, 0xFF	; 255
    2562:	37 83       	std	Z+7, r19	; 0x07
    2564:	26 83       	std	Z+6, r18	; 0x06
    2566:	14 c0       	rjmp	.+40     	; 0x2590 <fputc+0x6e>
    2568:	8b 01       	movw	r16, r22
    256a:	ec 01       	movw	r28, r24
    256c:	fb 01       	movw	r30, r22
    256e:	00 84       	ldd	r0, Z+8	; 0x08
    2570:	f1 85       	ldd	r31, Z+9	; 0x09
    2572:	e0 2d       	mov	r30, r0
    2574:	19 95       	eicall
    2576:	89 2b       	or	r24, r25
    2578:	e1 f6       	brne	.-72     	; 0x2532 <fputc+0x10>
    257a:	d8 01       	movw	r26, r16
    257c:	16 96       	adiw	r26, 0x06	; 6
    257e:	8d 91       	ld	r24, X+
    2580:	9c 91       	ld	r25, X
    2582:	17 97       	sbiw	r26, 0x07	; 7
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	17 96       	adiw	r26, 0x07	; 7
    2588:	9c 93       	st	X, r25
    258a:	8e 93       	st	-X, r24
    258c:	16 97       	sbiw	r26, 0x06	; 6
    258e:	ce 01       	movw	r24, r28
    2590:	df 91       	pop	r29
    2592:	cf 91       	pop	r28
    2594:	1f 91       	pop	r17
    2596:	0f 91       	pop	r16
    2598:	08 95       	ret

0000259a <__ultoa_invert>:
    259a:	fa 01       	movw	r30, r20
    259c:	aa 27       	eor	r26, r26
    259e:	28 30       	cpi	r18, 0x08	; 8
    25a0:	51 f1       	breq	.+84     	; 0x25f6 <__ultoa_invert+0x5c>
    25a2:	20 31       	cpi	r18, 0x10	; 16
    25a4:	81 f1       	breq	.+96     	; 0x2606 <__ultoa_invert+0x6c>
    25a6:	e8 94       	clt
    25a8:	6f 93       	push	r22
    25aa:	6e 7f       	andi	r22, 0xFE	; 254
    25ac:	6e 5f       	subi	r22, 0xFE	; 254
    25ae:	7f 4f       	sbci	r23, 0xFF	; 255
    25b0:	8f 4f       	sbci	r24, 0xFF	; 255
    25b2:	9f 4f       	sbci	r25, 0xFF	; 255
    25b4:	af 4f       	sbci	r26, 0xFF	; 255
    25b6:	b1 e0       	ldi	r27, 0x01	; 1
    25b8:	3e d0       	rcall	.+124    	; 0x2636 <__ultoa_invert+0x9c>
    25ba:	b4 e0       	ldi	r27, 0x04	; 4
    25bc:	3c d0       	rcall	.+120    	; 0x2636 <__ultoa_invert+0x9c>
    25be:	67 0f       	add	r22, r23
    25c0:	78 1f       	adc	r23, r24
    25c2:	89 1f       	adc	r24, r25
    25c4:	9a 1f       	adc	r25, r26
    25c6:	a1 1d       	adc	r26, r1
    25c8:	68 0f       	add	r22, r24
    25ca:	79 1f       	adc	r23, r25
    25cc:	8a 1f       	adc	r24, r26
    25ce:	91 1d       	adc	r25, r1
    25d0:	a1 1d       	adc	r26, r1
    25d2:	6a 0f       	add	r22, r26
    25d4:	71 1d       	adc	r23, r1
    25d6:	81 1d       	adc	r24, r1
    25d8:	91 1d       	adc	r25, r1
    25da:	a1 1d       	adc	r26, r1
    25dc:	20 d0       	rcall	.+64     	; 0x261e <__ultoa_invert+0x84>
    25de:	09 f4       	brne	.+2      	; 0x25e2 <__ultoa_invert+0x48>
    25e0:	68 94       	set
    25e2:	3f 91       	pop	r19
    25e4:	2a e0       	ldi	r18, 0x0A	; 10
    25e6:	26 9f       	mul	r18, r22
    25e8:	11 24       	eor	r1, r1
    25ea:	30 19       	sub	r19, r0
    25ec:	30 5d       	subi	r19, 0xD0	; 208
    25ee:	31 93       	st	Z+, r19
    25f0:	de f6       	brtc	.-74     	; 0x25a8 <__ultoa_invert+0xe>
    25f2:	cf 01       	movw	r24, r30
    25f4:	08 95       	ret
    25f6:	46 2f       	mov	r20, r22
    25f8:	47 70       	andi	r20, 0x07	; 7
    25fa:	40 5d       	subi	r20, 0xD0	; 208
    25fc:	41 93       	st	Z+, r20
    25fe:	b3 e0       	ldi	r27, 0x03	; 3
    2600:	0f d0       	rcall	.+30     	; 0x2620 <__ultoa_invert+0x86>
    2602:	c9 f7       	brne	.-14     	; 0x25f6 <__ultoa_invert+0x5c>
    2604:	f6 cf       	rjmp	.-20     	; 0x25f2 <__ultoa_invert+0x58>
    2606:	46 2f       	mov	r20, r22
    2608:	4f 70       	andi	r20, 0x0F	; 15
    260a:	40 5d       	subi	r20, 0xD0	; 208
    260c:	4a 33       	cpi	r20, 0x3A	; 58
    260e:	18 f0       	brcs	.+6      	; 0x2616 <__ultoa_invert+0x7c>
    2610:	49 5d       	subi	r20, 0xD9	; 217
    2612:	31 fd       	sbrc	r19, 1
    2614:	40 52       	subi	r20, 0x20	; 32
    2616:	41 93       	st	Z+, r20
    2618:	02 d0       	rcall	.+4      	; 0x261e <__ultoa_invert+0x84>
    261a:	a9 f7       	brne	.-22     	; 0x2606 <__ultoa_invert+0x6c>
    261c:	ea cf       	rjmp	.-44     	; 0x25f2 <__ultoa_invert+0x58>
    261e:	b4 e0       	ldi	r27, 0x04	; 4
    2620:	a6 95       	lsr	r26
    2622:	97 95       	ror	r25
    2624:	87 95       	ror	r24
    2626:	77 95       	ror	r23
    2628:	67 95       	ror	r22
    262a:	ba 95       	dec	r27
    262c:	c9 f7       	brne	.-14     	; 0x2620 <__ultoa_invert+0x86>
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	61 05       	cpc	r22, r1
    2632:	71 05       	cpc	r23, r1
    2634:	08 95       	ret
    2636:	9b 01       	movw	r18, r22
    2638:	ac 01       	movw	r20, r24
    263a:	0a 2e       	mov	r0, r26
    263c:	06 94       	lsr	r0
    263e:	57 95       	ror	r21
    2640:	47 95       	ror	r20
    2642:	37 95       	ror	r19
    2644:	27 95       	ror	r18
    2646:	ba 95       	dec	r27
    2648:	c9 f7       	brne	.-14     	; 0x263c <__ultoa_invert+0xa2>
    264a:	62 0f       	add	r22, r18
    264c:	73 1f       	adc	r23, r19
    264e:	84 1f       	adc	r24, r20
    2650:	95 1f       	adc	r25, r21
    2652:	a0 1d       	adc	r26, r0
    2654:	08 95       	ret

00002656 <__divmodsi4>:
    2656:	05 2e       	mov	r0, r21
    2658:	97 fb       	bst	r25, 7
    265a:	16 f4       	brtc	.+4      	; 0x2660 <__divmodsi4+0xa>
    265c:	00 94       	com	r0
    265e:	0f d0       	rcall	.+30     	; 0x267e <__negsi2>
    2660:	57 fd       	sbrc	r21, 7
    2662:	05 d0       	rcall	.+10     	; 0x266e <__divmodsi4_neg2>
    2664:	24 d0       	rcall	.+72     	; 0x26ae <__udivmodsi4>
    2666:	07 fc       	sbrc	r0, 7
    2668:	02 d0       	rcall	.+4      	; 0x266e <__divmodsi4_neg2>
    266a:	46 f4       	brtc	.+16     	; 0x267c <__divmodsi4_exit>
    266c:	08 c0       	rjmp	.+16     	; 0x267e <__negsi2>

0000266e <__divmodsi4_neg2>:
    266e:	50 95       	com	r21
    2670:	40 95       	com	r20
    2672:	30 95       	com	r19
    2674:	21 95       	neg	r18
    2676:	3f 4f       	sbci	r19, 0xFF	; 255
    2678:	4f 4f       	sbci	r20, 0xFF	; 255
    267a:	5f 4f       	sbci	r21, 0xFF	; 255

0000267c <__divmodsi4_exit>:
    267c:	08 95       	ret

0000267e <__negsi2>:
    267e:	90 95       	com	r25
    2680:	80 95       	com	r24
    2682:	70 95       	com	r23
    2684:	61 95       	neg	r22
    2686:	7f 4f       	sbci	r23, 0xFF	; 255
    2688:	8f 4f       	sbci	r24, 0xFF	; 255
    268a:	9f 4f       	sbci	r25, 0xFF	; 255
    268c:	08 95       	ret

0000268e <__muluhisi3>:
    268e:	31 d0       	rcall	.+98     	; 0x26f2 <__umulhisi3>
    2690:	a5 9f       	mul	r26, r21
    2692:	90 0d       	add	r25, r0
    2694:	b4 9f       	mul	r27, r20
    2696:	90 0d       	add	r25, r0
    2698:	a4 9f       	mul	r26, r20
    269a:	80 0d       	add	r24, r0
    269c:	91 1d       	adc	r25, r1
    269e:	11 24       	eor	r1, r1
    26a0:	08 95       	ret

000026a2 <__mulshisi3>:
    26a2:	b7 ff       	sbrs	r27, 7
    26a4:	f4 cf       	rjmp	.-24     	; 0x268e <__muluhisi3>

000026a6 <__mulohisi3>:
    26a6:	f3 df       	rcall	.-26     	; 0x268e <__muluhisi3>
    26a8:	82 1b       	sub	r24, r18
    26aa:	93 0b       	sbc	r25, r19
    26ac:	08 95       	ret

000026ae <__udivmodsi4>:
    26ae:	a1 e2       	ldi	r26, 0x21	; 33
    26b0:	1a 2e       	mov	r1, r26
    26b2:	aa 1b       	sub	r26, r26
    26b4:	bb 1b       	sub	r27, r27
    26b6:	fd 01       	movw	r30, r26
    26b8:	0d c0       	rjmp	.+26     	; 0x26d4 <__udivmodsi4_ep>

000026ba <__udivmodsi4_loop>:
    26ba:	aa 1f       	adc	r26, r26
    26bc:	bb 1f       	adc	r27, r27
    26be:	ee 1f       	adc	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	a2 17       	cp	r26, r18
    26c4:	b3 07       	cpc	r27, r19
    26c6:	e4 07       	cpc	r30, r20
    26c8:	f5 07       	cpc	r31, r21
    26ca:	20 f0       	brcs	.+8      	; 0x26d4 <__udivmodsi4_ep>
    26cc:	a2 1b       	sub	r26, r18
    26ce:	b3 0b       	sbc	r27, r19
    26d0:	e4 0b       	sbc	r30, r20
    26d2:	f5 0b       	sbc	r31, r21

000026d4 <__udivmodsi4_ep>:
    26d4:	66 1f       	adc	r22, r22
    26d6:	77 1f       	adc	r23, r23
    26d8:	88 1f       	adc	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	1a 94       	dec	r1
    26de:	69 f7       	brne	.-38     	; 0x26ba <__udivmodsi4_loop>
    26e0:	60 95       	com	r22
    26e2:	70 95       	com	r23
    26e4:	80 95       	com	r24
    26e6:	90 95       	com	r25
    26e8:	9b 01       	movw	r18, r22
    26ea:	ac 01       	movw	r20, r24
    26ec:	bd 01       	movw	r22, r26
    26ee:	cf 01       	movw	r24, r30
    26f0:	08 95       	ret

000026f2 <__umulhisi3>:
    26f2:	a2 9f       	mul	r26, r18
    26f4:	b0 01       	movw	r22, r0
    26f6:	b3 9f       	mul	r27, r19
    26f8:	c0 01       	movw	r24, r0
    26fa:	a3 9f       	mul	r26, r19
    26fc:	70 0d       	add	r23, r0
    26fe:	81 1d       	adc	r24, r1
    2700:	11 24       	eor	r1, r1
    2702:	91 1d       	adc	r25, r1
    2704:	b2 9f       	mul	r27, r18
    2706:	70 0d       	add	r23, r0
    2708:	81 1d       	adc	r24, r1
    270a:	11 24       	eor	r1, r1
    270c:	91 1d       	adc	r25, r1
    270e:	08 95       	ret

00002710 <_exit>:
    2710:	f8 94       	cli

00002712 <__stop_program>:
    2712:	ff cf       	rjmp	.-2      	; 0x2712 <__stop_program>
