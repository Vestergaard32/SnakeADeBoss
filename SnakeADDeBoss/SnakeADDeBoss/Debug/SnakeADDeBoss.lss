
SnakeADDeBoss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000384  00800200  000026c0  00002774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .flashwriter  00000100  0003f000  0003f000  00002af8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000026c0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          000005f5  00800584  00800584  00002bf8  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00002bf8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c54  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001c0  00000000  00000000  00002c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001d52  00000000  00000000  00002e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000126e  00000000  00000000  00004ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001340  00000000  00000000  00005e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004a0  00000000  00000000  00007154  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ac6  00000000  00000000  000075f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000873  00000000  00000000  000080ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  0000892d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .flashwriter:

0003f000 <FlashWrite>:
#define PAGE_SIZE_BYTES 256


__attribute__((section (".flashwriter")))
void FlashWrite(unsigned char* dataptr)
{
   3f000:	cf 93       	push	r28
   3f002:	df 93       	push	r29
   3f004:	1f 92       	push	r1
   3f006:	1f 92       	push	r1
   3f008:	cd b7       	in	r28, 0x3d	; 61
   3f00a:	de b7       	in	r29, 0x3e	; 62
   3f00c:	9a 83       	std	Y+2, r25	; 0x02
   3f00e:	89 83       	std	Y+1, r24	; 0x01
	boot_page_erase(PAGE_NUMBER * PAGE_SIZE_BYTES);
   3f010:	23 e0       	ldi	r18, 0x03	; 3
   3f012:	80 e0       	ldi	r24, 0x00	; 0
   3f014:	9e ed       	ldi	r25, 0xDE	; 222
   3f016:	af ef       	ldi	r26, 0xFF	; 255
   3f018:	bf ef       	ldi	r27, 0xFF	; 255
   3f01a:	fc 01       	movw	r30, r24
   3f01c:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3f020:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f024:	e8 95       	spm
	boot_spm_busy_wait();
   3f026:	87 e5       	ldi	r24, 0x57	; 87
   3f028:	90 e0       	ldi	r25, 0x00	; 0
   3f02a:	fc 01       	movw	r30, r24
   3f02c:	80 81       	ld	r24, Z
   3f02e:	88 2f       	mov	r24, r24
   3f030:	90 e0       	ldi	r25, 0x00	; 0
   3f032:	81 70       	andi	r24, 0x01	; 1
   3f034:	99 27       	eor	r25, r25
   3f036:	89 2b       	or	r24, r25
   3f038:	b1 f7       	brne	.-20     	; 0x3f026 <FlashWrite+0x26>
	
	boot_page_fill(0, dataptr[0]);
   3f03a:	89 81       	ldd	r24, Y+1	; 0x01
   3f03c:	9a 81       	ldd	r25, Y+2	; 0x02
   3f03e:	fc 01       	movw	r30, r24
   3f040:	80 81       	ld	r24, Z
   3f042:	28 2f       	mov	r18, r24
   3f044:	30 e0       	ldi	r19, 0x00	; 0
   3f046:	41 e0       	ldi	r20, 0x01	; 1
   3f048:	80 e0       	ldi	r24, 0x00	; 0
   3f04a:	90 e0       	ldi	r25, 0x00	; 0
   3f04c:	dc 01       	movw	r26, r24
   3f04e:	09 01       	movw	r0, r18
   3f050:	fc 01       	movw	r30, r24
   3f052:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3f056:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f05a:	e8 95       	spm
   3f05c:	11 24       	eor	r1, r1
	boot_page_fill(2, dataptr[1]);
   3f05e:	89 81       	ldd	r24, Y+1	; 0x01
   3f060:	9a 81       	ldd	r25, Y+2	; 0x02
   3f062:	01 96       	adiw	r24, 0x01	; 1
   3f064:	fc 01       	movw	r30, r24
   3f066:	80 81       	ld	r24, Z
   3f068:	28 2f       	mov	r18, r24
   3f06a:	30 e0       	ldi	r19, 0x00	; 0
   3f06c:	41 e0       	ldi	r20, 0x01	; 1
   3f06e:	82 e0       	ldi	r24, 0x02	; 2
   3f070:	90 e0       	ldi	r25, 0x00	; 0
   3f072:	a0 e0       	ldi	r26, 0x00	; 0
   3f074:	b0 e0       	ldi	r27, 0x00	; 0
   3f076:	09 01       	movw	r0, r18
   3f078:	fc 01       	movw	r30, r24
   3f07a:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3f07e:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f082:	e8 95       	spm
   3f084:	11 24       	eor	r1, r1
	boot_page_fill(4, dataptr[2]);
   3f086:	89 81       	ldd	r24, Y+1	; 0x01
   3f088:	9a 81       	ldd	r25, Y+2	; 0x02
   3f08a:	02 96       	adiw	r24, 0x02	; 2
   3f08c:	fc 01       	movw	r30, r24
   3f08e:	80 81       	ld	r24, Z
   3f090:	28 2f       	mov	r18, r24
   3f092:	30 e0       	ldi	r19, 0x00	; 0
   3f094:	41 e0       	ldi	r20, 0x01	; 1
   3f096:	84 e0       	ldi	r24, 0x04	; 4
   3f098:	90 e0       	ldi	r25, 0x00	; 0
   3f09a:	a0 e0       	ldi	r26, 0x00	; 0
   3f09c:	b0 e0       	ldi	r27, 0x00	; 0
   3f09e:	09 01       	movw	r0, r18
   3f0a0:	fc 01       	movw	r30, r24
   3f0a2:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3f0a6:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f0aa:	e8 95       	spm
   3f0ac:	11 24       	eor	r1, r1
	
	boot_page_write(PAGE_NUMBER * PAGE_SIZE_BYTES);
   3f0ae:	25 e0       	ldi	r18, 0x05	; 5
   3f0b0:	80 e0       	ldi	r24, 0x00	; 0
   3f0b2:	9e ed       	ldi	r25, 0xDE	; 222
   3f0b4:	af ef       	ldi	r26, 0xFF	; 255
   3f0b6:	bf ef       	ldi	r27, 0xFF	; 255
   3f0b8:	fc 01       	movw	r30, r24
   3f0ba:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
   3f0be:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f0c2:	e8 95       	spm
	boot_spm_busy_wait();
   3f0c4:	87 e5       	ldi	r24, 0x57	; 87
   3f0c6:	90 e0       	ldi	r25, 0x00	; 0
   3f0c8:	fc 01       	movw	r30, r24
   3f0ca:	80 81       	ld	r24, Z
   3f0cc:	88 2f       	mov	r24, r24
   3f0ce:	90 e0       	ldi	r25, 0x00	; 0
   3f0d0:	81 70       	andi	r24, 0x01	; 1
   3f0d2:	99 27       	eor	r25, r25
   3f0d4:	89 2b       	or	r24, r25
   3f0d6:	b1 f7       	brne	.-20     	; 0x3f0c4 <FlashWrite+0xc4>
	
	boot_rww_enable();
   3f0d8:	81 e1       	ldi	r24, 0x11	; 17
   3f0da:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x700057>
   3f0de:	e8 95       	spm
	boot_spm_busy_wait();	
   3f0e0:	87 e5       	ldi	r24, 0x57	; 87
   3f0e2:	90 e0       	ldi	r25, 0x00	; 0
   3f0e4:	fc 01       	movw	r30, r24
   3f0e6:	80 81       	ld	r24, Z
   3f0e8:	88 2f       	mov	r24, r24
   3f0ea:	90 e0       	ldi	r25, 0x00	; 0
   3f0ec:	81 70       	andi	r24, 0x01	; 1
   3f0ee:	99 27       	eor	r25, r25
   3f0f0:	89 2b       	or	r24, r25
   3f0f2:	b1 f7       	brne	.-20     	; 0x3f0e0 <FlashWrite+0xe0>
}
   3f0f4:	00 00       	nop
   3f0f6:	0f 90       	pop	r0
   3f0f8:	0f 90       	pop	r0
   3f0fa:	df 91       	pop	r29
   3f0fc:	cf 91       	pop	r28
   3f0fe:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	15 e0       	ldi	r17, 0x05	; 5
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 ec       	ldi	r30, 0xC0	; 192
      fc:	f6 e2       	ldi	r31, 0x26	; 38
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 38       	cpi	r26, 0x84	; 132
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2b e0       	ldi	r18, 0x0B	; 11
     110:	a4 e8       	ldi	r26, 0x84	; 132
     112:	b5 e0       	ldi	r27, 0x05	; 5
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a9 37       	cpi	r26, 0x79	; 121
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	f1 d1       	rcall	.+994    	; 0x502 <main>
     120:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <time>:
     126:	fc 01       	movw	r30, r24
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	f8 94       	cli
     12c:	60 91 75 0b 	lds	r22, 0x0B75	; 0x800b75 <__system_time>
     130:	70 91 76 0b 	lds	r23, 0x0B76	; 0x800b76 <__system_time+0x1>
     134:	80 91 77 0b 	lds	r24, 0x0B77	; 0x800b77 <__system_time+0x2>
     138:	90 91 78 0b 	lds	r25, 0x0B78	; 0x800b78 <__system_time+0x3>
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	30 97       	sbiw	r30, 0x00	; 0
     140:	21 f0       	breq	.+8      	; 0x14a <time+0x24>
     142:	60 83       	st	Z, r22
     144:	71 83       	std	Z+1, r23	; 0x01
     146:	82 83       	std	Z+2, r24	; 0x02
     148:	93 83       	std	Z+3, r25	; 0x03
     14a:	08 95       	ret

0000014c <FlashRead>:

void FlashRead(unsigned char* dataptr)
{
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	61 97       	sbiw	r28, 0x11	; 17
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	cd bf       	out	0x3d, r28	; 61
     160:	99 8b       	std	Y+17, r25	; 0x11
     162:	88 8b       	std	Y+16, r24	; 0x10
	dataptr[0] = pgm_read_byte_far((PAGE_NUMBER*PAGE_SIZE_BYTES));
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	9e ed       	ldi	r25, 0xDE	; 222
     168:	af ef       	ldi	r26, 0xFF	; 255
     16a:	bf ef       	ldi	r27, 0xFF	; 255
     16c:	89 83       	std	Y+1, r24	; 0x01
     16e:	9a 83       	std	Y+2, r25	; 0x02
     170:	ab 83       	std	Y+3, r26	; 0x03
     172:	bc 83       	std	Y+4, r27	; 0x04
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	9a 81       	ldd	r25, Y+2	; 0x02
     178:	ab 81       	ldd	r26, Y+3	; 0x03
     17a:	bc 81       	ldd	r27, Y+4	; 0x04
     17c:	ab bf       	out	0x3b, r26	; 59
     17e:	fc 01       	movw	r30, r24
     180:	87 91       	elpm	r24, Z+
     182:	8d 83       	std	Y+5, r24	; 0x05
     184:	2d 81       	ldd	r18, Y+5	; 0x05
     186:	88 89       	ldd	r24, Y+16	; 0x10
     188:	99 89       	ldd	r25, Y+17	; 0x11
     18a:	fc 01       	movw	r30, r24
     18c:	20 83       	st	Z, r18
	dataptr[1] = pgm_read_byte_far((PAGE_NUMBER*PAGE_SIZE_BYTES)+2);
     18e:	88 89       	ldd	r24, Y+16	; 0x10
     190:	99 89       	ldd	r25, Y+17	; 0x11
     192:	9c 01       	movw	r18, r24
     194:	2f 5f       	subi	r18, 0xFF	; 255
     196:	3f 4f       	sbci	r19, 0xFF	; 255
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	9e ed       	ldi	r25, 0xDE	; 222
     19c:	af ef       	ldi	r26, 0xFF	; 255
     19e:	bf ef       	ldi	r27, 0xFF	; 255
     1a0:	8e 83       	std	Y+6, r24	; 0x06
     1a2:	9f 83       	std	Y+7, r25	; 0x07
     1a4:	a8 87       	std	Y+8, r26	; 0x08
     1a6:	b9 87       	std	Y+9, r27	; 0x09
     1a8:	8e 81       	ldd	r24, Y+6	; 0x06
     1aa:	9f 81       	ldd	r25, Y+7	; 0x07
     1ac:	a8 85       	ldd	r26, Y+8	; 0x08
     1ae:	b9 85       	ldd	r27, Y+9	; 0x09
     1b0:	ab bf       	out	0x3b, r26	; 59
     1b2:	fc 01       	movw	r30, r24
     1b4:	87 91       	elpm	r24, Z+
     1b6:	8a 87       	std	Y+10, r24	; 0x0a
     1b8:	8a 85       	ldd	r24, Y+10	; 0x0a
     1ba:	f9 01       	movw	r30, r18
     1bc:	80 83       	st	Z, r24
	dataptr[2] = pgm_read_byte_far((PAGE_NUMBER*PAGE_SIZE_BYTES)+4);
     1be:	88 89       	ldd	r24, Y+16	; 0x10
     1c0:	99 89       	ldd	r25, Y+17	; 0x11
     1c2:	9c 01       	movw	r18, r24
     1c4:	2e 5f       	subi	r18, 0xFE	; 254
     1c6:	3f 4f       	sbci	r19, 0xFF	; 255
     1c8:	84 e0       	ldi	r24, 0x04	; 4
     1ca:	9e ed       	ldi	r25, 0xDE	; 222
     1cc:	af ef       	ldi	r26, 0xFF	; 255
     1ce:	bf ef       	ldi	r27, 0xFF	; 255
     1d0:	8b 87       	std	Y+11, r24	; 0x0b
     1d2:	9c 87       	std	Y+12, r25	; 0x0c
     1d4:	ad 87       	std	Y+13, r26	; 0x0d
     1d6:	be 87       	std	Y+14, r27	; 0x0e
     1d8:	8b 85       	ldd	r24, Y+11	; 0x0b
     1da:	9c 85       	ldd	r25, Y+12	; 0x0c
     1dc:	ad 85       	ldd	r26, Y+13	; 0x0d
     1de:	be 85       	ldd	r27, Y+14	; 0x0e
     1e0:	ab bf       	out	0x3b, r26	; 59
     1e2:	fc 01       	movw	r30, r24
     1e4:	87 91       	elpm	r24, Z+
     1e6:	8f 87       	std	Y+15, r24	; 0x0f
     1e8:	8f 85       	ldd	r24, Y+15	; 0x0f
     1ea:	f9 01       	movw	r30, r18
     1ec:	80 83       	st	Z, r24
     1ee:	00 00       	nop
     1f0:	61 96       	adiw	r28, 0x11	; 17
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <GenerateFoodPosition>:
#include "FoodProcessor.h"
#include <stdlib.h>
#include <time.h>

struct Position GenerateFoodPosition(int worldWidth, int worldHeight)
{	
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	2c 97       	sbiw	r28, 0x0c	; 12
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	f8 94       	cli
     210:	de bf       	out	0x3e, r29	; 62
     212:	0f be       	out	0x3f, r0	; 63
     214:	cd bf       	out	0x3d, r28	; 61
     216:	9a 87       	std	Y+10, r25	; 0x0a
     218:	89 87       	std	Y+9, r24	; 0x09
     21a:	7c 87       	std	Y+12, r23	; 0x0c
     21c:	6b 87       	std	Y+11, r22	; 0x0b
	int newXPos = rand() % (worldWidth-2);
     21e:	0e 94 11 10 	call	0x2022	; 0x2022 <rand>
     222:	ac 01       	movw	r20, r24
     224:	89 85       	ldd	r24, Y+9	; 0x09
     226:	9a 85       	ldd	r25, Y+10	; 0x0a
     228:	9c 01       	movw	r18, r24
     22a:	22 50       	subi	r18, 0x02	; 2
     22c:	31 09       	sbc	r19, r1
     22e:	ca 01       	movw	r24, r20
     230:	b9 01       	movw	r22, r18
     232:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__divmodhi4>
     236:	9a 83       	std	Y+2, r25	; 0x02
     238:	89 83       	std	Y+1, r24	; 0x01
	int newYPos = rand() & (worldHeight-2);
     23a:	0e 94 11 10 	call	0x2022	; 0x2022 <rand>
     23e:	9c 01       	movw	r18, r24
     240:	8b 85       	ldd	r24, Y+11	; 0x0b
     242:	9c 85       	ldd	r25, Y+12	; 0x0c
     244:	02 97       	sbiw	r24, 0x02	; 2
     246:	82 23       	and	r24, r18
     248:	93 23       	and	r25, r19
     24a:	9c 83       	std	Y+4, r25	; 0x04
     24c:	8b 83       	std	Y+3, r24	; 0x03
	
	struct Position newPosition;
	newPosition.x = newXPos;
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	9a 81       	ldd	r25, Y+2	; 0x02
     252:	9e 83       	std	Y+6, r25	; 0x06
     254:	8d 83       	std	Y+5, r24	; 0x05
	newPosition.y = newYPos;
     256:	8b 81       	ldd	r24, Y+3	; 0x03
     258:	9c 81       	ldd	r25, Y+4	; 0x04
     25a:	98 87       	std	Y+8, r25	; 0x08
     25c:	8f 83       	std	Y+7, r24	; 0x07
		
	return newPosition;
     25e:	8d 81       	ldd	r24, Y+5	; 0x05
     260:	9e 81       	ldd	r25, Y+6	; 0x06
     262:	af 81       	ldd	r26, Y+7	; 0x07
     264:	b8 85       	ldd	r27, Y+8	; 0x08
     266:	bc 01       	movw	r22, r24
     268:	cd 01       	movw	r24, r26
     26a:	2c 96       	adiw	r28, 0x0c	; 12
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <InitKeypad>:
	{ '3', '6', '9', '#' },
	{ 'A', 'B', 'C', 'D' }
};

void InitKeypad()
{
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
	// Setup input pins to keyboard
	// These are pins PA6 (Row 2) and PA4 (Row 1), and C7 (Row 3) and C5 (Row 4)
	DDRA &= ~(0b01010000);
     284:	81 e2       	ldi	r24, 0x21	; 33
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	21 e2       	ldi	r18, 0x21	; 33
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	f9 01       	movw	r30, r18
     28e:	20 81       	ld	r18, Z
     290:	2f 7a       	andi	r18, 0xAF	; 175
     292:	fc 01       	movw	r30, r24
     294:	20 83       	st	Z, r18
	DDRC &= ~(0b10100000);
     296:	87 e2       	ldi	r24, 0x27	; 39
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	27 e2       	ldi	r18, 0x27	; 39
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	f9 01       	movw	r30, r18
     2a0:	20 81       	ld	r18, Z
     2a2:	2f 75       	andi	r18, 0x5F	; 95
     2a4:	fc 01       	movw	r30, r24
     2a6:	20 83       	st	Z, r18

	// Setup output pins to keyboard
	// PD0 = Column 1, PD1 = Column 2, PD2 = Column 3, PD3 = Column 4
	DDRD |= 0b00001111;
     2a8:	8a e2       	ldi	r24, 0x2A	; 42
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	2a e2       	ldi	r18, 0x2A	; 42
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	f9 01       	movw	r30, r18
     2b2:	20 81       	ld	r18, Z
     2b4:	2f 60       	ori	r18, 0x0F	; 15
     2b6:	fc 01       	movw	r30, r24
     2b8:	20 83       	st	Z, r18
	PORTD |= 0b00001111;
     2ba:	8b e2       	ldi	r24, 0x2B	; 43
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	2b e2       	ldi	r18, 0x2B	; 43
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	f9 01       	movw	r30, r18
     2c4:	20 81       	ld	r18, Z
     2c6:	2f 60       	ori	r18, 0x0F	; 15
     2c8:	fc 01       	movw	r30, r24
     2ca:	20 83       	st	Z, r18

	DDRB = 0b11111111;
     2cc:	84 e2       	ldi	r24, 0x24	; 36
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	2f ef       	ldi	r18, 0xFF	; 255
     2d2:	fc 01       	movw	r30, r24
     2d4:	20 83       	st	Z, r18

	//PORTB = 0xFF;
}
     2d6:	00 00       	nop
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <GetKey>:

char GetKey()
{
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	60 97       	sbiw	r28, 0x10	; 16
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
	keyPressed = 0;
     2f2:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <__data_end>
	
	for (int columnIndex = 0; columnIndex < 4; columnIndex++)
     2f6:	1a 82       	std	Y+2, r1	; 0x02
     2f8:	19 82       	std	Y+1, r1	; 0x01
     2fa:	f3 c0       	rjmp	.+486    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
	{
		// Scan Column 1 (1, 4, 7, and *)
		PORTD |= 0b00001111;
     2fc:	8b e2       	ldi	r24, 0x2B	; 43
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	2b e2       	ldi	r18, 0x2B	; 43
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	f9 01       	movw	r30, r18
     306:	20 81       	ld	r18, Z
     308:	2f 60       	ori	r18, 0x0F	; 15
     30a:	fc 01       	movw	r30, r24
     30c:	20 83       	st	Z, r18
		PORTD &= ~(1 << columnIndex);
     30e:	8b e2       	ldi	r24, 0x2B	; 43
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	2b e2       	ldi	r18, 0x2B	; 43
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	f9 01       	movw	r30, r18
     318:	20 81       	ld	r18, Z
     31a:	42 2f       	mov	r20, r18
     31c:	21 e0       	ldi	r18, 0x01	; 1
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	09 80       	ldd	r0, Y+1	; 0x01
     322:	02 c0       	rjmp	.+4      	; 0x328 <GetKey+0x4a>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	0a 94       	dec	r0
     32a:	e2 f7       	brpl	.-8      	; 0x324 <GetKey+0x46>
     32c:	20 95       	com	r18
     32e:	24 23       	and	r18, r20
     330:	fc 01       	movw	r30, r24
     332:	20 83       	st	Z, r18
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	a0 e8       	ldi	r26, 0x80	; 128
     33a:	bf e3       	ldi	r27, 0x3F	; 63
     33c:	8b 83       	std	Y+3, r24	; 0x03
     33e:	9c 83       	std	Y+4, r25	; 0x04
     340:	ad 83       	std	Y+5, r26	; 0x05
     342:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	4a e7       	ldi	r20, 0x7A	; 122
     34a:	55 e4       	ldi	r21, 0x45	; 69
     34c:	6b 81       	ldd	r22, Y+3	; 0x03
     34e:	7c 81       	ldd	r23, Y+4	; 0x04
     350:	8d 81       	ldd	r24, Y+5	; 0x05
     352:	9e 81       	ldd	r25, Y+6	; 0x06
     354:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
     358:	dc 01       	movw	r26, r24
     35a:	cb 01       	movw	r24, r22
     35c:	8f 83       	std	Y+7, r24	; 0x07
     35e:	98 87       	std	Y+8, r25	; 0x08
     360:	a9 87       	std	Y+9, r26	; 0x09
     362:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e8       	ldi	r20, 0x80	; 128
     36a:	5f e3       	ldi	r21, 0x3F	; 63
     36c:	6f 81       	ldd	r22, Y+7	; 0x07
     36e:	78 85       	ldd	r23, Y+8	; 0x08
     370:	89 85       	ldd	r24, Y+9	; 0x09
     372:	9a 85       	ldd	r25, Y+10	; 0x0a
     374:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__cmpsf2>
     378:	88 23       	and	r24, r24
     37a:	2c f4       	brge	.+10     	; 0x386 <GetKey+0xa8>
		__ticks = 1;
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	9c 87       	std	Y+12, r25	; 0x0c
     382:	8b 87       	std	Y+11, r24	; 0x0b
     384:	3f c0       	rjmp	.+126    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	else if (__tmp > 65535)
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	3f ef       	ldi	r19, 0xFF	; 255
     38a:	4f e7       	ldi	r20, 0x7F	; 127
     38c:	57 e4       	ldi	r21, 0x47	; 71
     38e:	6f 81       	ldd	r22, Y+7	; 0x07
     390:	78 85       	ldd	r23, Y+8	; 0x08
     392:	89 85       	ldd	r24, Y+9	; 0x09
     394:	9a 85       	ldd	r25, Y+10	; 0x0a
     396:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__gesf2>
     39a:	18 16       	cp	r1, r24
     39c:	4c f5       	brge	.+82     	; 0x3f0 <GetKey+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	40 e2       	ldi	r20, 0x20	; 32
     3a4:	51 e4       	ldi	r21, 0x41	; 65
     3a6:	6b 81       	ldd	r22, Y+3	; 0x03
     3a8:	7c 81       	ldd	r23, Y+4	; 0x04
     3aa:	8d 81       	ldd	r24, Y+5	; 0x05
     3ac:	9e 81       	ldd	r25, Y+6	; 0x06
     3ae:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
     3b2:	dc 01       	movw	r26, r24
     3b4:	cb 01       	movw	r24, r22
     3b6:	bc 01       	movw	r22, r24
     3b8:	cd 01       	movw	r24, r26
     3ba:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__fixunssfsi>
     3be:	dc 01       	movw	r26, r24
     3c0:	cb 01       	movw	r24, r22
     3c2:	9c 87       	std	Y+12, r25	; 0x0c
     3c4:	8b 87       	std	Y+11, r24	; 0x0b
     3c6:	0f c0       	rjmp	.+30     	; 0x3e6 <GetKey+0x108>
     3c8:	80 e9       	ldi	r24, 0x90	; 144
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	9e 87       	std	Y+14, r25	; 0x0e
     3ce:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3d0:	8d 85       	ldd	r24, Y+13	; 0x0d
     3d2:	9e 85       	ldd	r25, Y+14	; 0x0e
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <GetKey+0xf6>
     3d8:	9e 87       	std	Y+14, r25	; 0x0e
     3da:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     3de:	9c 85       	ldd	r25, Y+12	; 0x0c
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	9c 87       	std	Y+12, r25	; 0x0c
     3e4:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3e8:	9c 85       	ldd	r25, Y+12	; 0x0c
     3ea:	89 2b       	or	r24, r25
     3ec:	69 f7       	brne	.-38     	; 0x3c8 <GetKey+0xea>
     3ee:	14 c0       	rjmp	.+40     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f0:	6f 81       	ldd	r22, Y+7	; 0x07
     3f2:	78 85       	ldd	r23, Y+8	; 0x08
     3f4:	89 85       	ldd	r24, Y+9	; 0x09
     3f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     3f8:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__fixunssfsi>
     3fc:	dc 01       	movw	r26, r24
     3fe:	cb 01       	movw	r24, r22
     400:	9c 87       	std	Y+12, r25	; 0x0c
     402:	8b 87       	std	Y+11, r24	; 0x0b
     404:	8b 85       	ldd	r24, Y+11	; 0x0b
     406:	9c 85       	ldd	r25, Y+12	; 0x0c
     408:	98 8b       	std	Y+16, r25	; 0x10
     40a:	8f 87       	std	Y+15, r24	; 0x0f
     40c:	8f 85       	ldd	r24, Y+15	; 0x0f
     40e:	98 89       	ldd	r25, Y+16	; 0x10
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     414:	98 8b       	std	Y+16, r25	; 0x10
     416:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
			
		// Key '1'
		if ((PINA & (1 << ROW_1)) == 0)
     418:	80 e2       	ldi	r24, 0x20	; 32
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	fc 01       	movw	r30, r24
     41e:	80 81       	ld	r24, Z
     420:	88 2f       	mov	r24, r24
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	80 71       	andi	r24, 0x10	; 16
     426:	99 27       	eor	r25, r25
     428:	89 2b       	or	r24, r25
     42a:	79 f4       	brne	.+30     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		{
			keyPressed = characterColumns[columnIndex][0]; 
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	88 0f       	add	r24, r24
     436:	99 1f       	adc	r25, r25
     438:	8c 5f       	subi	r24, 0xFC	; 252
     43a:	9d 4f       	sbci	r25, 0xFD	; 253
     43c:	fc 01       	movw	r30, r24
     43e:	80 81       	ld	r24, Z
     440:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <__data_end>
			return keyPressed;
     444:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <__data_end>
     448:	53 c0       	rjmp	.+166    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
		}

		// Key '4'
		if ((PINA & (1 << ROW_2)) == 0)
     44a:	80 e2       	ldi	r24, 0x20	; 32
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	fc 01       	movw	r30, r24
     450:	80 81       	ld	r24, Z
     452:	88 2f       	mov	r24, r24
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	80 74       	andi	r24, 0x40	; 64
     458:	99 27       	eor	r25, r25
     45a:	89 2b       	or	r24, r25
     45c:	79 f4       	brne	.+30     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		{
			keyPressed = characterColumns[columnIndex][1];
     45e:	89 81       	ldd	r24, Y+1	; 0x01
     460:	9a 81       	ldd	r25, Y+2	; 0x02
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	8b 5f       	subi	r24, 0xFB	; 251
     46c:	9d 4f       	sbci	r25, 0xFD	; 253
     46e:	fc 01       	movw	r30, r24
     470:	80 81       	ld	r24, Z
     472:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <__data_end>
			return keyPressed;
     476:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <__data_end>
     47a:	3a c0       	rjmp	.+116    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
		}

		// Key '7'
		if ((PINC & (1 << ROW_3)) == 0)
     47c:	86 e2       	ldi	r24, 0x26	; 38
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	fc 01       	movw	r30, r24
     482:	80 81       	ld	r24, Z
     484:	88 23       	and	r24, r24
     486:	7c f0       	brlt	.+30     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
		{
			keyPressed = characterColumns[columnIndex][2];
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	9a 81       	ldd	r25, Y+2	; 0x02
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	8a 5f       	subi	r24, 0xFA	; 250
     496:	9d 4f       	sbci	r25, 0xFD	; 253
     498:	fc 01       	movw	r30, r24
     49a:	80 81       	ld	r24, Z
     49c:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <__data_end>
			return keyPressed;
     4a0:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <__data_end>
     4a4:	25 c0       	rjmp	.+74     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
		}

		// Key '*'
		if ((PINC & (1 << ROW_4)) == 0)
     4a6:	86 e2       	ldi	r24, 0x26	; 38
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	fc 01       	movw	r30, r24
     4ac:	80 81       	ld	r24, Z
     4ae:	88 2f       	mov	r24, r24
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	80 72       	andi	r24, 0x20	; 32
     4b4:	99 27       	eor	r25, r25
     4b6:	89 2b       	or	r24, r25
     4b8:	79 f4       	brne	.+30     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
		{
			keyPressed = characterColumns[columnIndex][3];
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	9a 81       	ldd	r25, Y+2	; 0x02
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	89 5f       	subi	r24, 0xF9	; 249
     4c8:	9d 4f       	sbci	r25, 0xFD	; 253
     4ca:	fc 01       	movw	r30, r24
     4cc:	80 81       	ld	r24, Z
     4ce:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <__data_end>
			return keyPressed;
     4d2:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <__data_end>
     4d6:	0c c0       	rjmp	.+24     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>

char GetKey()
{
	keyPressed = 0;
	
	for (int columnIndex = 0; columnIndex < 4; columnIndex++)
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	9a 81       	ldd	r25, Y+2	; 0x02
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	9a 83       	std	Y+2, r25	; 0x02
     4e0:	89 83       	std	Y+1, r24	; 0x01
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	04 97       	sbiw	r24, 0x04	; 4
     4e8:	0c f4       	brge	.+2      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4ea:	08 cf       	rjmp	.-496    	; 0x2fc <GetKey+0x1e>
			keyPressed = characterColumns[columnIndex][3];
			return keyPressed;
		}
	}
	
	return keyPressed;
     4ec:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <__data_end>
     4f0:	60 96       	adiw	r28, 0x10	; 16
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <main>:
int scoreHundredsCounter = 0;
int playerHighscoreTextOffset = 60;
int storedHighscoreTextOffset = 0;

int main(void)
{
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	ae 97       	sbiw	r28, 0x2e	; 46
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
	InitKeypad();
     516:	b2 de       	rcall	.-668    	; 0x27c <InitKeypad>
	initDisplay();
     518:	9c d3       	rcall	.+1848   	; 0xc52 <initDisplay>
     51a:	80 e0       	ldi	r24, 0x00	; 0
	
	// Seed number generator
	srand(time(NULL));
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	03 de       	rcall	.-1018   	; 0x126 <time>
     520:	dc 01       	movw	r26, r24
     522:	cb 01       	movw	r24, r22
     524:	0e 94 14 10 	call	0x2028	; 0x2028 <srand>
	
	ResetGame();
     528:	56 d3       	rcall	.+1708   	; 0xbd6 <ResetGame>
     52a:	84 e1       	ldi	r24, 0x14	; 20

	DrawIntroScreen(IntroScreenImage);
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <DrawIntroScreen>
	
	// Busy Wait until user press star button
	while (GetKey() != '*')
     532:	00 00       	nop
     534:	d4 de       	rcall	.-600    	; 0x2de <GetKey>
     536:	8a 32       	cpi	r24, 0x2A	; 42
     538:	e9 f7       	brne	.-6      	; 0x534 <main+0x32>
     53a:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <gameState>
	}

	// Main Game Loop
    while (1) 
	{
		if (gameState == GAME_STATE_ALIVE)
     53e:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <gameState+0x1>
     542:	01 97       	sbiw	r24, 0x01	; 1
     544:	09 f0       	breq	.+2      	; 0x548 <main+0x46>
     546:	fe c0       	rjmp	.+508    	; 0x744 <main+0x242>
     548:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <snakeBodyLength>
		{
			UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);
     54c:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <snakeBodyLength+0x1>
     550:	2f e2       	ldi	r18, 0x2F	; 47
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	43 e5       	ldi	r20, 0x53	; 83
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	bc 01       	movw	r22, r24
     55a:	81 e9       	ldi	r24, 0x91	; 145
     55c:	95 e0       	ldi	r25, 0x05	; 5
     55e:	30 d6       	rcall	.+3168   	; 0x11c0 <UpdateSnake>
     560:	8a e0       	ldi	r24, 0x0A	; 10

			struct SnakeBodyPart snakeHead = snake[0];
     562:	e1 e9       	ldi	r30, 0x91	; 145
     564:	f5 e0       	ldi	r31, 0x05	; 5
     566:	de 01       	movw	r26, r28
     568:	58 96       	adiw	r26, 0x18	; 24
     56a:	01 90       	ld	r0, Z+
     56c:	0d 92       	st	X+, r0
     56e:	8a 95       	dec	r24
     570:	e1 f7       	brne	.-8      	; 0x56a <main+0x68>
     572:	28 8d       	ldd	r18, Y+24	; 0x18
			if (snakeHead.x < (currentFoodPosition.x + 3) &&
     574:	39 8d       	ldd	r19, Y+25	; 0x19
     576:	80 91 71 0b 	lds	r24, 0x0B71	; 0x800b71 <currentFoodPosition>
     57a:	90 91 72 0b 	lds	r25, 0x0B72	; 0x800b72 <currentFoodPosition+0x1>
     57e:	03 96       	adiw	r24, 0x03	; 3
     580:	28 17       	cp	r18, r24
     582:	39 07       	cpc	r19, r25
     584:	0c f0       	brlt	.+2      	; 0x588 <main+0x86>
     586:	8d c0       	rjmp	.+282    	; 0x6a2 <main+0x1a0>
     588:	88 8d       	ldd	r24, Y+24	; 0x18
			(snakeHead.x + 2) > currentFoodPosition.x &&
     58a:	99 8d       	ldd	r25, Y+25	; 0x19
     58c:	9c 01       	movw	r18, r24
     58e:	2e 5f       	subi	r18, 0xFE	; 254
     590:	3f 4f       	sbci	r19, 0xFF	; 255
     592:	80 91 71 0b 	lds	r24, 0x0B71	; 0x800b71 <currentFoodPosition>
     596:	90 91 72 0b 	lds	r25, 0x0B72	; 0x800b72 <currentFoodPosition+0x1>
     59a:	82 17       	cp	r24, r18
		if (gameState == GAME_STATE_ALIVE)
		{
			UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

			struct SnakeBodyPart snakeHead = snake[0];
			if (snakeHead.x < (currentFoodPosition.x + 3) &&
     59c:	93 07       	cpc	r25, r19
     59e:	0c f0       	brlt	.+2      	; 0x5a2 <main+0xa0>
     5a0:	80 c0       	rjmp	.+256    	; 0x6a2 <main+0x1a0>
     5a2:	2a 8d       	ldd	r18, Y+26	; 0x1a
			(snakeHead.x + 2) > currentFoodPosition.x &&
			snakeHead.y < (currentFoodPosition.y + 2) &&
     5a4:	3b 8d       	ldd	r19, Y+27	; 0x1b
     5a6:	80 91 73 0b 	lds	r24, 0x0B73	; 0x800b73 <currentFoodPosition+0x2>
     5aa:	90 91 74 0b 	lds	r25, 0x0B74	; 0x800b74 <currentFoodPosition+0x3>
     5ae:	02 96       	adiw	r24, 0x02	; 2
     5b0:	28 17       	cp	r18, r24
		{
			UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

			struct SnakeBodyPart snakeHead = snake[0];
			if (snakeHead.x < (currentFoodPosition.x + 3) &&
			(snakeHead.x + 2) > currentFoodPosition.x &&
     5b2:	39 07       	cpc	r19, r25
     5b4:	0c f0       	brlt	.+2      	; 0x5b8 <main+0xb6>
     5b6:	75 c0       	rjmp	.+234    	; 0x6a2 <main+0x1a0>
     5b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
			snakeHead.y < (currentFoodPosition.y + 2) &&
			(2 + snakeHead.y) > (currentFoodPosition.y -1))
     5ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
     5bc:	9c 01       	movw	r18, r24
     5be:	2e 5f       	subi	r18, 0xFE	; 254
     5c0:	3f 4f       	sbci	r19, 0xFF	; 255
     5c2:	80 91 73 0b 	lds	r24, 0x0B73	; 0x800b73 <currentFoodPosition+0x2>
     5c6:	90 91 74 0b 	lds	r25, 0x0B74	; 0x800b74 <currentFoodPosition+0x3>
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	82 17       	cp	r24, r18
			UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

			struct SnakeBodyPart snakeHead = snake[0];
			if (snakeHead.x < (currentFoodPosition.x + 3) &&
			(snakeHead.x + 2) > currentFoodPosition.x &&
			snakeHead.y < (currentFoodPosition.y + 2) &&
     5ce:	93 07       	cpc	r25, r19
     5d0:	0c f0       	brlt	.+2      	; 0x5d4 <main+0xd2>
     5d2:	67 c0       	rjmp	.+206    	; 0x6a2 <main+0x1a0>
			(2 + snakeHead.y) > (currentFoodPosition.y -1))
			{
				currentFoodPosition = GenerateFoodPosition(WORLD_WIDTH, WORLD_HEIGHT);
     5d4:	6f e2       	ldi	r22, 0x2F	; 47
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	83 e5       	ldi	r24, 0x53	; 83
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	12 de       	rcall	.-988    	; 0x202 <GenerateFoodPosition>
     5de:	dc 01       	movw	r26, r24
     5e0:	cb 01       	movw	r24, r22
     5e2:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <currentFoodPosition>
     5e6:	90 93 72 0b 	sts	0x0B72, r25	; 0x800b72 <currentFoodPosition+0x1>
     5ea:	a0 93 73 0b 	sts	0x0B73, r26	; 0x800b73 <currentFoodPosition+0x2>
     5ee:	b0 93 74 0b 	sts	0x0B74, r27	; 0x800b74 <currentFoodPosition+0x3>
     5f2:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <snakeBodyLength>
				snakeBodyLength++;
     5f6:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <snakeBodyLength+0x1>
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	90 93 76 05 	sts	0x0576, r25	; 0x800576 <snakeBodyLength+0x1>
     600:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <snakeBodyLength>
     604:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <gameSpeed>
				
				if(gameSpeed !=  0)
     608:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <gameSpeed+0x1>
     60c:	89 2b       	or	r24, r25
     60e:	49 f0       	breq	.+18     	; 0x622 <main+0x120>
     610:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <gameSpeed>
					gameSpeed--;
     614:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <gameSpeed+0x1>
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <gameSpeed+0x1>
     61e:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <gameSpeed>
     622:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <snakeBodyLength>
					
				GrowSnake(snake, snakeBodyLength);
     626:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <snakeBodyLength+0x1>
     62a:	bc 01       	movw	r22, r24
     62c:	81 e9       	ldi	r24, 0x91	; 145
     62e:	95 e0       	ldi	r25, 0x05	; 5
     630:	0e 94 c3 0b 	call	0x1786	; 0x1786 <GrowSnake>
     634:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <scoreOnesCounter>
				
				if (scoreOnesCounter != 9)
     638:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <scoreOnesCounter+0x1>
     63c:	09 97       	sbiw	r24, 0x09	; 9
     63e:	51 f0       	breq	.+20     	; 0x654 <main+0x152>
     640:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <scoreOnesCounter>
				{
					scoreOnesCounter += 1;
     644:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <scoreOnesCounter+0x1>
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <scoreOnesCounter+0x1>
     64e:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <scoreOnesCounter>
     652:	27 c0       	rjmp	.+78     	; 0x6a2 <main+0x1a0>
     654:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <scoreTensCounter>
				} else if (scoreTensCounter != 9)
     658:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <scoreTensCounter+0x1>
     65c:	09 97       	sbiw	r24, 0x09	; 9
     65e:	71 f0       	breq	.+28     	; 0x67c <main+0x17a>
     660:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <scoreTensCounter>
				{
					scoreTensCounter += 1;
     664:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <scoreTensCounter+0x1>
     668:	01 96       	adiw	r24, 0x01	; 1
     66a:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <scoreTensCounter+0x1>
     66e:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <scoreTensCounter>
     672:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <scoreOnesCounter+0x1>
					scoreOnesCounter = 0;
     676:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <scoreOnesCounter>
     67a:	13 c0       	rjmp	.+38     	; 0x6a2 <main+0x1a0>
     67c:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <scoreHundredsCounter>
				} else if (scoreHundredsCounter != 9)
     680:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <scoreHundredsCounter+0x1>
     684:	09 97       	sbiw	r24, 0x09	; 9
     686:	69 f0       	breq	.+26     	; 0x6a2 <main+0x1a0>
     688:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <scoreTensCounter+0x1>
				{
					scoreTensCounter = 0;
     68c:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <scoreTensCounter>
     690:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <scoreHundredsCounter>
					scoreHundredsCounter += 1;
     694:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <scoreHundredsCounter+0x1>
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <scoreHundredsCounter+0x1>
     69e:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <scoreHundredsCounter>
     6a2:	80 91 73 0b 	lds	r24, 0x0B73	; 0x800b73 <currentFoodPosition+0x2>
				}
			}

			DrawFood(currentFoodPosition.x ,currentFoodPosition.y, worldImage);
     6a6:	90 91 74 0b 	lds	r25, 0x0B74	; 0x800b74 <currentFoodPosition+0x3>
     6aa:	28 2f       	mov	r18, r24
     6ac:	80 91 71 0b 	lds	r24, 0x0B71	; 0x800b71 <currentFoodPosition>
     6b0:	90 91 72 0b 	lds	r25, 0x0B72	; 0x800b72 <currentFoodPosition+0x1>
     6b4:	49 e7       	ldi	r20, 0x79	; 121
     6b6:	59 e0       	ldi	r21, 0x09	; 9
     6b8:	62 2f       	mov	r22, r18
     6ba:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <DrawFood>
     6be:	1a 82       	std	Y+2, r1	; 0x02

			for(int x = 0; x < snakeBodyLength; x++)
     6c0:	19 82       	std	Y+1, r1	; 0x01
     6c2:	2a c0       	rjmp	.+84     	; 0x718 <main+0x216>
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
			{
				DrawDot(snake[x].x, snake[x].y, worldImage);
     6c6:	9a 81       	ldd	r25, Y+2	; 0x02
     6c8:	88 0f       	add	r24, r24
     6ca:	99 1f       	adc	r25, r25
     6cc:	9c 01       	movw	r18, r24
     6ce:	22 0f       	add	r18, r18
     6d0:	33 1f       	adc	r19, r19
     6d2:	22 0f       	add	r18, r18
     6d4:	33 1f       	adc	r19, r19
     6d6:	82 0f       	add	r24, r18
     6d8:	93 1f       	adc	r25, r19
     6da:	8d 56       	subi	r24, 0x6D	; 109
     6dc:	9a 4f       	sbci	r25, 0xFA	; 250
     6de:	fc 01       	movw	r30, r24
     6e0:	80 81       	ld	r24, Z
     6e2:	91 81       	ldd	r25, Z+1	; 0x01
     6e4:	68 2f       	mov	r22, r24
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	9c 01       	movw	r18, r24
     6f0:	22 0f       	add	r18, r18
     6f2:	33 1f       	adc	r19, r19
     6f4:	22 0f       	add	r18, r18
     6f6:	33 1f       	adc	r19, r19
     6f8:	82 0f       	add	r24, r18
     6fa:	93 1f       	adc	r25, r19
     6fc:	8f 56       	subi	r24, 0x6F	; 111
     6fe:	9a 4f       	sbci	r25, 0xFA	; 250
     700:	fc 01       	movw	r30, r24
     702:	80 81       	ld	r24, Z
     704:	91 81       	ldd	r25, Z+1	; 0x01
     706:	49 e7       	ldi	r20, 0x79	; 121
     708:	59 e0       	ldi	r21, 0x09	; 9
     70a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <DrawDot>
     70e:	89 81       	ldd	r24, Y+1	; 0x01
				}
			}

			DrawFood(currentFoodPosition.x ,currentFoodPosition.y, worldImage);

			for(int x = 0; x < snakeBodyLength; x++)
     710:	9a 81       	ldd	r25, Y+2	; 0x02
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	9a 83       	std	Y+2, r25	; 0x02
     716:	89 83       	std	Y+1, r24	; 0x01
     718:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <snakeBodyLength>
     71c:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <snakeBodyLength+0x1>
     720:	29 81       	ldd	r18, Y+1	; 0x01
     722:	3a 81       	ldd	r19, Y+2	; 0x02
     724:	28 17       	cp	r18, r24
     726:	39 07       	cpc	r19, r25
     728:	6c f2       	brlt	.-102    	; 0x6c4 <main+0x1c2>
     72a:	0e 94 26 0c 	call	0x184c	; 0x184c <SnakeHitSelf>
			{
				DrawDot(snake[x].x, snake[x].y, worldImage);
			}
					
			if (SnakeHitSelf() == 1)
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	21 f4       	brne	.+8      	; 0x73a <main+0x238>
     732:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <gameState+0x1>
			{
				gameState = GAME_STATE_DEAD;
     736:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <gameState>
     73a:	89 e7       	ldi	r24, 0x79	; 121
			}
					
			RenderWorld(worldImage);
     73c:	99 e0       	ldi	r25, 0x09	; 9
     73e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <RenderWorld>
     742:	cc c1       	rjmp	.+920    	; 0xadc <main+0x5da>
     744:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <gameState>
		} else if (gameState == GAME_STATE_DEAD)
     748:	90 91 78 05 	lds	r25, 0x0578	; 0x800578 <gameState+0x1>
     74c:	89 2b       	or	r24, r25
     74e:	09 f0       	breq	.+2      	; 0x752 <main+0x250>
     750:	c5 c1       	rjmp	.+906    	; 0xadc <main+0x5da>
     752:	8c e0       	ldi	r24, 0x0C	; 12
		{
			DrawHighscoreText(HighscoreText);
     754:	94 e0       	ldi	r25, 0x04	; 4
     756:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DrawHighscoreText>
     75a:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <playerHighscoreTextOffset>
			
			// Draw player's current score
			DrawCharacter(CharacterMapper[scoreOnesCounter], playerHighscoreTextOffset + 16, 3, 8);
     75e:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <playerHighscoreTextOffset+0x1>
     762:	50 e1       	ldi	r21, 0x10	; 16
     764:	58 0f       	add	r21, r24
     766:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <scoreOnesCounter>
     76a:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <scoreOnesCounter+0x1>
     76e:	88 0f       	add	r24, r24
     770:	99 1f       	adc	r25, r25
     772:	8f 59       	subi	r24, 0x9F	; 159
     774:	9a 4f       	sbci	r25, 0xFA	; 250
     776:	fc 01       	movw	r30, r24
     778:	80 81       	ld	r24, Z
     77a:	91 81       	ldd	r25, Z+1	; 0x01
     77c:	28 e0       	ldi	r18, 0x08	; 8
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	43 e0       	ldi	r20, 0x03	; 3
     782:	65 2f       	mov	r22, r21
     784:	0e 94 cf 0c 	call	0x199e	; 0x199e <DrawCharacter>
     788:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <playerHighscoreTextOffset>
			DrawCharacter(CharacterMapper[scoreTensCounter], playerHighscoreTextOffset + 8, 3, 8);
     78c:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <playerHighscoreTextOffset+0x1>
     790:	58 e0       	ldi	r21, 0x08	; 8
     792:	58 0f       	add	r21, r24
     794:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <scoreTensCounter>
     798:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <scoreTensCounter+0x1>
     79c:	88 0f       	add	r24, r24
     79e:	99 1f       	adc	r25, r25
     7a0:	8f 59       	subi	r24, 0x9F	; 159
     7a2:	9a 4f       	sbci	r25, 0xFA	; 250
     7a4:	fc 01       	movw	r30, r24
     7a6:	80 81       	ld	r24, Z
     7a8:	91 81       	ldd	r25, Z+1	; 0x01
     7aa:	28 e0       	ldi	r18, 0x08	; 8
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	43 e0       	ldi	r20, 0x03	; 3
     7b0:	65 2f       	mov	r22, r21
     7b2:	0e 94 cf 0c 	call	0x199e	; 0x199e <DrawCharacter>
			
			// Read stored player scores
			unsigned char storedScores[3];
			FlashRead(storedScores);
     7b6:	ce 01       	movw	r24, r28
     7b8:	82 96       	adiw	r24, 0x22	; 34
     7ba:	c8 dc       	rcall	.-1648   	; 0x14c <FlashRead>
     7bc:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <scoreTensCounter>
			
			unsigned char currentPlayerScore = (scoreTensCounter * 10) + scoreOnesCounter;
     7c0:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <scoreTensCounter+0x1>
     7c4:	88 0f       	add	r24, r24
     7c6:	98 2f       	mov	r25, r24
     7c8:	99 0f       	add	r25, r25
     7ca:	99 0f       	add	r25, r25
     7cc:	28 2f       	mov	r18, r24
     7ce:	29 0f       	add	r18, r25
     7d0:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <scoreOnesCounter>
     7d4:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <scoreOnesCounter+0x1>
     7d8:	82 0f       	add	r24, r18
     7da:	8e 83       	std	Y+6, r24	; 0x06
     7dc:	8e 81       	ldd	r24, Y+6	; 0x06
			
			unsigned char highscoreComparer = currentPlayerScore;
     7de:	8b 83       	std	Y+3, r24	; 0x03
     7e0:	1d 82       	std	Y+5, r1	; 0x05
			for (int x = 0; x < 3; x++)
     7e2:	1c 82       	std	Y+4, r1	; 0x04
     7e4:	3b c0       	rjmp	.+118    	; 0x85c <main+0x35a>
     7e6:	9e 01       	movw	r18, r28
			{
				if (storedScores[x] >= 100 || storedScores[x] < 0)
     7e8:	2e 5d       	subi	r18, 0xDE	; 222
     7ea:	3f 4f       	sbci	r19, 0xFF	; 255
     7ec:	8c 81       	ldd	r24, Y+4	; 0x04
     7ee:	9d 81       	ldd	r25, Y+5	; 0x05
     7f0:	82 0f       	add	r24, r18
     7f2:	93 1f       	adc	r25, r19
     7f4:	fc 01       	movw	r30, r24
     7f6:	80 81       	ld	r24, Z
     7f8:	84 36       	cpi	r24, 0x64	; 100
     7fa:	48 f0       	brcs	.+18     	; 0x80e <main+0x30c>
     7fc:	9e 01       	movw	r18, r28
				{
					storedScores[x] = 0;
     7fe:	2e 5d       	subi	r18, 0xDE	; 222
     800:	3f 4f       	sbci	r19, 0xFF	; 255
     802:	8c 81       	ldd	r24, Y+4	; 0x04
     804:	9d 81       	ldd	r25, Y+5	; 0x05
     806:	82 0f       	add	r24, r18
     808:	93 1f       	adc	r25, r19
     80a:	fc 01       	movw	r30, r24
     80c:	10 82       	st	Z, r1
     80e:	9e 01       	movw	r18, r28
				}
				
				if (highscoreComparer > storedScores[x])
     810:	2e 5d       	subi	r18, 0xDE	; 222
     812:	3f 4f       	sbci	r19, 0xFF	; 255
     814:	8c 81       	ldd	r24, Y+4	; 0x04
     816:	9d 81       	ldd	r25, Y+5	; 0x05
     818:	82 0f       	add	r24, r18
     81a:	93 1f       	adc	r25, r19
     81c:	fc 01       	movw	r30, r24
     81e:	90 81       	ld	r25, Z
     820:	8b 81       	ldd	r24, Y+3	; 0x03
     822:	98 17       	cp	r25, r24
     824:	b0 f4       	brcc	.+44     	; 0x852 <main+0x350>
     826:	9e 01       	movw	r18, r28
				{
					unsigned char currentHighscoreInSpot = storedScores[x];
     828:	2e 5d       	subi	r18, 0xDE	; 222
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	8c 81       	ldd	r24, Y+4	; 0x04
     82e:	9d 81       	ldd	r25, Y+5	; 0x05
     830:	82 0f       	add	r24, r18
     832:	93 1f       	adc	r25, r19
     834:	fc 01       	movw	r30, r24
     836:	80 81       	ld	r24, Z
     838:	8f 83       	std	Y+7, r24	; 0x07
     83a:	9e 01       	movw	r18, r28
					storedScores[x] = highscoreComparer;
     83c:	2e 5d       	subi	r18, 0xDE	; 222
     83e:	3f 4f       	sbci	r19, 0xFF	; 255
     840:	8c 81       	ldd	r24, Y+4	; 0x04
     842:	9d 81       	ldd	r25, Y+5	; 0x05
     844:	82 0f       	add	r24, r18
     846:	93 1f       	adc	r25, r19
     848:	2b 81       	ldd	r18, Y+3	; 0x03
     84a:	fc 01       	movw	r30, r24
     84c:	20 83       	st	Z, r18
     84e:	8f 81       	ldd	r24, Y+7	; 0x07
					highscoreComparer = currentHighscoreInSpot;
     850:	8b 83       	std	Y+3, r24	; 0x03
     852:	8c 81       	ldd	r24, Y+4	; 0x04
			FlashRead(storedScores);
			
			unsigned char currentPlayerScore = (scoreTensCounter * 10) + scoreOnesCounter;
			
			unsigned char highscoreComparer = currentPlayerScore;
			for (int x = 0; x < 3; x++)
     854:	9d 81       	ldd	r25, Y+5	; 0x05
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	9d 83       	std	Y+5, r25	; 0x05
     85a:	8c 83       	std	Y+4, r24	; 0x04
     85c:	8c 81       	ldd	r24, Y+4	; 0x04
     85e:	9d 81       	ldd	r25, Y+5	; 0x05
     860:	03 97       	sbiw	r24, 0x03	; 3
     862:	0c f2       	brlt	.-126    	; 0x7e6 <main+0x2e4>
     864:	18 86       	std	Y+8, r1	; 0x08
					storedScores[x] = highscoreComparer;
					highscoreComparer = currentHighscoreInSpot;
				}
			}
			
			unsigned char onesDigit = 0;
     866:	19 86       	std	Y+9, r1	; 0x09
			unsigned char tensDigit = 0;
     868:	8a a1       	ldd	r24, Y+34	; 0x22
	
			// Draw 1. highscore
			char scoreString[10];
			sprintf(scoreString, "%02d", storedScores[0]);
     86a:	88 2f       	mov	r24, r24
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	29 2f       	mov	r18, r25
     870:	2f 93       	push	r18
     872:	8f 93       	push	r24
     874:	8f e7       	ldi	r24, 0x7F	; 127
     876:	95 e0       	ldi	r25, 0x05	; 5
     878:	89 2f       	mov	r24, r25
     87a:	8f 93       	push	r24
     87c:	8f e7       	ldi	r24, 0x7F	; 127
     87e:	95 e0       	ldi	r25, 0x05	; 5
     880:	8f 93       	push	r24
     882:	ce 01       	movw	r24, r28
     884:	85 96       	adiw	r24, 0x25	; 37
     886:	29 2f       	mov	r18, r25
     888:	2f 93       	push	r18
     88a:	8f 93       	push	r24
     88c:	0e 94 26 10 	call	0x204c	; 0x204c <sprintf>
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	8e a1       	ldd	r24, Y+38	; 0x26
			
			onesDigit = scoreString[1] - 48;
     89e:	80 53       	subi	r24, 0x30	; 48
     8a0:	88 87       	std	Y+8, r24	; 0x08
     8a2:	8d a1       	ldd	r24, Y+37	; 0x25
			tensDigit = scoreString[0] - 48;
     8a4:	80 53       	subi	r24, 0x30	; 48
     8a6:	89 87       	std	Y+9, r24	; 0x09
     8a8:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			
			DrawCharacter(CharacterMapper[1], storedHighscoreTextOffset, 2, 8);
     8ac:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     8b0:	58 2f       	mov	r21, r24
     8b2:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <CharacterMapper+0x2>
     8b6:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <CharacterMapper+0x3>
     8ba:	28 e0       	ldi	r18, 0x08	; 8
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	42 e0       	ldi	r20, 0x02	; 2
     8c0:	65 2f       	mov	r22, r21
     8c2:	0e 94 cf 0c 	call	0x199e	; 0x199e <DrawCharacter>
     8c6:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(Dot, storedHighscoreTextOffset + 8, 2, 8);
     8ca:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     8ce:	88 5f       	subi	r24, 0xF8	; 248
     8d0:	28 e0       	ldi	r18, 0x08	; 8
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	42 e0       	ldi	r20, 0x02	; 2
     8d6:	68 2f       	mov	r22, r24
     8d8:	89 e5       	ldi	r24, 0x59	; 89
     8da:	95 e0       	ldi	r25, 0x05	; 5
     8dc:	0e 94 cf 0c 	call	0x199e	; 0x199e <DrawCharacter>
     8e0:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(CharacterMapper[tensDigit], storedHighscoreTextOffset + 16, 2, 8);
     8e4:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     8e8:	50 e1       	ldi	r21, 0x10	; 16
     8ea:	58 0f       	add	r21, r24
     8ec:	89 85       	ldd	r24, Y+9	; 0x09
     8ee:	88 2f       	mov	r24, r24
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	8f 59       	subi	r24, 0x9F	; 159
     8f8:	9a 4f       	sbci	r25, 0xFA	; 250
     8fa:	fc 01       	movw	r30, r24
     8fc:	80 81       	ld	r24, Z
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	28 e0       	ldi	r18, 0x08	; 8
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	42 e0       	ldi	r20, 0x02	; 2
     906:	65 2f       	mov	r22, r21
     908:	0e 94 cf 0c 	call	0x199e	; 0x199e <DrawCharacter>
     90c:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(CharacterMapper[onesDigit], storedHighscoreTextOffset + 24, 2, 8);
     910:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     914:	58 e1       	ldi	r21, 0x18	; 24
     916:	58 0f       	add	r21, r24
     918:	88 85       	ldd	r24, Y+8	; 0x08
     91a:	88 2f       	mov	r24, r24
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	8f 59       	subi	r24, 0x9F	; 159
     924:	9a 4f       	sbci	r25, 0xFA	; 250
     926:	fc 01       	movw	r30, r24
     928:	80 81       	ld	r24, Z
     92a:	91 81       	ldd	r25, Z+1	; 0x01
     92c:	28 e0       	ldi	r18, 0x08	; 8
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	42 e0       	ldi	r20, 0x02	; 2
     932:	65 2f       	mov	r22, r21
     934:	0e 94 cf 0c 	call	0x199e	; 0x199e <DrawCharacter>
     938:	8b a1       	ldd	r24, Y+35	; 0x23
		
			// Draw 2. highscore
			sprintf(scoreString, "%02d", storedScores[1]);
     93a:	88 2f       	mov	r24, r24
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	29 2f       	mov	r18, r25
     940:	2f 93       	push	r18
     942:	8f 93       	push	r24
     944:	8f e7       	ldi	r24, 0x7F	; 127
     946:	95 e0       	ldi	r25, 0x05	; 5
     948:	89 2f       	mov	r24, r25
     94a:	8f 93       	push	r24
     94c:	8f e7       	ldi	r24, 0x7F	; 127
     94e:	95 e0       	ldi	r25, 0x05	; 5
     950:	8f 93       	push	r24
     952:	ce 01       	movw	r24, r28
     954:	85 96       	adiw	r24, 0x25	; 37
     956:	29 2f       	mov	r18, r25
     958:	2f 93       	push	r18
     95a:	8f 93       	push	r24
     95c:	0e 94 26 10 	call	0x204c	; 0x204c <sprintf>
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	8e a1       	ldd	r24, Y+38	; 0x26
			
			onesDigit = scoreString[1] - 48;
     96e:	80 53       	subi	r24, 0x30	; 48
     970:	88 87       	std	Y+8, r24	; 0x08
     972:	8d a1       	ldd	r24, Y+37	; 0x25
			tensDigit = scoreString[0] - 48;
     974:	80 53       	subi	r24, 0x30	; 48
     976:	89 87       	std	Y+9, r24	; 0x09
     978:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
						
			DrawCharacter(CharacterMapper[2], storedHighscoreTextOffset, 3, 8);
     97c:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     980:	58 2f       	mov	r21, r24
     982:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <CharacterMapper+0x4>
     986:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <CharacterMapper+0x5>
     98a:	28 e0       	ldi	r18, 0x08	; 8
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	43 e0       	ldi	r20, 0x03	; 3
     990:	65 2f       	mov	r22, r21
     992:	0e 94 cf 0c 	call	0x199e	; 0x199e <DrawCharacter>
     996:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(Dot, storedHighscoreTextOffset + 8, 3, 8);
     99a:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     99e:	88 5f       	subi	r24, 0xF8	; 248
     9a0:	28 e0       	ldi	r18, 0x08	; 8
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	43 e0       	ldi	r20, 0x03	; 3
     9a6:	68 2f       	mov	r22, r24
     9a8:	89 e5       	ldi	r24, 0x59	; 89
     9aa:	95 e0       	ldi	r25, 0x05	; 5
     9ac:	f8 d7       	rcall	.+4080   	; 0x199e <DrawCharacter>
     9ae:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(CharacterMapper[tensDigit], storedHighscoreTextOffset + 16, 3, 8);
     9b2:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     9b6:	50 e1       	ldi	r21, 0x10	; 16
     9b8:	58 0f       	add	r21, r24
     9ba:	89 85       	ldd	r24, Y+9	; 0x09
     9bc:	88 2f       	mov	r24, r24
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	8f 59       	subi	r24, 0x9F	; 159
     9c6:	9a 4f       	sbci	r25, 0xFA	; 250
     9c8:	fc 01       	movw	r30, r24
     9ca:	80 81       	ld	r24, Z
     9cc:	91 81       	ldd	r25, Z+1	; 0x01
     9ce:	28 e0       	ldi	r18, 0x08	; 8
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	43 e0       	ldi	r20, 0x03	; 3
     9d4:	65 2f       	mov	r22, r21
     9d6:	e3 d7       	rcall	.+4038   	; 0x199e <DrawCharacter>
     9d8:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(CharacterMapper[onesDigit], storedHighscoreTextOffset + 24, 3, 8);
     9dc:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     9e0:	58 e1       	ldi	r21, 0x18	; 24
     9e2:	58 0f       	add	r21, r24
     9e4:	88 85       	ldd	r24, Y+8	; 0x08
     9e6:	88 2f       	mov	r24, r24
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	88 0f       	add	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	8f 59       	subi	r24, 0x9F	; 159
     9f0:	9a 4f       	sbci	r25, 0xFA	; 250
     9f2:	fc 01       	movw	r30, r24
     9f4:	80 81       	ld	r24, Z
     9f6:	91 81       	ldd	r25, Z+1	; 0x01
     9f8:	28 e0       	ldi	r18, 0x08	; 8
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	43 e0       	ldi	r20, 0x03	; 3
     9fe:	65 2f       	mov	r22, r21
     a00:	ce d7       	rcall	.+3996   	; 0x199e <DrawCharacter>
     a02:	8c a1       	ldd	r24, Y+36	; 0x24
			
			// Draw 3. highscore
			sprintf(scoreString, "%02d", storedScores[2]);
     a04:	88 2f       	mov	r24, r24
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	29 2f       	mov	r18, r25
     a0a:	2f 93       	push	r18
     a0c:	8f 93       	push	r24
     a0e:	8f e7       	ldi	r24, 0x7F	; 127
     a10:	95 e0       	ldi	r25, 0x05	; 5
     a12:	89 2f       	mov	r24, r25
     a14:	8f 93       	push	r24
     a16:	8f e7       	ldi	r24, 0x7F	; 127
     a18:	95 e0       	ldi	r25, 0x05	; 5
     a1a:	8f 93       	push	r24
     a1c:	ce 01       	movw	r24, r28
     a1e:	85 96       	adiw	r24, 0x25	; 37
     a20:	29 2f       	mov	r18, r25
     a22:	2f 93       	push	r18
     a24:	8f 93       	push	r24
     a26:	0e 94 26 10 	call	0x204c	; 0x204c <sprintf>
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	8e a1       	ldd	r24, Y+38	; 0x26
						
			onesDigit = scoreString[1] - 48;
     a38:	80 53       	subi	r24, 0x30	; 48
     a3a:	88 87       	std	Y+8, r24	; 0x08
     a3c:	8d a1       	ldd	r24, Y+37	; 0x25
			tensDigit = scoreString[0] - 48;
     a3e:	80 53       	subi	r24, 0x30	; 48
     a40:	89 87       	std	Y+9, r24	; 0x09
     a42:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
						
			DrawCharacter(CharacterMapper[3], storedHighscoreTextOffset, 4, 8);
     a46:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     a4a:	58 2f       	mov	r21, r24
     a4c:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <CharacterMapper+0x6>
     a50:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <CharacterMapper+0x7>
     a54:	28 e0       	ldi	r18, 0x08	; 8
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	44 e0       	ldi	r20, 0x04	; 4
     a5a:	65 2f       	mov	r22, r21
     a5c:	a0 d7       	rcall	.+3904   	; 0x199e <DrawCharacter>
     a5e:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(Dot, storedHighscoreTextOffset + 8, 4, 8);
     a62:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     a66:	88 5f       	subi	r24, 0xF8	; 248
     a68:	28 e0       	ldi	r18, 0x08	; 8
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	44 e0       	ldi	r20, 0x04	; 4
     a6e:	68 2f       	mov	r22, r24
     a70:	89 e5       	ldi	r24, 0x59	; 89
     a72:	95 e0       	ldi	r25, 0x05	; 5
     a74:	94 d7       	rcall	.+3880   	; 0x199e <DrawCharacter>
     a76:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(CharacterMapper[tensDigit], storedHighscoreTextOffset + 16, 4, 8);
     a7a:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     a7e:	50 e1       	ldi	r21, 0x10	; 16
     a80:	58 0f       	add	r21, r24
     a82:	89 85       	ldd	r24, Y+9	; 0x09
     a84:	88 2f       	mov	r24, r24
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	8f 59       	subi	r24, 0x9F	; 159
     a8e:	9a 4f       	sbci	r25, 0xFA	; 250
     a90:	fc 01       	movw	r30, r24
     a92:	80 81       	ld	r24, Z
     a94:	91 81       	ldd	r25, Z+1	; 0x01
     a96:	28 e0       	ldi	r18, 0x08	; 8
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	44 e0       	ldi	r20, 0x04	; 4
     a9c:	65 2f       	mov	r22, r21
     a9e:	7f d7       	rcall	.+3838   	; 0x199e <DrawCharacter>
     aa0:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <storedHighscoreTextOffset>
			DrawCharacter(CharacterMapper[onesDigit], storedHighscoreTextOffset + 24, 4, 8);
     aa4:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <storedHighscoreTextOffset+0x1>
     aa8:	58 e1       	ldi	r21, 0x18	; 24
     aaa:	58 0f       	add	r21, r24
     aac:	88 85       	ldd	r24, Y+8	; 0x08
     aae:	88 2f       	mov	r24, r24
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	88 0f       	add	r24, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	8f 59       	subi	r24, 0x9F	; 159
     ab8:	9a 4f       	sbci	r25, 0xFA	; 250
     aba:	fc 01       	movw	r30, r24
     abc:	80 81       	ld	r24, Z
     abe:	91 81       	ldd	r25, Z+1	; 0x01
     ac0:	28 e0       	ldi	r18, 0x08	; 8
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	44 e0       	ldi	r20, 0x04	; 4
     ac6:	65 2f       	mov	r22, r21
			
			FlashWrite(storedScores);
     ac8:	6a d7       	rcall	.+3796   	; 0x199e <DrawCharacter>
     aca:	ce 01       	movw	r24, r28
     acc:	82 96       	adiw	r24, 0x22	; 34
     ace:	0f 94 00 f8 	call	0x3f000	; 0x3f000 <FlashWrite>
			
			// Busy Wait until user press star button
			while (GetKey() != '*')
     ad2:	00 00       	nop
     ad4:	04 dc       	rcall	.-2040   	; 0x2de <GetKey>
     ad6:	8a 32       	cpi	r24, 0x2A	; 42
     ad8:	e9 f7       	brne	.-6      	; 0xad4 <main+0x5d2>
			{
			}
			
			ResetGame();
     ada:	7d d0       	rcall	.+250    	; 0xbd6 <ResetGame>
     adc:	80 91 79 05 	lds	r24, 0x0579	; 0x800579 <gameSpeed>
		}

		_delay_ms(gameSpeed);
     ae0:	90 91 7a 05 	lds	r25, 0x057A	; 0x80057a <gameSpeed+0x1>
     ae4:	09 2e       	mov	r0, r25
     ae6:	00 0c       	add	r0, r0
     ae8:	aa 0b       	sbc	r26, r26
     aea:	bb 0b       	sbc	r27, r27
     aec:	bc 01       	movw	r22, r24
     aee:	cd 01       	movw	r24, r26
     af0:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <__floatsisf>
     af4:	dc 01       	movw	r26, r24
     af6:	cb 01       	movw	r24, r22
     af8:	8a 87       	std	Y+10, r24	; 0x0a
     afa:	9b 87       	std	Y+11, r25	; 0x0b
     afc:	ac 87       	std	Y+12, r26	; 0x0c
     afe:	bd 87       	std	Y+13, r27	; 0x0d
     b00:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	4a e7       	ldi	r20, 0x7A	; 122
     b06:	55 e4       	ldi	r21, 0x45	; 69
     b08:	6a 85       	ldd	r22, Y+10	; 0x0a
     b0a:	7b 85       	ldd	r23, Y+11	; 0x0b
     b0c:	8c 85       	ldd	r24, Y+12	; 0x0c
     b0e:	9d 85       	ldd	r25, Y+13	; 0x0d
     b10:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
     b14:	dc 01       	movw	r26, r24
     b16:	cb 01       	movw	r24, r22
     b18:	8e 87       	std	Y+14, r24	; 0x0e
     b1a:	9f 87       	std	Y+15, r25	; 0x0f
     b1c:	a8 8b       	std	Y+16, r26	; 0x10
     b1e:	b9 8b       	std	Y+17, r27	; 0x11
     b20:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	40 e8       	ldi	r20, 0x80	; 128
     b26:	5f e3       	ldi	r21, 0x3F	; 63
     b28:	6e 85       	ldd	r22, Y+14	; 0x0e
     b2a:	7f 85       	ldd	r23, Y+15	; 0x0f
     b2c:	88 89       	ldd	r24, Y+16	; 0x10
     b2e:	99 89       	ldd	r25, Y+17	; 0x11
     b30:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__cmpsf2>
     b34:	88 23       	and	r24, r24
     b36:	2c f4       	brge	.+10     	; 0xb42 <main+0x640>
     b38:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	9b 8b       	std	Y+19, r25	; 0x13
     b3e:	8a 8b       	std	Y+18, r24	; 0x12
     b40:	3f c0       	rjmp	.+126    	; 0xbc0 <main+0x6be>
     b42:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
     b44:	3f ef       	ldi	r19, 0xFF	; 255
     b46:	4f e7       	ldi	r20, 0x7F	; 127
     b48:	57 e4       	ldi	r21, 0x47	; 71
     b4a:	6e 85       	ldd	r22, Y+14	; 0x0e
     b4c:	7f 85       	ldd	r23, Y+15	; 0x0f
     b4e:	88 89       	ldd	r24, Y+16	; 0x10
     b50:	99 89       	ldd	r25, Y+17	; 0x11
     b52:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__gesf2>
     b56:	18 16       	cp	r1, r24
     b58:	4c f5       	brge	.+82     	; 0xbac <main+0x6aa>
     b5a:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e2       	ldi	r20, 0x20	; 32
     b60:	51 e4       	ldi	r21, 0x41	; 65
     b62:	6a 85       	ldd	r22, Y+10	; 0x0a
     b64:	7b 85       	ldd	r23, Y+11	; 0x0b
     b66:	8c 85       	ldd	r24, Y+12	; 0x0c
     b68:	9d 85       	ldd	r25, Y+13	; 0x0d
     b6a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
     b6e:	dc 01       	movw	r26, r24
     b70:	cb 01       	movw	r24, r22
     b72:	bc 01       	movw	r22, r24
     b74:	cd 01       	movw	r24, r26
     b76:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__fixunssfsi>
     b7a:	dc 01       	movw	r26, r24
     b7c:	cb 01       	movw	r24, r22
     b7e:	9b 8b       	std	Y+19, r25	; 0x13
     b80:	8a 8b       	std	Y+18, r24	; 0x12
     b82:	0f c0       	rjmp	.+30     	; 0xba2 <main+0x6a0>
     b84:	80 e9       	ldi	r24, 0x90	; 144
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	9d 8b       	std	Y+21, r25	; 0x15
     b8a:	8c 8b       	std	Y+20, r24	; 0x14
     b8c:	8c 89       	ldd	r24, Y+20	; 0x14
     b8e:	9d 89       	ldd	r25, Y+21	; 0x15
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	f1 f7       	brne	.-4      	; 0xb90 <main+0x68e>
     b94:	9d 8b       	std	Y+21, r25	; 0x15
     b96:	8c 8b       	std	Y+20, r24	; 0x14
     b98:	8a 89       	ldd	r24, Y+18	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b9a:	9b 89       	ldd	r25, Y+19	; 0x13
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	9b 8b       	std	Y+19, r25	; 0x13
     ba0:	8a 8b       	std	Y+18, r24	; 0x12
     ba2:	8a 89       	ldd	r24, Y+18	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ba4:	9b 89       	ldd	r25, Y+19	; 0x13
     ba6:	89 2b       	or	r24, r25
     ba8:	69 f7       	brne	.-38     	; 0xb84 <main+0x682>
     baa:	14 c0       	rjmp	.+40     	; 0xbd4 <main+0x6d2>
     bac:	6e 85       	ldd	r22, Y+14	; 0x0e
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bae:	7f 85       	ldd	r23, Y+15	; 0x0f
     bb0:	88 89       	ldd	r24, Y+16	; 0x10
     bb2:	99 89       	ldd	r25, Y+17	; 0x11
     bb4:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__fixunssfsi>
     bb8:	dc 01       	movw	r26, r24
     bba:	cb 01       	movw	r24, r22
     bbc:	9b 8b       	std	Y+19, r25	; 0x13
     bbe:	8a 8b       	std	Y+18, r24	; 0x12
     bc0:	8a 89       	ldd	r24, Y+18	; 0x12
     bc2:	9b 89       	ldd	r25, Y+19	; 0x13
     bc4:	9f 8b       	std	Y+23, r25	; 0x17
     bc6:	8e 8b       	std	Y+22, r24	; 0x16
     bc8:	8e 89       	ldd	r24, Y+22	; 0x16
     bca:	9f 89       	ldd	r25, Y+23	; 0x17
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	f1 f7       	brne	.-4      	; 0xbcc <main+0x6ca>
     bd0:	9f 8b       	std	Y+23, r25	; 0x17
     bd2:	8e 8b       	std	Y+22, r24	; 0x16
     bd4:	b2 cc       	rjmp	.-1692   	; 0x53a <main+0x38>

00000bd6 <ResetGame>:
    }
     bd6:	cf 93       	push	r28
}

void ResetGame()
{
     bd8:	df 93       	push	r29
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
	gameState = GAME_STATE_ALIVE;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <gameState+0x1>
     be6:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <gameState>
	setCursor(0, 0);
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	ff d0       	rcall	.+510    	; 0xdee <setCursor>
	clearDisplay();
     bf0:	50 d1       	rcall	.+672    	; 0xe92 <clearDisplay>
     bf2:	60 e0       	ldi	r22, 0x00	; 0
	setCursor(0, 0);
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	fb d0       	rcall	.+502    	; 0xdee <setCursor>
     bf8:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <snakeBodyLength>
	InitSnake(snake, snakeBodyLength);
     bfc:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <snakeBodyLength+0x1>
     c00:	bc 01       	movw	r22, r24
     c02:	81 e9       	ldi	r24, 0x91	; 145
     c04:	95 e0       	ldi	r25, 0x05	; 5
     c06:	51 d2       	rcall	.+1186   	; 0x10aa <InitSnake>
     c08:	6f e2       	ldi	r22, 0x2F	; 47
	currentFoodPosition = GenerateFoodPosition(WORLD_WIDTH, WORLD_HEIGHT);
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	83 e5       	ldi	r24, 0x53	; 83
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	f8 da       	rcall	.-2576   	; 0x202 <GenerateFoodPosition>
     c12:	dc 01       	movw	r26, r24
     c14:	cb 01       	movw	r24, r22
     c16:	80 93 71 0b 	sts	0x0B71, r24	; 0x800b71 <currentFoodPosition>
     c1a:	90 93 72 0b 	sts	0x0B72, r25	; 0x800b72 <currentFoodPosition+0x1>
     c1e:	a0 93 73 0b 	sts	0x0B73, r26	; 0x800b73 <currentFoodPosition+0x2>
     c22:	b0 93 74 0b 	sts	0x0B74, r27	; 0x800b74 <currentFoodPosition+0x3>
     c26:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <scoreOnesCounter+0x1>
	
	scoreOnesCounter = 0;
     c2a:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <scoreOnesCounter>
     c2e:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <scoreTensCounter+0x1>
	scoreTensCounter = 0;
     c32:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <scoreTensCounter>
     c36:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <scoreHundredsCounter+0x1>
	scoreHundredsCounter = 0;
     c3a:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <scoreHundredsCounter>
     c3e:	8c e3       	ldi	r24, 0x3C	; 60
	
	gameSpeed = GAME_INITIAL_SPEED;
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <gameSpeed+0x1>
     c46:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <gameSpeed>
     c4a:	00 00       	nop
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <initDisplay>:
#define RST_BIT 0 // PA0
#define DC_BIT 1 // PA1
#define LIGHT_BIT 2 // PA2

void initDisplay()
{
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
	SPI_MasterInit();
     c5a:	03 d6       	rcall	.+3078   	; 0x1862 <SPI_MasterInit>
	
	// Set port to output
	DDRA |= 0b00000111;
     c5c:	81 e2       	ldi	r24, 0x21	; 33
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	21 e2       	ldi	r18, 0x21	; 33
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	f9 01       	movw	r30, r18
     c66:	20 81       	ld	r18, Z
     c68:	27 60       	ori	r18, 0x07	; 7
     c6a:	fc 01       	movw	r30, r24
     c6c:	20 83       	st	Z, r18
	
	// Turn on light
	PORTA &= ~(1 << LIGHT_BIT);
     c6e:	82 e2       	ldi	r24, 0x22	; 34
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	22 e2       	ldi	r18, 0x22	; 34
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	f9 01       	movw	r30, r18
     c78:	20 81       	ld	r18, Z
     c7a:	2b 7f       	andi	r18, 0xFB	; 251
     c7c:	fc 01       	movw	r30, r24
     c7e:	20 83       	st	Z, r18
	
	// Set bits to high (active low)
	PORTA |= (1 << RST_BIT);
     c80:	82 e2       	ldi	r24, 0x22	; 34
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	22 e2       	ldi	r18, 0x22	; 34
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	f9 01       	movw	r30, r18
     c8a:	20 81       	ld	r18, Z
     c8c:	21 60       	ori	r18, 0x01	; 1
     c8e:	fc 01       	movw	r30, r24
     c90:	20 83       	st	Z, r18
	PORTA |= (1 << DC_BIT);
     c92:	82 e2       	ldi	r24, 0x22	; 34
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	22 e2       	ldi	r18, 0x22	; 34
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	f9 01       	movw	r30, r18
     c9c:	20 81       	ld	r18, Z
     c9e:	22 60       	ori	r18, 0x02	; 2
     ca0:	fc 01       	movw	r30, r24
	
	// Required display reset
	// This has to be done before doing
	// Anything else with the display
	resetDisplay();
     ca2:	20 83       	st	Z, r18
	
	// Use extended instruction set
	sendIntruction(0x21);
     ca4:	0f d0       	rcall	.+30     	; 0xcc4 <resetDisplay>
     ca6:	81 e2       	ldi	r24, 0x21	; 33

	// Here we control operation voltage of the LCD
	// We set it to 6V (the minimum allowed voltage range)
	// If you do not set a VOP value, the internal voltage generator
	// Will be switched off, and thus the display won't function.
	sendIntruction(0xC0);
     ca8:	bf d0       	rcall	.+382    	; 0xe28 <sendIntruction>
     caa:	80 ec       	ldi	r24, 0xC0	; 192

	// We set the bias voltage levels
	// The bias value is taken after the
	// optimum bias value described in official
	// data sheet.
	sendIntruction(0x13);
     cac:	bd d0       	rcall	.+378    	; 0xe28 <sendIntruction>
     cae:	83 e1       	ldi	r24, 0x13	; 19

	// Use basic instruction set
	sendIntruction(0x20);
     cb0:	bb d0       	rcall	.+374    	; 0xe28 <sendIntruction>
     cb2:	80 e2       	ldi	r24, 0x20	; 32
     cb4:	b9 d0       	rcall	.+370    	; 0xe28 <sendIntruction>

	// Set display mode normal
	sendIntruction(0b00001100);
     cb6:	8c e0       	ldi	r24, 0x0C	; 12
     cb8:	b7 d0       	rcall	.+366    	; 0xe28 <sendIntruction>
     cba:	eb d0       	rcall	.+470    	; 0xe92 <clearDisplay>

	// Clear the display to make sure
	// No pixels are alive on startup
	clearDisplay();
     cbc:	00 00       	nop
     cbe:	df 91       	pop	r29
}
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <resetDisplay>:
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29


void resetDisplay()
{
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	2e 97       	sbiw	r28, 0x0e	; 14
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
	// Set RES low
	PORTA &= ~(1 << RST_BIT);
     cd8:	82 e2       	ldi	r24, 0x22	; 34
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	22 e2       	ldi	r18, 0x22	; 34
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	f9 01       	movw	r30, r18
     ce2:	20 81       	ld	r18, Z
     ce4:	2e 7f       	andi	r18, 0xFE	; 254
     ce6:	fc 01       	movw	r30, r24
     ce8:	20 83       	st	Z, r18
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	a8 ec       	ldi	r26, 0xC8	; 200
     cf0:	b2 e4       	ldi	r27, 0x42	; 66
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	ab 83       	std	Y+3, r26	; 0x03
     cf8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	4a e7       	ldi	r20, 0x7A	; 122
     d00:	55 e4       	ldi	r21, 0x45	; 69
     d02:	69 81       	ldd	r22, Y+1	; 0x01
     d04:	7a 81       	ldd	r23, Y+2	; 0x02
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	8d 83       	std	Y+5, r24	; 0x05
     d14:	9e 83       	std	Y+6, r25	; 0x06
     d16:	af 83       	std	Y+7, r26	; 0x07
     d18:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e8       	ldi	r20, 0x80	; 128
     d20:	5f e3       	ldi	r21, 0x3F	; 63
     d22:	6d 81       	ldd	r22, Y+5	; 0x05
     d24:	7e 81       	ldd	r23, Y+6	; 0x06
     d26:	8f 81       	ldd	r24, Y+7	; 0x07
     d28:	98 85       	ldd	r25, Y+8	; 0x08
     d2a:	c4 d7       	rcall	.+3976   	; 0x1cb4 <__cmpsf2>
     d2c:	88 23       	and	r24, r24
     d2e:	2c f4       	brge	.+10     	; 0xd3a <resetDisplay+0x76>
		__ticks = 1;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	9a 87       	std	Y+10, r25	; 0x0a
     d36:	89 87       	std	Y+9, r24	; 0x09
     d38:	3d c0       	rjmp	.+122    	; 0xdb4 <resetDisplay+0xf0>
	else if (__tmp > 65535)
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	3f ef       	ldi	r19, 0xFF	; 255
     d3e:	4f e7       	ldi	r20, 0x7F	; 127
     d40:	57 e4       	ldi	r21, 0x47	; 71
     d42:	6d 81       	ldd	r22, Y+5	; 0x05
     d44:	7e 81       	ldd	r23, Y+6	; 0x06
     d46:	8f 81       	ldd	r24, Y+7	; 0x07
     d48:	98 85       	ldd	r25, Y+8	; 0x08
     d4a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__gesf2>
     d4e:	18 16       	cp	r1, r24
     d50:	44 f5       	brge	.+80     	; 0xda2 <resetDisplay+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e2       	ldi	r20, 0x20	; 32
     d58:	51 e4       	ldi	r21, 0x41	; 65
     d5a:	69 81       	ldd	r22, Y+1	; 0x01
     d5c:	7a 81       	ldd	r23, Y+2	; 0x02
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__mulsf3>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	bc 01       	movw	r22, r24
     d6c:	cd 01       	movw	r24, r26
     d6e:	a6 d7       	rcall	.+3916   	; 0x1cbc <__fixunssfsi>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	9a 87       	std	Y+10, r25	; 0x0a
     d76:	89 87       	std	Y+9, r24	; 0x09
     d78:	0f c0       	rjmp	.+30     	; 0xd98 <resetDisplay+0xd4>
     d7a:	80 e9       	ldi	r24, 0x90	; 144
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	9c 87       	std	Y+12, r25	; 0x0c
     d80:	8b 87       	std	Y+11, r24	; 0x0b
     d82:	8b 85       	ldd	r24, Y+11	; 0x0b
     d84:	9c 85       	ldd	r25, Y+12	; 0x0c
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	f1 f7       	brne	.-4      	; 0xd86 <resetDisplay+0xc2>
     d8a:	9c 87       	std	Y+12, r25	; 0x0c
     d8c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8e:	89 85       	ldd	r24, Y+9	; 0x09
     d90:	9a 85       	ldd	r25, Y+10	; 0x0a
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	9a 87       	std	Y+10, r25	; 0x0a
     d96:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d98:	89 85       	ldd	r24, Y+9	; 0x09
     d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9c:	89 2b       	or	r24, r25
     d9e:	69 f7       	brne	.-38     	; 0xd7a <resetDisplay+0xb6>
     da0:	13 c0       	rjmp	.+38     	; 0xdc8 <resetDisplay+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da2:	6d 81       	ldd	r22, Y+5	; 0x05
     da4:	7e 81       	ldd	r23, Y+6	; 0x06
     da6:	8f 81       	ldd	r24, Y+7	; 0x07
     da8:	98 85       	ldd	r25, Y+8	; 0x08
     daa:	88 d7       	rcall	.+3856   	; 0x1cbc <__fixunssfsi>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	9a 87       	std	Y+10, r25	; 0x0a
     db2:	89 87       	std	Y+9, r24	; 0x09
     db4:	89 85       	ldd	r24, Y+9	; 0x09
     db6:	9a 85       	ldd	r25, Y+10	; 0x0a
     db8:	9e 87       	std	Y+14, r25	; 0x0e
     dba:	8d 87       	std	Y+13, r24	; 0x0d
     dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <resetDisplay+0xfc>
     dc4:	9e 87       	std	Y+14, r25	; 0x0e
     dc6:	8d 87       	std	Y+13, r24	; 0x0d
		
	// Delay of min 100 ns (0,1ms) p.20
	_delay_ms(100);
		
	// Set RES high
	PORTA |= (1 << RST_BIT);
     dc8:	82 e2       	ldi	r24, 0x22	; 34
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	22 e2       	ldi	r18, 0x22	; 34
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	f9 01       	movw	r30, r18
     dd2:	20 81       	ld	r18, Z
     dd4:	21 60       	ori	r18, 0x01	; 1
     dd6:	fc 01       	movw	r30, r24
     dd8:	20 83       	st	Z, r18
}
     dda:	00 00       	nop
     ddc:	2e 96       	adiw	r28, 0x0e	; 14
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	08 95       	ret

00000dee <setCursor>:

void setCursor(char x, char y)
{
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	1f 92       	push	r1
     df4:	1f 92       	push	r1
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	6a 83       	std	Y+2, r22	; 0x02
	if (x > 83 || x < 0)
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	84 35       	cpi	r24, 0x54	; 84
     e02:	50 f4       	brcc	.+20     	; 0xe18 <setCursor+0x2a>
		return;
		
	if (y > 5 || y < 0)
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	86 30       	cpi	r24, 0x06	; 6
     e08:	48 f4       	brcc	.+18     	; 0xe1c <setCursor+0x2e>
		return;
	
	sendIntruction(0b10000000 | x);
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	80 68       	ori	r24, 0x80	; 128
     e0e:	0c d0       	rcall	.+24     	; 0xe28 <sendIntruction>
	sendIntruction(0b01000000 | y);
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	80 64       	ori	r24, 0x40	; 64
     e14:	09 d0       	rcall	.+18     	; 0xe28 <sendIntruction>
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <setCursor+0x30>
}

void setCursor(char x, char y)
{
	if (x > 83 || x < 0)
		return;
     e18:	00 00       	nop
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <setCursor+0x30>
		
	if (y > 5 || y < 0)
		return;
     e1c:	00 00       	nop
	
	sendIntruction(0b10000000 | x);
	sendIntruction(0b01000000 | y);
}
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	08 95       	ret

00000e28 <sendIntruction>:

void sendIntruction(unsigned char cmd)
{
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	1f 92       	push	r1
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	89 83       	std	Y+1, r24	; 0x01
	// Set DC low, Command
	PORTA &= ~(1 << DC_BIT);
     e34:	82 e2       	ldi	r24, 0x22	; 34
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	22 e2       	ldi	r18, 0x22	; 34
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	f9 01       	movw	r30, r18
     e3e:	20 81       	ld	r18, Z
     e40:	2d 7f       	andi	r18, 0xFD	; 253
     e42:	fc 01       	movw	r30, r24
     e44:	20 83       	st	Z, r18
	SPI_MasterTransmit(cmd);
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	1e d5       	rcall	.+2620   	; 0x1886 <SPI_MasterTransmit>
	PORTA |= 1 << DC_BIT;
     e4a:	82 e2       	ldi	r24, 0x22	; 34
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	22 e2       	ldi	r18, 0x22	; 34
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	f9 01       	movw	r30, r18
     e54:	20 81       	ld	r18, Z
     e56:	22 60       	ori	r18, 0x02	; 2
     e58:	fc 01       	movw	r30, r24
     e5a:	20 83       	st	Z, r18
}
     e5c:	00 00       	nop
     e5e:	0f 90       	pop	r0
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <sendData>:

void sendData(unsigned char data)
{	
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	1f 92       	push	r1
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= 1 << DC_BIT;
     e72:	82 e2       	ldi	r24, 0x22	; 34
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	22 e2       	ldi	r18, 0x22	; 34
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	f9 01       	movw	r30, r18
     e7c:	20 81       	ld	r18, Z
     e7e:	22 60       	ori	r18, 0x02	; 2
     e80:	fc 01       	movw	r30, r24
     e82:	20 83       	st	Z, r18
	SPI_MasterTransmit(data);
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	ff d4       	rcall	.+2558   	; 0x1886 <SPI_MasterTransmit>
}
     e88:	00 00       	nop
     e8a:	0f 90       	pop	r0
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <clearDisplay>:

void clearDisplay()
{
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	1f 92       	push	r1
     e98:	1f 92       	push	r1
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	for (int k=0; k<504; k++)
     e9e:	1a 82       	std	Y+2, r1	; 0x02
     ea0:	19 82       	std	Y+1, r1	; 0x01
     ea2:	07 c0       	rjmp	.+14     	; 0xeb2 <clearDisplay+0x20>
	{
		sendData(0x00);
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	df df       	rcall	.-66     	; 0xe66 <sendData>
	SPI_MasterTransmit(data);
}

void clearDisplay()
{
	for (int k=0; k<504; k++)
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	88 3f       	cpi	r24, 0xF8	; 248
     eb8:	91 40       	sbci	r25, 0x01	; 1
     eba:	a4 f3       	brlt	.-24     	; 0xea4 <clearDisplay+0x12>
	{
		sendData(0x00);
	}
     ebc:	00 00       	nop
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <GoLeft>:
int xDirection = 1;
int yDirection = 0;
int hitSelf = 0;

void GoLeft()
{
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
	if (xDirection == 1)
     ed0:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <xDirection>
     ed4:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <xDirection+0x1>
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	59 f0       	breq	.+22     	; 0xef2 <GoLeft+0x2a>
		return;
	
	yDirection = 0;
     edc:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <yDirection+0x1>
     ee0:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <yDirection>
	xDirection = -1;
     ee4:	8f ef       	ldi	r24, 0xFF	; 255
     ee6:	9f ef       	ldi	r25, 0xFF	; 255
     ee8:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <xDirection+0x1>
     eec:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <xDirection>
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <GoLeft+0x2c>
int hitSelf = 0;

void GoLeft()
{
	if (xDirection == 1)
		return;
     ef2:	00 00       	nop
	
	yDirection = 0;
	xDirection = -1;
}
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <GoRight>:

void GoRight()
{
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
	if (xDirection == -1)
     f02:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <xDirection>
     f06:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <xDirection+0x1>
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	59 f0       	breq	.+22     	; 0xf24 <GoRight+0x2a>
		return;
	
	yDirection = 0;
     f0e:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <yDirection+0x1>
     f12:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <yDirection>
	xDirection = 1;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <xDirection+0x1>
     f1e:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <xDirection>
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <GoRight+0x2c>
}

void GoRight()
{
	if (xDirection == -1)
		return;
     f24:	00 00       	nop
	
	yDirection = 0;
	xDirection = 1;
}
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	08 95       	ret

00000f2c <GoUp>:

void GoUp()
{
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
	if (yDirection == 1)
     f34:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <yDirection>
     f38:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <yDirection+0x1>
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	59 f0       	breq	.+22     	; 0xf56 <GoUp+0x2a>
	return;
	
	yDirection = -1;
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	9f ef       	ldi	r25, 0xFF	; 255
     f44:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <yDirection+0x1>
     f48:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <yDirection>
	xDirection = 0;
     f4c:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <xDirection+0x1>
     f50:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <xDirection>
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <GoUp+0x2c>
}

void GoUp()
{
	if (yDirection == 1)
	return;
     f56:	00 00       	nop
	
	yDirection = -1;
	xDirection = 0;
}
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <GoDown>:

void GoDown()
{
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
	if (yDirection == -1)
     f66:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <yDirection>
     f6a:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <yDirection+0x1>
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	59 f0       	breq	.+22     	; 0xf88 <GoDown+0x2a>
	return;
	
	xDirection = 0;
     f72:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <xDirection+0x1>
     f76:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <xDirection>
	yDirection = 1;
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	90 93 8e 05 	sts	0x058E, r25	; 0x80058e <yDirection+0x1>
     f82:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <yDirection>
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <GoDown+0x2c>
}

void GoDown()
{
	if (yDirection == -1)
	return;
     f88:	00 00       	nop
	
	xDirection = 0;
	yDirection = 1;
}
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <CheckInput>:

void CheckInput()
{
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	if (GetKey() == '8')
     f98:	a2 d9       	rcall	.-3260   	; 0x2de <GetKey>
     f9a:	88 33       	cpi	r24, 0x38	; 56
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <CheckInput+0x10>
	{
		GoDown();
     f9e:	df df       	rcall	.-66     	; 0xf5e <GoDown>
	}

	if (GetKey() == '2')
     fa0:	9e d9       	rcall	.-3268   	; 0x2de <GetKey>
     fa2:	82 33       	cpi	r24, 0x32	; 50
	{
		GoUp();
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <CheckInput+0x18>
	}

	if (GetKey() == '6')
     fa6:	c2 df       	rcall	.-124    	; 0xf2c <GoUp>
     fa8:	9a d9       	rcall	.-3276   	; 0x2de <GetKey>
     faa:	86 33       	cpi	r24, 0x36	; 54
	{
		GoRight();
     fac:	09 f4       	brne	.+2      	; 0xfb0 <CheckInput+0x20>
     fae:	a5 df       	rcall	.-182    	; 0xefa <GoRight>
	}

	if (GetKey() == '4')
     fb0:	96 d9       	rcall	.-3284   	; 0x2de <GetKey>
     fb2:	84 33       	cpi	r24, 0x34	; 52
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <CheckInput+0x28>
     fb6:	88 df       	rcall	.-240    	; 0xec8 <GoLeft>
	{
		GoLeft();
     fb8:	00 00       	nop
     fba:	df 91       	pop	r29
	}
}
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <CheckSnakeBodyCollision>:
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29

void CheckSnakeBodyCollision(struct SnakeBodyPart snakeArray[], int snakeLength)
{
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	6a 97       	sbiw	r28, 0x1a	; 26
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	98 8f       	std	Y+24, r25	; 0x18
     fd6:	8f 8b       	std	Y+23, r24	; 0x17
     fd8:	7a 8f       	std	Y+26, r23	; 0x1a
     fda:	69 8f       	std	Y+25, r22	; 0x19
	struct SnakeBodyPart snakeHead = snakeArray[0];
     fdc:	8f 89       	ldd	r24, Y+23	; 0x17
     fde:	98 8d       	ldd	r25, Y+24	; 0x18
     fe0:	2a e0       	ldi	r18, 0x0A	; 10
     fe2:	fc 01       	movw	r30, r24
     fe4:	de 01       	movw	r26, r28
     fe6:	13 96       	adiw	r26, 0x03	; 3
     fe8:	01 90       	ld	r0, Z+
     fea:	0d 92       	st	X+, r0
     fec:	2a 95       	dec	r18
     fee:	e1 f7       	brne	.-8      	; 0xfe8 <CheckSnakeBodyCollision+0x28>
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	46 c0       	rjmp	.+140    	; 0x1086 <CheckSnakeBodyCollision+0xc6>
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	9a 81       	ldd	r25, Y+2	; 0x02
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	9c 01       	movw	r18, r24
    1004:	22 0f       	add	r18, r18
    1006:	33 1f       	adc	r19, r19
    1008:	22 0f       	add	r18, r18
    100a:	33 1f       	adc	r19, r19
    100c:	82 0f       	add	r24, r18
    100e:	93 1f       	adc	r25, r19
    1010:	2f 89       	ldd	r18, Y+23	; 0x17
    1012:	38 8d       	ldd	r19, Y+24	; 0x18
    1014:	82 0f       	add	r24, r18
    1016:	93 1f       	adc	r25, r19
    1018:	2a e0       	ldi	r18, 0x0A	; 10
    101a:	fc 01       	movw	r30, r24
    101c:	de 01       	movw	r26, r28
    101e:	1d 96       	adiw	r26, 0x0d	; 13
    1020:	01 90       	ld	r0, Z+
    1022:	0d 92       	st	X+, r0
    1024:	2a 95       	dec	r18
    1026:	e1 f7       	brne	.-8      	; 0x1020 <CheckSnakeBodyCollision+0x60>
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
    1028:	2b 81       	ldd	r18, Y+3	; 0x03
    102a:	3c 81       	ldd	r19, Y+4	; 0x04
    102c:	8d 85       	ldd	r24, Y+13	; 0x0d
    102e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1030:	02 96       	adiw	r24, 0x02	; 2
    1032:	28 17       	cp	r18, r24
    1034:	39 07       	cpc	r19, r25
    1036:	14 f5       	brge	.+68     	; 0x107c <CheckSnakeBodyCollision+0xbc>
		(snakeHead.x + 2) > currentBodyPart.x &&
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	9c 01       	movw	r18, r24
    103e:	2e 5f       	subi	r18, 0xFE	; 254
    1040:	3f 4f       	sbci	r19, 0xFF	; 255
    1042:	8d 85       	ldd	r24, Y+13	; 0x0d
    1044:	9e 85       	ldd	r25, Y+14	; 0x0e
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
    1046:	82 17       	cp	r24, r18
    1048:	93 07       	cpc	r25, r19
    104a:	c4 f4       	brge	.+48     	; 0x107c <CheckSnakeBodyCollision+0xbc>
		(snakeHead.x + 2) > currentBodyPart.x &&
		snakeHead.y < (currentBodyPart.y + 2) &&
    104c:	2d 81       	ldd	r18, Y+5	; 0x05
    104e:	3e 81       	ldd	r19, Y+6	; 0x06
    1050:	8f 85       	ldd	r24, Y+15	; 0x0f
    1052:	98 89       	ldd	r25, Y+16	; 0x10
    1054:	02 96       	adiw	r24, 0x02	; 2
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
		(snakeHead.x + 2) > currentBodyPart.x &&
    1056:	28 17       	cp	r18, r24
    1058:	39 07       	cpc	r19, r25
    105a:	84 f4       	brge	.+32     	; 0x107c <CheckSnakeBodyCollision+0xbc>
		snakeHead.y < (currentBodyPart.y + 2) &&
		(2 + snakeHead.y) > currentBodyPart.y)
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	9c 01       	movw	r18, r24
    1062:	2e 5f       	subi	r18, 0xFE	; 254
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	8f 85       	ldd	r24, Y+15	; 0x0f
    1068:	98 89       	ldd	r25, Y+16	; 0x10
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
		(snakeHead.x + 2) > currentBodyPart.x &&
		snakeHead.y < (currentBodyPart.y + 2) &&
    106a:	82 17       	cp	r24, r18
    106c:	93 07       	cpc	r25, r19
    106e:	34 f4       	brge	.+12     	; 0x107c <CheckSnakeBodyCollision+0xbc>
		(2 + snakeHead.y) > currentBodyPart.y)
		{
			hitSelf = 1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <hitSelf+0x1>
    1078:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <hitSelf>

void CheckSnakeBodyCollision(struct SnakeBodyPart snakeArray[], int snakeLength)
{
	struct SnakeBodyPart snakeHead = snakeArray[0];
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	29 81       	ldd	r18, Y+1	; 0x01
    1088:	3a 81       	ldd	r19, Y+2	; 0x02
    108a:	89 8d       	ldd	r24, Y+25	; 0x19
    108c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    108e:	28 17       	cp	r18, r24
    1090:	39 07       	cpc	r19, r25
    1092:	0c f4       	brge	.+2      	; 0x1096 <CheckSnakeBodyCollision+0xd6>
    1094:	b2 cf       	rjmp	.-156    	; 0xffa <CheckSnakeBodyCollision+0x3a>
		(2 + snakeHead.y) > currentBodyPart.y)
		{
			hitSelf = 1;
		}
	}
}
    1096:	00 00       	nop
    1098:	6a 96       	adiw	r28, 0x1a	; 26
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	08 95       	ret

000010aa <InitSnake>:

void InitSnake(struct SnakeBodyPart snakeArray[], int snakeLength)
{
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	6a 97       	sbiw	r28, 0x1a	; 26
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	98 8f       	std	Y+24, r25	; 0x18
    10c0:	8f 8b       	std	Y+23, r24	; 0x17
    10c2:	7a 8f       	std	Y+26, r23	; 0x1a
    10c4:	69 8f       	std	Y+25, r22	; 0x19
	if (snakeLength <= 0)
    10c6:	89 8d       	ldd	r24, Y+25	; 0x19
    10c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10ca:	18 16       	cp	r1, r24
    10cc:	19 06       	cpc	r1, r25
    10ce:	0c f0       	brlt	.+2      	; 0x10d2 <InitSnake+0x28>
    10d0:	6d c0       	rjmp	.+218    	; 0x11ac <InitSnake+0x102>
		return;
		
	// Clear Array
	memset(snakeArray, 0, snakeLength);
    10d2:	29 8d       	ldd	r18, Y+25	; 0x19
    10d4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    10d6:	8f 89       	ldd	r24, Y+23	; 0x17
    10d8:	98 8d       	ldd	r25, Y+24	; 0x18
    10da:	a9 01       	movw	r20, r18
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	ae d7       	rcall	.+3932   	; 0x203e <memset>
	hitSelf = 0;
    10e2:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <hitSelf+0x1>
    10e6:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <hitSelf>
	
	xDirection = 1;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <xDirection+0x1>
    10f2:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <xDirection>
	yDirection = 0;
    10f6:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <yDirection+0x1>
    10fa:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <yDirection>
		
	struct SnakeBodyPart head;
	head.x = 0;
    10fe:	1c 82       	std	Y+4, r1	; 0x04
    1100:	1b 82       	std	Y+3, r1	; 0x03
	head.y = 0;
    1102:	1e 82       	std	Y+6, r1	; 0x06
    1104:	1d 82       	std	Y+5, r1	; 0x05
	head.prevX = 0;
    1106:	18 86       	std	Y+8, r1	; 0x08
    1108:	1f 82       	std	Y+7, r1	; 0x07
	head.prevY = 0;
    110a:	1a 86       	std	Y+10, r1	; 0x0a
    110c:	19 86       	std	Y+9, r1	; 0x09
	head.headPointer = 0;
    110e:	1c 86       	std	Y+12, r1	; 0x0c
    1110:	1b 86       	std	Y+11, r1	; 0x0b
	snakeArray[0] = head;
    1112:	8f 89       	ldd	r24, Y+23	; 0x17
    1114:	98 8d       	ldd	r25, Y+24	; 0x18
    1116:	2a e0       	ldi	r18, 0x0A	; 10
    1118:	fe 01       	movw	r30, r28
    111a:	33 96       	adiw	r30, 0x03	; 3
    111c:	dc 01       	movw	r26, r24
    111e:	01 90       	ld	r0, Z+
    1120:	0d 92       	st	X+, r0
    1122:	2a 95       	dec	r18
    1124:	e1 f7       	brne	.-8      	; 0x111e <InitSnake+0x74>
	
	for (int snakeBodyIndex = 1; snakeBodyIndex < (snakeLength); snakeBodyIndex++)
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	36 c0       	rjmp	.+108    	; 0x119c <InitSnake+0xf2>
	{
		struct SnakeBodyPart newBodyPart;
		newBodyPart.x = -2;
    1130:	8e ef       	ldi	r24, 0xFE	; 254
    1132:	9f ef       	ldi	r25, 0xFF	; 255
    1134:	9e 87       	std	Y+14, r25	; 0x0e
    1136:	8d 87       	std	Y+13, r24	; 0x0d
		newBodyPart.y = -2;
    1138:	8e ef       	ldi	r24, 0xFE	; 254
    113a:	9f ef       	ldi	r25, 0xFF	; 255
    113c:	98 8b       	std	Y+16, r25	; 0x10
    113e:	8f 87       	std	Y+15, r24	; 0x0f
		newBodyPart.headPointer = &snakeArray[snakeBodyIndex - 1];
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	9a 81       	ldd	r25, Y+2	; 0x02
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	9c 01       	movw	r18, r24
    114a:	22 0f       	add	r18, r18
    114c:	33 1f       	adc	r19, r19
    114e:	22 0f       	add	r18, r18
    1150:	33 1f       	adc	r19, r19
    1152:	82 0f       	add	r24, r18
    1154:	93 1f       	adc	r25, r19
    1156:	0a 97       	sbiw	r24, 0x0a	; 10
    1158:	2f 89       	ldd	r18, Y+23	; 0x17
    115a:	38 8d       	ldd	r19, Y+24	; 0x18
    115c:	82 0f       	add	r24, r18
    115e:	93 1f       	adc	r25, r19
    1160:	9e 8b       	std	Y+22, r25	; 0x16
    1162:	8d 8b       	std	Y+21, r24	; 0x15
		snakeArray[snakeBodyIndex] = newBodyPart;
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	9a 81       	ldd	r25, Y+2	; 0x02
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	9c 01       	movw	r18, r24
    116e:	22 0f       	add	r18, r18
    1170:	33 1f       	adc	r19, r19
    1172:	22 0f       	add	r18, r18
    1174:	33 1f       	adc	r19, r19
    1176:	82 0f       	add	r24, r18
    1178:	93 1f       	adc	r25, r19
    117a:	2f 89       	ldd	r18, Y+23	; 0x17
    117c:	38 8d       	ldd	r19, Y+24	; 0x18
    117e:	82 0f       	add	r24, r18
    1180:	93 1f       	adc	r25, r19
    1182:	2a e0       	ldi	r18, 0x0A	; 10
    1184:	fe 01       	movw	r30, r28
    1186:	3d 96       	adiw	r30, 0x0d	; 13
    1188:	dc 01       	movw	r26, r24
    118a:	01 90       	ld	r0, Z+
    118c:	0d 92       	st	X+, r0
    118e:	2a 95       	dec	r18
    1190:	e1 f7       	brne	.-8      	; 0x118a <InitSnake+0xe0>
	head.prevX = 0;
	head.prevY = 0;
	head.headPointer = 0;
	snakeArray[0] = head;
	
	for (int snakeBodyIndex = 1; snakeBodyIndex < (snakeLength); snakeBodyIndex++)
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	9a 83       	std	Y+2, r25	; 0x02
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	29 81       	ldd	r18, Y+1	; 0x01
    119e:	3a 81       	ldd	r19, Y+2	; 0x02
    11a0:	89 8d       	ldd	r24, Y+25	; 0x19
    11a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    11a4:	28 17       	cp	r18, r24
    11a6:	39 07       	cpc	r19, r25
    11a8:	1c f2       	brlt	.-122    	; 0x1130 <InitSnake+0x86>
    11aa:	01 c0       	rjmp	.+2      	; 0x11ae <InitSnake+0x104>
}

void InitSnake(struct SnakeBodyPart snakeArray[], int snakeLength)
{
	if (snakeLength <= 0)
		return;
    11ac:	00 00       	nop
		newBodyPart.x = -2;
		newBodyPart.y = -2;
		newBodyPart.headPointer = &snakeArray[snakeBodyIndex - 1];
		snakeArray[snakeBodyIndex] = newBodyPart;
	}
}
    11ae:	6a 96       	adiw	r28, 0x1a	; 26
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	08 95       	ret

000011c0 <UpdateSnake>:

void UpdateSnake(struct SnakeBodyPart snakeArray[], int snakeLength, int worldWidth, int worldHeight)
{
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	2a 97       	sbiw	r28, 0x0a	; 10
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	9c 83       	std	Y+4, r25	; 0x04
    11d6:	8b 83       	std	Y+3, r24	; 0x03
    11d8:	7e 83       	std	Y+6, r23	; 0x06
    11da:	6d 83       	std	Y+5, r22	; 0x05
    11dc:	58 87       	std	Y+8, r21	; 0x08
    11de:	4f 83       	std	Y+7, r20	; 0x07
    11e0:	3a 87       	std	Y+10, r19	; 0x0a
    11e2:	29 87       	std	Y+9, r18	; 0x09
	CheckInput();
    11e4:	d5 de       	rcall	.-598    	; 0xf90 <CheckInput>
	
	for (int bodyPartIndex = 0; bodyPartIndex < snakeLength; bodyPartIndex++)
    11e6:	1a 82       	std	Y+2, r1	; 0x02
    11e8:	19 82       	std	Y+1, r1	; 0x01
    11ea:	b5 c2       	rjmp	.+1386   	; 0x1756 <UpdateSnake+0x596>
	{
		// Check for head
		if (snakeArray[bodyPartIndex].headPointer == 0)
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	9c 01       	movw	r18, r24
    11f6:	22 0f       	add	r18, r18
    11f8:	33 1f       	adc	r19, r19
    11fa:	22 0f       	add	r18, r18
    11fc:	33 1f       	adc	r19, r19
    11fe:	82 0f       	add	r24, r18
    1200:	93 1f       	adc	r25, r19
    1202:	2b 81       	ldd	r18, Y+3	; 0x03
    1204:	3c 81       	ldd	r19, Y+4	; 0x04
    1206:	82 0f       	add	r24, r18
    1208:	93 1f       	adc	r25, r19
    120a:	fc 01       	movw	r30, r24
    120c:	80 85       	ldd	r24, Z+8	; 0x08
    120e:	91 85       	ldd	r25, Z+9	; 0x09
    1210:	89 2b       	or	r24, r25
    1212:	09 f0       	breq	.+2      	; 0x1216 <UpdateSnake+0x56>
    1214:	05 c2       	rjmp	.+1034   	; 0x1620 <UpdateSnake+0x460>
		{
			snakeArray[bodyPartIndex].prevX = snakeArray[bodyPartIndex].x;
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	9c 01       	movw	r18, r24
    1220:	22 0f       	add	r18, r18
    1222:	33 1f       	adc	r19, r19
    1224:	22 0f       	add	r18, r18
    1226:	33 1f       	adc	r19, r19
    1228:	82 0f       	add	r24, r18
    122a:	93 1f       	adc	r25, r19
    122c:	2b 81       	ldd	r18, Y+3	; 0x03
    122e:	3c 81       	ldd	r19, Y+4	; 0x04
    1230:	28 0f       	add	r18, r24
    1232:	39 1f       	adc	r19, r25
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	ac 01       	movw	r20, r24
    123e:	44 0f       	add	r20, r20
    1240:	55 1f       	adc	r21, r21
    1242:	44 0f       	add	r20, r20
    1244:	55 1f       	adc	r21, r21
    1246:	84 0f       	add	r24, r20
    1248:	95 1f       	adc	r25, r21
    124a:	4b 81       	ldd	r20, Y+3	; 0x03
    124c:	5c 81       	ldd	r21, Y+4	; 0x04
    124e:	84 0f       	add	r24, r20
    1250:	95 1f       	adc	r25, r21
    1252:	fc 01       	movw	r30, r24
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	f9 01       	movw	r30, r18
    125a:	95 83       	std	Z+5, r25	; 0x05
    125c:	84 83       	std	Z+4, r24	; 0x04
			snakeArray[bodyPartIndex].prevY = snakeArray[bodyPartIndex].y;
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	9c 01       	movw	r18, r24
    1268:	22 0f       	add	r18, r18
    126a:	33 1f       	adc	r19, r19
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	82 0f       	add	r24, r18
    1272:	93 1f       	adc	r25, r19
    1274:	2b 81       	ldd	r18, Y+3	; 0x03
    1276:	3c 81       	ldd	r19, Y+4	; 0x04
    1278:	28 0f       	add	r18, r24
    127a:	39 1f       	adc	r19, r25
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	9a 81       	ldd	r25, Y+2	; 0x02
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	ac 01       	movw	r20, r24
    1286:	44 0f       	add	r20, r20
    1288:	55 1f       	adc	r21, r21
    128a:	44 0f       	add	r20, r20
    128c:	55 1f       	adc	r21, r21
    128e:	84 0f       	add	r24, r20
    1290:	95 1f       	adc	r25, r21
    1292:	4b 81       	ldd	r20, Y+3	; 0x03
    1294:	5c 81       	ldd	r21, Y+4	; 0x04
    1296:	84 0f       	add	r24, r20
    1298:	95 1f       	adc	r25, r21
    129a:	fc 01       	movw	r30, r24
    129c:	82 81       	ldd	r24, Z+2	; 0x02
    129e:	93 81       	ldd	r25, Z+3	; 0x03
    12a0:	f9 01       	movw	r30, r18
    12a2:	97 83       	std	Z+7, r25	; 0x07
    12a4:	86 83       	std	Z+6, r24	; 0x06
					
			if ((snakeArray[bodyPartIndex].x + 1) > worldWidth)
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	9a 81       	ldd	r25, Y+2	; 0x02
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	9c 01       	movw	r18, r24
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	22 0f       	add	r18, r18
    12b6:	33 1f       	adc	r19, r19
    12b8:	82 0f       	add	r24, r18
    12ba:	93 1f       	adc	r25, r19
    12bc:	2b 81       	ldd	r18, Y+3	; 0x03
    12be:	3c 81       	ldd	r19, Y+4	; 0x04
    12c0:	82 0f       	add	r24, r18
    12c2:	93 1f       	adc	r25, r19
    12c4:	fc 01       	movw	r30, r24
    12c6:	80 81       	ld	r24, Z
    12c8:	91 81       	ldd	r25, Z+1	; 0x01
    12ca:	9c 01       	movw	r18, r24
    12cc:	2f 5f       	subi	r18, 0xFF	; 255
    12ce:	3f 4f       	sbci	r19, 0xFF	; 255
    12d0:	8f 81       	ldd	r24, Y+7	; 0x07
    12d2:	98 85       	ldd	r25, Y+8	; 0x08
    12d4:	82 17       	cp	r24, r18
    12d6:	93 07       	cpc	r25, r19
    12d8:	0c f0       	brlt	.+2      	; 0x12dc <UpdateSnake+0x11c>
    12da:	3f c0       	rjmp	.+126    	; 0x135a <UpdateSnake+0x19a>
			{
				snakeArray[bodyPartIndex].x = 0;
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	9c 01       	movw	r18, r24
    12e6:	22 0f       	add	r18, r18
    12e8:	33 1f       	adc	r19, r19
    12ea:	22 0f       	add	r18, r18
    12ec:	33 1f       	adc	r19, r19
    12ee:	82 0f       	add	r24, r18
    12f0:	93 1f       	adc	r25, r19
    12f2:	2b 81       	ldd	r18, Y+3	; 0x03
    12f4:	3c 81       	ldd	r19, Y+4	; 0x04
    12f6:	82 0f       	add	r24, r18
    12f8:	93 1f       	adc	r25, r19
    12fa:	fc 01       	movw	r30, r24
    12fc:	11 82       	std	Z+1, r1	; 0x01
    12fe:	10 82       	st	Z, r1
				snakeArray[bodyPartIndex].y += 2 * yDirection;
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	9a 81       	ldd	r25, Y+2	; 0x02
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	9c 01       	movw	r18, r24
    130a:	22 0f       	add	r18, r18
    130c:	33 1f       	adc	r19, r19
    130e:	22 0f       	add	r18, r18
    1310:	33 1f       	adc	r19, r19
    1312:	82 0f       	add	r24, r18
    1314:	93 1f       	adc	r25, r19
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	28 0f       	add	r18, r24
    131c:	39 1f       	adc	r19, r25
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	ac 01       	movw	r20, r24
    1328:	44 0f       	add	r20, r20
    132a:	55 1f       	adc	r21, r21
    132c:	44 0f       	add	r20, r20
    132e:	55 1f       	adc	r21, r21
    1330:	84 0f       	add	r24, r20
    1332:	95 1f       	adc	r25, r21
    1334:	4b 81       	ldd	r20, Y+3	; 0x03
    1336:	5c 81       	ldd	r21, Y+4	; 0x04
    1338:	84 0f       	add	r24, r20
    133a:	95 1f       	adc	r25, r21
    133c:	fc 01       	movw	r30, r24
    133e:	42 81       	ldd	r20, Z+2	; 0x02
    1340:	53 81       	ldd	r21, Z+3	; 0x03
    1342:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <yDirection>
    1346:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <yDirection+0x1>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	84 0f       	add	r24, r20
    1350:	95 1f       	adc	r25, r21
    1352:	f9 01       	movw	r30, r18
    1354:	93 83       	std	Z+3, r25	; 0x03
    1356:	82 83       	std	Z+2, r24	; 0x02
    1358:	f9 c1       	rjmp	.+1010   	; 0x174c <UpdateSnake+0x58c>
			}
			else if ((snakeArray[bodyPartIndex].x) < 0) {
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	9c 01       	movw	r18, r24
    1364:	22 0f       	add	r18, r18
    1366:	33 1f       	adc	r19, r19
    1368:	22 0f       	add	r18, r18
    136a:	33 1f       	adc	r19, r19
    136c:	82 0f       	add	r24, r18
    136e:	93 1f       	adc	r25, r19
    1370:	2b 81       	ldd	r18, Y+3	; 0x03
    1372:	3c 81       	ldd	r19, Y+4	; 0x04
    1374:	82 0f       	add	r24, r18
    1376:	93 1f       	adc	r25, r19
    1378:	fc 01       	movw	r30, r24
    137a:	80 81       	ld	r24, Z
    137c:	91 81       	ldd	r25, Z+1	; 0x01
    137e:	99 23       	and	r25, r25
    1380:	0c f0       	brlt	.+2      	; 0x1384 <UpdateSnake+0x1c4>
    1382:	43 c0       	rjmp	.+134    	; 0x140a <UpdateSnake+0x24a>
				snakeArray[bodyPartIndex].x = worldWidth - 1;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	9c 01       	movw	r18, r24
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	22 0f       	add	r18, r18
    1394:	33 1f       	adc	r19, r19
    1396:	82 0f       	add	r24, r18
    1398:	93 1f       	adc	r25, r19
    139a:	2b 81       	ldd	r18, Y+3	; 0x03
    139c:	3c 81       	ldd	r19, Y+4	; 0x04
    139e:	82 0f       	add	r24, r18
    13a0:	93 1f       	adc	r25, r19
    13a2:	2f 81       	ldd	r18, Y+7	; 0x07
    13a4:	38 85       	ldd	r19, Y+8	; 0x08
    13a6:	21 50       	subi	r18, 0x01	; 1
    13a8:	31 09       	sbc	r19, r1
    13aa:	fc 01       	movw	r30, r24
    13ac:	31 83       	std	Z+1, r19	; 0x01
    13ae:	20 83       	st	Z, r18
				snakeArray[bodyPartIndex].y += 2 * yDirection;
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	9c 01       	movw	r18, r24
    13ba:	22 0f       	add	r18, r18
    13bc:	33 1f       	adc	r19, r19
    13be:	22 0f       	add	r18, r18
    13c0:	33 1f       	adc	r19, r19
    13c2:	82 0f       	add	r24, r18
    13c4:	93 1f       	adc	r25, r19
    13c6:	2b 81       	ldd	r18, Y+3	; 0x03
    13c8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ca:	28 0f       	add	r18, r24
    13cc:	39 1f       	adc	r19, r25
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	9a 81       	ldd	r25, Y+2	; 0x02
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	ac 01       	movw	r20, r24
    13d8:	44 0f       	add	r20, r20
    13da:	55 1f       	adc	r21, r21
    13dc:	44 0f       	add	r20, r20
    13de:	55 1f       	adc	r21, r21
    13e0:	84 0f       	add	r24, r20
    13e2:	95 1f       	adc	r25, r21
    13e4:	4b 81       	ldd	r20, Y+3	; 0x03
    13e6:	5c 81       	ldd	r21, Y+4	; 0x04
    13e8:	84 0f       	add	r24, r20
    13ea:	95 1f       	adc	r25, r21
    13ec:	fc 01       	movw	r30, r24
    13ee:	42 81       	ldd	r20, Z+2	; 0x02
    13f0:	53 81       	ldd	r21, Z+3	; 0x03
    13f2:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <yDirection>
    13f6:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <yDirection+0x1>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	84 0f       	add	r24, r20
    1400:	95 1f       	adc	r25, r21
    1402:	f9 01       	movw	r30, r18
    1404:	93 83       	std	Z+3, r25	; 0x03
    1406:	82 83       	std	Z+2, r24	; 0x02
    1408:	a1 c1       	rjmp	.+834    	; 0x174c <UpdateSnake+0x58c>
				} else if ((snakeArray[bodyPartIndex].y + 1) > worldHeight) {
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	9c 01       	movw	r18, r24
    1414:	22 0f       	add	r18, r18
    1416:	33 1f       	adc	r19, r19
    1418:	22 0f       	add	r18, r18
    141a:	33 1f       	adc	r19, r19
    141c:	82 0f       	add	r24, r18
    141e:	93 1f       	adc	r25, r19
    1420:	2b 81       	ldd	r18, Y+3	; 0x03
    1422:	3c 81       	ldd	r19, Y+4	; 0x04
    1424:	82 0f       	add	r24, r18
    1426:	93 1f       	adc	r25, r19
    1428:	fc 01       	movw	r30, r24
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	9c 01       	movw	r18, r24
    1430:	2f 5f       	subi	r18, 0xFF	; 255
    1432:	3f 4f       	sbci	r19, 0xFF	; 255
    1434:	89 85       	ldd	r24, Y+9	; 0x09
    1436:	9a 85       	ldd	r25, Y+10	; 0x0a
    1438:	82 17       	cp	r24, r18
    143a:	93 07       	cpc	r25, r19
    143c:	0c f0       	brlt	.+2      	; 0x1440 <UpdateSnake+0x280>
    143e:	3f c0       	rjmp	.+126    	; 0x14be <UpdateSnake+0x2fe>
				snakeArray[bodyPartIndex].y = 0;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	9c 01       	movw	r18, r24
    144a:	22 0f       	add	r18, r18
    144c:	33 1f       	adc	r19, r19
    144e:	22 0f       	add	r18, r18
    1450:	33 1f       	adc	r19, r19
    1452:	82 0f       	add	r24, r18
    1454:	93 1f       	adc	r25, r19
    1456:	2b 81       	ldd	r18, Y+3	; 0x03
    1458:	3c 81       	ldd	r19, Y+4	; 0x04
    145a:	82 0f       	add	r24, r18
    145c:	93 1f       	adc	r25, r19
    145e:	fc 01       	movw	r30, r24
    1460:	13 82       	std	Z+3, r1	; 0x03
    1462:	12 82       	std	Z+2, r1	; 0x02
				snakeArray[bodyPartIndex].x += 2 * xDirection;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	9a 81       	ldd	r25, Y+2	; 0x02
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	9c 01       	movw	r18, r24
    146e:	22 0f       	add	r18, r18
    1470:	33 1f       	adc	r19, r19
    1472:	22 0f       	add	r18, r18
    1474:	33 1f       	adc	r19, r19
    1476:	82 0f       	add	r24, r18
    1478:	93 1f       	adc	r25, r19
    147a:	2b 81       	ldd	r18, Y+3	; 0x03
    147c:	3c 81       	ldd	r19, Y+4	; 0x04
    147e:	28 0f       	add	r18, r24
    1480:	39 1f       	adc	r19, r25
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	ac 01       	movw	r20, r24
    148c:	44 0f       	add	r20, r20
    148e:	55 1f       	adc	r21, r21
    1490:	44 0f       	add	r20, r20
    1492:	55 1f       	adc	r21, r21
    1494:	84 0f       	add	r24, r20
    1496:	95 1f       	adc	r25, r21
    1498:	4b 81       	ldd	r20, Y+3	; 0x03
    149a:	5c 81       	ldd	r21, Y+4	; 0x04
    149c:	84 0f       	add	r24, r20
    149e:	95 1f       	adc	r25, r21
    14a0:	fc 01       	movw	r30, r24
    14a2:	40 81       	ld	r20, Z
    14a4:	51 81       	ldd	r21, Z+1	; 0x01
    14a6:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <xDirection>
    14aa:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <xDirection+0x1>
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	84 0f       	add	r24, r20
    14b4:	95 1f       	adc	r25, r21
    14b6:	f9 01       	movw	r30, r18
    14b8:	91 83       	std	Z+1, r25	; 0x01
    14ba:	80 83       	st	Z, r24
    14bc:	47 c1       	rjmp	.+654    	; 0x174c <UpdateSnake+0x58c>
				} else if ((snakeArray[bodyPartIndex].y) < 0) {
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	9a 81       	ldd	r25, Y+2	; 0x02
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	9c 01       	movw	r18, r24
    14c8:	22 0f       	add	r18, r18
    14ca:	33 1f       	adc	r19, r19
    14cc:	22 0f       	add	r18, r18
    14ce:	33 1f       	adc	r19, r19
    14d0:	82 0f       	add	r24, r18
    14d2:	93 1f       	adc	r25, r19
    14d4:	2b 81       	ldd	r18, Y+3	; 0x03
    14d6:	3c 81       	ldd	r19, Y+4	; 0x04
    14d8:	82 0f       	add	r24, r18
    14da:	93 1f       	adc	r25, r19
    14dc:	fc 01       	movw	r30, r24
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	93 81       	ldd	r25, Z+3	; 0x03
    14e2:	99 23       	and	r25, r25
    14e4:	0c f0       	brlt	.+2      	; 0x14e8 <UpdateSnake+0x328>
    14e6:	43 c0       	rjmp	.+134    	; 0x156e <UpdateSnake+0x3ae>
				snakeArray[bodyPartIndex].y = worldHeight - 1;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	9a 81       	ldd	r25, Y+2	; 0x02
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	9c 01       	movw	r18, r24
    14f2:	22 0f       	add	r18, r18
    14f4:	33 1f       	adc	r19, r19
    14f6:	22 0f       	add	r18, r18
    14f8:	33 1f       	adc	r19, r19
    14fa:	82 0f       	add	r24, r18
    14fc:	93 1f       	adc	r25, r19
    14fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1500:	3c 81       	ldd	r19, Y+4	; 0x04
    1502:	82 0f       	add	r24, r18
    1504:	93 1f       	adc	r25, r19
    1506:	29 85       	ldd	r18, Y+9	; 0x09
    1508:	3a 85       	ldd	r19, Y+10	; 0x0a
    150a:	21 50       	subi	r18, 0x01	; 1
    150c:	31 09       	sbc	r19, r1
    150e:	fc 01       	movw	r30, r24
    1510:	33 83       	std	Z+3, r19	; 0x03
    1512:	22 83       	std	Z+2, r18	; 0x02
				snakeArray[bodyPartIndex].x += 2 * xDirection;
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	9c 01       	movw	r18, r24
    151e:	22 0f       	add	r18, r18
    1520:	33 1f       	adc	r19, r19
    1522:	22 0f       	add	r18, r18
    1524:	33 1f       	adc	r19, r19
    1526:	82 0f       	add	r24, r18
    1528:	93 1f       	adc	r25, r19
    152a:	2b 81       	ldd	r18, Y+3	; 0x03
    152c:	3c 81       	ldd	r19, Y+4	; 0x04
    152e:	28 0f       	add	r18, r24
    1530:	39 1f       	adc	r19, r25
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	9a 81       	ldd	r25, Y+2	; 0x02
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	ac 01       	movw	r20, r24
    153c:	44 0f       	add	r20, r20
    153e:	55 1f       	adc	r21, r21
    1540:	44 0f       	add	r20, r20
    1542:	55 1f       	adc	r21, r21
    1544:	84 0f       	add	r24, r20
    1546:	95 1f       	adc	r25, r21
    1548:	4b 81       	ldd	r20, Y+3	; 0x03
    154a:	5c 81       	ldd	r21, Y+4	; 0x04
    154c:	84 0f       	add	r24, r20
    154e:	95 1f       	adc	r25, r21
    1550:	fc 01       	movw	r30, r24
    1552:	40 81       	ld	r20, Z
    1554:	51 81       	ldd	r21, Z+1	; 0x01
    1556:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <xDirection>
    155a:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <xDirection+0x1>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	84 0f       	add	r24, r20
    1564:	95 1f       	adc	r25, r21
    1566:	f9 01       	movw	r30, r18
    1568:	91 83       	std	Z+1, r25	; 0x01
    156a:	80 83       	st	Z, r24
    156c:	ef c0       	rjmp	.+478    	; 0x174c <UpdateSnake+0x58c>
			}
			else
			{
				snakeArray[bodyPartIndex].x += 2 * xDirection;
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	9c 01       	movw	r18, r24
    1578:	22 0f       	add	r18, r18
    157a:	33 1f       	adc	r19, r19
    157c:	22 0f       	add	r18, r18
    157e:	33 1f       	adc	r19, r19
    1580:	82 0f       	add	r24, r18
    1582:	93 1f       	adc	r25, r19
    1584:	2b 81       	ldd	r18, Y+3	; 0x03
    1586:	3c 81       	ldd	r19, Y+4	; 0x04
    1588:	28 0f       	add	r18, r24
    158a:	39 1f       	adc	r19, r25
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	ac 01       	movw	r20, r24
    1596:	44 0f       	add	r20, r20
    1598:	55 1f       	adc	r21, r21
    159a:	44 0f       	add	r20, r20
    159c:	55 1f       	adc	r21, r21
    159e:	84 0f       	add	r24, r20
    15a0:	95 1f       	adc	r25, r21
    15a2:	4b 81       	ldd	r20, Y+3	; 0x03
    15a4:	5c 81       	ldd	r21, Y+4	; 0x04
    15a6:	84 0f       	add	r24, r20
    15a8:	95 1f       	adc	r25, r21
    15aa:	fc 01       	movw	r30, r24
    15ac:	40 81       	ld	r20, Z
    15ae:	51 81       	ldd	r21, Z+1	; 0x01
    15b0:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <xDirection>
    15b4:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <xDirection+0x1>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	84 0f       	add	r24, r20
    15be:	95 1f       	adc	r25, r21
    15c0:	f9 01       	movw	r30, r18
    15c2:	91 83       	std	Z+1, r25	; 0x01
    15c4:	80 83       	st	Z, r24
				snakeArray[bodyPartIndex].y += 2 * yDirection;
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	9c 01       	movw	r18, r24
    15d0:	22 0f       	add	r18, r18
    15d2:	33 1f       	adc	r19, r19
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	82 0f       	add	r24, r18
    15da:	93 1f       	adc	r25, r19
    15dc:	2b 81       	ldd	r18, Y+3	; 0x03
    15de:	3c 81       	ldd	r19, Y+4	; 0x04
    15e0:	28 0f       	add	r18, r24
    15e2:	39 1f       	adc	r19, r25
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	9a 81       	ldd	r25, Y+2	; 0x02
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	ac 01       	movw	r20, r24
    15ee:	44 0f       	add	r20, r20
    15f0:	55 1f       	adc	r21, r21
    15f2:	44 0f       	add	r20, r20
    15f4:	55 1f       	adc	r21, r21
    15f6:	84 0f       	add	r24, r20
    15f8:	95 1f       	adc	r25, r21
    15fa:	4b 81       	ldd	r20, Y+3	; 0x03
    15fc:	5c 81       	ldd	r21, Y+4	; 0x04
    15fe:	84 0f       	add	r24, r20
    1600:	95 1f       	adc	r25, r21
    1602:	fc 01       	movw	r30, r24
    1604:	42 81       	ldd	r20, Z+2	; 0x02
    1606:	53 81       	ldd	r21, Z+3	; 0x03
    1608:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <yDirection>
    160c:	90 91 8e 05 	lds	r25, 0x058E	; 0x80058e <yDirection+0x1>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	84 0f       	add	r24, r20
    1616:	95 1f       	adc	r25, r21
    1618:	f9 01       	movw	r30, r18
    161a:	93 83       	std	Z+3, r25	; 0x03
    161c:	82 83       	std	Z+2, r24	; 0x02
    161e:	96 c0       	rjmp	.+300    	; 0x174c <UpdateSnake+0x58c>
			}
		}
		else
		{
			snakeArray[bodyPartIndex].prevX = snakeArray[bodyPartIndex].x;
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	9c 01       	movw	r18, r24
    162a:	22 0f       	add	r18, r18
    162c:	33 1f       	adc	r19, r19
    162e:	22 0f       	add	r18, r18
    1630:	33 1f       	adc	r19, r19
    1632:	82 0f       	add	r24, r18
    1634:	93 1f       	adc	r25, r19
    1636:	2b 81       	ldd	r18, Y+3	; 0x03
    1638:	3c 81       	ldd	r19, Y+4	; 0x04
    163a:	28 0f       	add	r18, r24
    163c:	39 1f       	adc	r19, r25
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	9a 81       	ldd	r25, Y+2	; 0x02
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	ac 01       	movw	r20, r24
    1648:	44 0f       	add	r20, r20
    164a:	55 1f       	adc	r21, r21
    164c:	44 0f       	add	r20, r20
    164e:	55 1f       	adc	r21, r21
    1650:	84 0f       	add	r24, r20
    1652:	95 1f       	adc	r25, r21
    1654:	4b 81       	ldd	r20, Y+3	; 0x03
    1656:	5c 81       	ldd	r21, Y+4	; 0x04
    1658:	84 0f       	add	r24, r20
    165a:	95 1f       	adc	r25, r21
    165c:	fc 01       	movw	r30, r24
    165e:	80 81       	ld	r24, Z
    1660:	91 81       	ldd	r25, Z+1	; 0x01
    1662:	f9 01       	movw	r30, r18
    1664:	95 83       	std	Z+5, r25	; 0x05
    1666:	84 83       	std	Z+4, r24	; 0x04
			snakeArray[bodyPartIndex].prevY = snakeArray[bodyPartIndex].y;
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	9a 81       	ldd	r25, Y+2	; 0x02
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	9c 01       	movw	r18, r24
    1672:	22 0f       	add	r18, r18
    1674:	33 1f       	adc	r19, r19
    1676:	22 0f       	add	r18, r18
    1678:	33 1f       	adc	r19, r19
    167a:	82 0f       	add	r24, r18
    167c:	93 1f       	adc	r25, r19
    167e:	2b 81       	ldd	r18, Y+3	; 0x03
    1680:	3c 81       	ldd	r19, Y+4	; 0x04
    1682:	28 0f       	add	r18, r24
    1684:	39 1f       	adc	r19, r25
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	ac 01       	movw	r20, r24
    1690:	44 0f       	add	r20, r20
    1692:	55 1f       	adc	r21, r21
    1694:	44 0f       	add	r20, r20
    1696:	55 1f       	adc	r21, r21
    1698:	84 0f       	add	r24, r20
    169a:	95 1f       	adc	r25, r21
    169c:	4b 81       	ldd	r20, Y+3	; 0x03
    169e:	5c 81       	ldd	r21, Y+4	; 0x04
    16a0:	84 0f       	add	r24, r20
    16a2:	95 1f       	adc	r25, r21
    16a4:	fc 01       	movw	r30, r24
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	93 81       	ldd	r25, Z+3	; 0x03
    16aa:	f9 01       	movw	r30, r18
    16ac:	97 83       	std	Z+7, r25	; 0x07
    16ae:	86 83       	std	Z+6, r24	; 0x06
			snakeArray[bodyPartIndex].x = snakeArray[bodyPartIndex].headPointer->prevX;
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	9a 81       	ldd	r25, Y+2	; 0x02
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	9c 01       	movw	r18, r24
    16ba:	22 0f       	add	r18, r18
    16bc:	33 1f       	adc	r19, r19
    16be:	22 0f       	add	r18, r18
    16c0:	33 1f       	adc	r19, r19
    16c2:	82 0f       	add	r24, r18
    16c4:	93 1f       	adc	r25, r19
    16c6:	2b 81       	ldd	r18, Y+3	; 0x03
    16c8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ca:	28 0f       	add	r18, r24
    16cc:	39 1f       	adc	r19, r25
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	ac 01       	movw	r20, r24
    16d8:	44 0f       	add	r20, r20
    16da:	55 1f       	adc	r21, r21
    16dc:	44 0f       	add	r20, r20
    16de:	55 1f       	adc	r21, r21
    16e0:	84 0f       	add	r24, r20
    16e2:	95 1f       	adc	r25, r21
    16e4:	4b 81       	ldd	r20, Y+3	; 0x03
    16e6:	5c 81       	ldd	r21, Y+4	; 0x04
    16e8:	84 0f       	add	r24, r20
    16ea:	95 1f       	adc	r25, r21
    16ec:	fc 01       	movw	r30, r24
    16ee:	80 85       	ldd	r24, Z+8	; 0x08
    16f0:	91 85       	ldd	r25, Z+9	; 0x09
    16f2:	fc 01       	movw	r30, r24
    16f4:	84 81       	ldd	r24, Z+4	; 0x04
    16f6:	95 81       	ldd	r25, Z+5	; 0x05
    16f8:	f9 01       	movw	r30, r18
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	80 83       	st	Z, r24
			snakeArray[bodyPartIndex].y = snakeArray[bodyPartIndex].headPointer->prevY;
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	9a 81       	ldd	r25, Y+2	; 0x02
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	9c 01       	movw	r18, r24
    1708:	22 0f       	add	r18, r18
    170a:	33 1f       	adc	r19, r19
    170c:	22 0f       	add	r18, r18
    170e:	33 1f       	adc	r19, r19
    1710:	82 0f       	add	r24, r18
    1712:	93 1f       	adc	r25, r19
    1714:	2b 81       	ldd	r18, Y+3	; 0x03
    1716:	3c 81       	ldd	r19, Y+4	; 0x04
    1718:	28 0f       	add	r18, r24
    171a:	39 1f       	adc	r19, r25
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	9a 81       	ldd	r25, Y+2	; 0x02
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	ac 01       	movw	r20, r24
    1726:	44 0f       	add	r20, r20
    1728:	55 1f       	adc	r21, r21
    172a:	44 0f       	add	r20, r20
    172c:	55 1f       	adc	r21, r21
    172e:	84 0f       	add	r24, r20
    1730:	95 1f       	adc	r25, r21
    1732:	4b 81       	ldd	r20, Y+3	; 0x03
    1734:	5c 81       	ldd	r21, Y+4	; 0x04
    1736:	84 0f       	add	r24, r20
    1738:	95 1f       	adc	r25, r21
    173a:	fc 01       	movw	r30, r24
    173c:	80 85       	ldd	r24, Z+8	; 0x08
    173e:	91 85       	ldd	r25, Z+9	; 0x09
    1740:	fc 01       	movw	r30, r24
    1742:	86 81       	ldd	r24, Z+6	; 0x06
    1744:	97 81       	ldd	r25, Z+7	; 0x07
    1746:	f9 01       	movw	r30, r18
    1748:	93 83       	std	Z+3, r25	; 0x03
    174a:	82 83       	std	Z+2, r24	; 0x02

void UpdateSnake(struct SnakeBodyPart snakeArray[], int snakeLength, int worldWidth, int worldHeight)
{
	CheckInput();
	
	for (int bodyPartIndex = 0; bodyPartIndex < snakeLength; bodyPartIndex++)
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	29 81       	ldd	r18, Y+1	; 0x01
    1758:	3a 81       	ldd	r19, Y+2	; 0x02
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	28 17       	cp	r18, r24
    1760:	39 07       	cpc	r19, r25
    1762:	0c f4       	brge	.+2      	; 0x1766 <UpdateSnake+0x5a6>
    1764:	43 cd       	rjmp	.-1402   	; 0x11ec <UpdateSnake+0x2c>
			snakeArray[bodyPartIndex].x = snakeArray[bodyPartIndex].headPointer->prevX;
			snakeArray[bodyPartIndex].y = snakeArray[bodyPartIndex].headPointer->prevY;
		}
	}
	
	CheckSnakeBodyCollision(snakeArray, snakeLength);
    1766:	2d 81       	ldd	r18, Y+5	; 0x05
    1768:	3e 81       	ldd	r19, Y+6	; 0x06
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	b9 01       	movw	r22, r18
    1770:	27 dc       	rcall	.-1970   	; 0xfc0 <CheckSnakeBodyCollision>
}
    1772:	00 00       	nop
    1774:	2a 96       	adiw	r28, 0x0a	; 10
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	08 95       	ret

00001786 <GrowSnake>:

void GrowSnake(struct SnakeBodyPart snakeArray[], int snakeBodyLength)
{
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	68 97       	sbiw	r28, 0x18	; 24
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	9e 8b       	std	Y+22, r25	; 0x16
    179c:	8d 8b       	std	Y+21, r24	; 0x15
    179e:	78 8f       	std	Y+24, r23	; 0x18
    17a0:	6f 8b       	std	Y+23, r22	; 0x17
	struct SnakeBodyPart previousBodyPart = snakeArray[snakeBodyLength - 2]; 
    17a2:	8f 89       	ldd	r24, Y+23	; 0x17
    17a4:	98 8d       	ldd	r25, Y+24	; 0x18
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	9c 01       	movw	r18, r24
    17ac:	22 0f       	add	r18, r18
    17ae:	33 1f       	adc	r19, r19
    17b0:	22 0f       	add	r18, r18
    17b2:	33 1f       	adc	r19, r19
    17b4:	82 0f       	add	r24, r18
    17b6:	93 1f       	adc	r25, r19
    17b8:	44 97       	sbiw	r24, 0x14	; 20
    17ba:	2d 89       	ldd	r18, Y+21	; 0x15
    17bc:	3e 89       	ldd	r19, Y+22	; 0x16
    17be:	82 0f       	add	r24, r18
    17c0:	93 1f       	adc	r25, r19
    17c2:	2a e0       	ldi	r18, 0x0A	; 10
    17c4:	fc 01       	movw	r30, r24
    17c6:	ce 01       	movw	r24, r28
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	dc 01       	movw	r26, r24
    17cc:	01 90       	ld	r0, Z+
    17ce:	0d 92       	st	X+, r0
    17d0:	2a 95       	dec	r18
    17d2:	e1 f7       	brne	.-8      	; 0x17cc <GrowSnake+0x46>
	
	struct SnakeBodyPart newBodyPart;
	newBodyPart.x = previousBodyPart.prevX;
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	9c 87       	std	Y+12, r25	; 0x0c
    17da:	8b 87       	std	Y+11, r24	; 0x0b
	newBodyPart.y = previousBodyPart.prevY;
    17dc:	8f 81       	ldd	r24, Y+7	; 0x07
    17de:	98 85       	ldd	r25, Y+8	; 0x08
    17e0:	9e 87       	std	Y+14, r25	; 0x0e
    17e2:	8d 87       	std	Y+13, r24	; 0x0d
	newBodyPart.headPointer = &snakeArray[snakeBodyLength - 2];
    17e4:	8f 89       	ldd	r24, Y+23	; 0x17
    17e6:	98 8d       	ldd	r25, Y+24	; 0x18
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	9c 01       	movw	r18, r24
    17ee:	22 0f       	add	r18, r18
    17f0:	33 1f       	adc	r19, r19
    17f2:	22 0f       	add	r18, r18
    17f4:	33 1f       	adc	r19, r19
    17f6:	82 0f       	add	r24, r18
    17f8:	93 1f       	adc	r25, r19
    17fa:	44 97       	sbiw	r24, 0x14	; 20
    17fc:	2d 89       	ldd	r18, Y+21	; 0x15
    17fe:	3e 89       	ldd	r19, Y+22	; 0x16
    1800:	82 0f       	add	r24, r18
    1802:	93 1f       	adc	r25, r19
    1804:	9c 8b       	std	Y+20, r25	; 0x14
    1806:	8b 8b       	std	Y+19, r24	; 0x13
	snakeArray[snakeBodyLength - 1] = newBodyPart;
    1808:	8f 89       	ldd	r24, Y+23	; 0x17
    180a:	98 8d       	ldd	r25, Y+24	; 0x18
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	9c 01       	movw	r18, r24
    1812:	22 0f       	add	r18, r18
    1814:	33 1f       	adc	r19, r19
    1816:	22 0f       	add	r18, r18
    1818:	33 1f       	adc	r19, r19
    181a:	82 0f       	add	r24, r18
    181c:	93 1f       	adc	r25, r19
    181e:	0a 97       	sbiw	r24, 0x0a	; 10
    1820:	2d 89       	ldd	r18, Y+21	; 0x15
    1822:	3e 89       	ldd	r19, Y+22	; 0x16
    1824:	82 0f       	add	r24, r18
    1826:	93 1f       	adc	r25, r19
    1828:	2a e0       	ldi	r18, 0x0A	; 10
    182a:	fe 01       	movw	r30, r28
    182c:	3b 96       	adiw	r30, 0x0b	; 11
    182e:	dc 01       	movw	r26, r24
    1830:	01 90       	ld	r0, Z+
    1832:	0d 92       	st	X+, r0
    1834:	2a 95       	dec	r18
    1836:	e1 f7       	brne	.-8      	; 0x1830 <GrowSnake+0xaa>
}
    1838:	00 00       	nop
    183a:	68 96       	adiw	r28, 0x18	; 24
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	08 95       	ret

0000184c <SnakeHitSelf>:

int SnakeHitSelf()
{
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	return hitSelf;
    1854:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <hitSelf>
    1858:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <hitSelf+0x1>
}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <SPI_MasterInit>:
#define DD_MOSI 2
#define DD_MISO 3
#define DD_DORD 5

void SPI_MasterInit(void)
{	
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS); //MOSI,SS & SCK output,others input
    186a:	84 e2       	ldi	r24, 0x24	; 36
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	27 e0       	ldi	r18, 0x07	; 7
    1870:	fc 01       	movw	r30, r24
    1872:	20 83       	st	Z, r18
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);  		   //SPI, Master, clock = fck/16
    1874:	8c e4       	ldi	r24, 0x4C	; 76
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	21 e5       	ldi	r18, 0x51	; 81
    187a:	fc 01       	movw	r30, r24
    187c:	20 83       	st	Z, r18
}
    187e:	00 00       	nop
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	08 95       	ret

00001886 <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	00 d0       	rcall	.+0      	; 0x188c <SPI_MasterTransmit+0x6>
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	8b 83       	std	Y+3, r24	; 0x03
	PORTB &= ~(1 << DD_SS);
    1892:	85 e2       	ldi	r24, 0x25	; 37
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	25 e2       	ldi	r18, 0x25	; 37
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	f9 01       	movw	r30, r18
    189c:	20 81       	ld	r18, Z
    189e:	2e 7f       	andi	r18, 0xFE	; 254
    18a0:	fc 01       	movw	r30, r24
    18a2:	20 83       	st	Z, r18

	// Start transmission
	SPDR = cData;			
    18a4:	8e e4       	ldi	r24, 0x4E	; 78
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	2b 81       	ldd	r18, Y+3	; 0x03
    18aa:	fc 01       	movw	r30, r24
    18ac:	20 83       	st	Z, r18
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
    18ae:	1a 82       	std	Y+2, r1	; 0x02
    18b0:	19 82       	std	Y+1, r1	; 0x01
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
    18b2:	05 c0       	rjmp	.+10     	; 0x18be <SPI_MasterTransmit+0x38>
	{
		k++;
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	9a 83       	std	Y+2, r25	; 0x02
    18bc:	89 83       	std	Y+1, r24	; 0x01
	// Start transmission
	SPDR = cData;			
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
    18be:	8d e4       	ldi	r24, 0x4D	; 77
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	fc 01       	movw	r30, r24
    18c4:	80 81       	ld	r24, Z
    18c6:	88 23       	and	r24, r24
    18c8:	ac f7       	brge	.-22     	; 0x18b4 <SPI_MasterTransmit+0x2e>
	{
		k++;
	}			
	
	cData = SPDR;
    18ca:	8e e4       	ldi	r24, 0x4E	; 78
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	fc 01       	movw	r30, r24
    18d0:	80 81       	ld	r24, Z
    18d2:	8b 83       	std	Y+3, r24	; 0x03

	PORTB|= 1 << DD_SS;
    18d4:	85 e2       	ldi	r24, 0x25	; 37
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	25 e2       	ldi	r18, 0x25	; 37
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	f9 01       	movw	r30, r18
    18de:	20 81       	ld	r18, Z
    18e0:	21 60       	ori	r18, 0x01	; 1
    18e2:	fc 01       	movw	r30, r24
    18e4:	20 83       	st	Z, r18
}
    18e6:	00 00       	nop
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	08 95       	ret

000018f4 <DrawIntroScreen>:
 */ 
#include "WorldDriver.h"
#include "Nokia5110Driver.h"

void DrawIntroScreen(unsigned char introScreen[])
{
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <DrawIntroScreen+0x6>
    18fa:	1f 92       	push	r1
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	9c 83       	std	Y+4, r25	; 0x04
    1902:	8b 83       	std	Y+3, r24	; 0x03
	for (int x = 0; x < 504; x++)
    1904:	1a 82       	std	Y+2, r1	; 0x02
    1906:	19 82       	std	Y+1, r1	; 0x01
    1908:	0e c0       	rjmp	.+28     	; 0x1926 <DrawIntroScreen+0x32>
	{
		sendData(introScreen[x]);
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	2b 81       	ldd	r18, Y+3	; 0x03
    1910:	3c 81       	ldd	r19, Y+4	; 0x04
    1912:	82 0f       	add	r24, r18
    1914:	93 1f       	adc	r25, r19
    1916:	fc 01       	movw	r30, r24
    1918:	80 81       	ld	r24, Z
    191a:	a5 da       	rcall	.-2742   	; 0xe66 <sendData>
#include "WorldDriver.h"
#include "Nokia5110Driver.h"

void DrawIntroScreen(unsigned char introScreen[])
{
	for (int x = 0; x < 504; x++)
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	9a 83       	std	Y+2, r25	; 0x02
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	9a 81       	ldd	r25, Y+2	; 0x02
    192a:	88 3f       	cpi	r24, 0xF8	; 248
    192c:	91 40       	sbci	r25, 0x01	; 1
    192e:	6c f3       	brlt	.-38     	; 0x190a <DrawIntroScreen+0x16>
	{
		sendData(introScreen[x]);
	}
}
    1930:	00 00       	nop
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

00001940 <DrawHighscoreText>:

void DrawHighscoreText(unsigned char highscoreText[])
{
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	00 d0       	rcall	.+0      	; 0x1946 <DrawHighscoreText+0x6>
    1946:	1f 92       	push	r1
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	9c 83       	std	Y+4, r25	; 0x04
    194e:	8b 83       	std	Y+3, r24	; 0x03
	clearDisplay();
    1950:	a0 da       	rcall	.-2752   	; 0xe92 <clearDisplay>
	setCursor(0, 0);
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	4b da       	rcall	.-2922   	; 0xdee <setCursor>
	int i = 0;
    1958:	1a 82       	std	Y+2, r1	; 0x02
    195a:	19 82       	std	Y+1, r1	; 0x01
	while (highscoreText[i] != '\\')
    195c:	0e c0       	rjmp	.+28     	; 0x197a <DrawHighscoreText+0x3a>
	{
		sendData(highscoreText[i]);
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	2b 81       	ldd	r18, Y+3	; 0x03
    1964:	3c 81       	ldd	r19, Y+4	; 0x04
    1966:	82 0f       	add	r24, r18
    1968:	93 1f       	adc	r25, r19
    196a:	fc 01       	movw	r30, r24
    196c:	80 81       	ld	r24, Z
    196e:	7b da       	rcall	.-2826   	; 0xe66 <sendData>
		i++;
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	9a 83       	std	Y+2, r25	; 0x02
    1978:	89 83       	std	Y+1, r24	; 0x01
void DrawHighscoreText(unsigned char highscoreText[])
{
	clearDisplay();
	setCursor(0, 0);
	int i = 0;
	while (highscoreText[i] != '\\')
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	9a 81       	ldd	r25, Y+2	; 0x02
    197e:	2b 81       	ldd	r18, Y+3	; 0x03
    1980:	3c 81       	ldd	r19, Y+4	; 0x04
    1982:	82 0f       	add	r24, r18
    1984:	93 1f       	adc	r25, r19
    1986:	fc 01       	movw	r30, r24
    1988:	80 81       	ld	r24, Z
    198a:	8c 35       	cpi	r24, 0x5C	; 92
    198c:	41 f7       	brne	.-48     	; 0x195e <DrawHighscoreText+0x1e>
	{
		sendData(highscoreText[i]);
		i++;
	}
}
    198e:	00 00       	nop
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	08 95       	ret

0000199e <DrawCharacter>:

void DrawCharacter(unsigned char number[], char x, char y, int arrayLength)
{
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	28 97       	sbiw	r28, 0x08	; 8
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	9c 83       	std	Y+4, r25	; 0x04
    19b4:	8b 83       	std	Y+3, r24	; 0x03
    19b6:	6d 83       	std	Y+5, r22	; 0x05
    19b8:	4e 83       	std	Y+6, r20	; 0x06
    19ba:	38 87       	std	Y+8, r19	; 0x08
    19bc:	2f 83       	std	Y+7, r18	; 0x07
	setCursor(x, y);
    19be:	6e 81       	ldd	r22, Y+6	; 0x06
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	15 da       	rcall	.-3030   	; 0xdee <setCursor>
	
	for (int i = 0; i < arrayLength; i++)
    19c4:	1a 82       	std	Y+2, r1	; 0x02
    19c6:	19 82       	std	Y+1, r1	; 0x01
    19c8:	0e c0       	rjmp	.+28     	; 0x19e6 <DrawCharacter+0x48>
	{
		sendData(number[i]);
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	9a 81       	ldd	r25, Y+2	; 0x02
    19ce:	2b 81       	ldd	r18, Y+3	; 0x03
    19d0:	3c 81       	ldd	r19, Y+4	; 0x04
    19d2:	82 0f       	add	r24, r18
    19d4:	93 1f       	adc	r25, r19
    19d6:	fc 01       	movw	r30, r24
    19d8:	80 81       	ld	r24, Z
    19da:	45 da       	rcall	.-2934   	; 0xe66 <sendData>

void DrawCharacter(unsigned char number[], char x, char y, int arrayLength)
{
	setCursor(x, y);
	
	for (int i = 0; i < arrayLength; i++)
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	01 96       	adiw	r24, 0x01	; 1
    19e2:	9a 83       	std	Y+2, r25	; 0x02
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	29 81       	ldd	r18, Y+1	; 0x01
    19e8:	3a 81       	ldd	r19, Y+2	; 0x02
    19ea:	8f 81       	ldd	r24, Y+7	; 0x07
    19ec:	98 85       	ldd	r25, Y+8	; 0x08
    19ee:	28 17       	cp	r18, r24
    19f0:	39 07       	cpc	r19, r25
    19f2:	5c f3       	brlt	.-42     	; 0x19ca <DrawCharacter+0x2c>
	{
		sendData(number[i]);
	}
}
    19f4:	00 00       	nop
    19f6:	28 96       	adiw	r28, 0x08	; 8
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	08 95       	ret

00001a08 <DrawPixel>:

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	28 97       	sbiw	r28, 0x08	; 8
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	6e 83       	std	Y+6, r22	; 0x06
    1a20:	58 87       	std	Y+8, r21	; 0x08
    1a22:	4f 83       	std	Y+7, r20	; 0x07
	if (x < 0 || x > 83)
    1a24:	8d 81       	ldd	r24, Y+5	; 0x05
    1a26:	84 35       	cpi	r24, 0x54	; 84
    1a28:	08 f0       	brcs	.+2      	; 0x1a2c <DrawPixel+0x24>
    1a2a:	8c c0       	rjmp	.+280    	; 0x1b44 <DrawPixel+0x13c>
		return;

	if (y < 0 || y > 47)
    1a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2e:	80 33       	cpi	r24, 0x30	; 48
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <DrawPixel+0x2c>
    1a32:	8a c0       	rjmp	.+276    	; 0x1b48 <DrawPixel+0x140>
		return;

	unsigned int baselineOffset = 0;
    1a34:	1a 82       	std	Y+2, r1	; 0x02
    1a36:	19 82       	std	Y+1, r1	; 0x01
	unsigned int verticalBitOffset = 0;
    1a38:	1c 82       	std	Y+4, r1	; 0x04
    1a3a:	1b 82       	std	Y+3, r1	; 0x03

	if (y >= 0 && y <= 7)
    1a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a3e:	88 30       	cpi	r24, 0x08	; 8
    1a40:	40 f4       	brcc	.+16     	; 0x1a52 <DrawPixel+0x4a>
	{
		baselineOffset = 0;
    1a42:	1a 82       	std	Y+2, r1	; 0x02
    1a44:	19 82       	std	Y+1, r1	; 0x01
		verticalBitOffset = y;
    1a46:	8e 81       	ldd	r24, Y+6	; 0x06
    1a48:	88 2f       	mov	r24, r24
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9c 83       	std	Y+4, r25	; 0x04
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    1a50:	54 c0       	rjmp	.+168    	; 0x1afa <DrawPixel+0xf2>
	} 
	else if (y >= 8 && y <= 15)
    1a52:	8e 81       	ldd	r24, Y+6	; 0x06
    1a54:	88 30       	cpi	r24, 0x08	; 8
    1a56:	70 f0       	brcs	.+28     	; 0x1a74 <DrawPixel+0x6c>
    1a58:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5a:	80 31       	cpi	r24, 0x10	; 16
    1a5c:	58 f4       	brcc	.+22     	; 0x1a74 <DrawPixel+0x6c>
	{
		baselineOffset = 84;
    1a5e:	84 e5       	ldi	r24, 0x54	; 84
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - 8;
    1a66:	8e 81       	ldd	r24, Y+6	; 0x06
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	08 97       	sbiw	r24, 0x08	; 8
    1a6e:	9c 83       	std	Y+4, r25	; 0x04
    1a70:	8b 83       	std	Y+3, r24	; 0x03
    1a72:	43 c0       	rjmp	.+134    	; 0x1afa <DrawPixel+0xf2>
	} 
	else if (y >= 16 && y <= 23)
    1a74:	8e 81       	ldd	r24, Y+6	; 0x06
    1a76:	80 31       	cpi	r24, 0x10	; 16
    1a78:	70 f0       	brcs	.+28     	; 0x1a96 <DrawPixel+0x8e>
    1a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7c:	88 31       	cpi	r24, 0x18	; 24
    1a7e:	58 f4       	brcc	.+22     	; 0x1a96 <DrawPixel+0x8e>
	{
		baselineOffset = 84 * 2;
    1a80:	88 ea       	ldi	r24, 0xA8	; 168
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9a 83       	std	Y+2, r25	; 0x02
    1a86:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 2);
    1a88:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8a:	88 2f       	mov	r24, r24
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	40 97       	sbiw	r24, 0x10	; 16
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	8b 83       	std	Y+3, r24	; 0x03
    1a94:	32 c0       	rjmp	.+100    	; 0x1afa <DrawPixel+0xf2>
	} 
	else if (y >= 24 && y <= 31)
    1a96:	8e 81       	ldd	r24, Y+6	; 0x06
    1a98:	88 31       	cpi	r24, 0x18	; 24
    1a9a:	70 f0       	brcs	.+28     	; 0x1ab8 <DrawPixel+0xb0>
    1a9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9e:	80 32       	cpi	r24, 0x20	; 32
    1aa0:	58 f4       	brcc	.+22     	; 0x1ab8 <DrawPixel+0xb0>
	{
		baselineOffset = 84 * 3;
    1aa2:	8c ef       	ldi	r24, 0xFC	; 252
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 3);
    1aaa:	8e 81       	ldd	r24, Y+6	; 0x06
    1aac:	88 2f       	mov	r24, r24
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	48 97       	sbiw	r24, 0x18	; 24
    1ab2:	9c 83       	std	Y+4, r25	; 0x04
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
    1ab6:	21 c0       	rjmp	.+66     	; 0x1afa <DrawPixel+0xf2>
	}
	else if (y >= 32 && y <= 39)
    1ab8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aba:	80 32       	cpi	r24, 0x20	; 32
    1abc:	70 f0       	brcs	.+28     	; 0x1ada <DrawPixel+0xd2>
    1abe:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac0:	88 32       	cpi	r24, 0x28	; 40
    1ac2:	58 f4       	brcc	.+22     	; 0x1ada <DrawPixel+0xd2>
	{
		baselineOffset = 84 * 4;
    1ac4:	80 e5       	ldi	r24, 0x50	; 80
    1ac6:	91 e0       	ldi	r25, 0x01	; 1
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 4);
    1acc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ace:	88 2f       	mov	r24, r24
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	80 97       	sbiw	r24, 0x20	; 32
    1ad4:	9c 83       	std	Y+4, r25	; 0x04
    1ad6:	8b 83       	std	Y+3, r24	; 0x03
    1ad8:	10 c0       	rjmp	.+32     	; 0x1afa <DrawPixel+0xf2>
	}
	else if (y >= 40 && y <= 47)
    1ada:	8e 81       	ldd	r24, Y+6	; 0x06
    1adc:	88 32       	cpi	r24, 0x28	; 40
    1ade:	68 f0       	brcs	.+26     	; 0x1afa <DrawPixel+0xf2>
    1ae0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae2:	80 33       	cpi	r24, 0x30	; 48
    1ae4:	50 f4       	brcc	.+20     	; 0x1afa <DrawPixel+0xf2>
	{
		baselineOffset = 84 * 5;
    1ae6:	84 ea       	ldi	r24, 0xA4	; 164
    1ae8:	91 e0       	ldi	r25, 0x01	; 1
    1aea:	9a 83       	std	Y+2, r25	; 0x02
    1aec:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 5);
    1aee:	8e 81       	ldd	r24, Y+6	; 0x06
    1af0:	88 2f       	mov	r24, r24
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	88 97       	sbiw	r24, 0x28	; 40
    1af6:	9c 83       	std	Y+4, r25	; 0x04
    1af8:	8b 83       	std	Y+3, r24	; 0x03
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	9a 81       	ldd	r25, Y+2	; 0x02
    1b04:	82 0f       	add	r24, r18
    1b06:	93 1f       	adc	r25, r19
    1b08:	2f 81       	ldd	r18, Y+7	; 0x07
    1b0a:	38 85       	ldd	r19, Y+8	; 0x08
    1b0c:	82 0f       	add	r24, r18
    1b0e:	93 1f       	adc	r25, r19
    1b10:	2d 81       	ldd	r18, Y+5	; 0x05
    1b12:	42 2f       	mov	r20, r18
    1b14:	50 e0       	ldi	r21, 0x00	; 0
    1b16:	29 81       	ldd	r18, Y+1	; 0x01
    1b18:	3a 81       	ldd	r19, Y+2	; 0x02
    1b1a:	24 0f       	add	r18, r20
    1b1c:	35 1f       	adc	r19, r21
    1b1e:	4f 81       	ldd	r20, Y+7	; 0x07
    1b20:	58 85       	ldd	r21, Y+8	; 0x08
    1b22:	24 0f       	add	r18, r20
    1b24:	35 1f       	adc	r19, r21
    1b26:	f9 01       	movw	r30, r18
    1b28:	20 81       	ld	r18, Z
    1b2a:	42 2f       	mov	r20, r18
    1b2c:	21 e0       	ldi	r18, 0x01	; 1
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	0b 80       	ldd	r0, Y+3	; 0x03
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <DrawPixel+0x130>
    1b34:	22 0f       	add	r18, r18
    1b36:	33 1f       	adc	r19, r19
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <DrawPixel+0x12c>
    1b3c:	24 2b       	or	r18, r20
    1b3e:	fc 01       	movw	r30, r24
    1b40:	20 83       	st	Z, r18
    1b42:	03 c0       	rjmp	.+6      	; 0x1b4a <DrawPixel+0x142>
}

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
	if (x < 0 || x > 83)
		return;
    1b44:	00 00       	nop
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <DrawPixel+0x142>

	if (y < 0 || y > 47)
		return;
    1b48:	00 00       	nop
		baselineOffset = 84 * 5;
		verticalBitOffset = y - (8 * 5);
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
}
    1b4a:	28 96       	adiw	r28, 0x08	; 8
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	08 95       	ret

00001b5c <DrawDot>:

 void DrawDot(unsigned char x, unsigned char y, unsigned char* world)
 {
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <DrawDot+0x6>
    1b62:	1f 92       	push	r1
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	6a 83       	std	Y+2, r22	; 0x02
    1b6c:	5c 83       	std	Y+4, r21	; 0x04
    1b6e:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	9c 81       	ldd	r25, Y+4	; 0x04
    1b74:	ac 01       	movw	r20, r24
    1b76:	6a 81       	ldd	r22, Y+2	; 0x02
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	46 df       	rcall	.-372    	; 0x1a08 <DrawPixel>
	DrawPixel(x + 1, y, world);
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	21 e0       	ldi	r18, 0x01	; 1
    1b80:	28 0f       	add	r18, r24
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	ac 01       	movw	r20, r24
    1b88:	6a 81       	ldd	r22, Y+2	; 0x02
    1b8a:	82 2f       	mov	r24, r18
    1b8c:	3d df       	rcall	.-390    	; 0x1a08 <DrawPixel>
	DrawPixel(x, y + 1, world);
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	21 e0       	ldi	r18, 0x01	; 1
    1b92:	28 0f       	add	r18, r24
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	ac 01       	movw	r20, r24
    1b9a:	62 2f       	mov	r22, r18
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	34 df       	rcall	.-408    	; 0x1a08 <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	31 e0       	ldi	r19, 0x01	; 1
    1ba4:	38 0f       	add	r19, r24
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	21 e0       	ldi	r18, 0x01	; 1
    1baa:	28 0f       	add	r18, r24
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	63 2f       	mov	r22, r19
    1bb4:	82 2f       	mov	r24, r18
    1bb6:	28 df       	rcall	.-432    	; 0x1a08 <DrawPixel>
 }
    1bb8:	00 00       	nop
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret

00001bc8 <DrawFood>:
 
 void DrawFood(unsigned char x, unsigned char y, unsigned char* world)
 {
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <DrawFood+0x6>
    1bce:	1f 92       	push	r1
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	6a 83       	std	Y+2, r22	; 0x02
    1bd8:	5c 83       	std	Y+4, r21	; 0x04
    1bda:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	ac 01       	movw	r20, r24
    1be2:	6a 81       	ldd	r22, Y+2	; 0x02
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	10 df       	rcall	.-480    	; 0x1a08 <DrawPixel>
	DrawPixel(x + 2, y, world);
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	22 e0       	ldi	r18, 0x02	; 2
    1bec:	28 0f       	add	r18, r24
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	ac 01       	movw	r20, r24
    1bf4:	6a 81       	ldd	r22, Y+2	; 0x02
    1bf6:	82 2f       	mov	r24, r18
    1bf8:	07 df       	rcall	.-498    	; 0x1a08 <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	31 e0       	ldi	r19, 0x01	; 1
    1bfe:	38 0f       	add	r19, r24
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	21 e0       	ldi	r18, 0x01	; 1
    1c04:	28 0f       	add	r18, r24
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0a:	ac 01       	movw	r20, r24
    1c0c:	63 2f       	mov	r22, r19
    1c0e:	82 2f       	mov	r24, r18
    1c10:	fb de       	rcall	.-522    	; 0x1a08 <DrawPixel>
	DrawPixel(x + 1, y - 1, world);
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	3f ef       	ldi	r19, 0xFF	; 255
    1c16:	38 0f       	add	r19, r24
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	21 e0       	ldi	r18, 0x01	; 1
    1c1c:	28 0f       	add	r18, r24
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	ac 01       	movw	r20, r24
    1c24:	63 2f       	mov	r22, r19
    1c26:	82 2f       	mov	r24, r18
    1c28:	ef de       	rcall	.-546    	; 0x1a08 <DrawPixel>
 }
    1c2a:	00 00       	nop
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	08 95       	ret

00001c3a <RenderWorld>:

 void RenderWorld(unsigned char* world)
 {
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <RenderWorld+0x6>
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <RenderWorld+0x8>
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	9e 83       	std	Y+6, r25	; 0x06
    1c48:	8d 83       	std	Y+5, r24	; 0x05
	for (int x = 0; x < 504; x++)
    1c4a:	1a 82       	std	Y+2, r1	; 0x02
    1c4c:	19 82       	std	Y+1, r1	; 0x01
    1c4e:	0e c0       	rjmp	.+28     	; 0x1c6c <RenderWorld+0x32>
	{
		sendData(world[x]);
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	9a 81       	ldd	r25, Y+2	; 0x02
    1c54:	2d 81       	ldd	r18, Y+5	; 0x05
    1c56:	3e 81       	ldd	r19, Y+6	; 0x06
    1c58:	82 0f       	add	r24, r18
    1c5a:	93 1f       	adc	r25, r19
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	80 81       	ld	r24, Z
    1c60:	02 d9       	rcall	.-3580   	; 0xe66 <sendData>
	DrawPixel(x + 1, y - 1, world);
 }

 void RenderWorld(unsigned char* world)
 {
	for (int x = 0; x < 504; x++)
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a 81       	ldd	r25, Y+2	; 0x02
    1c66:	01 96       	adiw	r24, 0x01	; 1
    1c68:	9a 83       	std	Y+2, r25	; 0x02
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c70:	88 3f       	cpi	r24, 0xF8	; 248
    1c72:	91 40       	sbci	r25, 0x01	; 1
    1c74:	6c f3       	brlt	.-38     	; 0x1c50 <RenderWorld+0x16>
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
    1c76:	1c 82       	std	Y+4, r1	; 0x04
    1c78:	1b 82       	std	Y+3, r1	; 0x03
    1c7a:	0d c0       	rjmp	.+26     	; 0x1c96 <RenderWorld+0x5c>
	{
		world[x] = 0x00;
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	2d 81       	ldd	r18, Y+5	; 0x05
    1c82:	3e 81       	ldd	r19, Y+6	; 0x06
    1c84:	82 0f       	add	r24, r18
    1c86:	93 1f       	adc	r25, r19
    1c88:	fc 01       	movw	r30, r24
    1c8a:	10 82       	st	Z, r1
	for (int x = 0; x < 504; x++)
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	9c 83       	std	Y+4, r25	; 0x04
    1c94:	8b 83       	std	Y+3, r24	; 0x03
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	88 3f       	cpi	r24, 0xF8	; 248
    1c9c:	91 40       	sbci	r25, 0x01	; 1
    1c9e:	74 f3       	brlt	.-36     	; 0x1c7c <RenderWorld+0x42>
	{
		world[x] = 0x00;
	}
    1ca0:	00 00       	nop
    1ca2:	26 96       	adiw	r28, 0x06	; 6
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	08 95       	ret

00001cb4 <__cmpsf2>:
    1cb4:	6c d0       	rcall	.+216    	; 0x1d8e <__fp_cmp>
    1cb6:	08 f4       	brcc	.+2      	; 0x1cba <__cmpsf2+0x6>
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	08 95       	ret

00001cbc <__fixunssfsi>:
    1cbc:	94 d0       	rcall	.+296    	; 0x1de6 <__fp_splitA>
    1cbe:	88 f0       	brcs	.+34     	; 0x1ce2 <__fixunssfsi+0x26>
    1cc0:	9f 57       	subi	r25, 0x7F	; 127
    1cc2:	90 f0       	brcs	.+36     	; 0x1ce8 <__fixunssfsi+0x2c>
    1cc4:	b9 2f       	mov	r27, r25
    1cc6:	99 27       	eor	r25, r25
    1cc8:	b7 51       	subi	r27, 0x17	; 23
    1cca:	a0 f0       	brcs	.+40     	; 0x1cf4 <__fixunssfsi+0x38>
    1ccc:	d1 f0       	breq	.+52     	; 0x1d02 <__fixunssfsi+0x46>
    1cce:	66 0f       	add	r22, r22
    1cd0:	77 1f       	adc	r23, r23
    1cd2:	88 1f       	adc	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	1a f0       	brmi	.+6      	; 0x1cde <__fixunssfsi+0x22>
    1cd8:	ba 95       	dec	r27
    1cda:	c9 f7       	brne	.-14     	; 0x1cce <__fixunssfsi+0x12>
    1cdc:	12 c0       	rjmp	.+36     	; 0x1d02 <__fixunssfsi+0x46>
    1cde:	b1 30       	cpi	r27, 0x01	; 1
    1ce0:	81 f0       	breq	.+32     	; 0x1d02 <__fixunssfsi+0x46>
    1ce2:	9b d0       	rcall	.+310    	; 0x1e1a <__fp_zero>
    1ce4:	b1 e0       	ldi	r27, 0x01	; 1
    1ce6:	08 95       	ret
    1ce8:	98 c0       	rjmp	.+304    	; 0x1e1a <__fp_zero>
    1cea:	67 2f       	mov	r22, r23
    1cec:	78 2f       	mov	r23, r24
    1cee:	88 27       	eor	r24, r24
    1cf0:	b8 5f       	subi	r27, 0xF8	; 248
    1cf2:	39 f0       	breq	.+14     	; 0x1d02 <__fixunssfsi+0x46>
    1cf4:	b9 3f       	cpi	r27, 0xF9	; 249
    1cf6:	cc f3       	brlt	.-14     	; 0x1cea <__fixunssfsi+0x2e>
    1cf8:	86 95       	lsr	r24
    1cfa:	77 95       	ror	r23
    1cfc:	67 95       	ror	r22
    1cfe:	b3 95       	inc	r27
    1d00:	d9 f7       	brne	.-10     	; 0x1cf8 <__fixunssfsi+0x3c>
    1d02:	3e f4       	brtc	.+14     	; 0x1d12 <__fixunssfsi+0x56>
    1d04:	90 95       	com	r25
    1d06:	80 95       	com	r24
    1d08:	70 95       	com	r23
    1d0a:	61 95       	neg	r22
    1d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d10:	9f 4f       	sbci	r25, 0xFF	; 255
    1d12:	08 95       	ret

00001d14 <__floatunsisf>:
    1d14:	e8 94       	clt
    1d16:	09 c0       	rjmp	.+18     	; 0x1d2a <__floatsisf+0x12>

00001d18 <__floatsisf>:
    1d18:	97 fb       	bst	r25, 7
    1d1a:	3e f4       	brtc	.+14     	; 0x1d2a <__floatsisf+0x12>
    1d1c:	90 95       	com	r25
    1d1e:	80 95       	com	r24
    1d20:	70 95       	com	r23
    1d22:	61 95       	neg	r22
    1d24:	7f 4f       	sbci	r23, 0xFF	; 255
    1d26:	8f 4f       	sbci	r24, 0xFF	; 255
    1d28:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2a:	99 23       	and	r25, r25
    1d2c:	a9 f0       	breq	.+42     	; 0x1d58 <__floatsisf+0x40>
    1d2e:	f9 2f       	mov	r31, r25
    1d30:	96 e9       	ldi	r25, 0x96	; 150
    1d32:	bb 27       	eor	r27, r27
    1d34:	93 95       	inc	r25
    1d36:	f6 95       	lsr	r31
    1d38:	87 95       	ror	r24
    1d3a:	77 95       	ror	r23
    1d3c:	67 95       	ror	r22
    1d3e:	b7 95       	ror	r27
    1d40:	f1 11       	cpse	r31, r1
    1d42:	f8 cf       	rjmp	.-16     	; 0x1d34 <__floatsisf+0x1c>
    1d44:	fa f4       	brpl	.+62     	; 0x1d84 <__floatsisf+0x6c>
    1d46:	bb 0f       	add	r27, r27
    1d48:	11 f4       	brne	.+4      	; 0x1d4e <__floatsisf+0x36>
    1d4a:	60 ff       	sbrs	r22, 0
    1d4c:	1b c0       	rjmp	.+54     	; 0x1d84 <__floatsisf+0x6c>
    1d4e:	6f 5f       	subi	r22, 0xFF	; 255
    1d50:	7f 4f       	sbci	r23, 0xFF	; 255
    1d52:	8f 4f       	sbci	r24, 0xFF	; 255
    1d54:	9f 4f       	sbci	r25, 0xFF	; 255
    1d56:	16 c0       	rjmp	.+44     	; 0x1d84 <__floatsisf+0x6c>
    1d58:	88 23       	and	r24, r24
    1d5a:	11 f0       	breq	.+4      	; 0x1d60 <__floatsisf+0x48>
    1d5c:	96 e9       	ldi	r25, 0x96	; 150
    1d5e:	11 c0       	rjmp	.+34     	; 0x1d82 <__floatsisf+0x6a>
    1d60:	77 23       	and	r23, r23
    1d62:	21 f0       	breq	.+8      	; 0x1d6c <__floatsisf+0x54>
    1d64:	9e e8       	ldi	r25, 0x8E	; 142
    1d66:	87 2f       	mov	r24, r23
    1d68:	76 2f       	mov	r23, r22
    1d6a:	05 c0       	rjmp	.+10     	; 0x1d76 <__floatsisf+0x5e>
    1d6c:	66 23       	and	r22, r22
    1d6e:	71 f0       	breq	.+28     	; 0x1d8c <__floatsisf+0x74>
    1d70:	96 e8       	ldi	r25, 0x86	; 134
    1d72:	86 2f       	mov	r24, r22
    1d74:	70 e0       	ldi	r23, 0x00	; 0
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	2a f0       	brmi	.+10     	; 0x1d84 <__floatsisf+0x6c>
    1d7a:	9a 95       	dec	r25
    1d7c:	66 0f       	add	r22, r22
    1d7e:	77 1f       	adc	r23, r23
    1d80:	88 1f       	adc	r24, r24
    1d82:	da f7       	brpl	.-10     	; 0x1d7a <__floatsisf+0x62>
    1d84:	88 0f       	add	r24, r24
    1d86:	96 95       	lsr	r25
    1d88:	87 95       	ror	r24
    1d8a:	97 f9       	bld	r25, 7
    1d8c:	08 95       	ret

00001d8e <__fp_cmp>:
    1d8e:	99 0f       	add	r25, r25
    1d90:	00 08       	sbc	r0, r0
    1d92:	55 0f       	add	r21, r21
    1d94:	aa 0b       	sbc	r26, r26
    1d96:	e0 e8       	ldi	r30, 0x80	; 128
    1d98:	fe ef       	ldi	r31, 0xFE	; 254
    1d9a:	16 16       	cp	r1, r22
    1d9c:	17 06       	cpc	r1, r23
    1d9e:	e8 07       	cpc	r30, r24
    1da0:	f9 07       	cpc	r31, r25
    1da2:	c0 f0       	brcs	.+48     	; 0x1dd4 <__fp_cmp+0x46>
    1da4:	12 16       	cp	r1, r18
    1da6:	13 06       	cpc	r1, r19
    1da8:	e4 07       	cpc	r30, r20
    1daa:	f5 07       	cpc	r31, r21
    1dac:	98 f0       	brcs	.+38     	; 0x1dd4 <__fp_cmp+0x46>
    1dae:	62 1b       	sub	r22, r18
    1db0:	73 0b       	sbc	r23, r19
    1db2:	84 0b       	sbc	r24, r20
    1db4:	95 0b       	sbc	r25, r21
    1db6:	39 f4       	brne	.+14     	; 0x1dc6 <__fp_cmp+0x38>
    1db8:	0a 26       	eor	r0, r26
    1dba:	61 f0       	breq	.+24     	; 0x1dd4 <__fp_cmp+0x46>
    1dbc:	23 2b       	or	r18, r19
    1dbe:	24 2b       	or	r18, r20
    1dc0:	25 2b       	or	r18, r21
    1dc2:	21 f4       	brne	.+8      	; 0x1dcc <__fp_cmp+0x3e>
    1dc4:	08 95       	ret
    1dc6:	0a 26       	eor	r0, r26
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <__fp_cmp+0x3e>
    1dca:	a1 40       	sbci	r26, 0x01	; 1
    1dcc:	a6 95       	lsr	r26
    1dce:	8f ef       	ldi	r24, 0xFF	; 255
    1dd0:	81 1d       	adc	r24, r1
    1dd2:	81 1d       	adc	r24, r1
    1dd4:	08 95       	ret

00001dd6 <__fp_split3>:
    1dd6:	57 fd       	sbrc	r21, 7
    1dd8:	90 58       	subi	r25, 0x80	; 128
    1dda:	44 0f       	add	r20, r20
    1ddc:	55 1f       	adc	r21, r21
    1dde:	59 f0       	breq	.+22     	; 0x1df6 <__fp_splitA+0x10>
    1de0:	5f 3f       	cpi	r21, 0xFF	; 255
    1de2:	71 f0       	breq	.+28     	; 0x1e00 <__fp_splitA+0x1a>
    1de4:	47 95       	ror	r20

00001de6 <__fp_splitA>:
    1de6:	88 0f       	add	r24, r24
    1de8:	97 fb       	bst	r25, 7
    1dea:	99 1f       	adc	r25, r25
    1dec:	61 f0       	breq	.+24     	; 0x1e06 <__fp_splitA+0x20>
    1dee:	9f 3f       	cpi	r25, 0xFF	; 255
    1df0:	79 f0       	breq	.+30     	; 0x1e10 <__fp_splitA+0x2a>
    1df2:	87 95       	ror	r24
    1df4:	08 95       	ret
    1df6:	12 16       	cp	r1, r18
    1df8:	13 06       	cpc	r1, r19
    1dfa:	14 06       	cpc	r1, r20
    1dfc:	55 1f       	adc	r21, r21
    1dfe:	f2 cf       	rjmp	.-28     	; 0x1de4 <__fp_split3+0xe>
    1e00:	46 95       	lsr	r20
    1e02:	f1 df       	rcall	.-30     	; 0x1de6 <__fp_splitA>
    1e04:	08 c0       	rjmp	.+16     	; 0x1e16 <__fp_splitA+0x30>
    1e06:	16 16       	cp	r1, r22
    1e08:	17 06       	cpc	r1, r23
    1e0a:	18 06       	cpc	r1, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	f1 cf       	rjmp	.-30     	; 0x1df2 <__fp_splitA+0xc>
    1e10:	86 95       	lsr	r24
    1e12:	71 05       	cpc	r23, r1
    1e14:	61 05       	cpc	r22, r1
    1e16:	08 94       	sec
    1e18:	08 95       	ret

00001e1a <__fp_zero>:
    1e1a:	e8 94       	clt

00001e1c <__fp_szero>:
    1e1c:	bb 27       	eor	r27, r27
    1e1e:	66 27       	eor	r22, r22
    1e20:	77 27       	eor	r23, r23
    1e22:	cb 01       	movw	r24, r22
    1e24:	97 f9       	bld	r25, 7
    1e26:	08 95       	ret

00001e28 <__gesf2>:
    1e28:	b2 df       	rcall	.-156    	; 0x1d8e <__fp_cmp>
    1e2a:	08 f4       	brcc	.+2      	; 0x1e2e <__gesf2+0x6>
    1e2c:	8f ef       	ldi	r24, 0xFF	; 255
    1e2e:	08 95       	ret

00001e30 <__mulsf3>:
    1e30:	0b d0       	rcall	.+22     	; 0x1e48 <__mulsf3x>
    1e32:	78 c0       	rjmp	.+240    	; 0x1f24 <__fp_round>
    1e34:	69 d0       	rcall	.+210    	; 0x1f08 <__fp_pscA>
    1e36:	28 f0       	brcs	.+10     	; 0x1e42 <__mulsf3+0x12>
    1e38:	6e d0       	rcall	.+220    	; 0x1f16 <__fp_pscB>
    1e3a:	18 f0       	brcs	.+6      	; 0x1e42 <__mulsf3+0x12>
    1e3c:	95 23       	and	r25, r21
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <__mulsf3+0x12>
    1e40:	5a c0       	rjmp	.+180    	; 0x1ef6 <__fp_inf>
    1e42:	5f c0       	rjmp	.+190    	; 0x1f02 <__fp_nan>
    1e44:	11 24       	eor	r1, r1
    1e46:	ea cf       	rjmp	.-44     	; 0x1e1c <__fp_szero>

00001e48 <__mulsf3x>:
    1e48:	c6 df       	rcall	.-116    	; 0x1dd6 <__fp_split3>
    1e4a:	a0 f3       	brcs	.-24     	; 0x1e34 <__mulsf3+0x4>

00001e4c <__mulsf3_pse>:
    1e4c:	95 9f       	mul	r25, r21
    1e4e:	d1 f3       	breq	.-12     	; 0x1e44 <__mulsf3+0x14>
    1e50:	95 0f       	add	r25, r21
    1e52:	50 e0       	ldi	r21, 0x00	; 0
    1e54:	55 1f       	adc	r21, r21
    1e56:	62 9f       	mul	r22, r18
    1e58:	f0 01       	movw	r30, r0
    1e5a:	72 9f       	mul	r23, r18
    1e5c:	bb 27       	eor	r27, r27
    1e5e:	f0 0d       	add	r31, r0
    1e60:	b1 1d       	adc	r27, r1
    1e62:	63 9f       	mul	r22, r19
    1e64:	aa 27       	eor	r26, r26
    1e66:	f0 0d       	add	r31, r0
    1e68:	b1 1d       	adc	r27, r1
    1e6a:	aa 1f       	adc	r26, r26
    1e6c:	64 9f       	mul	r22, r20
    1e6e:	66 27       	eor	r22, r22
    1e70:	b0 0d       	add	r27, r0
    1e72:	a1 1d       	adc	r26, r1
    1e74:	66 1f       	adc	r22, r22
    1e76:	82 9f       	mul	r24, r18
    1e78:	22 27       	eor	r18, r18
    1e7a:	b0 0d       	add	r27, r0
    1e7c:	a1 1d       	adc	r26, r1
    1e7e:	62 1f       	adc	r22, r18
    1e80:	73 9f       	mul	r23, r19
    1e82:	b0 0d       	add	r27, r0
    1e84:	a1 1d       	adc	r26, r1
    1e86:	62 1f       	adc	r22, r18
    1e88:	83 9f       	mul	r24, r19
    1e8a:	a0 0d       	add	r26, r0
    1e8c:	61 1d       	adc	r22, r1
    1e8e:	22 1f       	adc	r18, r18
    1e90:	74 9f       	mul	r23, r20
    1e92:	33 27       	eor	r19, r19
    1e94:	a0 0d       	add	r26, r0
    1e96:	61 1d       	adc	r22, r1
    1e98:	23 1f       	adc	r18, r19
    1e9a:	84 9f       	mul	r24, r20
    1e9c:	60 0d       	add	r22, r0
    1e9e:	21 1d       	adc	r18, r1
    1ea0:	82 2f       	mov	r24, r18
    1ea2:	76 2f       	mov	r23, r22
    1ea4:	6a 2f       	mov	r22, r26
    1ea6:	11 24       	eor	r1, r1
    1ea8:	9f 57       	subi	r25, 0x7F	; 127
    1eaa:	50 40       	sbci	r21, 0x00	; 0
    1eac:	8a f0       	brmi	.+34     	; 0x1ed0 <__mulsf3_pse+0x84>
    1eae:	e1 f0       	breq	.+56     	; 0x1ee8 <__mulsf3_pse+0x9c>
    1eb0:	88 23       	and	r24, r24
    1eb2:	4a f0       	brmi	.+18     	; 0x1ec6 <__mulsf3_pse+0x7a>
    1eb4:	ee 0f       	add	r30, r30
    1eb6:	ff 1f       	adc	r31, r31
    1eb8:	bb 1f       	adc	r27, r27
    1eba:	66 1f       	adc	r22, r22
    1ebc:	77 1f       	adc	r23, r23
    1ebe:	88 1f       	adc	r24, r24
    1ec0:	91 50       	subi	r25, 0x01	; 1
    1ec2:	50 40       	sbci	r21, 0x00	; 0
    1ec4:	a9 f7       	brne	.-22     	; 0x1eb0 <__mulsf3_pse+0x64>
    1ec6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ec8:	51 05       	cpc	r21, r1
    1eca:	70 f0       	brcs	.+28     	; 0x1ee8 <__mulsf3_pse+0x9c>
    1ecc:	14 c0       	rjmp	.+40     	; 0x1ef6 <__fp_inf>
    1ece:	a6 cf       	rjmp	.-180    	; 0x1e1c <__fp_szero>
    1ed0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ed2:	ec f3       	brlt	.-6      	; 0x1ece <__mulsf3_pse+0x82>
    1ed4:	98 3e       	cpi	r25, 0xE8	; 232
    1ed6:	dc f3       	brlt	.-10     	; 0x1ece <__mulsf3_pse+0x82>
    1ed8:	86 95       	lsr	r24
    1eda:	77 95       	ror	r23
    1edc:	67 95       	ror	r22
    1ede:	b7 95       	ror	r27
    1ee0:	f7 95       	ror	r31
    1ee2:	e7 95       	ror	r30
    1ee4:	9f 5f       	subi	r25, 0xFF	; 255
    1ee6:	c1 f7       	brne	.-16     	; 0x1ed8 <__mulsf3_pse+0x8c>
    1ee8:	fe 2b       	or	r31, r30
    1eea:	88 0f       	add	r24, r24
    1eec:	91 1d       	adc	r25, r1
    1eee:	96 95       	lsr	r25
    1ef0:	87 95       	ror	r24
    1ef2:	97 f9       	bld	r25, 7
    1ef4:	08 95       	ret

00001ef6 <__fp_inf>:
    1ef6:	97 f9       	bld	r25, 7
    1ef8:	9f 67       	ori	r25, 0x7F	; 127
    1efa:	80 e8       	ldi	r24, 0x80	; 128
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	60 e0       	ldi	r22, 0x00	; 0
    1f00:	08 95       	ret

00001f02 <__fp_nan>:
    1f02:	9f ef       	ldi	r25, 0xFF	; 255
    1f04:	80 ec       	ldi	r24, 0xC0	; 192
    1f06:	08 95       	ret

00001f08 <__fp_pscA>:
    1f08:	00 24       	eor	r0, r0
    1f0a:	0a 94       	dec	r0
    1f0c:	16 16       	cp	r1, r22
    1f0e:	17 06       	cpc	r1, r23
    1f10:	18 06       	cpc	r1, r24
    1f12:	09 06       	cpc	r0, r25
    1f14:	08 95       	ret

00001f16 <__fp_pscB>:
    1f16:	00 24       	eor	r0, r0
    1f18:	0a 94       	dec	r0
    1f1a:	12 16       	cp	r1, r18
    1f1c:	13 06       	cpc	r1, r19
    1f1e:	14 06       	cpc	r1, r20
    1f20:	05 06       	cpc	r0, r21
    1f22:	08 95       	ret

00001f24 <__fp_round>:
    1f24:	09 2e       	mov	r0, r25
    1f26:	03 94       	inc	r0
    1f28:	00 0c       	add	r0, r0
    1f2a:	11 f4       	brne	.+4      	; 0x1f30 <__fp_round+0xc>
    1f2c:	88 23       	and	r24, r24
    1f2e:	52 f0       	brmi	.+20     	; 0x1f44 <__fp_round+0x20>
    1f30:	bb 0f       	add	r27, r27
    1f32:	40 f4       	brcc	.+16     	; 0x1f44 <__fp_round+0x20>
    1f34:	bf 2b       	or	r27, r31
    1f36:	11 f4       	brne	.+4      	; 0x1f3c <__fp_round+0x18>
    1f38:	60 ff       	sbrs	r22, 0
    1f3a:	04 c0       	rjmp	.+8      	; 0x1f44 <__fp_round+0x20>
    1f3c:	6f 5f       	subi	r22, 0xFF	; 255
    1f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f40:	8f 4f       	sbci	r24, 0xFF	; 255
    1f42:	9f 4f       	sbci	r25, 0xFF	; 255
    1f44:	08 95       	ret

00001f46 <__divmodhi4>:
    1f46:	97 fb       	bst	r25, 7
    1f48:	07 2e       	mov	r0, r23
    1f4a:	16 f4       	brtc	.+4      	; 0x1f50 <__divmodhi4+0xa>
    1f4c:	00 94       	com	r0
    1f4e:	06 d0       	rcall	.+12     	; 0x1f5c <__divmodhi4_neg1>
    1f50:	77 fd       	sbrc	r23, 7
    1f52:	08 d0       	rcall	.+16     	; 0x1f64 <__divmodhi4_neg2>
    1f54:	0b d0       	rcall	.+22     	; 0x1f6c <__udivmodhi4>
    1f56:	07 fc       	sbrc	r0, 7
    1f58:	05 d0       	rcall	.+10     	; 0x1f64 <__divmodhi4_neg2>
    1f5a:	3e f4       	brtc	.+14     	; 0x1f6a <__divmodhi4_exit>

00001f5c <__divmodhi4_neg1>:
    1f5c:	90 95       	com	r25
    1f5e:	81 95       	neg	r24
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	08 95       	ret

00001f64 <__divmodhi4_neg2>:
    1f64:	70 95       	com	r23
    1f66:	61 95       	neg	r22
    1f68:	7f 4f       	sbci	r23, 0xFF	; 255

00001f6a <__divmodhi4_exit>:
    1f6a:	08 95       	ret

00001f6c <__udivmodhi4>:
    1f6c:	aa 1b       	sub	r26, r26
    1f6e:	bb 1b       	sub	r27, r27
    1f70:	51 e1       	ldi	r21, 0x11	; 17
    1f72:	07 c0       	rjmp	.+14     	; 0x1f82 <__udivmodhi4_ep>

00001f74 <__udivmodhi4_loop>:
    1f74:	aa 1f       	adc	r26, r26
    1f76:	bb 1f       	adc	r27, r27
    1f78:	a6 17       	cp	r26, r22
    1f7a:	b7 07       	cpc	r27, r23
    1f7c:	10 f0       	brcs	.+4      	; 0x1f82 <__udivmodhi4_ep>
    1f7e:	a6 1b       	sub	r26, r22
    1f80:	b7 0b       	sbc	r27, r23

00001f82 <__udivmodhi4_ep>:
    1f82:	88 1f       	adc	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	5a 95       	dec	r21
    1f88:	a9 f7       	brne	.-22     	; 0x1f74 <__udivmodhi4_loop>
    1f8a:	80 95       	com	r24
    1f8c:	90 95       	com	r25
    1f8e:	bc 01       	movw	r22, r24
    1f90:	cd 01       	movw	r24, r26
    1f92:	08 95       	ret

00001f94 <do_rand>:
    1f94:	8f 92       	push	r8
    1f96:	9f 92       	push	r9
    1f98:	af 92       	push	r10
    1f9a:	bf 92       	push	r11
    1f9c:	cf 92       	push	r12
    1f9e:	df 92       	push	r13
    1fa0:	ef 92       	push	r14
    1fa2:	ff 92       	push	r15
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	ec 01       	movw	r28, r24
    1faa:	68 81       	ld	r22, Y
    1fac:	79 81       	ldd	r23, Y+1	; 0x01
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb2:	61 15       	cp	r22, r1
    1fb4:	71 05       	cpc	r23, r1
    1fb6:	81 05       	cpc	r24, r1
    1fb8:	91 05       	cpc	r25, r1
    1fba:	21 f4       	brne	.+8      	; 0x1fc4 <do_rand+0x30>
    1fbc:	64 e2       	ldi	r22, 0x24	; 36
    1fbe:	79 ed       	ldi	r23, 0xD9	; 217
    1fc0:	8b e5       	ldi	r24, 0x5B	; 91
    1fc2:	97 e0       	ldi	r25, 0x07	; 7
    1fc4:	2d e1       	ldi	r18, 0x1D	; 29
    1fc6:	33 ef       	ldi	r19, 0xF3	; 243
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	1a d3       	rcall	.+1588   	; 0x2602 <__divmodsi4>
    1fce:	49 01       	movw	r8, r18
    1fd0:	5a 01       	movw	r10, r20
    1fd2:	9b 01       	movw	r18, r22
    1fd4:	ac 01       	movw	r20, r24
    1fd6:	a7 ea       	ldi	r26, 0xA7	; 167
    1fd8:	b1 e4       	ldi	r27, 0x41	; 65
    1fda:	2f d3       	rcall	.+1630   	; 0x263a <__muluhisi3>
    1fdc:	6b 01       	movw	r12, r22
    1fde:	7c 01       	movw	r14, r24
    1fe0:	ac ee       	ldi	r26, 0xEC	; 236
    1fe2:	b4 ef       	ldi	r27, 0xF4	; 244
    1fe4:	a5 01       	movw	r20, r10
    1fe6:	94 01       	movw	r18, r8
    1fe8:	34 d3       	rcall	.+1640   	; 0x2652 <__mulohisi3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8c 0d       	add	r24, r12
    1ff0:	9d 1d       	adc	r25, r13
    1ff2:	ae 1d       	adc	r26, r14
    1ff4:	bf 1d       	adc	r27, r15
    1ff6:	b7 ff       	sbrs	r27, 7
    1ff8:	03 c0       	rjmp	.+6      	; 0x2000 <do_rand+0x6c>
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	a1 09       	sbc	r26, r1
    1ffe:	b0 48       	sbci	r27, 0x80	; 128
    2000:	88 83       	st	Y, r24
    2002:	99 83       	std	Y+1, r25	; 0x01
    2004:	aa 83       	std	Y+2, r26	; 0x02
    2006:	bb 83       	std	Y+3, r27	; 0x03
    2008:	9f 77       	andi	r25, 0x7F	; 127
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	ff 90       	pop	r15
    2010:	ef 90       	pop	r14
    2012:	df 90       	pop	r13
    2014:	cf 90       	pop	r12
    2016:	bf 90       	pop	r11
    2018:	af 90       	pop	r10
    201a:	9f 90       	pop	r9
    201c:	8f 90       	pop	r8
    201e:	08 95       	ret

00002020 <rand_r>:
    2020:	b9 cf       	rjmp	.-142    	; 0x1f94 <do_rand>

00002022 <rand>:
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	92 e0       	ldi	r25, 0x02	; 2
    2026:	b6 cf       	rjmp	.-148    	; 0x1f94 <do_rand>

00002028 <srand>:
    2028:	a0 e0       	ldi	r26, 0x00	; 0
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    2030:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    2034:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    2038:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    203c:	08 95       	ret

0000203e <memset>:
    203e:	dc 01       	movw	r26, r24
    2040:	01 c0       	rjmp	.+2      	; 0x2044 <memset+0x6>
    2042:	6d 93       	st	X+, r22
    2044:	41 50       	subi	r20, 0x01	; 1
    2046:	50 40       	sbci	r21, 0x00	; 0
    2048:	e0 f7       	brcc	.-8      	; 0x2042 <memset+0x4>
    204a:	08 95       	ret

0000204c <sprintf>:
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	2e 97       	sbiw	r28, 0x0e	; 14
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	0e 89       	ldd	r16, Y+22	; 0x16
    2066:	1f 89       	ldd	r17, Y+23	; 0x17
    2068:	86 e0       	ldi	r24, 0x06	; 6
    206a:	8c 83       	std	Y+4, r24	; 0x04
    206c:	1a 83       	std	Y+2, r17	; 0x02
    206e:	09 83       	std	Y+1, r16	; 0x01
    2070:	8f ef       	ldi	r24, 0xFF	; 255
    2072:	9f e7       	ldi	r25, 0x7F	; 127
    2074:	9e 83       	std	Y+6, r25	; 0x06
    2076:	8d 83       	std	Y+5, r24	; 0x05
    2078:	ae 01       	movw	r20, r28
    207a:	46 5e       	subi	r20, 0xE6	; 230
    207c:	5f 4f       	sbci	r21, 0xFF	; 255
    207e:	68 8d       	ldd	r22, Y+24	; 0x18
    2080:	79 8d       	ldd	r23, Y+25	; 0x19
    2082:	ce 01       	movw	r24, r28
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	10 d0       	rcall	.+32     	; 0x20a8 <vfprintf>
    2088:	ef 81       	ldd	r30, Y+7	; 0x07
    208a:	f8 85       	ldd	r31, Y+8	; 0x08
    208c:	e0 0f       	add	r30, r16
    208e:	f1 1f       	adc	r31, r17
    2090:	10 82       	st	Z, r1
    2092:	2e 96       	adiw	r28, 0x0e	; 14
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	08 95       	ret

000020a8 <vfprintf>:
    20a8:	2f 92       	push	r2
    20aa:	3f 92       	push	r3
    20ac:	4f 92       	push	r4
    20ae:	5f 92       	push	r5
    20b0:	6f 92       	push	r6
    20b2:	7f 92       	push	r7
    20b4:	8f 92       	push	r8
    20b6:	9f 92       	push	r9
    20b8:	af 92       	push	r10
    20ba:	bf 92       	push	r11
    20bc:	cf 92       	push	r12
    20be:	df 92       	push	r13
    20c0:	ef 92       	push	r14
    20c2:	ff 92       	push	r15
    20c4:	0f 93       	push	r16
    20c6:	1f 93       	push	r17
    20c8:	cf 93       	push	r28
    20ca:	df 93       	push	r29
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	2b 97       	sbiw	r28, 0x0b	; 11
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	6c 01       	movw	r12, r24
    20de:	7b 01       	movw	r14, r22
    20e0:	8a 01       	movw	r16, r20
    20e2:	fc 01       	movw	r30, r24
    20e4:	17 82       	std	Z+7, r1	; 0x07
    20e6:	16 82       	std	Z+6, r1	; 0x06
    20e8:	83 81       	ldd	r24, Z+3	; 0x03
    20ea:	81 ff       	sbrs	r24, 1
    20ec:	bf c1       	rjmp	.+894    	; 0x246c <__stack+0x26d>
    20ee:	ce 01       	movw	r24, r28
    20f0:	01 96       	adiw	r24, 0x01	; 1
    20f2:	3c 01       	movw	r6, r24
    20f4:	f6 01       	movw	r30, r12
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	f7 01       	movw	r30, r14
    20fa:	93 fd       	sbrc	r25, 3
    20fc:	85 91       	lpm	r24, Z+
    20fe:	93 ff       	sbrs	r25, 3
    2100:	81 91       	ld	r24, Z+
    2102:	7f 01       	movw	r14, r30
    2104:	88 23       	and	r24, r24
    2106:	09 f4       	brne	.+2      	; 0x210a <vfprintf+0x62>
    2108:	ad c1       	rjmp	.+858    	; 0x2464 <__stack+0x265>
    210a:	85 32       	cpi	r24, 0x25	; 37
    210c:	39 f4       	brne	.+14     	; 0x211c <vfprintf+0x74>
    210e:	93 fd       	sbrc	r25, 3
    2110:	85 91       	lpm	r24, Z+
    2112:	93 ff       	sbrs	r25, 3
    2114:	81 91       	ld	r24, Z+
    2116:	7f 01       	movw	r14, r30
    2118:	85 32       	cpi	r24, 0x25	; 37
    211a:	21 f4       	brne	.+8      	; 0x2124 <vfprintf+0x7c>
    211c:	b6 01       	movw	r22, r12
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	d6 d1       	rcall	.+940    	; 0x24ce <fputc>
    2122:	e8 cf       	rjmp	.-48     	; 0x20f4 <vfprintf+0x4c>
    2124:	91 2c       	mov	r9, r1
    2126:	21 2c       	mov	r2, r1
    2128:	31 2c       	mov	r3, r1
    212a:	ff e1       	ldi	r31, 0x1F	; 31
    212c:	f3 15       	cp	r31, r3
    212e:	d8 f0       	brcs	.+54     	; 0x2166 <vfprintf+0xbe>
    2130:	8b 32       	cpi	r24, 0x2B	; 43
    2132:	79 f0       	breq	.+30     	; 0x2152 <vfprintf+0xaa>
    2134:	38 f4       	brcc	.+14     	; 0x2144 <vfprintf+0x9c>
    2136:	80 32       	cpi	r24, 0x20	; 32
    2138:	79 f0       	breq	.+30     	; 0x2158 <vfprintf+0xb0>
    213a:	83 32       	cpi	r24, 0x23	; 35
    213c:	a1 f4       	brne	.+40     	; 0x2166 <vfprintf+0xbe>
    213e:	23 2d       	mov	r18, r3
    2140:	20 61       	ori	r18, 0x10	; 16
    2142:	1d c0       	rjmp	.+58     	; 0x217e <vfprintf+0xd6>
    2144:	8d 32       	cpi	r24, 0x2D	; 45
    2146:	61 f0       	breq	.+24     	; 0x2160 <vfprintf+0xb8>
    2148:	80 33       	cpi	r24, 0x30	; 48
    214a:	69 f4       	brne	.+26     	; 0x2166 <vfprintf+0xbe>
    214c:	23 2d       	mov	r18, r3
    214e:	21 60       	ori	r18, 0x01	; 1
    2150:	16 c0       	rjmp	.+44     	; 0x217e <vfprintf+0xd6>
    2152:	83 2d       	mov	r24, r3
    2154:	82 60       	ori	r24, 0x02	; 2
    2156:	38 2e       	mov	r3, r24
    2158:	e3 2d       	mov	r30, r3
    215a:	e4 60       	ori	r30, 0x04	; 4
    215c:	3e 2e       	mov	r3, r30
    215e:	2a c0       	rjmp	.+84     	; 0x21b4 <vfprintf+0x10c>
    2160:	f3 2d       	mov	r31, r3
    2162:	f8 60       	ori	r31, 0x08	; 8
    2164:	1d c0       	rjmp	.+58     	; 0x21a0 <vfprintf+0xf8>
    2166:	37 fc       	sbrc	r3, 7
    2168:	2d c0       	rjmp	.+90     	; 0x21c4 <vfprintf+0x11c>
    216a:	20 ed       	ldi	r18, 0xD0	; 208
    216c:	28 0f       	add	r18, r24
    216e:	2a 30       	cpi	r18, 0x0A	; 10
    2170:	40 f0       	brcs	.+16     	; 0x2182 <vfprintf+0xda>
    2172:	8e 32       	cpi	r24, 0x2E	; 46
    2174:	b9 f4       	brne	.+46     	; 0x21a4 <vfprintf+0xfc>
    2176:	36 fc       	sbrc	r3, 6
    2178:	75 c1       	rjmp	.+746    	; 0x2464 <__stack+0x265>
    217a:	23 2d       	mov	r18, r3
    217c:	20 64       	ori	r18, 0x40	; 64
    217e:	32 2e       	mov	r3, r18
    2180:	19 c0       	rjmp	.+50     	; 0x21b4 <vfprintf+0x10c>
    2182:	36 fe       	sbrs	r3, 6
    2184:	06 c0       	rjmp	.+12     	; 0x2192 <vfprintf+0xea>
    2186:	8a e0       	ldi	r24, 0x0A	; 10
    2188:	98 9e       	mul	r9, r24
    218a:	20 0d       	add	r18, r0
    218c:	11 24       	eor	r1, r1
    218e:	92 2e       	mov	r9, r18
    2190:	11 c0       	rjmp	.+34     	; 0x21b4 <vfprintf+0x10c>
    2192:	ea e0       	ldi	r30, 0x0A	; 10
    2194:	2e 9e       	mul	r2, r30
    2196:	20 0d       	add	r18, r0
    2198:	11 24       	eor	r1, r1
    219a:	22 2e       	mov	r2, r18
    219c:	f3 2d       	mov	r31, r3
    219e:	f0 62       	ori	r31, 0x20	; 32
    21a0:	3f 2e       	mov	r3, r31
    21a2:	08 c0       	rjmp	.+16     	; 0x21b4 <vfprintf+0x10c>
    21a4:	8c 36       	cpi	r24, 0x6C	; 108
    21a6:	21 f4       	brne	.+8      	; 0x21b0 <vfprintf+0x108>
    21a8:	83 2d       	mov	r24, r3
    21aa:	80 68       	ori	r24, 0x80	; 128
    21ac:	38 2e       	mov	r3, r24
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <vfprintf+0x10c>
    21b0:	88 36       	cpi	r24, 0x68	; 104
    21b2:	41 f4       	brne	.+16     	; 0x21c4 <vfprintf+0x11c>
    21b4:	f7 01       	movw	r30, r14
    21b6:	93 fd       	sbrc	r25, 3
    21b8:	85 91       	lpm	r24, Z+
    21ba:	93 ff       	sbrs	r25, 3
    21bc:	81 91       	ld	r24, Z+
    21be:	7f 01       	movw	r14, r30
    21c0:	81 11       	cpse	r24, r1
    21c2:	b3 cf       	rjmp	.-154    	; 0x212a <vfprintf+0x82>
    21c4:	98 2f       	mov	r25, r24
    21c6:	9f 7d       	andi	r25, 0xDF	; 223
    21c8:	95 54       	subi	r25, 0x45	; 69
    21ca:	93 30       	cpi	r25, 0x03	; 3
    21cc:	28 f4       	brcc	.+10     	; 0x21d8 <vfprintf+0x130>
    21ce:	0c 5f       	subi	r16, 0xFC	; 252
    21d0:	1f 4f       	sbci	r17, 0xFF	; 255
    21d2:	9f e3       	ldi	r25, 0x3F	; 63
    21d4:	99 83       	std	Y+1, r25	; 0x01
    21d6:	0d c0       	rjmp	.+26     	; 0x21f2 <vfprintf+0x14a>
    21d8:	83 36       	cpi	r24, 0x63	; 99
    21da:	31 f0       	breq	.+12     	; 0x21e8 <vfprintf+0x140>
    21dc:	83 37       	cpi	r24, 0x73	; 115
    21de:	71 f0       	breq	.+28     	; 0x21fc <vfprintf+0x154>
    21e0:	83 35       	cpi	r24, 0x53	; 83
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <vfprintf+0x13e>
    21e4:	55 c0       	rjmp	.+170    	; 0x2290 <__stack+0x91>
    21e6:	20 c0       	rjmp	.+64     	; 0x2228 <__stack+0x29>
    21e8:	f8 01       	movw	r30, r16
    21ea:	80 81       	ld	r24, Z
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	0e 5f       	subi	r16, 0xFE	; 254
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	88 24       	eor	r8, r8
    21f4:	83 94       	inc	r8
    21f6:	91 2c       	mov	r9, r1
    21f8:	53 01       	movw	r10, r6
    21fa:	12 c0       	rjmp	.+36     	; 0x2220 <__stack+0x21>
    21fc:	28 01       	movw	r4, r16
    21fe:	f2 e0       	ldi	r31, 0x02	; 2
    2200:	4f 0e       	add	r4, r31
    2202:	51 1c       	adc	r5, r1
    2204:	f8 01       	movw	r30, r16
    2206:	a0 80       	ld	r10, Z
    2208:	b1 80       	ldd	r11, Z+1	; 0x01
    220a:	36 fe       	sbrs	r3, 6
    220c:	03 c0       	rjmp	.+6      	; 0x2214 <__stack+0x15>
    220e:	69 2d       	mov	r22, r9
    2210:	70 e0       	ldi	r23, 0x00	; 0
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <__stack+0x19>
    2214:	6f ef       	ldi	r22, 0xFF	; 255
    2216:	7f ef       	ldi	r23, 0xFF	; 255
    2218:	c5 01       	movw	r24, r10
    221a:	4e d1       	rcall	.+668    	; 0x24b8 <strnlen>
    221c:	4c 01       	movw	r8, r24
    221e:	82 01       	movw	r16, r4
    2220:	f3 2d       	mov	r31, r3
    2222:	ff 77       	andi	r31, 0x7F	; 127
    2224:	3f 2e       	mov	r3, r31
    2226:	15 c0       	rjmp	.+42     	; 0x2252 <__stack+0x53>
    2228:	28 01       	movw	r4, r16
    222a:	22 e0       	ldi	r18, 0x02	; 2
    222c:	42 0e       	add	r4, r18
    222e:	51 1c       	adc	r5, r1
    2230:	f8 01       	movw	r30, r16
    2232:	a0 80       	ld	r10, Z
    2234:	b1 80       	ldd	r11, Z+1	; 0x01
    2236:	36 fe       	sbrs	r3, 6
    2238:	03 c0       	rjmp	.+6      	; 0x2240 <__stack+0x41>
    223a:	69 2d       	mov	r22, r9
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <__stack+0x45>
    2240:	6f ef       	ldi	r22, 0xFF	; 255
    2242:	7f ef       	ldi	r23, 0xFF	; 255
    2244:	c5 01       	movw	r24, r10
    2246:	2d d1       	rcall	.+602    	; 0x24a2 <strnlen_P>
    2248:	4c 01       	movw	r8, r24
    224a:	f3 2d       	mov	r31, r3
    224c:	f0 68       	ori	r31, 0x80	; 128
    224e:	3f 2e       	mov	r3, r31
    2250:	82 01       	movw	r16, r4
    2252:	33 fc       	sbrc	r3, 3
    2254:	19 c0       	rjmp	.+50     	; 0x2288 <__stack+0x89>
    2256:	82 2d       	mov	r24, r2
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	88 16       	cp	r8, r24
    225c:	99 06       	cpc	r9, r25
    225e:	a0 f4       	brcc	.+40     	; 0x2288 <__stack+0x89>
    2260:	b6 01       	movw	r22, r12
    2262:	80 e2       	ldi	r24, 0x20	; 32
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	33 d1       	rcall	.+614    	; 0x24ce <fputc>
    2268:	2a 94       	dec	r2
    226a:	f5 cf       	rjmp	.-22     	; 0x2256 <__stack+0x57>
    226c:	f5 01       	movw	r30, r10
    226e:	37 fc       	sbrc	r3, 7
    2270:	85 91       	lpm	r24, Z+
    2272:	37 fe       	sbrs	r3, 7
    2274:	81 91       	ld	r24, Z+
    2276:	5f 01       	movw	r10, r30
    2278:	b6 01       	movw	r22, r12
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	28 d1       	rcall	.+592    	; 0x24ce <fputc>
    227e:	21 10       	cpse	r2, r1
    2280:	2a 94       	dec	r2
    2282:	21 e0       	ldi	r18, 0x01	; 1
    2284:	82 1a       	sub	r8, r18
    2286:	91 08       	sbc	r9, r1
    2288:	81 14       	cp	r8, r1
    228a:	91 04       	cpc	r9, r1
    228c:	79 f7       	brne	.-34     	; 0x226c <__stack+0x6d>
    228e:	e1 c0       	rjmp	.+450    	; 0x2452 <__stack+0x253>
    2290:	84 36       	cpi	r24, 0x64	; 100
    2292:	11 f0       	breq	.+4      	; 0x2298 <__stack+0x99>
    2294:	89 36       	cpi	r24, 0x69	; 105
    2296:	39 f5       	brne	.+78     	; 0x22e6 <__stack+0xe7>
    2298:	f8 01       	movw	r30, r16
    229a:	37 fe       	sbrs	r3, 7
    229c:	07 c0       	rjmp	.+14     	; 0x22ac <__stack+0xad>
    229e:	60 81       	ld	r22, Z
    22a0:	71 81       	ldd	r23, Z+1	; 0x01
    22a2:	82 81       	ldd	r24, Z+2	; 0x02
    22a4:	93 81       	ldd	r25, Z+3	; 0x03
    22a6:	0c 5f       	subi	r16, 0xFC	; 252
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	08 c0       	rjmp	.+16     	; 0x22bc <__stack+0xbd>
    22ac:	60 81       	ld	r22, Z
    22ae:	71 81       	ldd	r23, Z+1	; 0x01
    22b0:	07 2e       	mov	r0, r23
    22b2:	00 0c       	add	r0, r0
    22b4:	88 0b       	sbc	r24, r24
    22b6:	99 0b       	sbc	r25, r25
    22b8:	0e 5f       	subi	r16, 0xFE	; 254
    22ba:	1f 4f       	sbci	r17, 0xFF	; 255
    22bc:	f3 2d       	mov	r31, r3
    22be:	ff 76       	andi	r31, 0x6F	; 111
    22c0:	3f 2e       	mov	r3, r31
    22c2:	97 ff       	sbrs	r25, 7
    22c4:	09 c0       	rjmp	.+18     	; 0x22d8 <__stack+0xd9>
    22c6:	90 95       	com	r25
    22c8:	80 95       	com	r24
    22ca:	70 95       	com	r23
    22cc:	61 95       	neg	r22
    22ce:	7f 4f       	sbci	r23, 0xFF	; 255
    22d0:	8f 4f       	sbci	r24, 0xFF	; 255
    22d2:	9f 4f       	sbci	r25, 0xFF	; 255
    22d4:	f0 68       	ori	r31, 0x80	; 128
    22d6:	3f 2e       	mov	r3, r31
    22d8:	2a e0       	ldi	r18, 0x0A	; 10
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	a3 01       	movw	r20, r6
    22de:	33 d1       	rcall	.+614    	; 0x2546 <__ultoa_invert>
    22e0:	88 2e       	mov	r8, r24
    22e2:	86 18       	sub	r8, r6
    22e4:	44 c0       	rjmp	.+136    	; 0x236e <__stack+0x16f>
    22e6:	85 37       	cpi	r24, 0x75	; 117
    22e8:	31 f4       	brne	.+12     	; 0x22f6 <__stack+0xf7>
    22ea:	23 2d       	mov	r18, r3
    22ec:	2f 7e       	andi	r18, 0xEF	; 239
    22ee:	b2 2e       	mov	r11, r18
    22f0:	2a e0       	ldi	r18, 0x0A	; 10
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	25 c0       	rjmp	.+74     	; 0x2340 <__stack+0x141>
    22f6:	93 2d       	mov	r25, r3
    22f8:	99 7f       	andi	r25, 0xF9	; 249
    22fa:	b9 2e       	mov	r11, r25
    22fc:	8f 36       	cpi	r24, 0x6F	; 111
    22fe:	c1 f0       	breq	.+48     	; 0x2330 <__stack+0x131>
    2300:	18 f4       	brcc	.+6      	; 0x2308 <__stack+0x109>
    2302:	88 35       	cpi	r24, 0x58	; 88
    2304:	79 f0       	breq	.+30     	; 0x2324 <__stack+0x125>
    2306:	ae c0       	rjmp	.+348    	; 0x2464 <__stack+0x265>
    2308:	80 37       	cpi	r24, 0x70	; 112
    230a:	19 f0       	breq	.+6      	; 0x2312 <__stack+0x113>
    230c:	88 37       	cpi	r24, 0x78	; 120
    230e:	21 f0       	breq	.+8      	; 0x2318 <__stack+0x119>
    2310:	a9 c0       	rjmp	.+338    	; 0x2464 <__stack+0x265>
    2312:	e9 2f       	mov	r30, r25
    2314:	e0 61       	ori	r30, 0x10	; 16
    2316:	be 2e       	mov	r11, r30
    2318:	b4 fe       	sbrs	r11, 4
    231a:	0d c0       	rjmp	.+26     	; 0x2336 <__stack+0x137>
    231c:	fb 2d       	mov	r31, r11
    231e:	f4 60       	ori	r31, 0x04	; 4
    2320:	bf 2e       	mov	r11, r31
    2322:	09 c0       	rjmp	.+18     	; 0x2336 <__stack+0x137>
    2324:	34 fe       	sbrs	r3, 4
    2326:	0a c0       	rjmp	.+20     	; 0x233c <__stack+0x13d>
    2328:	29 2f       	mov	r18, r25
    232a:	26 60       	ori	r18, 0x06	; 6
    232c:	b2 2e       	mov	r11, r18
    232e:	06 c0       	rjmp	.+12     	; 0x233c <__stack+0x13d>
    2330:	28 e0       	ldi	r18, 0x08	; 8
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	05 c0       	rjmp	.+10     	; 0x2340 <__stack+0x141>
    2336:	20 e1       	ldi	r18, 0x10	; 16
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <__stack+0x141>
    233c:	20 e1       	ldi	r18, 0x10	; 16
    233e:	32 e0       	ldi	r19, 0x02	; 2
    2340:	f8 01       	movw	r30, r16
    2342:	b7 fe       	sbrs	r11, 7
    2344:	07 c0       	rjmp	.+14     	; 0x2354 <__stack+0x155>
    2346:	60 81       	ld	r22, Z
    2348:	71 81       	ldd	r23, Z+1	; 0x01
    234a:	82 81       	ldd	r24, Z+2	; 0x02
    234c:	93 81       	ldd	r25, Z+3	; 0x03
    234e:	0c 5f       	subi	r16, 0xFC	; 252
    2350:	1f 4f       	sbci	r17, 0xFF	; 255
    2352:	06 c0       	rjmp	.+12     	; 0x2360 <__stack+0x161>
    2354:	60 81       	ld	r22, Z
    2356:	71 81       	ldd	r23, Z+1	; 0x01
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	0e 5f       	subi	r16, 0xFE	; 254
    235e:	1f 4f       	sbci	r17, 0xFF	; 255
    2360:	a3 01       	movw	r20, r6
    2362:	f1 d0       	rcall	.+482    	; 0x2546 <__ultoa_invert>
    2364:	88 2e       	mov	r8, r24
    2366:	86 18       	sub	r8, r6
    2368:	fb 2d       	mov	r31, r11
    236a:	ff 77       	andi	r31, 0x7F	; 127
    236c:	3f 2e       	mov	r3, r31
    236e:	36 fe       	sbrs	r3, 6
    2370:	0d c0       	rjmp	.+26     	; 0x238c <__stack+0x18d>
    2372:	23 2d       	mov	r18, r3
    2374:	2e 7f       	andi	r18, 0xFE	; 254
    2376:	a2 2e       	mov	r10, r18
    2378:	89 14       	cp	r8, r9
    237a:	58 f4       	brcc	.+22     	; 0x2392 <__stack+0x193>
    237c:	34 fe       	sbrs	r3, 4
    237e:	0b c0       	rjmp	.+22     	; 0x2396 <__stack+0x197>
    2380:	32 fc       	sbrc	r3, 2
    2382:	09 c0       	rjmp	.+18     	; 0x2396 <__stack+0x197>
    2384:	83 2d       	mov	r24, r3
    2386:	8e 7e       	andi	r24, 0xEE	; 238
    2388:	a8 2e       	mov	r10, r24
    238a:	05 c0       	rjmp	.+10     	; 0x2396 <__stack+0x197>
    238c:	b8 2c       	mov	r11, r8
    238e:	a3 2c       	mov	r10, r3
    2390:	03 c0       	rjmp	.+6      	; 0x2398 <__stack+0x199>
    2392:	b8 2c       	mov	r11, r8
    2394:	01 c0       	rjmp	.+2      	; 0x2398 <__stack+0x199>
    2396:	b9 2c       	mov	r11, r9
    2398:	a4 fe       	sbrs	r10, 4
    239a:	0f c0       	rjmp	.+30     	; 0x23ba <__stack+0x1bb>
    239c:	fe 01       	movw	r30, r28
    239e:	e8 0d       	add	r30, r8
    23a0:	f1 1d       	adc	r31, r1
    23a2:	80 81       	ld	r24, Z
    23a4:	80 33       	cpi	r24, 0x30	; 48
    23a6:	21 f4       	brne	.+8      	; 0x23b0 <__stack+0x1b1>
    23a8:	9a 2d       	mov	r25, r10
    23aa:	99 7e       	andi	r25, 0xE9	; 233
    23ac:	a9 2e       	mov	r10, r25
    23ae:	09 c0       	rjmp	.+18     	; 0x23c2 <__stack+0x1c3>
    23b0:	a2 fe       	sbrs	r10, 2
    23b2:	06 c0       	rjmp	.+12     	; 0x23c0 <__stack+0x1c1>
    23b4:	b3 94       	inc	r11
    23b6:	b3 94       	inc	r11
    23b8:	04 c0       	rjmp	.+8      	; 0x23c2 <__stack+0x1c3>
    23ba:	8a 2d       	mov	r24, r10
    23bc:	86 78       	andi	r24, 0x86	; 134
    23be:	09 f0       	breq	.+2      	; 0x23c2 <__stack+0x1c3>
    23c0:	b3 94       	inc	r11
    23c2:	a3 fc       	sbrc	r10, 3
    23c4:	10 c0       	rjmp	.+32     	; 0x23e6 <__stack+0x1e7>
    23c6:	a0 fe       	sbrs	r10, 0
    23c8:	06 c0       	rjmp	.+12     	; 0x23d6 <__stack+0x1d7>
    23ca:	b2 14       	cp	r11, r2
    23cc:	80 f4       	brcc	.+32     	; 0x23ee <__stack+0x1ef>
    23ce:	28 0c       	add	r2, r8
    23d0:	92 2c       	mov	r9, r2
    23d2:	9b 18       	sub	r9, r11
    23d4:	0d c0       	rjmp	.+26     	; 0x23f0 <__stack+0x1f1>
    23d6:	b2 14       	cp	r11, r2
    23d8:	58 f4       	brcc	.+22     	; 0x23f0 <__stack+0x1f1>
    23da:	b6 01       	movw	r22, r12
    23dc:	80 e2       	ldi	r24, 0x20	; 32
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	76 d0       	rcall	.+236    	; 0x24ce <fputc>
    23e2:	b3 94       	inc	r11
    23e4:	f8 cf       	rjmp	.-16     	; 0x23d6 <__stack+0x1d7>
    23e6:	b2 14       	cp	r11, r2
    23e8:	18 f4       	brcc	.+6      	; 0x23f0 <__stack+0x1f1>
    23ea:	2b 18       	sub	r2, r11
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <__stack+0x1f3>
    23ee:	98 2c       	mov	r9, r8
    23f0:	21 2c       	mov	r2, r1
    23f2:	a4 fe       	sbrs	r10, 4
    23f4:	0f c0       	rjmp	.+30     	; 0x2414 <__stack+0x215>
    23f6:	b6 01       	movw	r22, r12
    23f8:	80 e3       	ldi	r24, 0x30	; 48
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	68 d0       	rcall	.+208    	; 0x24ce <fputc>
    23fe:	a2 fe       	sbrs	r10, 2
    2400:	16 c0       	rjmp	.+44     	; 0x242e <__stack+0x22f>
    2402:	a1 fc       	sbrc	r10, 1
    2404:	03 c0       	rjmp	.+6      	; 0x240c <__stack+0x20d>
    2406:	88 e7       	ldi	r24, 0x78	; 120
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <__stack+0x211>
    240c:	88 e5       	ldi	r24, 0x58	; 88
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	b6 01       	movw	r22, r12
    2412:	0c c0       	rjmp	.+24     	; 0x242c <__stack+0x22d>
    2414:	8a 2d       	mov	r24, r10
    2416:	86 78       	andi	r24, 0x86	; 134
    2418:	51 f0       	breq	.+20     	; 0x242e <__stack+0x22f>
    241a:	a1 fe       	sbrs	r10, 1
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <__stack+0x223>
    241e:	8b e2       	ldi	r24, 0x2B	; 43
    2420:	01 c0       	rjmp	.+2      	; 0x2424 <__stack+0x225>
    2422:	80 e2       	ldi	r24, 0x20	; 32
    2424:	a7 fc       	sbrc	r10, 7
    2426:	8d e2       	ldi	r24, 0x2D	; 45
    2428:	b6 01       	movw	r22, r12
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	50 d0       	rcall	.+160    	; 0x24ce <fputc>
    242e:	89 14       	cp	r8, r9
    2430:	30 f4       	brcc	.+12     	; 0x243e <__stack+0x23f>
    2432:	b6 01       	movw	r22, r12
    2434:	80 e3       	ldi	r24, 0x30	; 48
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	4a d0       	rcall	.+148    	; 0x24ce <fputc>
    243a:	9a 94       	dec	r9
    243c:	f8 cf       	rjmp	.-16     	; 0x242e <__stack+0x22f>
    243e:	8a 94       	dec	r8
    2440:	f3 01       	movw	r30, r6
    2442:	e8 0d       	add	r30, r8
    2444:	f1 1d       	adc	r31, r1
    2446:	80 81       	ld	r24, Z
    2448:	b6 01       	movw	r22, r12
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	40 d0       	rcall	.+128    	; 0x24ce <fputc>
    244e:	81 10       	cpse	r8, r1
    2450:	f6 cf       	rjmp	.-20     	; 0x243e <__stack+0x23f>
    2452:	22 20       	and	r2, r2
    2454:	09 f4       	brne	.+2      	; 0x2458 <__stack+0x259>
    2456:	4e ce       	rjmp	.-868    	; 0x20f4 <vfprintf+0x4c>
    2458:	b6 01       	movw	r22, r12
    245a:	80 e2       	ldi	r24, 0x20	; 32
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	37 d0       	rcall	.+110    	; 0x24ce <fputc>
    2460:	2a 94       	dec	r2
    2462:	f7 cf       	rjmp	.-18     	; 0x2452 <__stack+0x253>
    2464:	f6 01       	movw	r30, r12
    2466:	86 81       	ldd	r24, Z+6	; 0x06
    2468:	97 81       	ldd	r25, Z+7	; 0x07
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <__stack+0x271>
    246c:	8f ef       	ldi	r24, 0xFF	; 255
    246e:	9f ef       	ldi	r25, 0xFF	; 255
    2470:	2b 96       	adiw	r28, 0x0b	; 11
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	1f 91       	pop	r17
    2482:	0f 91       	pop	r16
    2484:	ff 90       	pop	r15
    2486:	ef 90       	pop	r14
    2488:	df 90       	pop	r13
    248a:	cf 90       	pop	r12
    248c:	bf 90       	pop	r11
    248e:	af 90       	pop	r10
    2490:	9f 90       	pop	r9
    2492:	8f 90       	pop	r8
    2494:	7f 90       	pop	r7
    2496:	6f 90       	pop	r6
    2498:	5f 90       	pop	r5
    249a:	4f 90       	pop	r4
    249c:	3f 90       	pop	r3
    249e:	2f 90       	pop	r2
    24a0:	08 95       	ret

000024a2 <strnlen_P>:
    24a2:	fc 01       	movw	r30, r24
    24a4:	05 90       	lpm	r0, Z+
    24a6:	61 50       	subi	r22, 0x01	; 1
    24a8:	70 40       	sbci	r23, 0x00	; 0
    24aa:	01 10       	cpse	r0, r1
    24ac:	d8 f7       	brcc	.-10     	; 0x24a4 <strnlen_P+0x2>
    24ae:	80 95       	com	r24
    24b0:	90 95       	com	r25
    24b2:	8e 0f       	add	r24, r30
    24b4:	9f 1f       	adc	r25, r31
    24b6:	08 95       	ret

000024b8 <strnlen>:
    24b8:	fc 01       	movw	r30, r24
    24ba:	61 50       	subi	r22, 0x01	; 1
    24bc:	70 40       	sbci	r23, 0x00	; 0
    24be:	01 90       	ld	r0, Z+
    24c0:	01 10       	cpse	r0, r1
    24c2:	d8 f7       	brcc	.-10     	; 0x24ba <strnlen+0x2>
    24c4:	80 95       	com	r24
    24c6:	90 95       	com	r25
    24c8:	8e 0f       	add	r24, r30
    24ca:	9f 1f       	adc	r25, r31
    24cc:	08 95       	ret

000024ce <fputc>:
    24ce:	0f 93       	push	r16
    24d0:	1f 93       	push	r17
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	fb 01       	movw	r30, r22
    24d8:	23 81       	ldd	r18, Z+3	; 0x03
    24da:	21 fd       	sbrc	r18, 1
    24dc:	03 c0       	rjmp	.+6      	; 0x24e4 <fputc+0x16>
    24de:	8f ef       	ldi	r24, 0xFF	; 255
    24e0:	9f ef       	ldi	r25, 0xFF	; 255
    24e2:	2c c0       	rjmp	.+88     	; 0x253c <fputc+0x6e>
    24e4:	22 ff       	sbrs	r18, 2
    24e6:	16 c0       	rjmp	.+44     	; 0x2514 <fputc+0x46>
    24e8:	46 81       	ldd	r20, Z+6	; 0x06
    24ea:	57 81       	ldd	r21, Z+7	; 0x07
    24ec:	24 81       	ldd	r18, Z+4	; 0x04
    24ee:	35 81       	ldd	r19, Z+5	; 0x05
    24f0:	42 17       	cp	r20, r18
    24f2:	53 07       	cpc	r21, r19
    24f4:	44 f4       	brge	.+16     	; 0x2506 <fputc+0x38>
    24f6:	a0 81       	ld	r26, Z
    24f8:	b1 81       	ldd	r27, Z+1	; 0x01
    24fa:	9d 01       	movw	r18, r26
    24fc:	2f 5f       	subi	r18, 0xFF	; 255
    24fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2500:	31 83       	std	Z+1, r19	; 0x01
    2502:	20 83       	st	Z, r18
    2504:	8c 93       	st	X, r24
    2506:	26 81       	ldd	r18, Z+6	; 0x06
    2508:	37 81       	ldd	r19, Z+7	; 0x07
    250a:	2f 5f       	subi	r18, 0xFF	; 255
    250c:	3f 4f       	sbci	r19, 0xFF	; 255
    250e:	37 83       	std	Z+7, r19	; 0x07
    2510:	26 83       	std	Z+6, r18	; 0x06
    2512:	14 c0       	rjmp	.+40     	; 0x253c <fputc+0x6e>
    2514:	8b 01       	movw	r16, r22
    2516:	ec 01       	movw	r28, r24
    2518:	fb 01       	movw	r30, r22
    251a:	00 84       	ldd	r0, Z+8	; 0x08
    251c:	f1 85       	ldd	r31, Z+9	; 0x09
    251e:	e0 2d       	mov	r30, r0
    2520:	19 95       	eicall
    2522:	89 2b       	or	r24, r25
    2524:	e1 f6       	brne	.-72     	; 0x24de <fputc+0x10>
    2526:	d8 01       	movw	r26, r16
    2528:	16 96       	adiw	r26, 0x06	; 6
    252a:	8d 91       	ld	r24, X+
    252c:	9c 91       	ld	r25, X
    252e:	17 97       	sbiw	r26, 0x07	; 7
    2530:	01 96       	adiw	r24, 0x01	; 1
    2532:	17 96       	adiw	r26, 0x07	; 7
    2534:	9c 93       	st	X, r25
    2536:	8e 93       	st	-X, r24
    2538:	16 97       	sbiw	r26, 0x06	; 6
    253a:	ce 01       	movw	r24, r28
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	1f 91       	pop	r17
    2542:	0f 91       	pop	r16
    2544:	08 95       	ret

00002546 <__ultoa_invert>:
    2546:	fa 01       	movw	r30, r20
    2548:	aa 27       	eor	r26, r26
    254a:	28 30       	cpi	r18, 0x08	; 8
    254c:	51 f1       	breq	.+84     	; 0x25a2 <__ultoa_invert+0x5c>
    254e:	20 31       	cpi	r18, 0x10	; 16
    2550:	81 f1       	breq	.+96     	; 0x25b2 <__ultoa_invert+0x6c>
    2552:	e8 94       	clt
    2554:	6f 93       	push	r22
    2556:	6e 7f       	andi	r22, 0xFE	; 254
    2558:	6e 5f       	subi	r22, 0xFE	; 254
    255a:	7f 4f       	sbci	r23, 0xFF	; 255
    255c:	8f 4f       	sbci	r24, 0xFF	; 255
    255e:	9f 4f       	sbci	r25, 0xFF	; 255
    2560:	af 4f       	sbci	r26, 0xFF	; 255
    2562:	b1 e0       	ldi	r27, 0x01	; 1
    2564:	3e d0       	rcall	.+124    	; 0x25e2 <__ultoa_invert+0x9c>
    2566:	b4 e0       	ldi	r27, 0x04	; 4
    2568:	3c d0       	rcall	.+120    	; 0x25e2 <__ultoa_invert+0x9c>
    256a:	67 0f       	add	r22, r23
    256c:	78 1f       	adc	r23, r24
    256e:	89 1f       	adc	r24, r25
    2570:	9a 1f       	adc	r25, r26
    2572:	a1 1d       	adc	r26, r1
    2574:	68 0f       	add	r22, r24
    2576:	79 1f       	adc	r23, r25
    2578:	8a 1f       	adc	r24, r26
    257a:	91 1d       	adc	r25, r1
    257c:	a1 1d       	adc	r26, r1
    257e:	6a 0f       	add	r22, r26
    2580:	71 1d       	adc	r23, r1
    2582:	81 1d       	adc	r24, r1
    2584:	91 1d       	adc	r25, r1
    2586:	a1 1d       	adc	r26, r1
    2588:	20 d0       	rcall	.+64     	; 0x25ca <__ultoa_invert+0x84>
    258a:	09 f4       	brne	.+2      	; 0x258e <__ultoa_invert+0x48>
    258c:	68 94       	set
    258e:	3f 91       	pop	r19
    2590:	2a e0       	ldi	r18, 0x0A	; 10
    2592:	26 9f       	mul	r18, r22
    2594:	11 24       	eor	r1, r1
    2596:	30 19       	sub	r19, r0
    2598:	30 5d       	subi	r19, 0xD0	; 208
    259a:	31 93       	st	Z+, r19
    259c:	de f6       	brtc	.-74     	; 0x2554 <__ultoa_invert+0xe>
    259e:	cf 01       	movw	r24, r30
    25a0:	08 95       	ret
    25a2:	46 2f       	mov	r20, r22
    25a4:	47 70       	andi	r20, 0x07	; 7
    25a6:	40 5d       	subi	r20, 0xD0	; 208
    25a8:	41 93       	st	Z+, r20
    25aa:	b3 e0       	ldi	r27, 0x03	; 3
    25ac:	0f d0       	rcall	.+30     	; 0x25cc <__ultoa_invert+0x86>
    25ae:	c9 f7       	brne	.-14     	; 0x25a2 <__ultoa_invert+0x5c>
    25b0:	f6 cf       	rjmp	.-20     	; 0x259e <__ultoa_invert+0x58>
    25b2:	46 2f       	mov	r20, r22
    25b4:	4f 70       	andi	r20, 0x0F	; 15
    25b6:	40 5d       	subi	r20, 0xD0	; 208
    25b8:	4a 33       	cpi	r20, 0x3A	; 58
    25ba:	18 f0       	brcs	.+6      	; 0x25c2 <__ultoa_invert+0x7c>
    25bc:	49 5d       	subi	r20, 0xD9	; 217
    25be:	31 fd       	sbrc	r19, 1
    25c0:	40 52       	subi	r20, 0x20	; 32
    25c2:	41 93       	st	Z+, r20
    25c4:	02 d0       	rcall	.+4      	; 0x25ca <__ultoa_invert+0x84>
    25c6:	a9 f7       	brne	.-22     	; 0x25b2 <__ultoa_invert+0x6c>
    25c8:	ea cf       	rjmp	.-44     	; 0x259e <__ultoa_invert+0x58>
    25ca:	b4 e0       	ldi	r27, 0x04	; 4
    25cc:	a6 95       	lsr	r26
    25ce:	97 95       	ror	r25
    25d0:	87 95       	ror	r24
    25d2:	77 95       	ror	r23
    25d4:	67 95       	ror	r22
    25d6:	ba 95       	dec	r27
    25d8:	c9 f7       	brne	.-14     	; 0x25cc <__ultoa_invert+0x86>
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	61 05       	cpc	r22, r1
    25de:	71 05       	cpc	r23, r1
    25e0:	08 95       	ret
    25e2:	9b 01       	movw	r18, r22
    25e4:	ac 01       	movw	r20, r24
    25e6:	0a 2e       	mov	r0, r26
    25e8:	06 94       	lsr	r0
    25ea:	57 95       	ror	r21
    25ec:	47 95       	ror	r20
    25ee:	37 95       	ror	r19
    25f0:	27 95       	ror	r18
    25f2:	ba 95       	dec	r27
    25f4:	c9 f7       	brne	.-14     	; 0x25e8 <__ultoa_invert+0xa2>
    25f6:	62 0f       	add	r22, r18
    25f8:	73 1f       	adc	r23, r19
    25fa:	84 1f       	adc	r24, r20
    25fc:	95 1f       	adc	r25, r21
    25fe:	a0 1d       	adc	r26, r0
    2600:	08 95       	ret

00002602 <__divmodsi4>:
    2602:	05 2e       	mov	r0, r21
    2604:	97 fb       	bst	r25, 7
    2606:	16 f4       	brtc	.+4      	; 0x260c <__divmodsi4+0xa>
    2608:	00 94       	com	r0
    260a:	0f d0       	rcall	.+30     	; 0x262a <__negsi2>
    260c:	57 fd       	sbrc	r21, 7
    260e:	05 d0       	rcall	.+10     	; 0x261a <__divmodsi4_neg2>
    2610:	24 d0       	rcall	.+72     	; 0x265a <__udivmodsi4>
    2612:	07 fc       	sbrc	r0, 7
    2614:	02 d0       	rcall	.+4      	; 0x261a <__divmodsi4_neg2>
    2616:	46 f4       	brtc	.+16     	; 0x2628 <__divmodsi4_exit>
    2618:	08 c0       	rjmp	.+16     	; 0x262a <__negsi2>

0000261a <__divmodsi4_neg2>:
    261a:	50 95       	com	r21
    261c:	40 95       	com	r20
    261e:	30 95       	com	r19
    2620:	21 95       	neg	r18
    2622:	3f 4f       	sbci	r19, 0xFF	; 255
    2624:	4f 4f       	sbci	r20, 0xFF	; 255
    2626:	5f 4f       	sbci	r21, 0xFF	; 255

00002628 <__divmodsi4_exit>:
    2628:	08 95       	ret

0000262a <__negsi2>:
    262a:	90 95       	com	r25
    262c:	80 95       	com	r24
    262e:	70 95       	com	r23
    2630:	61 95       	neg	r22
    2632:	7f 4f       	sbci	r23, 0xFF	; 255
    2634:	8f 4f       	sbci	r24, 0xFF	; 255
    2636:	9f 4f       	sbci	r25, 0xFF	; 255
    2638:	08 95       	ret

0000263a <__muluhisi3>:
    263a:	31 d0       	rcall	.+98     	; 0x269e <__umulhisi3>
    263c:	a5 9f       	mul	r26, r21
    263e:	90 0d       	add	r25, r0
    2640:	b4 9f       	mul	r27, r20
    2642:	90 0d       	add	r25, r0
    2644:	a4 9f       	mul	r26, r20
    2646:	80 0d       	add	r24, r0
    2648:	91 1d       	adc	r25, r1
    264a:	11 24       	eor	r1, r1
    264c:	08 95       	ret

0000264e <__mulshisi3>:
    264e:	b7 ff       	sbrs	r27, 7
    2650:	f4 cf       	rjmp	.-24     	; 0x263a <__muluhisi3>

00002652 <__mulohisi3>:
    2652:	f3 df       	rcall	.-26     	; 0x263a <__muluhisi3>
    2654:	82 1b       	sub	r24, r18
    2656:	93 0b       	sbc	r25, r19
    2658:	08 95       	ret

0000265a <__udivmodsi4>:
    265a:	a1 e2       	ldi	r26, 0x21	; 33
    265c:	1a 2e       	mov	r1, r26
    265e:	aa 1b       	sub	r26, r26
    2660:	bb 1b       	sub	r27, r27
    2662:	fd 01       	movw	r30, r26
    2664:	0d c0       	rjmp	.+26     	; 0x2680 <__udivmodsi4_ep>

00002666 <__udivmodsi4_loop>:
    2666:	aa 1f       	adc	r26, r26
    2668:	bb 1f       	adc	r27, r27
    266a:	ee 1f       	adc	r30, r30
    266c:	ff 1f       	adc	r31, r31
    266e:	a2 17       	cp	r26, r18
    2670:	b3 07       	cpc	r27, r19
    2672:	e4 07       	cpc	r30, r20
    2674:	f5 07       	cpc	r31, r21
    2676:	20 f0       	brcs	.+8      	; 0x2680 <__udivmodsi4_ep>
    2678:	a2 1b       	sub	r26, r18
    267a:	b3 0b       	sbc	r27, r19
    267c:	e4 0b       	sbc	r30, r20
    267e:	f5 0b       	sbc	r31, r21

00002680 <__udivmodsi4_ep>:
    2680:	66 1f       	adc	r22, r22
    2682:	77 1f       	adc	r23, r23
    2684:	88 1f       	adc	r24, r24
    2686:	99 1f       	adc	r25, r25
    2688:	1a 94       	dec	r1
    268a:	69 f7       	brne	.-38     	; 0x2666 <__udivmodsi4_loop>
    268c:	60 95       	com	r22
    268e:	70 95       	com	r23
    2690:	80 95       	com	r24
    2692:	90 95       	com	r25
    2694:	9b 01       	movw	r18, r22
    2696:	ac 01       	movw	r20, r24
    2698:	bd 01       	movw	r22, r26
    269a:	cf 01       	movw	r24, r30
    269c:	08 95       	ret

0000269e <__umulhisi3>:
    269e:	a2 9f       	mul	r26, r18
    26a0:	b0 01       	movw	r22, r0
    26a2:	b3 9f       	mul	r27, r19
    26a4:	c0 01       	movw	r24, r0
    26a6:	a3 9f       	mul	r26, r19
    26a8:	70 0d       	add	r23, r0
    26aa:	81 1d       	adc	r24, r1
    26ac:	11 24       	eor	r1, r1
    26ae:	91 1d       	adc	r25, r1
    26b0:	b2 9f       	mul	r27, r18
    26b2:	70 0d       	add	r23, r0
    26b4:	81 1d       	adc	r24, r1
    26b6:	11 24       	eor	r1, r1
    26b8:	91 1d       	adc	r25, r1
    26ba:	08 95       	ret

000026bc <_exit>:
    26bc:	f8 94       	cli

000026be <__stop_program>:
    26be:	ff cf       	rjmp	.-2      	; 0x26be <__stop_program>
