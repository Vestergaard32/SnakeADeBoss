
SnakeADDeBoss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000210  00800200  000019f2  00001a86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ed  00800410  00800410  00001c96  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000193d  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001186  00000000  00000000  000037c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fef  00000000  00000000  0000494b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  0000593c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093b  00000000  00000000  00005d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000074d  00000000  00000000  00006677  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006dc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ef       	ldi	r30, 0xF2	; 242
      fc:	f9 e1       	ldi	r31, 0x19	; 25
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 31       	cpi	r26, 0x10	; 16
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	29 e0       	ldi	r18, 0x09	; 9
     110:	a0 e1       	ldi	r26, 0x10	; 16
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ad 3f       	cpi	r26, 0xFD	; 253
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	94 d1       	rcall	.+808    	; 0x448 <main>
     120:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <time>:
     126:	fc 01       	movw	r30, r24
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	f8 94       	cli
     12c:	60 91 f9 09 	lds	r22, 0x09F9	; 0x8009f9 <__system_time>
     130:	70 91 fa 09 	lds	r23, 0x09FA	; 0x8009fa <__system_time+0x1>
     134:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <__system_time+0x2>
     138:	90 91 fc 09 	lds	r25, 0x09FC	; 0x8009fc <__system_time+0x3>
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	30 97       	sbiw	r30, 0x00	; 0
     140:	21 f0       	breq	.+8      	; 0x14a <time+0x24>
     142:	60 83       	st	Z, r22
     144:	71 83       	std	Z+1, r23	; 0x01
     146:	82 83       	std	Z+2, r24	; 0x02
     148:	93 83       	std	Z+3, r25	; 0x03
     14a:	08 95       	ret

0000014c <GenerateFoodPosition>:
#include "FoodProcessor.h"
#include <stdlib.h>
#include <time.h>

struct Position GenerateFoodPosition(int worldWidth, int worldHeight)
{	
     14c:	cf 93       	push	r28
     14e:	df 93       	push	r29
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	2c 97       	sbiw	r28, 0x0c	; 12
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	cd bf       	out	0x3d, r28	; 61
     160:	9a 87       	std	Y+10, r25	; 0x0a
     162:	89 87       	std	Y+9, r24	; 0x09
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	6b 87       	std	Y+11, r22	; 0x0b
	int newXPos = rand() % (worldWidth-2);
     168:	0e 94 8c 0c 	call	0x1918	; 0x1918 <rand>
     16c:	ac 01       	movw	r20, r24
     16e:	89 85       	ldd	r24, Y+9	; 0x09
     170:	9a 85       	ldd	r25, Y+10	; 0x0a
     172:	9c 01       	movw	r18, r24
     174:	22 50       	subi	r18, 0x02	; 2
     176:	31 09       	sbc	r19, r1
     178:	ca 01       	movw	r24, r20
     17a:	b9 01       	movw	r22, r18
     17c:	0e 94 1e 0c 	call	0x183c	; 0x183c <__divmodhi4>
     180:	9a 83       	std	Y+2, r25	; 0x02
     182:	89 83       	std	Y+1, r24	; 0x01
	int newYPos = rand() & (worldHeight-2);
     184:	0e 94 8c 0c 	call	0x1918	; 0x1918 <rand>
     188:	9c 01       	movw	r18, r24
     18a:	8b 85       	ldd	r24, Y+11	; 0x0b
     18c:	9c 85       	ldd	r25, Y+12	; 0x0c
     18e:	02 97       	sbiw	r24, 0x02	; 2
     190:	82 23       	and	r24, r18
     192:	93 23       	and	r25, r19
     194:	9c 83       	std	Y+4, r25	; 0x04
     196:	8b 83       	std	Y+3, r24	; 0x03
	
	struct Position newPosition;
	newPosition.x = newXPos;
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	9a 81       	ldd	r25, Y+2	; 0x02
     19c:	9e 83       	std	Y+6, r25	; 0x06
     19e:	8d 83       	std	Y+5, r24	; 0x05
	newPosition.y = newYPos;
     1a0:	8b 81       	ldd	r24, Y+3	; 0x03
     1a2:	9c 81       	ldd	r25, Y+4	; 0x04
     1a4:	98 87       	std	Y+8, r25	; 0x08
     1a6:	8f 83       	std	Y+7, r24	; 0x07
		
	return newPosition;
     1a8:	8d 81       	ldd	r24, Y+5	; 0x05
     1aa:	9e 81       	ldd	r25, Y+6	; 0x06
     1ac:	af 81       	ldd	r26, Y+7	; 0x07
     1ae:	b8 85       	ldd	r27, Y+8	; 0x08
     1b0:	bc 01       	movw	r22, r24
     1b2:	cd 01       	movw	r24, r26
     1b4:	2c 96       	adiw	r28, 0x0c	; 12
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	cd bf       	out	0x3d, r28	; 61
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <InitKeypad>:
	{ '3', '6', '9', '#' },
	{ 'A', 'B', 'C', 'D' }
};

void InitKeypad()
{
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
	// Setup input pins to keyboard
	// These are pins PA6 (Row 2) and PA4 (Row 1), and C7 (Row 3) and C5 (Row 4)
	DDRA &= ~(0b01010000);
     1ce:	81 e2       	ldi	r24, 0x21	; 33
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	21 e2       	ldi	r18, 0x21	; 33
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	f9 01       	movw	r30, r18
     1d8:	20 81       	ld	r18, Z
     1da:	2f 7a       	andi	r18, 0xAF	; 175
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
	DDRC &= ~(0b10100000);
     1e0:	87 e2       	ldi	r24, 0x27	; 39
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	27 e2       	ldi	r18, 0x27	; 39
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	f9 01       	movw	r30, r18
     1ea:	20 81       	ld	r18, Z
     1ec:	2f 75       	andi	r18, 0x5F	; 95
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 83       	st	Z, r18

	// Setup output pins to keyboard
	// PD0 = Column 1, PD1 = Column 2, PD2 = Column 3, PD3 = Column 4
	DDRD |= 0b00001111;
     1f2:	8a e2       	ldi	r24, 0x2A	; 42
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	2a e2       	ldi	r18, 0x2A	; 42
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	f9 01       	movw	r30, r18
     1fc:	20 81       	ld	r18, Z
     1fe:	2f 60       	ori	r18, 0x0F	; 15
     200:	fc 01       	movw	r30, r24
     202:	20 83       	st	Z, r18
	PORTD |= 0b00001111;
     204:	8b e2       	ldi	r24, 0x2B	; 43
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	2b e2       	ldi	r18, 0x2B	; 43
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	f9 01       	movw	r30, r18
     20e:	20 81       	ld	r18, Z
     210:	2f 60       	ori	r18, 0x0F	; 15
     212:	fc 01       	movw	r30, r24
     214:	20 83       	st	Z, r18

	DDRB = 0b11111111;
     216:	84 e2       	ldi	r24, 0x24	; 36
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	2f ef       	ldi	r18, 0xFF	; 255
     21c:	fc 01       	movw	r30, r24
     21e:	20 83       	st	Z, r18

	//PORTB = 0xFF;
}
     220:	00 00       	nop
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <GetKey>:

char GetKey()
{
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	60 97       	sbiw	r28, 0x10	; 16
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	de bf       	out	0x3e, r29	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	cd bf       	out	0x3d, r28	; 61
	for (int columnIndex = 0; columnIndex < 4; columnIndex++)
     23c:	1a 82       	std	Y+2, r1	; 0x02
     23e:	19 82       	std	Y+1, r1	; 0x01
     240:	f3 c0       	rjmp	.+486    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	{
		// Scan Column 1 (1, 4, 7, and *)
		PORTD |= 0b00001111;
     242:	8b e2       	ldi	r24, 0x2B	; 43
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	2b e2       	ldi	r18, 0x2B	; 43
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	f9 01       	movw	r30, r18
     24c:	20 81       	ld	r18, Z
     24e:	2f 60       	ori	r18, 0x0F	; 15
     250:	fc 01       	movw	r30, r24
     252:	20 83       	st	Z, r18
		PORTD &= ~(1 << columnIndex);
     254:	8b e2       	ldi	r24, 0x2B	; 43
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	2b e2       	ldi	r18, 0x2B	; 43
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	f9 01       	movw	r30, r18
     25e:	20 81       	ld	r18, Z
     260:	42 2f       	mov	r20, r18
     262:	21 e0       	ldi	r18, 0x01	; 1
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	09 80       	ldd	r0, Y+1	; 0x01
     268:	02 c0       	rjmp	.+4      	; 0x26e <GetKey+0x46>
     26a:	22 0f       	add	r18, r18
     26c:	33 1f       	adc	r19, r19
     26e:	0a 94       	dec	r0
     270:	e2 f7       	brpl	.-8      	; 0x26a <GetKey+0x42>
     272:	20 95       	com	r18
     274:	24 23       	and	r18, r20
     276:	fc 01       	movw	r30, r24
     278:	20 83       	st	Z, r18
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	a0 e8       	ldi	r26, 0x80	; 128
     280:	bf e3       	ldi	r27, 0x3F	; 63
     282:	8b 83       	std	Y+3, r24	; 0x03
     284:	9c 83       	std	Y+4, r25	; 0x04
     286:	ad 83       	std	Y+5, r26	; 0x05
     288:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	4a e7       	ldi	r20, 0x7A	; 122
     290:	55 e4       	ldi	r21, 0x45	; 69
     292:	6b 81       	ldd	r22, Y+3	; 0x03
     294:	7c 81       	ldd	r23, Y+4	; 0x04
     296:	8d 81       	ldd	r24, Y+5	; 0x05
     298:	9e 81       	ldd	r25, Y+6	; 0x06
     29a:	0e 94 93 0b 	call	0x1726	; 0x1726 <__mulsf3>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	8f 83       	std	Y+7, r24	; 0x07
     2a4:	98 87       	std	Y+8, r25	; 0x08
     2a6:	a9 87       	std	Y+9, r26	; 0x09
     2a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	40 e8       	ldi	r20, 0x80	; 128
     2b0:	5f e3       	ldi	r21, 0x3F	; 63
     2b2:	6f 81       	ldd	r22, Y+7	; 0x07
     2b4:	78 85       	ldd	r23, Y+8	; 0x08
     2b6:	89 85       	ldd	r24, Y+9	; 0x09
     2b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ba:	0e 94 12 0b 	call	0x1624	; 0x1624 <__cmpsf2>
     2be:	88 23       	and	r24, r24
     2c0:	2c f4       	brge	.+10     	; 0x2cc <GetKey+0xa4>
		__ticks = 1;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	9c 87       	std	Y+12, r25	; 0x0c
     2c8:	8b 87       	std	Y+11, r24	; 0x0b
     2ca:	3f c0       	rjmp	.+126    	; 0x34a <GetKey+0x122>
	else if (__tmp > 65535)
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	3f ef       	ldi	r19, 0xFF	; 255
     2d0:	4f e7       	ldi	r20, 0x7F	; 127
     2d2:	57 e4       	ldi	r21, 0x47	; 71
     2d4:	6f 81       	ldd	r22, Y+7	; 0x07
     2d6:	78 85       	ldd	r23, Y+8	; 0x08
     2d8:	89 85       	ldd	r24, Y+9	; 0x09
     2da:	9a 85       	ldd	r25, Y+10	; 0x0a
     2dc:	0e 94 8f 0b 	call	0x171e	; 0x171e <__gesf2>
     2e0:	18 16       	cp	r1, r24
     2e2:	4c f5       	brge	.+82     	; 0x336 <GetKey+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	40 e2       	ldi	r20, 0x20	; 32
     2ea:	51 e4       	ldi	r21, 0x41	; 65
     2ec:	6b 81       	ldd	r22, Y+3	; 0x03
     2ee:	7c 81       	ldd	r23, Y+4	; 0x04
     2f0:	8d 81       	ldd	r24, Y+5	; 0x05
     2f2:	9e 81       	ldd	r25, Y+6	; 0x06
     2f4:	0e 94 93 0b 	call	0x1726	; 0x1726 <__mulsf3>
     2f8:	dc 01       	movw	r26, r24
     2fa:	cb 01       	movw	r24, r22
     2fc:	bc 01       	movw	r22, r24
     2fe:	cd 01       	movw	r24, r26
     300:	0e 94 16 0b 	call	0x162c	; 0x162c <__fixunssfsi>
     304:	dc 01       	movw	r26, r24
     306:	cb 01       	movw	r24, r22
     308:	9c 87       	std	Y+12, r25	; 0x0c
     30a:	8b 87       	std	Y+11, r24	; 0x0b
     30c:	0f c0       	rjmp	.+30     	; 0x32c <GetKey+0x104>
     30e:	80 e9       	ldi	r24, 0x90	; 144
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	9e 87       	std	Y+14, r25	; 0x0e
     314:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     316:	8d 85       	ldd	r24, Y+13	; 0x0d
     318:	9e 85       	ldd	r25, Y+14	; 0x0e
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <GetKey+0xf2>
     31e:	9e 87       	std	Y+14, r25	; 0x0e
     320:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     322:	8b 85       	ldd	r24, Y+11	; 0x0b
     324:	9c 85       	ldd	r25, Y+12	; 0x0c
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	9c 87       	std	Y+12, r25	; 0x0c
     32a:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     32c:	8b 85       	ldd	r24, Y+11	; 0x0b
     32e:	9c 85       	ldd	r25, Y+12	; 0x0c
     330:	89 2b       	or	r24, r25
     332:	69 f7       	brne	.-38     	; 0x30e <GetKey+0xe6>
     334:	14 c0       	rjmp	.+40     	; 0x35e <GetKey+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     336:	6f 81       	ldd	r22, Y+7	; 0x07
     338:	78 85       	ldd	r23, Y+8	; 0x08
     33a:	89 85       	ldd	r24, Y+9	; 0x09
     33c:	9a 85       	ldd	r25, Y+10	; 0x0a
     33e:	0e 94 16 0b 	call	0x162c	; 0x162c <__fixunssfsi>
     342:	dc 01       	movw	r26, r24
     344:	cb 01       	movw	r24, r22
     346:	9c 87       	std	Y+12, r25	; 0x0c
     348:	8b 87       	std	Y+11, r24	; 0x0b
     34a:	8b 85       	ldd	r24, Y+11	; 0x0b
     34c:	9c 85       	ldd	r25, Y+12	; 0x0c
     34e:	98 8b       	std	Y+16, r25	; 0x10
     350:	8f 87       	std	Y+15, r24	; 0x0f
     352:	8f 85       	ldd	r24, Y+15	; 0x0f
     354:	98 89       	ldd	r25, Y+16	; 0x10
     356:	01 97       	sbiw	r24, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <GetKey+0x12e>
     35a:	98 8b       	std	Y+16, r25	; 0x10
     35c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
			
		// Key '1'
		if ((PINA & (1 << ROW_1)) == 0)
     35e:	80 e2       	ldi	r24, 0x20	; 32
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	fc 01       	movw	r30, r24
     364:	80 81       	ld	r24, Z
     366:	88 2f       	mov	r24, r24
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	80 71       	andi	r24, 0x10	; 16
     36c:	99 27       	eor	r25, r25
     36e:	89 2b       	or	r24, r25
     370:	79 f4       	brne	.+30     	; 0x390 <GetKey+0x168>
		{
			keyPressed = characterColumns[columnIndex][0]; 
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	9a 81       	ldd	r25, Y+2	; 0x02
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	8c 5f       	subi	r24, 0xFC	; 252
     380:	9d 4f       	sbci	r25, 0xFD	; 253
     382:	fc 01       	movw	r30, r24
     384:	80 81       	ld	r24, Z
     386:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <__data_end>
			return keyPressed;
     38a:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <__data_end>
     38e:	53 c0       	rjmp	.+166    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		}

		// Key '4'
		if ((PINA & (1 << ROW_2)) == 0)
     390:	80 e2       	ldi	r24, 0x20	; 32
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	fc 01       	movw	r30, r24
     396:	80 81       	ld	r24, Z
     398:	88 2f       	mov	r24, r24
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	80 74       	andi	r24, 0x40	; 64
     39e:	99 27       	eor	r25, r25
     3a0:	89 2b       	or	r24, r25
     3a2:	79 f4       	brne	.+30     	; 0x3c2 <GetKey+0x19a>
		{
			keyPressed = characterColumns[columnIndex][1];
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	9a 81       	ldd	r25, Y+2	; 0x02
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	8b 5f       	subi	r24, 0xFB	; 251
     3b2:	9d 4f       	sbci	r25, 0xFD	; 253
     3b4:	fc 01       	movw	r30, r24
     3b6:	80 81       	ld	r24, Z
     3b8:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <__data_end>
			return keyPressed;
     3bc:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <__data_end>
     3c0:	3a c0       	rjmp	.+116    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		}

		// Key '7'
		if ((PINC & (1 << ROW_3)) == 0)
     3c2:	86 e2       	ldi	r24, 0x26	; 38
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	fc 01       	movw	r30, r24
     3c8:	80 81       	ld	r24, Z
     3ca:	88 23       	and	r24, r24
     3cc:	7c f0       	brlt	.+30     	; 0x3ec <GetKey+0x1c4>
		{
			keyPressed = characterColumns[columnIndex][2];
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	9a 81       	ldd	r25, Y+2	; 0x02
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	8a 5f       	subi	r24, 0xFA	; 250
     3dc:	9d 4f       	sbci	r25, 0xFD	; 253
     3de:	fc 01       	movw	r30, r24
     3e0:	80 81       	ld	r24, Z
     3e2:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <__data_end>
			return keyPressed;
     3e6:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <__data_end>
     3ea:	25 c0       	rjmp	.+74     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		}

		// Key '*'
		if ((PINC & (1 << ROW_4)) == 0)
     3ec:	86 e2       	ldi	r24, 0x26	; 38
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	fc 01       	movw	r30, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	88 2f       	mov	r24, r24
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	80 72       	andi	r24, 0x20	; 32
     3fa:	99 27       	eor	r25, r25
     3fc:	89 2b       	or	r24, r25
     3fe:	79 f4       	brne	.+30     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		{
			keyPressed = characterColumns[columnIndex][3];
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	9a 81       	ldd	r25, Y+2	; 0x02
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	89 5f       	subi	r24, 0xF9	; 249
     40e:	9d 4f       	sbci	r25, 0xFD	; 253
     410:	fc 01       	movw	r30, r24
     412:	80 81       	ld	r24, Z
     414:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <__data_end>
			return keyPressed;
     418:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <__data_end>
     41c:	0c c0       	rjmp	.+24     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	//PORTB = 0xFF;
}

char GetKey()
{
	for (int columnIndex = 0; columnIndex < 4; columnIndex++)
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	9a 81       	ldd	r25, Y+2	; 0x02
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	9a 83       	std	Y+2, r25	; 0x02
     426:	89 83       	std	Y+1, r24	; 0x01
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	04 97       	sbiw	r24, 0x04	; 4
     42e:	0c f4       	brge	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	08 cf       	rjmp	.-496    	; 0x242 <GetKey+0x1a>
			keyPressed = characterColumns[columnIndex][3];
			return keyPressed;
		}
	}
	
	return keyPressed;
     432:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <__data_end>
     436:	60 96       	adiw	r28, 0x10	; 16
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <main>:
	0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

int main(void)
{
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	6a 97       	sbiw	r28, 0x1a	; 26
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
	InitKeypad();
     45c:	b4 de       	rcall	.-664    	; 0x1c6 <InitKeypad>
	initDisplay();
     45e:	4b d1       	rcall	.+662    	; 0x6f6 <initDisplay>
     460:	80 e0       	ldi	r24, 0x00	; 0
	
	// Seed number generator
	srand(time(NULL));
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	60 de       	rcall	.-832    	; 0x126 <time>
     466:	dc 01       	movw	r26, r24
     468:	cb 01       	movw	r24, r22
     46a:	0e 94 8f 0c 	call	0x191e	; 0x191e <srand>
     46e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <snakeBodyLength>

	InitSnake(snake, snakeBodyLength);
     472:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <snakeBodyLength+0x1>
     476:	bc 01       	movw	r22, r24
     478:	85 e1       	ldi	r24, 0x15	; 21
     47a:	94 e0       	ldi	r25, 0x04	; 4
     47c:	48 d3       	rcall	.+1680   	; 0xb0e <InitSnake>
     47e:	6f e2       	ldi	r22, 0x2F	; 47
	
	currentFoodPosition = GenerateFoodPosition(WORLD_WIDTH, WORLD_HEIGHT);
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	83 e5       	ldi	r24, 0x53	; 83
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	62 de       	rcall	.-828    	; 0x14c <GenerateFoodPosition>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	80 93 f5 09 	sts	0x09F5, r24	; 0x8009f5 <currentFoodPosition>
     490:	90 93 f6 09 	sts	0x09F6, r25	; 0x8009f6 <currentFoodPosition+0x1>
     494:	a0 93 f7 09 	sts	0x09F7, r26	; 0x8009f7 <currentFoodPosition+0x2>
     498:	b0 93 f8 09 	sts	0x09F8, r27	; 0x8009f8 <currentFoodPosition+0x3>

	DrawIntroScreen(IntroScreenImage);
     49c:	86 e1       	ldi	r24, 0x16	; 22
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	45 d7       	rcall	.+3722   	; 0x132c <DrawIntroScreen>
     4a2:	00 00       	nop
	
	// Busy Wait until user press star button
	while (GetKey() != '*')
     4a4:	c1 de       	rcall	.-638    	; 0x228 <GetKey>
     4a6:	8a 32       	cpi	r24, 0x2A	; 42
     4a8:	e9 f7       	brne	.-6      	; 0x4a4 <main+0x5c>
     4aa:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <snakeBodyLength>
	}

	// Main Game Loop
    while (1) 
	{
		UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);
     4ae:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <snakeBodyLength+0x1>
     4b2:	2f e2       	ldi	r18, 0x2F	; 47
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	43 e5       	ldi	r20, 0x53	; 83
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	bc 01       	movw	r22, r24
     4bc:	85 e1       	ldi	r24, 0x15	; 21
     4be:	94 e0       	ldi	r25, 0x04	; 4
     4c0:	9b d3       	rcall	.+1846   	; 0xbf8 <UpdateSnake>
     4c2:	8a e0       	ldi	r24, 0x0A	; 10
     4c4:	e5 e1       	ldi	r30, 0x15	; 21

		struct SnakeBodyPart snakeHead = snake[0];
     4c6:	f4 e0       	ldi	r31, 0x04	; 4
     4c8:	de 01       	movw	r26, r28
     4ca:	51 96       	adiw	r26, 0x11	; 17
     4cc:	01 90       	ld	r0, Z+
     4ce:	0d 92       	st	X+, r0
     4d0:	8a 95       	dec	r24
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <main+0x84>
     4d4:	29 89       	ldd	r18, Y+17	; 0x11
     4d6:	3a 89       	ldd	r19, Y+18	; 0x12
		if (snakeHead.x < (currentFoodPosition.x + 3) &&
     4d8:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <currentFoodPosition>
     4dc:	90 91 f6 09 	lds	r25, 0x09F6	; 0x8009f6 <currentFoodPosition+0x1>
     4e0:	03 96       	adiw	r24, 0x03	; 3
     4e2:	28 17       	cp	r18, r24
     4e4:	39 07       	cpc	r19, r25
     4e6:	0c f0       	brlt	.+2      	; 0x4ea <main+0xa2>
     4e8:	42 c0       	rjmp	.+132    	; 0x56e <main+0x126>
     4ea:	89 89       	ldd	r24, Y+17	; 0x11
     4ec:	9a 89       	ldd	r25, Y+18	; 0x12
		(snakeHead.x + 2) > currentFoodPosition.x &&
     4ee:	9c 01       	movw	r18, r24
     4f0:	2e 5f       	subi	r18, 0xFE	; 254
     4f2:	3f 4f       	sbci	r19, 0xFF	; 255
     4f4:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <currentFoodPosition>
     4f8:	90 91 f6 09 	lds	r25, 0x09F6	; 0x8009f6 <currentFoodPosition+0x1>
     4fc:	82 17       	cp	r24, r18
     4fe:	93 07       	cpc	r25, r19
    while (1) 
	{
		UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

		struct SnakeBodyPart snakeHead = snake[0];
		if (snakeHead.x < (currentFoodPosition.x + 3) &&
     500:	b4 f5       	brge	.+108    	; 0x56e <main+0x126>
     502:	2b 89       	ldd	r18, Y+19	; 0x13
     504:	3c 89       	ldd	r19, Y+20	; 0x14
		(snakeHead.x + 2) > currentFoodPosition.x &&
		snakeHead.y < (currentFoodPosition.y + 3) &&
     506:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <currentFoodPosition+0x2>
     50a:	90 91 f8 09 	lds	r25, 0x09F8	; 0x8009f8 <currentFoodPosition+0x3>
     50e:	03 96       	adiw	r24, 0x03	; 3
     510:	28 17       	cp	r18, r24
     512:	39 07       	cpc	r19, r25
	{
		UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

		struct SnakeBodyPart snakeHead = snake[0];
		if (snakeHead.x < (currentFoodPosition.x + 3) &&
		(snakeHead.x + 2) > currentFoodPosition.x &&
     514:	64 f5       	brge	.+88     	; 0x56e <main+0x126>
     516:	8b 89       	ldd	r24, Y+19	; 0x13
     518:	9c 89       	ldd	r25, Y+20	; 0x14
		snakeHead.y < (currentFoodPosition.y + 3) &&
		(2 + snakeHead.y) > currentFoodPosition.y)
     51a:	9c 01       	movw	r18, r24
     51c:	2e 5f       	subi	r18, 0xFE	; 254
     51e:	3f 4f       	sbci	r19, 0xFF	; 255
     520:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <currentFoodPosition+0x2>
     524:	90 91 f8 09 	lds	r25, 0x09F8	; 0x8009f8 <currentFoodPosition+0x3>
     528:	82 17       	cp	r24, r18
		UpdateSnake(snake, snakeBodyLength, WORLD_WIDTH, WORLD_HEIGHT);

		struct SnakeBodyPart snakeHead = snake[0];
		if (snakeHead.x < (currentFoodPosition.x + 3) &&
		(snakeHead.x + 2) > currentFoodPosition.x &&
		snakeHead.y < (currentFoodPosition.y + 3) &&
     52a:	93 07       	cpc	r25, r19
     52c:	04 f5       	brge	.+64     	; 0x56e <main+0x126>
     52e:	6f e2       	ldi	r22, 0x2F	; 47
		(2 + snakeHead.y) > currentFoodPosition.y)
		{
			currentFoodPosition = GenerateFoodPosition(WORLD_WIDTH, WORLD_HEIGHT);
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	83 e5       	ldi	r24, 0x53	; 83
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0a de       	rcall	.-1004   	; 0x14c <GenerateFoodPosition>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	80 93 f5 09 	sts	0x09F5, r24	; 0x8009f5 <currentFoodPosition>
     540:	90 93 f6 09 	sts	0x09F6, r25	; 0x8009f6 <currentFoodPosition+0x1>
     544:	a0 93 f7 09 	sts	0x09F7, r26	; 0x8009f7 <currentFoodPosition+0x2>
     548:	b0 93 f8 09 	sts	0x09F8, r27	; 0x8009f8 <currentFoodPosition+0x3>
     54c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <snakeBodyLength>
			snakeBodyLength++;
     550:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <snakeBodyLength+0x1>
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <snakeBodyLength+0x1>
     55a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <snakeBodyLength>
     55e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <snakeBodyLength>
			GrowSnake(snake, snakeBodyLength);
     562:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <snakeBodyLength+0x1>
     566:	bc 01       	movw	r22, r24
     568:	85 e1       	ldi	r24, 0x15	; 21
     56a:	94 e0       	ldi	r25, 0x04	; 4
     56c:	28 d6       	rcall	.+3152   	; 0x11be <GrowSnake>
     56e:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <currentFoodPosition+0x2>
		}

		DrawFood(currentFoodPosition.x ,currentFoodPosition.y, worldImage);
     572:	90 91 f8 09 	lds	r25, 0x09F8	; 0x8009f8 <currentFoodPosition+0x3>
     576:	28 2f       	mov	r18, r24
     578:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <currentFoodPosition>
     57c:	90 91 f6 09 	lds	r25, 0x09F6	; 0x8009f6 <currentFoodPosition+0x1>
     580:	4d ef       	ldi	r20, 0xFD	; 253
     582:	57 e0       	ldi	r21, 0x07	; 7
     584:	62 2f       	mov	r22, r18
     586:	d8 d7       	rcall	.+4016   	; 0x1538 <DrawFood>
     588:	1a 82       	std	Y+2, r1	; 0x02
     58a:	19 82       	std	Y+1, r1	; 0x01

		for(int x = 0; x < snakeBodyLength; x++)
     58c:	29 c0       	rjmp	.+82     	; 0x5e0 <main+0x198>
     58e:	89 81       	ldd	r24, Y+1	; 0x01
     590:	9a 81       	ldd	r25, Y+2	; 0x02
		{
			DrawDot(snake[x].x, snake[x].y, worldImage);
     592:	88 0f       	add	r24, r24
     594:	99 1f       	adc	r25, r25
     596:	9c 01       	movw	r18, r24
     598:	22 0f       	add	r18, r18
     59a:	33 1f       	adc	r19, r19
     59c:	22 0f       	add	r18, r18
     59e:	33 1f       	adc	r19, r19
     5a0:	82 0f       	add	r24, r18
     5a2:	93 1f       	adc	r25, r19
     5a4:	89 5e       	subi	r24, 0xE9	; 233
     5a6:	9b 4f       	sbci	r25, 0xFB	; 251
     5a8:	fc 01       	movw	r30, r24
     5aa:	80 81       	ld	r24, Z
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	68 2f       	mov	r22, r24
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	9a 81       	ldd	r25, Y+2	; 0x02
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
     5b8:	9c 01       	movw	r18, r24
     5ba:	22 0f       	add	r18, r18
     5bc:	33 1f       	adc	r19, r19
     5be:	22 0f       	add	r18, r18
     5c0:	33 1f       	adc	r19, r19
     5c2:	82 0f       	add	r24, r18
     5c4:	93 1f       	adc	r25, r19
     5c6:	8b 5e       	subi	r24, 0xEB	; 235
     5c8:	9b 4f       	sbci	r25, 0xFB	; 251
     5ca:	fc 01       	movw	r30, r24
     5cc:	80 81       	ld	r24, Z
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	4d ef       	ldi	r20, 0xFD	; 253
     5d2:	57 e0       	ldi	r21, 0x07	; 7
     5d4:	7b d7       	rcall	.+3830   	; 0x14cc <DrawDot>
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	9a 81       	ldd	r25, Y+2	; 0x02
			GrowSnake(snake, snakeBodyLength);
		}

		DrawFood(currentFoodPosition.x ,currentFoodPosition.y, worldImage);

		for(int x = 0; x < snakeBodyLength; x++)
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	9a 83       	std	Y+2, r25	; 0x02
     5de:	89 83       	std	Y+1, r24	; 0x01
     5e0:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <snakeBodyLength>
     5e4:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <snakeBodyLength+0x1>
     5e8:	29 81       	ldd	r18, Y+1	; 0x01
     5ea:	3a 81       	ldd	r19, Y+2	; 0x02
     5ec:	28 17       	cp	r18, r24
     5ee:	39 07       	cpc	r19, r25
     5f0:	74 f2       	brlt	.-100    	; 0x58e <main+0x146>
		{
			DrawDot(snake[x].x, snake[x].y, worldImage);
		}
		
		if (SnakeHitSelf() == 1)
     5f2:	48 d6       	rcall	.+3216   	; 0x1284 <SnakeHitSelf>
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	19 f4       	brne	.+6      	; 0x5fe <main+0x1b6>
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	73 c0       	rjmp	.+230    	; 0x6e4 <main+0x29c>
     5fe:	8d ef       	ldi	r24, 0xFD	; 253
		{
			break;
		}
		
		RenderWorld(worldImage);
     600:	97 e0       	ldi	r25, 0x07	; 7
     602:	d3 d7       	rcall	.+4006   	; 0x15aa <RenderWorld>
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	a8 ec       	ldi	r26, 0xC8	; 200
     60a:	b1 e4       	ldi	r27, 0x41	; 65
     60c:	8b 83       	std	Y+3, r24	; 0x03
     60e:	9c 83       	std	Y+4, r25	; 0x04
     610:	ad 83       	std	Y+5, r26	; 0x05
     612:	be 83       	std	Y+6, r27	; 0x06
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     618:	4a e7       	ldi	r20, 0x7A	; 122
     61a:	55 e4       	ldi	r21, 0x45	; 69
     61c:	6b 81       	ldd	r22, Y+3	; 0x03
     61e:	7c 81       	ldd	r23, Y+4	; 0x04
     620:	8d 81       	ldd	r24, Y+5	; 0x05
     622:	9e 81       	ldd	r25, Y+6	; 0x06
     624:	0e 94 93 0b 	call	0x1726	; 0x1726 <__mulsf3>
     628:	dc 01       	movw	r26, r24
     62a:	cb 01       	movw	r24, r22
     62c:	8f 83       	std	Y+7, r24	; 0x07
     62e:	98 87       	std	Y+8, r25	; 0x08
     630:	a9 87       	std	Y+9, r26	; 0x09
     632:	ba 87       	std	Y+10, r27	; 0x0a
     634:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e8       	ldi	r20, 0x80	; 128
     63a:	5f e3       	ldi	r21, 0x3F	; 63
     63c:	6f 81       	ldd	r22, Y+7	; 0x07
     63e:	78 85       	ldd	r23, Y+8	; 0x08
     640:	89 85       	ldd	r24, Y+9	; 0x09
     642:	9a 85       	ldd	r25, Y+10	; 0x0a
     644:	ef d7       	rcall	.+4062   	; 0x1624 <__cmpsf2>
     646:	88 23       	and	r24, r24
     648:	2c f4       	brge	.+10     	; 0x654 <main+0x20c>
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
     64e:	9c 87       	std	Y+12, r25	; 0x0c
     650:	8b 87       	std	Y+11, r24	; 0x0b
     652:	3d c0       	rjmp	.+122    	; 0x6ce <main+0x286>
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
     658:	4f e7       	ldi	r20, 0x7F	; 127
     65a:	57 e4       	ldi	r21, 0x47	; 71
     65c:	6f 81       	ldd	r22, Y+7	; 0x07
     65e:	78 85       	ldd	r23, Y+8	; 0x08
     660:	89 85       	ldd	r24, Y+9	; 0x09
     662:	9a 85       	ldd	r25, Y+10	; 0x0a
     664:	0e 94 8f 0b 	call	0x171e	; 0x171e <__gesf2>
     668:	18 16       	cp	r1, r24
     66a:	44 f5       	brge	.+80     	; 0x6bc <main+0x274>
     66c:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	40 e2       	ldi	r20, 0x20	; 32
     672:	51 e4       	ldi	r21, 0x41	; 65
     674:	6b 81       	ldd	r22, Y+3	; 0x03
     676:	7c 81       	ldd	r23, Y+4	; 0x04
     678:	8d 81       	ldd	r24, Y+5	; 0x05
     67a:	9e 81       	ldd	r25, Y+6	; 0x06
     67c:	0e 94 93 0b 	call	0x1726	; 0x1726 <__mulsf3>
     680:	dc 01       	movw	r26, r24
     682:	cb 01       	movw	r24, r22
     684:	bc 01       	movw	r22, r24
     686:	cd 01       	movw	r24, r26
     688:	d1 d7       	rcall	.+4002   	; 0x162c <__fixunssfsi>
     68a:	dc 01       	movw	r26, r24
     68c:	cb 01       	movw	r24, r22
     68e:	9c 87       	std	Y+12, r25	; 0x0c
     690:	8b 87       	std	Y+11, r24	; 0x0b
     692:	0f c0       	rjmp	.+30     	; 0x6b2 <main+0x26a>
     694:	80 e9       	ldi	r24, 0x90	; 144
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	9e 87       	std	Y+14, r25	; 0x0e
     69a:	8d 87       	std	Y+13, r24	; 0x0d
     69c:	8d 85       	ldd	r24, Y+13	; 0x0d
     69e:	9e 85       	ldd	r25, Y+14	; 0x0e
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <main+0x258>
     6a4:	9e 87       	std	Y+14, r25	; 0x0e
     6a6:	8d 87       	std	Y+13, r24	; 0x0d
     6a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     6aa:	9c 85       	ldd	r25, Y+12	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	9c 87       	std	Y+12, r25	; 0x0c
     6b0:	8b 87       	std	Y+11, r24	; 0x0b
     6b2:	8b 85       	ldd	r24, Y+11	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b4:	9c 85       	ldd	r25, Y+12	; 0x0c
     6b6:	89 2b       	or	r24, r25
     6b8:	69 f7       	brne	.-38     	; 0x694 <main+0x24c>
     6ba:	13 c0       	rjmp	.+38     	; 0x6e2 <main+0x29a>
     6bc:	6f 81       	ldd	r22, Y+7	; 0x07
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6be:	78 85       	ldd	r23, Y+8	; 0x08
     6c0:	89 85       	ldd	r24, Y+9	; 0x09
     6c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6c4:	b3 d7       	rcall	.+3942   	; 0x162c <__fixunssfsi>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	9c 87       	std	Y+12, r25	; 0x0c
     6cc:	8b 87       	std	Y+11, r24	; 0x0b
     6ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     6d0:	9c 85       	ldd	r25, Y+12	; 0x0c
     6d2:	98 8b       	std	Y+16, r25	; 0x10
     6d4:	8f 87       	std	Y+15, r24	; 0x0f
     6d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     6d8:	98 89       	ldd	r25, Y+16	; 0x10
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	f1 f7       	brne	.-4      	; 0x6da <main+0x292>
     6de:	98 8b       	std	Y+16, r25	; 0x10
     6e0:	8f 87       	std	Y+15, r24	; 0x0f
     6e2:	e3 ce       	rjmp	.-570    	; 0x4aa <main+0x62>
     6e4:	6a 96       	adiw	r28, 0x1a	; 26

		_delay_ms(25);
    }
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <initDisplay>:
#define RST_BIT 0 // PA0
#define DC_BIT 1 // PA1
#define LIGHT_BIT 2 // PA2

void initDisplay()
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
	SPI_MasterInit();
     6fe:	cd d5       	rcall	.+2970   	; 0x129a <SPI_MasterInit>
	
	// Set port to output
	DDRA |= 0b00000111;
     700:	81 e2       	ldi	r24, 0x21	; 33
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	21 e2       	ldi	r18, 0x21	; 33
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	f9 01       	movw	r30, r18
     70a:	20 81       	ld	r18, Z
     70c:	27 60       	ori	r18, 0x07	; 7
     70e:	fc 01       	movw	r30, r24
     710:	20 83       	st	Z, r18
	
	// Turn on light
	PORTA &= ~(1 << LIGHT_BIT);
     712:	82 e2       	ldi	r24, 0x22	; 34
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	22 e2       	ldi	r18, 0x22	; 34
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	f9 01       	movw	r30, r18
     71c:	20 81       	ld	r18, Z
     71e:	2b 7f       	andi	r18, 0xFB	; 251
     720:	fc 01       	movw	r30, r24
     722:	20 83       	st	Z, r18
	
	// Set bits to high (active low)
	PORTA |= (1 << RST_BIT);
     724:	82 e2       	ldi	r24, 0x22	; 34
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	22 e2       	ldi	r18, 0x22	; 34
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	f9 01       	movw	r30, r18
     72e:	20 81       	ld	r18, Z
     730:	21 60       	ori	r18, 0x01	; 1
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18
	PORTA |= (1 << DC_BIT);
     736:	82 e2       	ldi	r24, 0x22	; 34
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	22 e2       	ldi	r18, 0x22	; 34
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	f9 01       	movw	r30, r18
     740:	20 81       	ld	r18, Z
     742:	22 60       	ori	r18, 0x02	; 2
     744:	fc 01       	movw	r30, r24
	
	// Required display reset
	// This has to be done before doing
	// Anything else with the display
	resetDisplay();
     746:	20 83       	st	Z, r18
	
	// Use extended instruction set
	sendIntruction(0x21);
     748:	0f d0       	rcall	.+30     	; 0x768 <resetDisplay>
     74a:	81 e2       	ldi	r24, 0x21	; 33

	// Here we control operation voltage of the LCD
	// We set it to 6V (the minimum allowed voltage range)
	// If you do not set a VOP value, the internal voltage generator
	// Will be switched off, and thus the display won't function.
	sendIntruction(0xC0);
     74c:	9f d0       	rcall	.+318    	; 0x88c <sendIntruction>
     74e:	80 ec       	ldi	r24, 0xC0	; 192

	// We set the bias voltage levels
	// The bias value is taken after the
	// optimum bias value described in official
	// data sheet.
	sendIntruction(0x13);
     750:	9d d0       	rcall	.+314    	; 0x88c <sendIntruction>
     752:	83 e1       	ldi	r24, 0x13	; 19

	// Use basic instruction set
	sendIntruction(0x20);
     754:	9b d0       	rcall	.+310    	; 0x88c <sendIntruction>
     756:	80 e2       	ldi	r24, 0x20	; 32
     758:	99 d0       	rcall	.+306    	; 0x88c <sendIntruction>

	// Set display mode normal
	sendIntruction(0b00001100);
     75a:	8c e0       	ldi	r24, 0x0C	; 12
     75c:	97 d0       	rcall	.+302    	; 0x88c <sendIntruction>
     75e:	cb d0       	rcall	.+406    	; 0x8f6 <clearDisplay>
	

	// Clear the display to make sure
	// No pixels are alive on startup
	clearDisplay();
     760:	00 00       	nop
     762:	df 91       	pop	r29
}
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <resetDisplay>:
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29


void resetDisplay()
{
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	2e 97       	sbiw	r28, 0x0e	; 14
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
	// Set RES low
	PORTA &= ~(1 << RST_BIT);
     77c:	82 e2       	ldi	r24, 0x22	; 34
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	22 e2       	ldi	r18, 0x22	; 34
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	f9 01       	movw	r30, r18
     786:	20 81       	ld	r18, Z
     788:	2e 7f       	andi	r18, 0xFE	; 254
     78a:	fc 01       	movw	r30, r24
     78c:	20 83       	st	Z, r18
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	a8 ec       	ldi	r26, 0xC8	; 200
     794:	b2 e4       	ldi	r27, 0x42	; 66
     796:	89 83       	std	Y+1, r24	; 0x01
     798:	9a 83       	std	Y+2, r25	; 0x02
     79a:	ab 83       	std	Y+3, r26	; 0x03
     79c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	4a e7       	ldi	r20, 0x7A	; 122
     7a4:	55 e4       	ldi	r21, 0x45	; 69
     7a6:	69 81       	ldd	r22, Y+1	; 0x01
     7a8:	7a 81       	ldd	r23, Y+2	; 0x02
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	9c 81       	ldd	r25, Y+4	; 0x04
     7ae:	bb d7       	rcall	.+3958   	; 0x1726 <__mulsf3>
     7b0:	dc 01       	movw	r26, r24
     7b2:	cb 01       	movw	r24, r22
     7b4:	8d 83       	std	Y+5, r24	; 0x05
     7b6:	9e 83       	std	Y+6, r25	; 0x06
     7b8:	af 83       	std	Y+7, r26	; 0x07
     7ba:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e8       	ldi	r20, 0x80	; 128
     7c2:	5f e3       	ldi	r21, 0x3F	; 63
     7c4:	6d 81       	ldd	r22, Y+5	; 0x05
     7c6:	7e 81       	ldd	r23, Y+6	; 0x06
     7c8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ca:	98 85       	ldd	r25, Y+8	; 0x08
     7cc:	2b d7       	rcall	.+3670   	; 0x1624 <__cmpsf2>
     7ce:	88 23       	and	r24, r24
     7d0:	2c f4       	brge	.+10     	; 0x7dc <resetDisplay+0x74>
		__ticks = 1;
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	9a 87       	std	Y+10, r25	; 0x0a
     7d8:	89 87       	std	Y+9, r24	; 0x09
     7da:	3b c0       	rjmp	.+118    	; 0x852 <resetDisplay+0xea>
	else if (__tmp > 65535)
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f e7       	ldi	r20, 0x7F	; 127
     7e2:	57 e4       	ldi	r21, 0x47	; 71
     7e4:	6d 81       	ldd	r22, Y+5	; 0x05
     7e6:	7e 81       	ldd	r23, Y+6	; 0x06
     7e8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ea:	98 85       	ldd	r25, Y+8	; 0x08
     7ec:	98 d7       	rcall	.+3888   	; 0x171e <__gesf2>
     7ee:	18 16       	cp	r1, r24
     7f0:	3c f5       	brge	.+78     	; 0x840 <resetDisplay+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e2       	ldi	r20, 0x20	; 32
     7f8:	51 e4       	ldi	r21, 0x41	; 65
     7fa:	69 81       	ldd	r22, Y+1	; 0x01
     7fc:	7a 81       	ldd	r23, Y+2	; 0x02
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	9c 81       	ldd	r25, Y+4	; 0x04
     802:	91 d7       	rcall	.+3874   	; 0x1726 <__mulsf3>
     804:	dc 01       	movw	r26, r24
     806:	cb 01       	movw	r24, r22
     808:	bc 01       	movw	r22, r24
     80a:	cd 01       	movw	r24, r26
     80c:	0f d7       	rcall	.+3614   	; 0x162c <__fixunssfsi>
     80e:	dc 01       	movw	r26, r24
     810:	cb 01       	movw	r24, r22
     812:	9a 87       	std	Y+10, r25	; 0x0a
     814:	89 87       	std	Y+9, r24	; 0x09
     816:	0f c0       	rjmp	.+30     	; 0x836 <resetDisplay+0xce>
     818:	80 e9       	ldi	r24, 0x90	; 144
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	9c 87       	std	Y+12, r25	; 0x0c
     81e:	8b 87       	std	Y+11, r24	; 0x0b
     820:	8b 85       	ldd	r24, Y+11	; 0x0b
     822:	9c 85       	ldd	r25, Y+12	; 0x0c
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <resetDisplay+0xbc>
     828:	9c 87       	std	Y+12, r25	; 0x0c
     82a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     82c:	89 85       	ldd	r24, Y+9	; 0x09
     82e:	9a 85       	ldd	r25, Y+10	; 0x0a
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	9a 87       	std	Y+10, r25	; 0x0a
     834:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     836:	89 85       	ldd	r24, Y+9	; 0x09
     838:	9a 85       	ldd	r25, Y+10	; 0x0a
     83a:	89 2b       	or	r24, r25
     83c:	69 f7       	brne	.-38     	; 0x818 <resetDisplay+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     83e:	13 c0       	rjmp	.+38     	; 0x866 <resetDisplay+0xfe>
     840:	6d 81       	ldd	r22, Y+5	; 0x05
     842:	7e 81       	ldd	r23, Y+6	; 0x06
     844:	8f 81       	ldd	r24, Y+7	; 0x07
     846:	98 85       	ldd	r25, Y+8	; 0x08
     848:	f1 d6       	rcall	.+3554   	; 0x162c <__fixunssfsi>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	9a 87       	std	Y+10, r25	; 0x0a
     850:	89 87       	std	Y+9, r24	; 0x09
     852:	89 85       	ldd	r24, Y+9	; 0x09
     854:	9a 85       	ldd	r25, Y+10	; 0x0a
     856:	9e 87       	std	Y+14, r25	; 0x0e
     858:	8d 87       	std	Y+13, r24	; 0x0d
     85a:	8d 85       	ldd	r24, Y+13	; 0x0d
     85c:	9e 85       	ldd	r25, Y+14	; 0x0e
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <resetDisplay+0xf6>
     862:	9e 87       	std	Y+14, r25	; 0x0e
     864:	8d 87       	std	Y+13, r24	; 0x0d
		
	// Delay of min 100 ns (0,1ms) p.20
	_delay_ms(100);
		
	// Set RES high
	PORTA |= (1 << RST_BIT);
     866:	82 e2       	ldi	r24, 0x22	; 34
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	22 e2       	ldi	r18, 0x22	; 34
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	f9 01       	movw	r30, r18
     870:	20 81       	ld	r18, Z
     872:	21 60       	ori	r18, 0x01	; 1
     874:	fc 01       	movw	r30, r24
     876:	20 83       	st	Z, r18
}
     878:	00 00       	nop
     87a:	2e 96       	adiw	r28, 0x0e	; 14
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	08 95       	ret

0000088c <sendIntruction>:

void sendIntruction(unsigned char cmd)
{
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	1f 92       	push	r1
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	89 83       	std	Y+1, r24	; 0x01
	// Set DC low, Command
	PORTA &= ~(1 << DC_BIT);
     898:	82 e2       	ldi	r24, 0x22	; 34
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	22 e2       	ldi	r18, 0x22	; 34
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	f9 01       	movw	r30, r18
     8a2:	20 81       	ld	r18, Z
     8a4:	2d 7f       	andi	r18, 0xFD	; 253
     8a6:	fc 01       	movw	r30, r24
     8a8:	20 83       	st	Z, r18
	SPI_MasterTransmit(cmd);
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	08 d5       	rcall	.+2576   	; 0x12be <SPI_MasterTransmit>
	PORTA |= 1 << DC_BIT;
     8ae:	82 e2       	ldi	r24, 0x22	; 34
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	22 e2       	ldi	r18, 0x22	; 34
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	f9 01       	movw	r30, r18
     8b8:	20 81       	ld	r18, Z
     8ba:	22 60       	ori	r18, 0x02	; 2
     8bc:	fc 01       	movw	r30, r24
     8be:	20 83       	st	Z, r18
}
     8c0:	00 00       	nop
     8c2:	0f 90       	pop	r0
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	08 95       	ret

000008ca <sendData>:

void sendData(unsigned char data)
{	
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	1f 92       	push	r1
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= 1 << DC_BIT;
     8d6:	82 e2       	ldi	r24, 0x22	; 34
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	22 e2       	ldi	r18, 0x22	; 34
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	f9 01       	movw	r30, r18
     8e0:	20 81       	ld	r18, Z
     8e2:	22 60       	ori	r18, 0x02	; 2
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 83       	st	Z, r18
	SPI_MasterTransmit(data);
     8e8:	89 81       	ldd	r24, Y+1	; 0x01
     8ea:	e9 d4       	rcall	.+2514   	; 0x12be <SPI_MasterTransmit>
}
     8ec:	00 00       	nop
     8ee:	0f 90       	pop	r0
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <clearDisplay>:

void clearDisplay()
{
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	1f 92       	push	r1
     8fc:	1f 92       	push	r1
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
	for (int k=0; k<=503; k++)
     902:	1a 82       	std	Y+2, r1	; 0x02
     904:	19 82       	std	Y+1, r1	; 0x01
     906:	07 c0       	rjmp	.+14     	; 0x916 <clearDisplay+0x20>
	{
		sendData(0x00);
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	df df       	rcall	.-66     	; 0x8ca <sendData>
	SPI_MasterTransmit(data);
}

void clearDisplay()
{
	for (int k=0; k<=503; k++)
     90c:	89 81       	ldd	r24, Y+1	; 0x01
     90e:	9a 81       	ldd	r25, Y+2	; 0x02
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	9a 83       	std	Y+2, r25	; 0x02
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	9a 81       	ldd	r25, Y+2	; 0x02
     91a:	88 3f       	cpi	r24, 0xF8	; 248
     91c:	91 40       	sbci	r25, 0x01	; 1
     91e:	a4 f3       	brlt	.-24     	; 0x908 <clearDisplay+0x12>
	{
		sendData(0x00);
	}
     920:	00 00       	nop
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <GoLeft>:
int xDirection = 1;
int yDirection = 0;
int hitSelf = 0;

void GoLeft()
{
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
	if (xDirection == 1)
     934:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <xDirection>
     938:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <xDirection+0x1>
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	59 f0       	breq	.+22     	; 0x956 <GoLeft+0x2a>
		return;
	
	yDirection = 0;
     940:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <yDirection+0x1>
     944:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <yDirection>
	xDirection = -1;
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	9f ef       	ldi	r25, 0xFF	; 255
     94c:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <xDirection+0x1>
     950:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <xDirection>
     954:	01 c0       	rjmp	.+2      	; 0x958 <GoLeft+0x2c>
int hitSelf = 0;

void GoLeft()
{
	if (xDirection == 1)
		return;
     956:	00 00       	nop
	
	yDirection = 0;
	xDirection = -1;
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <GoRight>:

void GoRight()
{
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
	if (xDirection == -1)
     966:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <xDirection>
     96a:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <xDirection+0x1>
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	59 f0       	breq	.+22     	; 0x988 <GoRight+0x2a>
		return;
	
	yDirection = 0;
     972:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <yDirection+0x1>
     976:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <yDirection>
	xDirection = 1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <xDirection+0x1>
     982:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <xDirection>
     986:	01 c0       	rjmp	.+2      	; 0x98a <GoRight+0x2c>
}

void GoRight()
{
	if (xDirection == -1)
		return;
     988:	00 00       	nop
	
	yDirection = 0;
	xDirection = 1;
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <GoUp>:

void GoUp()
{
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
	if (yDirection == 1)
     998:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <yDirection>
     99c:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <yDirection+0x1>
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	59 f0       	breq	.+22     	; 0x9ba <GoUp+0x2a>
	return;
	
	yDirection = -1;
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <yDirection+0x1>
     9ac:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <yDirection>
	xDirection = 0;
     9b0:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <xDirection+0x1>
     9b4:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <xDirection>
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <GoUp+0x2c>
}

void GoUp()
{
	if (yDirection == 1)
	return;
     9ba:	00 00       	nop
	
	yDirection = -1;
	xDirection = 0;
}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <GoDown>:

void GoDown()
{
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
	if (yDirection == -1)
     9ca:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <yDirection>
     9ce:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <yDirection+0x1>
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	59 f0       	breq	.+22     	; 0x9ec <GoDown+0x2a>
	return;
	
	xDirection = 0;
     9d6:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <xDirection+0x1>
     9da:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <xDirection>
	yDirection = 1;
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	90 93 12 04 	sts	0x0412, r25	; 0x800412 <yDirection+0x1>
     9e6:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <yDirection>
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <GoDown+0x2c>
}

void GoDown()
{
	if (yDirection == -1)
	return;
     9ec:	00 00       	nop
	
	xDirection = 0;
	yDirection = 1;
}
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <CheckInput>:

void CheckInput()
{
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
	if (GetKey() == '8')
     9fc:	15 dc       	rcall	.-2006   	; 0x228 <GetKey>
     9fe:	88 33       	cpi	r24, 0x38	; 56
     a00:	09 f4       	brne	.+2      	; 0xa04 <CheckInput+0x10>
	{
		GoDown();
     a02:	df df       	rcall	.-66     	; 0x9c2 <GoDown>
	}

	if (GetKey() == '2')
     a04:	11 dc       	rcall	.-2014   	; 0x228 <GetKey>
     a06:	82 33       	cpi	r24, 0x32	; 50
	{
		GoUp();
     a08:	09 f4       	brne	.+2      	; 0xa0c <CheckInput+0x18>
	}

	if (GetKey() == '6')
     a0a:	c2 df       	rcall	.-124    	; 0x990 <GoUp>
     a0c:	0d dc       	rcall	.-2022   	; 0x228 <GetKey>
     a0e:	86 33       	cpi	r24, 0x36	; 54
	{
		GoRight();
     a10:	09 f4       	brne	.+2      	; 0xa14 <CheckInput+0x20>
     a12:	a5 df       	rcall	.-182    	; 0x95e <GoRight>
	}

	if (GetKey() == '4')
     a14:	09 dc       	rcall	.-2030   	; 0x228 <GetKey>
     a16:	84 33       	cpi	r24, 0x34	; 52
     a18:	09 f4       	brne	.+2      	; 0xa1c <CheckInput+0x28>
     a1a:	88 df       	rcall	.-240    	; 0x92c <GoLeft>
	{
		GoLeft();
     a1c:	00 00       	nop
     a1e:	df 91       	pop	r29
	}
}
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <CheckSnakeBodyCollision>:
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29

void CheckSnakeBodyCollision(struct SnakeBodyPart snakeArray[], int snakeLength)
{
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	6a 97       	sbiw	r28, 0x1a	; 26
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	98 8f       	std	Y+24, r25	; 0x18
     a3a:	8f 8b       	std	Y+23, r24	; 0x17
     a3c:	7a 8f       	std	Y+26, r23	; 0x1a
     a3e:	69 8f       	std	Y+25, r22	; 0x19
	struct SnakeBodyPart snakeHead = snakeArray[0];
     a40:	8f 89       	ldd	r24, Y+23	; 0x17
     a42:	98 8d       	ldd	r25, Y+24	; 0x18
     a44:	2a e0       	ldi	r18, 0x0A	; 10
     a46:	fc 01       	movw	r30, r24
     a48:	de 01       	movw	r26, r28
     a4a:	13 96       	adiw	r26, 0x03	; 3
     a4c:	01 90       	ld	r0, Z+
     a4e:	0d 92       	st	X+, r0
     a50:	2a 95       	dec	r18
     a52:	e1 f7       	brne	.-8      	; 0xa4c <CheckSnakeBodyCollision+0x28>
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	9a 83       	std	Y+2, r25	; 0x02
     a5a:	89 83       	std	Y+1, r24	; 0x01
     a5c:	46 c0       	rjmp	.+140    	; 0xaea <CheckSnakeBodyCollision+0xc6>
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
     a60:	9a 81       	ldd	r25, Y+2	; 0x02
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	9c 01       	movw	r18, r24
     a68:	22 0f       	add	r18, r18
     a6a:	33 1f       	adc	r19, r19
     a6c:	22 0f       	add	r18, r18
     a6e:	33 1f       	adc	r19, r19
     a70:	82 0f       	add	r24, r18
     a72:	93 1f       	adc	r25, r19
     a74:	2f 89       	ldd	r18, Y+23	; 0x17
     a76:	38 8d       	ldd	r19, Y+24	; 0x18
     a78:	82 0f       	add	r24, r18
     a7a:	93 1f       	adc	r25, r19
     a7c:	2a e0       	ldi	r18, 0x0A	; 10
     a7e:	fc 01       	movw	r30, r24
     a80:	de 01       	movw	r26, r28
     a82:	1d 96       	adiw	r26, 0x0d	; 13
     a84:	01 90       	ld	r0, Z+
     a86:	0d 92       	st	X+, r0
     a88:	2a 95       	dec	r18
     a8a:	e1 f7       	brne	.-8      	; 0xa84 <CheckSnakeBodyCollision+0x60>
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
     a8c:	2b 81       	ldd	r18, Y+3	; 0x03
     a8e:	3c 81       	ldd	r19, Y+4	; 0x04
     a90:	8d 85       	ldd	r24, Y+13	; 0x0d
     a92:	9e 85       	ldd	r25, Y+14	; 0x0e
     a94:	02 96       	adiw	r24, 0x02	; 2
     a96:	28 17       	cp	r18, r24
     a98:	39 07       	cpc	r19, r25
     a9a:	14 f5       	brge	.+68     	; 0xae0 <CheckSnakeBodyCollision+0xbc>
		(snakeHead.x + 2) > currentBodyPart.x &&
     a9c:	8b 81       	ldd	r24, Y+3	; 0x03
     a9e:	9c 81       	ldd	r25, Y+4	; 0x04
     aa0:	9c 01       	movw	r18, r24
     aa2:	2e 5f       	subi	r18, 0xFE	; 254
     aa4:	3f 4f       	sbci	r19, 0xFF	; 255
     aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
     aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
     aaa:	82 17       	cp	r24, r18
     aac:	93 07       	cpc	r25, r19
     aae:	c4 f4       	brge	.+48     	; 0xae0 <CheckSnakeBodyCollision+0xbc>
		(snakeHead.x + 2) > currentBodyPart.x &&
		snakeHead.y < (currentBodyPart.y + 2) &&
     ab0:	2d 81       	ldd	r18, Y+5	; 0x05
     ab2:	3e 81       	ldd	r19, Y+6	; 0x06
     ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ab6:	98 89       	ldd	r25, Y+16	; 0x10
     ab8:	02 96       	adiw	r24, 0x02	; 2
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
		(snakeHead.x + 2) > currentBodyPart.x &&
     aba:	28 17       	cp	r18, r24
     abc:	39 07       	cpc	r19, r25
     abe:	84 f4       	brge	.+32     	; 0xae0 <CheckSnakeBodyCollision+0xbc>
		snakeHead.y < (currentBodyPart.y + 2) &&
		(2 + snakeHead.y) > currentBodyPart.y)
     ac0:	8d 81       	ldd	r24, Y+5	; 0x05
     ac2:	9e 81       	ldd	r25, Y+6	; 0x06
     ac4:	9c 01       	movw	r18, r24
     ac6:	2e 5f       	subi	r18, 0xFE	; 254
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	8f 85       	ldd	r24, Y+15	; 0x0f
     acc:	98 89       	ldd	r25, Y+16	; 0x10
	{
		struct SnakeBodyPart currentBodyPart = snakeArray[bodyPartIndex];
		
		if (snakeHead.x < (currentBodyPart.x + 2) &&
		(snakeHead.x + 2) > currentBodyPart.x &&
		snakeHead.y < (currentBodyPart.y + 2) &&
     ace:	82 17       	cp	r24, r18
     ad0:	93 07       	cpc	r25, r19
     ad2:	34 f4       	brge	.+12     	; 0xae0 <CheckSnakeBodyCollision+0xbc>
		(2 + snakeHead.y) > currentBodyPart.y)
		{
			hitSelf = 1;
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	90 93 14 04 	sts	0x0414, r25	; 0x800414 <hitSelf+0x1>
     adc:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <hitSelf>

void CheckSnakeBodyCollision(struct SnakeBodyPart snakeArray[], int snakeLength)
{
	struct SnakeBodyPart snakeHead = snakeArray[0];
	
	for (int bodyPartIndex = 1; bodyPartIndex < snakeLength; bodyPartIndex++)
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	9a 81       	ldd	r25, Y+2	; 0x02
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	9a 83       	std	Y+2, r25	; 0x02
     ae8:	89 83       	std	Y+1, r24	; 0x01
     aea:	29 81       	ldd	r18, Y+1	; 0x01
     aec:	3a 81       	ldd	r19, Y+2	; 0x02
     aee:	89 8d       	ldd	r24, Y+25	; 0x19
     af0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     af2:	28 17       	cp	r18, r24
     af4:	39 07       	cpc	r19, r25
     af6:	0c f4       	brge	.+2      	; 0xafa <CheckSnakeBodyCollision+0xd6>
     af8:	b2 cf       	rjmp	.-156    	; 0xa5e <CheckSnakeBodyCollision+0x3a>
		(2 + snakeHead.y) > currentBodyPart.y)
		{
			hitSelf = 1;
		}
	}
}
     afa:	00 00       	nop
     afc:	6a 96       	adiw	r28, 0x1a	; 26
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	cd bf       	out	0x3d, r28	; 61
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	08 95       	ret

00000b0e <InitSnake>:

void InitSnake(struct SnakeBodyPart snakeArray[], int snakeLength)
{
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	6a 97       	sbiw	r28, 0x1a	; 26
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	98 8f       	std	Y+24, r25	; 0x18
     b24:	8f 8b       	std	Y+23, r24	; 0x17
     b26:	7a 8f       	std	Y+26, r23	; 0x1a
     b28:	69 8f       	std	Y+25, r22	; 0x19
	if (snakeLength <= 0)
     b2a:	89 8d       	ldd	r24, Y+25	; 0x19
     b2c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b2e:	18 16       	cp	r1, r24
     b30:	19 06       	cpc	r1, r25
     b32:	0c f0       	brlt	.+2      	; 0xb36 <InitSnake+0x28>
     b34:	57 c0       	rjmp	.+174    	; 0xbe4 <InitSnake+0xd6>
		return;
		
	struct SnakeBodyPart head;
	head.x = 0;
     b36:	1c 82       	std	Y+4, r1	; 0x04
     b38:	1b 82       	std	Y+3, r1	; 0x03
	head.y = 0;
     b3a:	1e 82       	std	Y+6, r1	; 0x06
     b3c:	1d 82       	std	Y+5, r1	; 0x05
	head.prevX = 0;
     b3e:	18 86       	std	Y+8, r1	; 0x08
     b40:	1f 82       	std	Y+7, r1	; 0x07
	head.prevY = 0;
     b42:	1a 86       	std	Y+10, r1	; 0x0a
     b44:	19 86       	std	Y+9, r1	; 0x09
	head.headPointer = 0;
     b46:	1c 86       	std	Y+12, r1	; 0x0c
     b48:	1b 86       	std	Y+11, r1	; 0x0b
	snakeArray[0] = head;
     b4a:	8f 89       	ldd	r24, Y+23	; 0x17
     b4c:	98 8d       	ldd	r25, Y+24	; 0x18
     b4e:	2a e0       	ldi	r18, 0x0A	; 10
     b50:	fe 01       	movw	r30, r28
     b52:	33 96       	adiw	r30, 0x03	; 3
     b54:	dc 01       	movw	r26, r24
     b56:	01 90       	ld	r0, Z+
     b58:	0d 92       	st	X+, r0
     b5a:	2a 95       	dec	r18
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <InitSnake+0x48>
	
	for (int snakeBodyIndex = 1; snakeBodyIndex < (snakeLength); snakeBodyIndex++)
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	9a 83       	std	Y+2, r25	; 0x02
     b64:	89 83       	std	Y+1, r24	; 0x01
     b66:	36 c0       	rjmp	.+108    	; 0xbd4 <InitSnake+0xc6>
	{
		struct SnakeBodyPart newBodyPart;
		newBodyPart.x = -2;
     b68:	8e ef       	ldi	r24, 0xFE	; 254
     b6a:	9f ef       	ldi	r25, 0xFF	; 255
     b6c:	9e 87       	std	Y+14, r25	; 0x0e
     b6e:	8d 87       	std	Y+13, r24	; 0x0d
		newBodyPart.y = -2;
     b70:	8e ef       	ldi	r24, 0xFE	; 254
     b72:	9f ef       	ldi	r25, 0xFF	; 255
     b74:	98 8b       	std	Y+16, r25	; 0x10
     b76:	8f 87       	std	Y+15, r24	; 0x0f
		newBodyPart.headPointer = &snakeArray[snakeBodyIndex - 1];
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	9c 01       	movw	r18, r24
     b82:	22 0f       	add	r18, r18
     b84:	33 1f       	adc	r19, r19
     b86:	22 0f       	add	r18, r18
     b88:	33 1f       	adc	r19, r19
     b8a:	82 0f       	add	r24, r18
     b8c:	93 1f       	adc	r25, r19
     b8e:	0a 97       	sbiw	r24, 0x0a	; 10
     b90:	2f 89       	ldd	r18, Y+23	; 0x17
     b92:	38 8d       	ldd	r19, Y+24	; 0x18
     b94:	82 0f       	add	r24, r18
     b96:	93 1f       	adc	r25, r19
     b98:	9e 8b       	std	Y+22, r25	; 0x16
     b9a:	8d 8b       	std	Y+21, r24	; 0x15
		snakeArray[snakeBodyIndex] = newBodyPart;
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	9c 01       	movw	r18, r24
     ba6:	22 0f       	add	r18, r18
     ba8:	33 1f       	adc	r19, r19
     baa:	22 0f       	add	r18, r18
     bac:	33 1f       	adc	r19, r19
     bae:	82 0f       	add	r24, r18
     bb0:	93 1f       	adc	r25, r19
     bb2:	2f 89       	ldd	r18, Y+23	; 0x17
     bb4:	38 8d       	ldd	r19, Y+24	; 0x18
     bb6:	82 0f       	add	r24, r18
     bb8:	93 1f       	adc	r25, r19
     bba:	2a e0       	ldi	r18, 0x0A	; 10
     bbc:	fe 01       	movw	r30, r28
     bbe:	3d 96       	adiw	r30, 0x0d	; 13
     bc0:	dc 01       	movw	r26, r24
     bc2:	01 90       	ld	r0, Z+
     bc4:	0d 92       	st	X+, r0
     bc6:	2a 95       	dec	r18
     bc8:	e1 f7       	brne	.-8      	; 0xbc2 <InitSnake+0xb4>
	head.prevX = 0;
	head.prevY = 0;
	head.headPointer = 0;
	snakeArray[0] = head;
	
	for (int snakeBodyIndex = 1; snakeBodyIndex < (snakeLength); snakeBodyIndex++)
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	9a 81       	ldd	r25, Y+2	; 0x02
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	9a 83       	std	Y+2, r25	; 0x02
     bd2:	89 83       	std	Y+1, r24	; 0x01
     bd4:	29 81       	ldd	r18, Y+1	; 0x01
     bd6:	3a 81       	ldd	r19, Y+2	; 0x02
     bd8:	89 8d       	ldd	r24, Y+25	; 0x19
     bda:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bdc:	28 17       	cp	r18, r24
     bde:	39 07       	cpc	r19, r25
     be0:	1c f2       	brlt	.-122    	; 0xb68 <InitSnake+0x5a>
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <InitSnake+0xd8>
}

void InitSnake(struct SnakeBodyPart snakeArray[], int snakeLength)
{
	if (snakeLength <= 0)
		return;
     be4:	00 00       	nop
		newBodyPart.x = -2;
		newBodyPart.y = -2;
		newBodyPart.headPointer = &snakeArray[snakeBodyIndex - 1];
		snakeArray[snakeBodyIndex] = newBodyPart;
	}
}
     be6:	6a 96       	adiw	r28, 0x1a	; 26
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <UpdateSnake>:

void UpdateSnake(struct SnakeBodyPart snakeArray[], int snakeLength, int worldWidth, int worldHeight)
{
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	2a 97       	sbiw	r28, 0x0a	; 10
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	9c 83       	std	Y+4, r25	; 0x04
     c0e:	8b 83       	std	Y+3, r24	; 0x03
     c10:	7e 83       	std	Y+6, r23	; 0x06
     c12:	6d 83       	std	Y+5, r22	; 0x05
     c14:	58 87       	std	Y+8, r21	; 0x08
     c16:	4f 83       	std	Y+7, r20	; 0x07
     c18:	3a 87       	std	Y+10, r19	; 0x0a
     c1a:	29 87       	std	Y+9, r18	; 0x09
	CheckInput();
     c1c:	eb de       	rcall	.-554    	; 0x9f4 <CheckInput>
	
	for (int bodyPartIndex = 0; bodyPartIndex < snakeLength; bodyPartIndex++)
     c1e:	1a 82       	std	Y+2, r1	; 0x02
     c20:	19 82       	std	Y+1, r1	; 0x01
     c22:	b5 c2       	rjmp	.+1386   	; 0x118e <UpdateSnake+0x596>
	{
		// Check for head
		if (snakeArray[bodyPartIndex].headPointer == 0)
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	9c 01       	movw	r18, r24
     c2e:	22 0f       	add	r18, r18
     c30:	33 1f       	adc	r19, r19
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	82 0f       	add	r24, r18
     c38:	93 1f       	adc	r25, r19
     c3a:	2b 81       	ldd	r18, Y+3	; 0x03
     c3c:	3c 81       	ldd	r19, Y+4	; 0x04
     c3e:	82 0f       	add	r24, r18
     c40:	93 1f       	adc	r25, r19
     c42:	fc 01       	movw	r30, r24
     c44:	80 85       	ldd	r24, Z+8	; 0x08
     c46:	91 85       	ldd	r25, Z+9	; 0x09
     c48:	89 2b       	or	r24, r25
     c4a:	09 f0       	breq	.+2      	; 0xc4e <UpdateSnake+0x56>
     c4c:	05 c2       	rjmp	.+1034   	; 0x1058 <UpdateSnake+0x460>
		{
			snakeArray[bodyPartIndex].prevX = snakeArray[bodyPartIndex].x;
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	9c 01       	movw	r18, r24
     c58:	22 0f       	add	r18, r18
     c5a:	33 1f       	adc	r19, r19
     c5c:	22 0f       	add	r18, r18
     c5e:	33 1f       	adc	r19, r19
     c60:	82 0f       	add	r24, r18
     c62:	93 1f       	adc	r25, r19
     c64:	2b 81       	ldd	r18, Y+3	; 0x03
     c66:	3c 81       	ldd	r19, Y+4	; 0x04
     c68:	28 0f       	add	r18, r24
     c6a:	39 1f       	adc	r19, r25
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	ac 01       	movw	r20, r24
     c76:	44 0f       	add	r20, r20
     c78:	55 1f       	adc	r21, r21
     c7a:	44 0f       	add	r20, r20
     c7c:	55 1f       	adc	r21, r21
     c7e:	84 0f       	add	r24, r20
     c80:	95 1f       	adc	r25, r21
     c82:	4b 81       	ldd	r20, Y+3	; 0x03
     c84:	5c 81       	ldd	r21, Y+4	; 0x04
     c86:	84 0f       	add	r24, r20
     c88:	95 1f       	adc	r25, r21
     c8a:	fc 01       	movw	r30, r24
     c8c:	80 81       	ld	r24, Z
     c8e:	91 81       	ldd	r25, Z+1	; 0x01
     c90:	f9 01       	movw	r30, r18
     c92:	95 83       	std	Z+5, r25	; 0x05
     c94:	84 83       	std	Z+4, r24	; 0x04
			snakeArray[bodyPartIndex].prevY = snakeArray[bodyPartIndex].y;
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	9c 01       	movw	r18, r24
     ca0:	22 0f       	add	r18, r18
     ca2:	33 1f       	adc	r19, r19
     ca4:	22 0f       	add	r18, r18
     ca6:	33 1f       	adc	r19, r19
     ca8:	82 0f       	add	r24, r18
     caa:	93 1f       	adc	r25, r19
     cac:	2b 81       	ldd	r18, Y+3	; 0x03
     cae:	3c 81       	ldd	r19, Y+4	; 0x04
     cb0:	28 0f       	add	r18, r24
     cb2:	39 1f       	adc	r19, r25
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	ac 01       	movw	r20, r24
     cbe:	44 0f       	add	r20, r20
     cc0:	55 1f       	adc	r21, r21
     cc2:	44 0f       	add	r20, r20
     cc4:	55 1f       	adc	r21, r21
     cc6:	84 0f       	add	r24, r20
     cc8:	95 1f       	adc	r25, r21
     cca:	4b 81       	ldd	r20, Y+3	; 0x03
     ccc:	5c 81       	ldd	r21, Y+4	; 0x04
     cce:	84 0f       	add	r24, r20
     cd0:	95 1f       	adc	r25, r21
     cd2:	fc 01       	movw	r30, r24
     cd4:	82 81       	ldd	r24, Z+2	; 0x02
     cd6:	93 81       	ldd	r25, Z+3	; 0x03
     cd8:	f9 01       	movw	r30, r18
     cda:	97 83       	std	Z+7, r25	; 0x07
     cdc:	86 83       	std	Z+6, r24	; 0x06
					
			if ((snakeArray[bodyPartIndex].x + 1) > worldWidth)
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	9a 81       	ldd	r25, Y+2	; 0x02
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	9c 01       	movw	r18, r24
     ce8:	22 0f       	add	r18, r18
     cea:	33 1f       	adc	r19, r19
     cec:	22 0f       	add	r18, r18
     cee:	33 1f       	adc	r19, r19
     cf0:	82 0f       	add	r24, r18
     cf2:	93 1f       	adc	r25, r19
     cf4:	2b 81       	ldd	r18, Y+3	; 0x03
     cf6:	3c 81       	ldd	r19, Y+4	; 0x04
     cf8:	82 0f       	add	r24, r18
     cfa:	93 1f       	adc	r25, r19
     cfc:	fc 01       	movw	r30, r24
     cfe:	80 81       	ld	r24, Z
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	9c 01       	movw	r18, r24
     d04:	2f 5f       	subi	r18, 0xFF	; 255
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	8f 81       	ldd	r24, Y+7	; 0x07
     d0a:	98 85       	ldd	r25, Y+8	; 0x08
     d0c:	82 17       	cp	r24, r18
     d0e:	93 07       	cpc	r25, r19
     d10:	0c f0       	brlt	.+2      	; 0xd14 <UpdateSnake+0x11c>
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <UpdateSnake+0x19a>
			{
				snakeArray[bodyPartIndex].x = 0;
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	9a 81       	ldd	r25, Y+2	; 0x02
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	9c 01       	movw	r18, r24
     d1e:	22 0f       	add	r18, r18
     d20:	33 1f       	adc	r19, r19
     d22:	22 0f       	add	r18, r18
     d24:	33 1f       	adc	r19, r19
     d26:	82 0f       	add	r24, r18
     d28:	93 1f       	adc	r25, r19
     d2a:	2b 81       	ldd	r18, Y+3	; 0x03
     d2c:	3c 81       	ldd	r19, Y+4	; 0x04
     d2e:	82 0f       	add	r24, r18
     d30:	93 1f       	adc	r25, r19
     d32:	fc 01       	movw	r30, r24
     d34:	11 82       	std	Z+1, r1	; 0x01
     d36:	10 82       	st	Z, r1
				snakeArray[bodyPartIndex].y += 2 * yDirection;
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	9c 01       	movw	r18, r24
     d42:	22 0f       	add	r18, r18
     d44:	33 1f       	adc	r19, r19
     d46:	22 0f       	add	r18, r18
     d48:	33 1f       	adc	r19, r19
     d4a:	82 0f       	add	r24, r18
     d4c:	93 1f       	adc	r25, r19
     d4e:	2b 81       	ldd	r18, Y+3	; 0x03
     d50:	3c 81       	ldd	r19, Y+4	; 0x04
     d52:	28 0f       	add	r18, r24
     d54:	39 1f       	adc	r19, r25
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	ac 01       	movw	r20, r24
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	44 0f       	add	r20, r20
     d66:	55 1f       	adc	r21, r21
     d68:	84 0f       	add	r24, r20
     d6a:	95 1f       	adc	r25, r21
     d6c:	4b 81       	ldd	r20, Y+3	; 0x03
     d6e:	5c 81       	ldd	r21, Y+4	; 0x04
     d70:	84 0f       	add	r24, r20
     d72:	95 1f       	adc	r25, r21
     d74:	fc 01       	movw	r30, r24
     d76:	42 81       	ldd	r20, Z+2	; 0x02
     d78:	53 81       	ldd	r21, Z+3	; 0x03
     d7a:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <yDirection>
     d7e:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <yDirection+0x1>
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	84 0f       	add	r24, r20
     d88:	95 1f       	adc	r25, r21
     d8a:	f9 01       	movw	r30, r18
     d8c:	93 83       	std	Z+3, r25	; 0x03
     d8e:	82 83       	std	Z+2, r24	; 0x02
     d90:	f9 c1       	rjmp	.+1010   	; 0x1184 <UpdateSnake+0x58c>
			}
			else if ((snakeArray[bodyPartIndex].x) < 0) {
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	9c 01       	movw	r18, r24
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	82 0f       	add	r24, r18
     da6:	93 1f       	adc	r25, r19
     da8:	2b 81       	ldd	r18, Y+3	; 0x03
     daa:	3c 81       	ldd	r19, Y+4	; 0x04
     dac:	82 0f       	add	r24, r18
     dae:	93 1f       	adc	r25, r19
     db0:	fc 01       	movw	r30, r24
     db2:	80 81       	ld	r24, Z
     db4:	91 81       	ldd	r25, Z+1	; 0x01
     db6:	99 23       	and	r25, r25
     db8:	0c f0       	brlt	.+2      	; 0xdbc <UpdateSnake+0x1c4>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <UpdateSnake+0x24a>
				snakeArray[bodyPartIndex].x = worldWidth - 1;
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	9a 81       	ldd	r25, Y+2	; 0x02
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	9c 01       	movw	r18, r24
     dc6:	22 0f       	add	r18, r18
     dc8:	33 1f       	adc	r19, r19
     dca:	22 0f       	add	r18, r18
     dcc:	33 1f       	adc	r19, r19
     dce:	82 0f       	add	r24, r18
     dd0:	93 1f       	adc	r25, r19
     dd2:	2b 81       	ldd	r18, Y+3	; 0x03
     dd4:	3c 81       	ldd	r19, Y+4	; 0x04
     dd6:	82 0f       	add	r24, r18
     dd8:	93 1f       	adc	r25, r19
     dda:	2f 81       	ldd	r18, Y+7	; 0x07
     ddc:	38 85       	ldd	r19, Y+8	; 0x08
     dde:	21 50       	subi	r18, 0x01	; 1
     de0:	31 09       	sbc	r19, r1
     de2:	fc 01       	movw	r30, r24
     de4:	31 83       	std	Z+1, r19	; 0x01
     de6:	20 83       	st	Z, r18
				snakeArray[bodyPartIndex].y += 2 * yDirection;
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	9a 81       	ldd	r25, Y+2	; 0x02
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	9c 01       	movw	r18, r24
     df2:	22 0f       	add	r18, r18
     df4:	33 1f       	adc	r19, r19
     df6:	22 0f       	add	r18, r18
     df8:	33 1f       	adc	r19, r19
     dfa:	82 0f       	add	r24, r18
     dfc:	93 1f       	adc	r25, r19
     dfe:	2b 81       	ldd	r18, Y+3	; 0x03
     e00:	3c 81       	ldd	r19, Y+4	; 0x04
     e02:	28 0f       	add	r18, r24
     e04:	39 1f       	adc	r19, r25
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	9a 81       	ldd	r25, Y+2	; 0x02
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	ac 01       	movw	r20, r24
     e10:	44 0f       	add	r20, r20
     e12:	55 1f       	adc	r21, r21
     e14:	44 0f       	add	r20, r20
     e16:	55 1f       	adc	r21, r21
     e18:	84 0f       	add	r24, r20
     e1a:	95 1f       	adc	r25, r21
     e1c:	4b 81       	ldd	r20, Y+3	; 0x03
     e1e:	5c 81       	ldd	r21, Y+4	; 0x04
     e20:	84 0f       	add	r24, r20
     e22:	95 1f       	adc	r25, r21
     e24:	fc 01       	movw	r30, r24
     e26:	42 81       	ldd	r20, Z+2	; 0x02
     e28:	53 81       	ldd	r21, Z+3	; 0x03
     e2a:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <yDirection>
     e2e:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <yDirection+0x1>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	84 0f       	add	r24, r20
     e38:	95 1f       	adc	r25, r21
     e3a:	f9 01       	movw	r30, r18
     e3c:	93 83       	std	Z+3, r25	; 0x03
     e3e:	82 83       	std	Z+2, r24	; 0x02
     e40:	a1 c1       	rjmp	.+834    	; 0x1184 <UpdateSnake+0x58c>
				} else if ((snakeArray[bodyPartIndex].y + 1) > worldHeight) {
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	9c 01       	movw	r18, r24
     e4c:	22 0f       	add	r18, r18
     e4e:	33 1f       	adc	r19, r19
     e50:	22 0f       	add	r18, r18
     e52:	33 1f       	adc	r19, r19
     e54:	82 0f       	add	r24, r18
     e56:	93 1f       	adc	r25, r19
     e58:	2b 81       	ldd	r18, Y+3	; 0x03
     e5a:	3c 81       	ldd	r19, Y+4	; 0x04
     e5c:	82 0f       	add	r24, r18
     e5e:	93 1f       	adc	r25, r19
     e60:	fc 01       	movw	r30, r24
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	9c 01       	movw	r18, r24
     e68:	2f 5f       	subi	r18, 0xFF	; 255
     e6a:	3f 4f       	sbci	r19, 0xFF	; 255
     e6c:	89 85       	ldd	r24, Y+9	; 0x09
     e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e70:	82 17       	cp	r24, r18
     e72:	93 07       	cpc	r25, r19
     e74:	0c f0       	brlt	.+2      	; 0xe78 <UpdateSnake+0x280>
     e76:	3f c0       	rjmp	.+126    	; 0xef6 <UpdateSnake+0x2fe>
				snakeArray[bodyPartIndex].y = 0;
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	9c 01       	movw	r18, r24
     e82:	22 0f       	add	r18, r18
     e84:	33 1f       	adc	r19, r19
     e86:	22 0f       	add	r18, r18
     e88:	33 1f       	adc	r19, r19
     e8a:	82 0f       	add	r24, r18
     e8c:	93 1f       	adc	r25, r19
     e8e:	2b 81       	ldd	r18, Y+3	; 0x03
     e90:	3c 81       	ldd	r19, Y+4	; 0x04
     e92:	82 0f       	add	r24, r18
     e94:	93 1f       	adc	r25, r19
     e96:	fc 01       	movw	r30, r24
     e98:	13 82       	std	Z+3, r1	; 0x03
     e9a:	12 82       	std	Z+2, r1	; 0x02
				snakeArray[bodyPartIndex].x += 2 * xDirection;
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	9c 01       	movw	r18, r24
     ea6:	22 0f       	add	r18, r18
     ea8:	33 1f       	adc	r19, r19
     eaa:	22 0f       	add	r18, r18
     eac:	33 1f       	adc	r19, r19
     eae:	82 0f       	add	r24, r18
     eb0:	93 1f       	adc	r25, r19
     eb2:	2b 81       	ldd	r18, Y+3	; 0x03
     eb4:	3c 81       	ldd	r19, Y+4	; 0x04
     eb6:	28 0f       	add	r18, r24
     eb8:	39 1f       	adc	r19, r25
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	ac 01       	movw	r20, r24
     ec4:	44 0f       	add	r20, r20
     ec6:	55 1f       	adc	r21, r21
     ec8:	44 0f       	add	r20, r20
     eca:	55 1f       	adc	r21, r21
     ecc:	84 0f       	add	r24, r20
     ece:	95 1f       	adc	r25, r21
     ed0:	4b 81       	ldd	r20, Y+3	; 0x03
     ed2:	5c 81       	ldd	r21, Y+4	; 0x04
     ed4:	84 0f       	add	r24, r20
     ed6:	95 1f       	adc	r25, r21
     ed8:	fc 01       	movw	r30, r24
     eda:	40 81       	ld	r20, Z
     edc:	51 81       	ldd	r21, Z+1	; 0x01
     ede:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <xDirection>
     ee2:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <xDirection+0x1>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	84 0f       	add	r24, r20
     eec:	95 1f       	adc	r25, r21
     eee:	f9 01       	movw	r30, r18
     ef0:	91 83       	std	Z+1, r25	; 0x01
     ef2:	80 83       	st	Z, r24
     ef4:	47 c1       	rjmp	.+654    	; 0x1184 <UpdateSnake+0x58c>
				} else if ((snakeArray[bodyPartIndex].y) < 0) {
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	9c 01       	movw	r18, r24
     f00:	22 0f       	add	r18, r18
     f02:	33 1f       	adc	r19, r19
     f04:	22 0f       	add	r18, r18
     f06:	33 1f       	adc	r19, r19
     f08:	82 0f       	add	r24, r18
     f0a:	93 1f       	adc	r25, r19
     f0c:	2b 81       	ldd	r18, Y+3	; 0x03
     f0e:	3c 81       	ldd	r19, Y+4	; 0x04
     f10:	82 0f       	add	r24, r18
     f12:	93 1f       	adc	r25, r19
     f14:	fc 01       	movw	r30, r24
     f16:	82 81       	ldd	r24, Z+2	; 0x02
     f18:	93 81       	ldd	r25, Z+3	; 0x03
     f1a:	99 23       	and	r25, r25
     f1c:	0c f0       	brlt	.+2      	; 0xf20 <UpdateSnake+0x328>
     f1e:	43 c0       	rjmp	.+134    	; 0xfa6 <UpdateSnake+0x3ae>
				snakeArray[bodyPartIndex].y = worldHeight - 1;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	9c 01       	movw	r18, r24
     f2a:	22 0f       	add	r18, r18
     f2c:	33 1f       	adc	r19, r19
     f2e:	22 0f       	add	r18, r18
     f30:	33 1f       	adc	r19, r19
     f32:	82 0f       	add	r24, r18
     f34:	93 1f       	adc	r25, r19
     f36:	2b 81       	ldd	r18, Y+3	; 0x03
     f38:	3c 81       	ldd	r19, Y+4	; 0x04
     f3a:	82 0f       	add	r24, r18
     f3c:	93 1f       	adc	r25, r19
     f3e:	29 85       	ldd	r18, Y+9	; 0x09
     f40:	3a 85       	ldd	r19, Y+10	; 0x0a
     f42:	21 50       	subi	r18, 0x01	; 1
     f44:	31 09       	sbc	r19, r1
     f46:	fc 01       	movw	r30, r24
     f48:	33 83       	std	Z+3, r19	; 0x03
     f4a:	22 83       	std	Z+2, r18	; 0x02
				snakeArray[bodyPartIndex].x += 2 * xDirection;
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	9c 01       	movw	r18, r24
     f56:	22 0f       	add	r18, r18
     f58:	33 1f       	adc	r19, r19
     f5a:	22 0f       	add	r18, r18
     f5c:	33 1f       	adc	r19, r19
     f5e:	82 0f       	add	r24, r18
     f60:	93 1f       	adc	r25, r19
     f62:	2b 81       	ldd	r18, Y+3	; 0x03
     f64:	3c 81       	ldd	r19, Y+4	; 0x04
     f66:	28 0f       	add	r18, r24
     f68:	39 1f       	adc	r19, r25
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	ac 01       	movw	r20, r24
     f74:	44 0f       	add	r20, r20
     f76:	55 1f       	adc	r21, r21
     f78:	44 0f       	add	r20, r20
     f7a:	55 1f       	adc	r21, r21
     f7c:	84 0f       	add	r24, r20
     f7e:	95 1f       	adc	r25, r21
     f80:	4b 81       	ldd	r20, Y+3	; 0x03
     f82:	5c 81       	ldd	r21, Y+4	; 0x04
     f84:	84 0f       	add	r24, r20
     f86:	95 1f       	adc	r25, r21
     f88:	fc 01       	movw	r30, r24
     f8a:	40 81       	ld	r20, Z
     f8c:	51 81       	ldd	r21, Z+1	; 0x01
     f8e:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <xDirection>
     f92:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <xDirection+0x1>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	84 0f       	add	r24, r20
     f9c:	95 1f       	adc	r25, r21
     f9e:	f9 01       	movw	r30, r18
     fa0:	91 83       	std	Z+1, r25	; 0x01
     fa2:	80 83       	st	Z, r24
     fa4:	ef c0       	rjmp	.+478    	; 0x1184 <UpdateSnake+0x58c>
			}
			else
			{
				snakeArray[bodyPartIndex].x += 2 * xDirection;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	9c 01       	movw	r18, r24
     fb0:	22 0f       	add	r18, r18
     fb2:	33 1f       	adc	r19, r19
     fb4:	22 0f       	add	r18, r18
     fb6:	33 1f       	adc	r19, r19
     fb8:	82 0f       	add	r24, r18
     fba:	93 1f       	adc	r25, r19
     fbc:	2b 81       	ldd	r18, Y+3	; 0x03
     fbe:	3c 81       	ldd	r19, Y+4	; 0x04
     fc0:	28 0f       	add	r18, r24
     fc2:	39 1f       	adc	r19, r25
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	ac 01       	movw	r20, r24
     fce:	44 0f       	add	r20, r20
     fd0:	55 1f       	adc	r21, r21
     fd2:	44 0f       	add	r20, r20
     fd4:	55 1f       	adc	r21, r21
     fd6:	84 0f       	add	r24, r20
     fd8:	95 1f       	adc	r25, r21
     fda:	4b 81       	ldd	r20, Y+3	; 0x03
     fdc:	5c 81       	ldd	r21, Y+4	; 0x04
     fde:	84 0f       	add	r24, r20
     fe0:	95 1f       	adc	r25, r21
     fe2:	fc 01       	movw	r30, r24
     fe4:	40 81       	ld	r20, Z
     fe6:	51 81       	ldd	r21, Z+1	; 0x01
     fe8:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <xDirection>
     fec:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <xDirection+0x1>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	84 0f       	add	r24, r20
     ff6:	95 1f       	adc	r25, r21
     ff8:	f9 01       	movw	r30, r18
     ffa:	91 83       	std	Z+1, r25	; 0x01
     ffc:	80 83       	st	Z, r24
				snakeArray[bodyPartIndex].y += 2 * yDirection;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	9c 01       	movw	r18, r24
    1008:	22 0f       	add	r18, r18
    100a:	33 1f       	adc	r19, r19
    100c:	22 0f       	add	r18, r18
    100e:	33 1f       	adc	r19, r19
    1010:	82 0f       	add	r24, r18
    1012:	93 1f       	adc	r25, r19
    1014:	2b 81       	ldd	r18, Y+3	; 0x03
    1016:	3c 81       	ldd	r19, Y+4	; 0x04
    1018:	28 0f       	add	r18, r24
    101a:	39 1f       	adc	r19, r25
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	9a 81       	ldd	r25, Y+2	; 0x02
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	ac 01       	movw	r20, r24
    1026:	44 0f       	add	r20, r20
    1028:	55 1f       	adc	r21, r21
    102a:	44 0f       	add	r20, r20
    102c:	55 1f       	adc	r21, r21
    102e:	84 0f       	add	r24, r20
    1030:	95 1f       	adc	r25, r21
    1032:	4b 81       	ldd	r20, Y+3	; 0x03
    1034:	5c 81       	ldd	r21, Y+4	; 0x04
    1036:	84 0f       	add	r24, r20
    1038:	95 1f       	adc	r25, r21
    103a:	fc 01       	movw	r30, r24
    103c:	42 81       	ldd	r20, Z+2	; 0x02
    103e:	53 81       	ldd	r21, Z+3	; 0x03
    1040:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <yDirection>
    1044:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <yDirection+0x1>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	84 0f       	add	r24, r20
    104e:	95 1f       	adc	r25, r21
    1050:	f9 01       	movw	r30, r18
    1052:	93 83       	std	Z+3, r25	; 0x03
    1054:	82 83       	std	Z+2, r24	; 0x02
    1056:	96 c0       	rjmp	.+300    	; 0x1184 <UpdateSnake+0x58c>
			}
		}
		else
		{
			snakeArray[bodyPartIndex].prevX = snakeArray[bodyPartIndex].x;
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	9c 01       	movw	r18, r24
    1062:	22 0f       	add	r18, r18
    1064:	33 1f       	adc	r19, r19
    1066:	22 0f       	add	r18, r18
    1068:	33 1f       	adc	r19, r19
    106a:	82 0f       	add	r24, r18
    106c:	93 1f       	adc	r25, r19
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	3c 81       	ldd	r19, Y+4	; 0x04
    1072:	28 0f       	add	r18, r24
    1074:	39 1f       	adc	r19, r25
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	ac 01       	movw	r20, r24
    1080:	44 0f       	add	r20, r20
    1082:	55 1f       	adc	r21, r21
    1084:	44 0f       	add	r20, r20
    1086:	55 1f       	adc	r21, r21
    1088:	84 0f       	add	r24, r20
    108a:	95 1f       	adc	r25, r21
    108c:	4b 81       	ldd	r20, Y+3	; 0x03
    108e:	5c 81       	ldd	r21, Y+4	; 0x04
    1090:	84 0f       	add	r24, r20
    1092:	95 1f       	adc	r25, r21
    1094:	fc 01       	movw	r30, r24
    1096:	80 81       	ld	r24, Z
    1098:	91 81       	ldd	r25, Z+1	; 0x01
    109a:	f9 01       	movw	r30, r18
    109c:	95 83       	std	Z+5, r25	; 0x05
    109e:	84 83       	std	Z+4, r24	; 0x04
			snakeArray[bodyPartIndex].prevY = snakeArray[bodyPartIndex].y;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	9c 01       	movw	r18, r24
    10aa:	22 0f       	add	r18, r18
    10ac:	33 1f       	adc	r19, r19
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	82 0f       	add	r24, r18
    10b4:	93 1f       	adc	r25, r19
    10b6:	2b 81       	ldd	r18, Y+3	; 0x03
    10b8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ba:	28 0f       	add	r18, r24
    10bc:	39 1f       	adc	r19, r25
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	ac 01       	movw	r20, r24
    10c8:	44 0f       	add	r20, r20
    10ca:	55 1f       	adc	r21, r21
    10cc:	44 0f       	add	r20, r20
    10ce:	55 1f       	adc	r21, r21
    10d0:	84 0f       	add	r24, r20
    10d2:	95 1f       	adc	r25, r21
    10d4:	4b 81       	ldd	r20, Y+3	; 0x03
    10d6:	5c 81       	ldd	r21, Y+4	; 0x04
    10d8:	84 0f       	add	r24, r20
    10da:	95 1f       	adc	r25, r21
    10dc:	fc 01       	movw	r30, r24
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	f9 01       	movw	r30, r18
    10e4:	97 83       	std	Z+7, r25	; 0x07
    10e6:	86 83       	std	Z+6, r24	; 0x06
			snakeArray[bodyPartIndex].x = snakeArray[bodyPartIndex].headPointer->prevX;
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	9c 01       	movw	r18, r24
    10f2:	22 0f       	add	r18, r18
    10f4:	33 1f       	adc	r19, r19
    10f6:	22 0f       	add	r18, r18
    10f8:	33 1f       	adc	r19, r19
    10fa:	82 0f       	add	r24, r18
    10fc:	93 1f       	adc	r25, r19
    10fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1100:	3c 81       	ldd	r19, Y+4	; 0x04
    1102:	28 0f       	add	r18, r24
    1104:	39 1f       	adc	r19, r25
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	ac 01       	movw	r20, r24
    1110:	44 0f       	add	r20, r20
    1112:	55 1f       	adc	r21, r21
    1114:	44 0f       	add	r20, r20
    1116:	55 1f       	adc	r21, r21
    1118:	84 0f       	add	r24, r20
    111a:	95 1f       	adc	r25, r21
    111c:	4b 81       	ldd	r20, Y+3	; 0x03
    111e:	5c 81       	ldd	r21, Y+4	; 0x04
    1120:	84 0f       	add	r24, r20
    1122:	95 1f       	adc	r25, r21
    1124:	fc 01       	movw	r30, r24
    1126:	80 85       	ldd	r24, Z+8	; 0x08
    1128:	91 85       	ldd	r25, Z+9	; 0x09
    112a:	fc 01       	movw	r30, r24
    112c:	84 81       	ldd	r24, Z+4	; 0x04
    112e:	95 81       	ldd	r25, Z+5	; 0x05
    1130:	f9 01       	movw	r30, r18
    1132:	91 83       	std	Z+1, r25	; 0x01
    1134:	80 83       	st	Z, r24
			snakeArray[bodyPartIndex].y = snakeArray[bodyPartIndex].headPointer->prevY;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	9c 01       	movw	r18, r24
    1140:	22 0f       	add	r18, r18
    1142:	33 1f       	adc	r19, r19
    1144:	22 0f       	add	r18, r18
    1146:	33 1f       	adc	r19, r19
    1148:	82 0f       	add	r24, r18
    114a:	93 1f       	adc	r25, r19
    114c:	2b 81       	ldd	r18, Y+3	; 0x03
    114e:	3c 81       	ldd	r19, Y+4	; 0x04
    1150:	28 0f       	add	r18, r24
    1152:	39 1f       	adc	r19, r25
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	ac 01       	movw	r20, r24
    115e:	44 0f       	add	r20, r20
    1160:	55 1f       	adc	r21, r21
    1162:	44 0f       	add	r20, r20
    1164:	55 1f       	adc	r21, r21
    1166:	84 0f       	add	r24, r20
    1168:	95 1f       	adc	r25, r21
    116a:	4b 81       	ldd	r20, Y+3	; 0x03
    116c:	5c 81       	ldd	r21, Y+4	; 0x04
    116e:	84 0f       	add	r24, r20
    1170:	95 1f       	adc	r25, r21
    1172:	fc 01       	movw	r30, r24
    1174:	80 85       	ldd	r24, Z+8	; 0x08
    1176:	91 85       	ldd	r25, Z+9	; 0x09
    1178:	fc 01       	movw	r30, r24
    117a:	86 81       	ldd	r24, Z+6	; 0x06
    117c:	97 81       	ldd	r25, Z+7	; 0x07
    117e:	f9 01       	movw	r30, r18
    1180:	93 83       	std	Z+3, r25	; 0x03
    1182:	82 83       	std	Z+2, r24	; 0x02

void UpdateSnake(struct SnakeBodyPart snakeArray[], int snakeLength, int worldWidth, int worldHeight)
{
	CheckInput();
	
	for (int bodyPartIndex = 0; bodyPartIndex < snakeLength; bodyPartIndex++)
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	29 81       	ldd	r18, Y+1	; 0x01
    1190:	3a 81       	ldd	r19, Y+2	; 0x02
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	28 17       	cp	r18, r24
    1198:	39 07       	cpc	r19, r25
    119a:	0c f4       	brge	.+2      	; 0x119e <UpdateSnake+0x5a6>
    119c:	43 cd       	rjmp	.-1402   	; 0xc24 <UpdateSnake+0x2c>
			snakeArray[bodyPartIndex].x = snakeArray[bodyPartIndex].headPointer->prevX;
			snakeArray[bodyPartIndex].y = snakeArray[bodyPartIndex].headPointer->prevY;
		}
	}
	
	CheckSnakeBodyCollision(snakeArray, snakeLength);
    119e:	2d 81       	ldd	r18, Y+5	; 0x05
    11a0:	3e 81       	ldd	r19, Y+6	; 0x06
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	b9 01       	movw	r22, r18
    11a8:	3d dc       	rcall	.-1926   	; 0xa24 <CheckSnakeBodyCollision>
}
    11aa:	00 00       	nop
    11ac:	2a 96       	adiw	r28, 0x0a	; 10
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	08 95       	ret

000011be <GrowSnake>:

void GrowSnake(struct SnakeBodyPart snakeArray[], int snakeBodyLength)
{
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	68 97       	sbiw	r28, 0x18	; 24
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	9e 8b       	std	Y+22, r25	; 0x16
    11d4:	8d 8b       	std	Y+21, r24	; 0x15
    11d6:	78 8f       	std	Y+24, r23	; 0x18
    11d8:	6f 8b       	std	Y+23, r22	; 0x17
	struct SnakeBodyPart previousBodyPart = snakeArray[snakeBodyLength - 2]; 
    11da:	8f 89       	ldd	r24, Y+23	; 0x17
    11dc:	98 8d       	ldd	r25, Y+24	; 0x18
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	9c 01       	movw	r18, r24
    11e4:	22 0f       	add	r18, r18
    11e6:	33 1f       	adc	r19, r19
    11e8:	22 0f       	add	r18, r18
    11ea:	33 1f       	adc	r19, r19
    11ec:	82 0f       	add	r24, r18
    11ee:	93 1f       	adc	r25, r19
    11f0:	44 97       	sbiw	r24, 0x14	; 20
    11f2:	2d 89       	ldd	r18, Y+21	; 0x15
    11f4:	3e 89       	ldd	r19, Y+22	; 0x16
    11f6:	82 0f       	add	r24, r18
    11f8:	93 1f       	adc	r25, r19
    11fa:	2a e0       	ldi	r18, 0x0A	; 10
    11fc:	fc 01       	movw	r30, r24
    11fe:	ce 01       	movw	r24, r28
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	dc 01       	movw	r26, r24
    1204:	01 90       	ld	r0, Z+
    1206:	0d 92       	st	X+, r0
    1208:	2a 95       	dec	r18
    120a:	e1 f7       	brne	.-8      	; 0x1204 <GrowSnake+0x46>
	
	struct SnakeBodyPart newBodyPart;
	newBodyPart.x = previousBodyPart.prevX;
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	9c 87       	std	Y+12, r25	; 0x0c
    1212:	8b 87       	std	Y+11, r24	; 0x0b
	newBodyPart.y = previousBodyPart.prevY;
    1214:	8f 81       	ldd	r24, Y+7	; 0x07
    1216:	98 85       	ldd	r25, Y+8	; 0x08
    1218:	9e 87       	std	Y+14, r25	; 0x0e
    121a:	8d 87       	std	Y+13, r24	; 0x0d
	newBodyPart.headPointer = &snakeArray[snakeBodyLength - 2];
    121c:	8f 89       	ldd	r24, Y+23	; 0x17
    121e:	98 8d       	ldd	r25, Y+24	; 0x18
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	9c 01       	movw	r18, r24
    1226:	22 0f       	add	r18, r18
    1228:	33 1f       	adc	r19, r19
    122a:	22 0f       	add	r18, r18
    122c:	33 1f       	adc	r19, r19
    122e:	82 0f       	add	r24, r18
    1230:	93 1f       	adc	r25, r19
    1232:	44 97       	sbiw	r24, 0x14	; 20
    1234:	2d 89       	ldd	r18, Y+21	; 0x15
    1236:	3e 89       	ldd	r19, Y+22	; 0x16
    1238:	82 0f       	add	r24, r18
    123a:	93 1f       	adc	r25, r19
    123c:	9c 8b       	std	Y+20, r25	; 0x14
    123e:	8b 8b       	std	Y+19, r24	; 0x13
	snakeArray[snakeBodyLength - 1] = newBodyPart;
    1240:	8f 89       	ldd	r24, Y+23	; 0x17
    1242:	98 8d       	ldd	r25, Y+24	; 0x18
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	9c 01       	movw	r18, r24
    124a:	22 0f       	add	r18, r18
    124c:	33 1f       	adc	r19, r19
    124e:	22 0f       	add	r18, r18
    1250:	33 1f       	adc	r19, r19
    1252:	82 0f       	add	r24, r18
    1254:	93 1f       	adc	r25, r19
    1256:	0a 97       	sbiw	r24, 0x0a	; 10
    1258:	2d 89       	ldd	r18, Y+21	; 0x15
    125a:	3e 89       	ldd	r19, Y+22	; 0x16
    125c:	82 0f       	add	r24, r18
    125e:	93 1f       	adc	r25, r19
    1260:	2a e0       	ldi	r18, 0x0A	; 10
    1262:	fe 01       	movw	r30, r28
    1264:	3b 96       	adiw	r30, 0x0b	; 11
    1266:	dc 01       	movw	r26, r24
    1268:	01 90       	ld	r0, Z+
    126a:	0d 92       	st	X+, r0
    126c:	2a 95       	dec	r18
    126e:	e1 f7       	brne	.-8      	; 0x1268 <GrowSnake+0xaa>
}
    1270:	00 00       	nop
    1272:	68 96       	adiw	r28, 0x18	; 24
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

00001284 <SnakeHitSelf>:

int SnakeHitSelf()
{
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
	return hitSelf;
    128c:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <hitSelf>
    1290:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <hitSelf+0x1>
}
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

0000129a <SPI_MasterInit>:
#define DD_MOSI 2
#define DD_MISO 3
#define DD_DORD 5

void SPI_MasterInit(void)
{	
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS); //MOSI,SS & SCK output,others input
    12a2:	84 e2       	ldi	r24, 0x24	; 36
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	27 e0       	ldi	r18, 0x07	; 7
    12a8:	fc 01       	movw	r30, r24
    12aa:	20 83       	st	Z, r18
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);  		   //SPI, Master, clock = fck/16
    12ac:	8c e4       	ldi	r24, 0x4C	; 76
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	21 e5       	ldi	r18, 0x51	; 81
    12b2:	fc 01       	movw	r30, r24
    12b4:	20 83       	st	Z, r18
}
    12b6:	00 00       	nop
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <SPI_MasterTransmit+0x6>
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	8b 83       	std	Y+3, r24	; 0x03
	PORTB &= ~(1 << DD_SS);
    12ca:	85 e2       	ldi	r24, 0x25	; 37
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	25 e2       	ldi	r18, 0x25	; 37
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	f9 01       	movw	r30, r18
    12d4:	20 81       	ld	r18, Z
    12d6:	2e 7f       	andi	r18, 0xFE	; 254
    12d8:	fc 01       	movw	r30, r24
    12da:	20 83       	st	Z, r18

	// Start transmission
	SPDR = cData;			
    12dc:	8e e4       	ldi	r24, 0x4E	; 78
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	2b 81       	ldd	r18, Y+3	; 0x03
    12e2:	fc 01       	movw	r30, r24
    12e4:	20 83       	st	Z, r18
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
    12e6:	1a 82       	std	Y+2, r1	; 0x02
    12e8:	19 82       	std	Y+1, r1	; 0x01
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <SPI_MasterTransmit+0x38>
	{
		k++;
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01
	// Start transmission
	SPDR = cData;			
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
    12f6:	8d e4       	ldi	r24, 0x4D	; 77
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	fc 01       	movw	r30, r24
    12fc:	80 81       	ld	r24, Z
    12fe:	88 23       	and	r24, r24
    1300:	ac f7       	brge	.-22     	; 0x12ec <SPI_MasterTransmit+0x2e>
	{
		k++;
	}			
	
	cData = SPDR;
    1302:	8e e4       	ldi	r24, 0x4E	; 78
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	fc 01       	movw	r30, r24
    1308:	80 81       	ld	r24, Z
    130a:	8b 83       	std	Y+3, r24	; 0x03

	PORTB|= 1 << DD_SS;
    130c:	85 e2       	ldi	r24, 0x25	; 37
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	25 e2       	ldi	r18, 0x25	; 37
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	f9 01       	movw	r30, r18
    1316:	20 81       	ld	r18, Z
    1318:	21 60       	ori	r18, 0x01	; 1
    131a:	fc 01       	movw	r30, r24
    131c:	20 83       	st	Z, r18
}
    131e:	00 00       	nop
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	08 95       	ret

0000132c <DrawIntroScreen>:
			{
				DrawPixel(posX + x, posY + y, world);
			}
		}
	}
}
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DrawIntroScreen+0x6>
    1332:	1f 92       	push	r1
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	9c 83       	std	Y+4, r25	; 0x04
    133a:	8b 83       	std	Y+3, r24	; 0x03
    133c:	1a 82       	std	Y+2, r1	; 0x02
    133e:	19 82       	std	Y+1, r1	; 0x01
    1340:	0e c0       	rjmp	.+28     	; 0x135e <DrawIntroScreen+0x32>
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	9a 81       	ldd	r25, Y+2	; 0x02
    1346:	2b 81       	ldd	r18, Y+3	; 0x03
    1348:	3c 81       	ldd	r19, Y+4	; 0x04
    134a:	82 0f       	add	r24, r18
    134c:	93 1f       	adc	r25, r19
    134e:	fc 01       	movw	r30, r24
    1350:	80 81       	ld	r24, Z
    1352:	bb da       	rcall	.-2698   	; 0x8ca <sendData>
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	9a 81       	ldd	r25, Y+2	; 0x02
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	88 3f       	cpi	r24, 0xF8	; 248
    1364:	91 40       	sbci	r25, 0x01	; 1
    1366:	6c f3       	brlt	.-38     	; 0x1342 <DrawIntroScreen+0x16>
    1368:	00 00       	nop
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <DrawPixel>:

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	28 97       	sbiw	r28, 0x08	; 8
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	8d 83       	std	Y+5, r24	; 0x05
    138e:	6e 83       	std	Y+6, r22	; 0x06
    1390:	58 87       	std	Y+8, r21	; 0x08
    1392:	4f 83       	std	Y+7, r20	; 0x07
	if (x < 0 || x > 83)
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	84 35       	cpi	r24, 0x54	; 84
    1398:	08 f0       	brcs	.+2      	; 0x139c <DrawPixel+0x24>
    139a:	8c c0       	rjmp	.+280    	; 0x14b4 <DrawPixel+0x13c>
		return;

	if (y < 0 || y > 47)
    139c:	8e 81       	ldd	r24, Y+6	; 0x06
    139e:	80 33       	cpi	r24, 0x30	; 48
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <DrawPixel+0x2c>
    13a2:	8a c0       	rjmp	.+276    	; 0x14b8 <DrawPixel+0x140>
		return;

	unsigned int baselineOffset = 0;
    13a4:	1a 82       	std	Y+2, r1	; 0x02
    13a6:	19 82       	std	Y+1, r1	; 0x01
	unsigned int verticalBitOffset = 0;
    13a8:	1c 82       	std	Y+4, r1	; 0x04
    13aa:	1b 82       	std	Y+3, r1	; 0x03

	if (y >= 0 && y <= 7)
    13ac:	8e 81       	ldd	r24, Y+6	; 0x06
    13ae:	88 30       	cpi	r24, 0x08	; 8
    13b0:	40 f4       	brcc	.+16     	; 0x13c2 <DrawPixel+0x4a>
	{
		baselineOffset = 0;
    13b2:	1a 82       	std	Y+2, r1	; 0x02
    13b4:	19 82       	std	Y+1, r1	; 0x01
		verticalBitOffset = y;
    13b6:	8e 81       	ldd	r24, Y+6	; 0x06
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	9c 83       	std	Y+4, r25	; 0x04
    13be:	8b 83       	std	Y+3, r24	; 0x03
    13c0:	54 c0       	rjmp	.+168    	; 0x146a <DrawPixel+0xf2>
	} 
	else if (y >= 8 && y <= 15)
    13c2:	8e 81       	ldd	r24, Y+6	; 0x06
    13c4:	88 30       	cpi	r24, 0x08	; 8
    13c6:	70 f0       	brcs	.+28     	; 0x13e4 <DrawPixel+0x6c>
    13c8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ca:	80 31       	cpi	r24, 0x10	; 16
    13cc:	58 f4       	brcc	.+22     	; 0x13e4 <DrawPixel+0x6c>
	{
		baselineOffset = 84;
    13ce:	84 e5       	ldi	r24, 0x54	; 84
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	9a 83       	std	Y+2, r25	; 0x02
    13d4:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - 8;
    13d6:	8e 81       	ldd	r24, Y+6	; 0x06
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	08 97       	sbiw	r24, 0x08	; 8
    13de:	9c 83       	std	Y+4, r25	; 0x04
    13e0:	8b 83       	std	Y+3, r24	; 0x03
    13e2:	43 c0       	rjmp	.+134    	; 0x146a <DrawPixel+0xf2>
	} 
	else if (y >= 16 && y <= 23)
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	80 31       	cpi	r24, 0x10	; 16
    13e8:	70 f0       	brcs	.+28     	; 0x1406 <DrawPixel+0x8e>
    13ea:	8e 81       	ldd	r24, Y+6	; 0x06
    13ec:	88 31       	cpi	r24, 0x18	; 24
    13ee:	58 f4       	brcc	.+22     	; 0x1406 <DrawPixel+0x8e>
	{
		baselineOffset = 84 * 2;
    13f0:	88 ea       	ldi	r24, 0xA8	; 168
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9a 83       	std	Y+2, r25	; 0x02
    13f6:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 2);
    13f8:	8e 81       	ldd	r24, Y+6	; 0x06
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	40 97       	sbiw	r24, 0x10	; 16
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	8b 83       	std	Y+3, r24	; 0x03
    1404:	32 c0       	rjmp	.+100    	; 0x146a <DrawPixel+0xf2>
	} 
	else if (y >= 24 && y <= 31)
    1406:	8e 81       	ldd	r24, Y+6	; 0x06
    1408:	88 31       	cpi	r24, 0x18	; 24
    140a:	70 f0       	brcs	.+28     	; 0x1428 <DrawPixel+0xb0>
    140c:	8e 81       	ldd	r24, Y+6	; 0x06
    140e:	80 32       	cpi	r24, 0x20	; 32
    1410:	58 f4       	brcc	.+22     	; 0x1428 <DrawPixel+0xb0>
	{
		baselineOffset = 84 * 3;
    1412:	8c ef       	ldi	r24, 0xFC	; 252
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 3);
    141a:	8e 81       	ldd	r24, Y+6	; 0x06
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	48 97       	sbiw	r24, 0x18	; 24
    1422:	9c 83       	std	Y+4, r25	; 0x04
    1424:	8b 83       	std	Y+3, r24	; 0x03
    1426:	21 c0       	rjmp	.+66     	; 0x146a <DrawPixel+0xf2>
	}
	else if (y >= 32 && y <= 39)
    1428:	8e 81       	ldd	r24, Y+6	; 0x06
    142a:	80 32       	cpi	r24, 0x20	; 32
    142c:	70 f0       	brcs	.+28     	; 0x144a <DrawPixel+0xd2>
    142e:	8e 81       	ldd	r24, Y+6	; 0x06
    1430:	88 32       	cpi	r24, 0x28	; 40
    1432:	58 f4       	brcc	.+22     	; 0x144a <DrawPixel+0xd2>
	{
		baselineOffset = 84 * 4;
    1434:	80 e5       	ldi	r24, 0x50	; 80
    1436:	91 e0       	ldi	r25, 0x01	; 1
    1438:	9a 83       	std	Y+2, r25	; 0x02
    143a:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 4);
    143c:	8e 81       	ldd	r24, Y+6	; 0x06
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	80 97       	sbiw	r24, 0x20	; 32
    1444:	9c 83       	std	Y+4, r25	; 0x04
    1446:	8b 83       	std	Y+3, r24	; 0x03
    1448:	10 c0       	rjmp	.+32     	; 0x146a <DrawPixel+0xf2>
	}
	else if (y >= 40 && y <= 47)
    144a:	8e 81       	ldd	r24, Y+6	; 0x06
    144c:	88 32       	cpi	r24, 0x28	; 40
    144e:	68 f0       	brcs	.+26     	; 0x146a <DrawPixel+0xf2>
    1450:	8e 81       	ldd	r24, Y+6	; 0x06
    1452:	80 33       	cpi	r24, 0x30	; 48
    1454:	50 f4       	brcc	.+20     	; 0x146a <DrawPixel+0xf2>
	{
		baselineOffset = 84 * 5;
    1456:	84 ea       	ldi	r24, 0xA4	; 164
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 5);
    145e:	8e 81       	ldd	r24, Y+6	; 0x06
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	88 97       	sbiw	r24, 0x28	; 40
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	8b 83       	std	Y+3, r24	; 0x03
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	82 0f       	add	r24, r18
    1476:	93 1f       	adc	r25, r19
    1478:	2f 81       	ldd	r18, Y+7	; 0x07
    147a:	38 85       	ldd	r19, Y+8	; 0x08
    147c:	82 0f       	add	r24, r18
    147e:	93 1f       	adc	r25, r19
    1480:	2d 81       	ldd	r18, Y+5	; 0x05
    1482:	42 2f       	mov	r20, r18
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	29 81       	ldd	r18, Y+1	; 0x01
    1488:	3a 81       	ldd	r19, Y+2	; 0x02
    148a:	24 0f       	add	r18, r20
    148c:	35 1f       	adc	r19, r21
    148e:	4f 81       	ldd	r20, Y+7	; 0x07
    1490:	58 85       	ldd	r21, Y+8	; 0x08
    1492:	24 0f       	add	r18, r20
    1494:	35 1f       	adc	r19, r21
    1496:	f9 01       	movw	r30, r18
    1498:	20 81       	ld	r18, Z
    149a:	42 2f       	mov	r20, r18
    149c:	21 e0       	ldi	r18, 0x01	; 1
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	0b 80       	ldd	r0, Y+3	; 0x03
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DrawPixel+0x130>
    14a4:	22 0f       	add	r18, r18
    14a6:	33 1f       	adc	r19, r19
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DrawPixel+0x12c>
    14ac:	24 2b       	or	r18, r20
    14ae:	fc 01       	movw	r30, r24
    14b0:	20 83       	st	Z, r18
    14b2:	03 c0       	rjmp	.+6      	; 0x14ba <DrawPixel+0x142>
}

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
	if (x < 0 || x > 83)
		return;
    14b4:	00 00       	nop
    14b6:	01 c0       	rjmp	.+2      	; 0x14ba <DrawPixel+0x142>

	if (y < 0 || y > 47)
		return;
    14b8:	00 00       	nop
		baselineOffset = 84 * 5;
		verticalBitOffset = y - (8 * 5);
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
}
    14ba:	28 96       	adiw	r28, 0x08	; 8
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <DrawDot>:

 void DrawDot(unsigned char x, unsigned char y, unsigned char* world)
 {
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <DrawDot+0x6>
    14d2:	1f 92       	push	r1
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	6a 83       	std	Y+2, r22	; 0x02
    14dc:	5c 83       	std	Y+4, r21	; 0x04
    14de:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	ac 01       	movw	r20, r24
    14e6:	6a 81       	ldd	r22, Y+2	; 0x02
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	46 df       	rcall	.-372    	; 0x1378 <DrawPixel>
	DrawPixel(x + 1, y, world);
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	21 e0       	ldi	r18, 0x01	; 1
    14f0:	28 0f       	add	r18, r24
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	ac 01       	movw	r20, r24
    14f8:	6a 81       	ldd	r22, Y+2	; 0x02
    14fa:	82 2f       	mov	r24, r18
    14fc:	3d df       	rcall	.-390    	; 0x1378 <DrawPixel>
	DrawPixel(x, y + 1, world);
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	21 e0       	ldi	r18, 0x01	; 1
    1502:	28 0f       	add	r18, r24
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	ac 01       	movw	r20, r24
    150a:	62 2f       	mov	r22, r18
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	34 df       	rcall	.-408    	; 0x1378 <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	31 e0       	ldi	r19, 0x01	; 1
    1514:	38 0f       	add	r19, r24
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	21 e0       	ldi	r18, 0x01	; 1
    151a:	28 0f       	add	r18, r24
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	ac 01       	movw	r20, r24
    1522:	63 2f       	mov	r22, r19
    1524:	82 2f       	mov	r24, r18
    1526:	28 df       	rcall	.-432    	; 0x1378 <DrawPixel>
 }
    1528:	00 00       	nop
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

00001538 <DrawFood>:
 
 void DrawFood(unsigned char x, unsigned char y, unsigned char* world)
 {
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	00 d0       	rcall	.+0      	; 0x153e <DrawFood+0x6>
    153e:	1f 92       	push	r1
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	6a 83       	std	Y+2, r22	; 0x02
    1548:	5c 83       	std	Y+4, r21	; 0x04
    154a:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	ac 01       	movw	r20, r24
    1552:	6a 81       	ldd	r22, Y+2	; 0x02
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	10 df       	rcall	.-480    	; 0x1378 <DrawPixel>
	DrawPixel(x + 2, y, world);
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	22 e0       	ldi	r18, 0x02	; 2
    155c:	28 0f       	add	r18, r24
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	ac 01       	movw	r20, r24
    1564:	6a 81       	ldd	r22, Y+2	; 0x02
    1566:	82 2f       	mov	r24, r18
    1568:	07 df       	rcall	.-498    	; 0x1378 <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	31 e0       	ldi	r19, 0x01	; 1
    156e:	38 0f       	add	r19, r24
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	21 e0       	ldi	r18, 0x01	; 1
    1574:	28 0f       	add	r18, r24
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	ac 01       	movw	r20, r24
    157c:	63 2f       	mov	r22, r19
    157e:	82 2f       	mov	r24, r18
    1580:	fb de       	rcall	.-522    	; 0x1378 <DrawPixel>
	DrawPixel(x + 1, y - 1, world);
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	3f ef       	ldi	r19, 0xFF	; 255
    1586:	38 0f       	add	r19, r24
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	21 e0       	ldi	r18, 0x01	; 1
    158c:	28 0f       	add	r18, r24
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	ac 01       	movw	r20, r24
    1594:	63 2f       	mov	r22, r19
    1596:	82 2f       	mov	r24, r18
    1598:	ef de       	rcall	.-546    	; 0x1378 <DrawPixel>
 }
    159a:	00 00       	nop
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	08 95       	ret

000015aa <RenderWorld>:

 void RenderWorld(unsigned char* world)
 {
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <RenderWorld+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <RenderWorld+0x8>
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
	for (int x = 0; x < 504; x++)
    15ba:	1a 82       	std	Y+2, r1	; 0x02
    15bc:	19 82       	std	Y+1, r1	; 0x01
    15be:	0e c0       	rjmp	.+28     	; 0x15dc <RenderWorld+0x32>
	{
		sendData(world[x]);
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	2d 81       	ldd	r18, Y+5	; 0x05
    15c6:	3e 81       	ldd	r19, Y+6	; 0x06
    15c8:	82 0f       	add	r24, r18
    15ca:	93 1f       	adc	r25, r19
    15cc:	fc 01       	movw	r30, r24
    15ce:	80 81       	ld	r24, Z
    15d0:	7c d9       	rcall	.-3336   	; 0x8ca <sendData>
	DrawPixel(x + 1, y - 1, world);
 }

 void RenderWorld(unsigned char* world)
 {
	for (int x = 0; x < 504; x++)
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	01 96       	adiw	r24, 0x01	; 1
    15d8:	9a 83       	std	Y+2, r25	; 0x02
    15da:	89 83       	std	Y+1, r24	; 0x01
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	88 3f       	cpi	r24, 0xF8	; 248
    15e2:	91 40       	sbci	r25, 0x01	; 1
    15e4:	6c f3       	brlt	.-38     	; 0x15c0 <RenderWorld+0x16>
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
    15e6:	1c 82       	std	Y+4, r1	; 0x04
    15e8:	1b 82       	std	Y+3, r1	; 0x03
    15ea:	0d c0       	rjmp	.+26     	; 0x1606 <RenderWorld+0x5c>
	{
		world[x] = 0x00;
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	2d 81       	ldd	r18, Y+5	; 0x05
    15f2:	3e 81       	ldd	r19, Y+6	; 0x06
    15f4:	82 0f       	add	r24, r18
    15f6:	93 1f       	adc	r25, r19
    15f8:	fc 01       	movw	r30, r24
    15fa:	10 82       	st	Z, r1
	for (int x = 0; x < 504; x++)
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	8b 83       	std	Y+3, r24	; 0x03
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	88 3f       	cpi	r24, 0xF8	; 248
    160c:	91 40       	sbci	r25, 0x01	; 1
    160e:	74 f3       	brlt	.-36     	; 0x15ec <RenderWorld+0x42>
	{
		world[x] = 0x00;
	}
    1610:	00 00       	nop
    1612:	26 96       	adiw	r28, 0x06	; 6
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	08 95       	ret

00001624 <__cmpsf2>:
    1624:	2f d0       	rcall	.+94     	; 0x1684 <__fp_cmp>
    1626:	08 f4       	brcc	.+2      	; 0x162a <__cmpsf2+0x6>
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	08 95       	ret

0000162c <__fixunssfsi>:
    162c:	57 d0       	rcall	.+174    	; 0x16dc <__fp_splitA>
    162e:	88 f0       	brcs	.+34     	; 0x1652 <__fixunssfsi+0x26>
    1630:	9f 57       	subi	r25, 0x7F	; 127
    1632:	90 f0       	brcs	.+36     	; 0x1658 <__fixunssfsi+0x2c>
    1634:	b9 2f       	mov	r27, r25
    1636:	99 27       	eor	r25, r25
    1638:	b7 51       	subi	r27, 0x17	; 23
    163a:	a0 f0       	brcs	.+40     	; 0x1664 <__fixunssfsi+0x38>
    163c:	d1 f0       	breq	.+52     	; 0x1672 <__fixunssfsi+0x46>
    163e:	66 0f       	add	r22, r22
    1640:	77 1f       	adc	r23, r23
    1642:	88 1f       	adc	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	1a f0       	brmi	.+6      	; 0x164e <__fixunssfsi+0x22>
    1648:	ba 95       	dec	r27
    164a:	c9 f7       	brne	.-14     	; 0x163e <__fixunssfsi+0x12>
    164c:	12 c0       	rjmp	.+36     	; 0x1672 <__fixunssfsi+0x46>
    164e:	b1 30       	cpi	r27, 0x01	; 1
    1650:	81 f0       	breq	.+32     	; 0x1672 <__fixunssfsi+0x46>
    1652:	5e d0       	rcall	.+188    	; 0x1710 <__fp_zero>
    1654:	b1 e0       	ldi	r27, 0x01	; 1
    1656:	08 95       	ret
    1658:	5b c0       	rjmp	.+182    	; 0x1710 <__fp_zero>
    165a:	67 2f       	mov	r22, r23
    165c:	78 2f       	mov	r23, r24
    165e:	88 27       	eor	r24, r24
    1660:	b8 5f       	subi	r27, 0xF8	; 248
    1662:	39 f0       	breq	.+14     	; 0x1672 <__fixunssfsi+0x46>
    1664:	b9 3f       	cpi	r27, 0xF9	; 249
    1666:	cc f3       	brlt	.-14     	; 0x165a <__fixunssfsi+0x2e>
    1668:	86 95       	lsr	r24
    166a:	77 95       	ror	r23
    166c:	67 95       	ror	r22
    166e:	b3 95       	inc	r27
    1670:	d9 f7       	brne	.-10     	; 0x1668 <__fixunssfsi+0x3c>
    1672:	3e f4       	brtc	.+14     	; 0x1682 <__fixunssfsi+0x56>
    1674:	90 95       	com	r25
    1676:	80 95       	com	r24
    1678:	70 95       	com	r23
    167a:	61 95       	neg	r22
    167c:	7f 4f       	sbci	r23, 0xFF	; 255
    167e:	8f 4f       	sbci	r24, 0xFF	; 255
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	08 95       	ret

00001684 <__fp_cmp>:
    1684:	99 0f       	add	r25, r25
    1686:	00 08       	sbc	r0, r0
    1688:	55 0f       	add	r21, r21
    168a:	aa 0b       	sbc	r26, r26
    168c:	e0 e8       	ldi	r30, 0x80	; 128
    168e:	fe ef       	ldi	r31, 0xFE	; 254
    1690:	16 16       	cp	r1, r22
    1692:	17 06       	cpc	r1, r23
    1694:	e8 07       	cpc	r30, r24
    1696:	f9 07       	cpc	r31, r25
    1698:	c0 f0       	brcs	.+48     	; 0x16ca <__fp_cmp+0x46>
    169a:	12 16       	cp	r1, r18
    169c:	13 06       	cpc	r1, r19
    169e:	e4 07       	cpc	r30, r20
    16a0:	f5 07       	cpc	r31, r21
    16a2:	98 f0       	brcs	.+38     	; 0x16ca <__fp_cmp+0x46>
    16a4:	62 1b       	sub	r22, r18
    16a6:	73 0b       	sbc	r23, r19
    16a8:	84 0b       	sbc	r24, r20
    16aa:	95 0b       	sbc	r25, r21
    16ac:	39 f4       	brne	.+14     	; 0x16bc <__fp_cmp+0x38>
    16ae:	0a 26       	eor	r0, r26
    16b0:	61 f0       	breq	.+24     	; 0x16ca <__fp_cmp+0x46>
    16b2:	23 2b       	or	r18, r19
    16b4:	24 2b       	or	r18, r20
    16b6:	25 2b       	or	r18, r21
    16b8:	21 f4       	brne	.+8      	; 0x16c2 <__fp_cmp+0x3e>
    16ba:	08 95       	ret
    16bc:	0a 26       	eor	r0, r26
    16be:	09 f4       	brne	.+2      	; 0x16c2 <__fp_cmp+0x3e>
    16c0:	a1 40       	sbci	r26, 0x01	; 1
    16c2:	a6 95       	lsr	r26
    16c4:	8f ef       	ldi	r24, 0xFF	; 255
    16c6:	81 1d       	adc	r24, r1
    16c8:	81 1d       	adc	r24, r1
    16ca:	08 95       	ret

000016cc <__fp_split3>:
    16cc:	57 fd       	sbrc	r21, 7
    16ce:	90 58       	subi	r25, 0x80	; 128
    16d0:	44 0f       	add	r20, r20
    16d2:	55 1f       	adc	r21, r21
    16d4:	59 f0       	breq	.+22     	; 0x16ec <__fp_splitA+0x10>
    16d6:	5f 3f       	cpi	r21, 0xFF	; 255
    16d8:	71 f0       	breq	.+28     	; 0x16f6 <__fp_splitA+0x1a>
    16da:	47 95       	ror	r20

000016dc <__fp_splitA>:
    16dc:	88 0f       	add	r24, r24
    16de:	97 fb       	bst	r25, 7
    16e0:	99 1f       	adc	r25, r25
    16e2:	61 f0       	breq	.+24     	; 0x16fc <__fp_splitA+0x20>
    16e4:	9f 3f       	cpi	r25, 0xFF	; 255
    16e6:	79 f0       	breq	.+30     	; 0x1706 <__fp_splitA+0x2a>
    16e8:	87 95       	ror	r24
    16ea:	08 95       	ret
    16ec:	12 16       	cp	r1, r18
    16ee:	13 06       	cpc	r1, r19
    16f0:	14 06       	cpc	r1, r20
    16f2:	55 1f       	adc	r21, r21
    16f4:	f2 cf       	rjmp	.-28     	; 0x16da <__fp_split3+0xe>
    16f6:	46 95       	lsr	r20
    16f8:	f1 df       	rcall	.-30     	; 0x16dc <__fp_splitA>
    16fa:	08 c0       	rjmp	.+16     	; 0x170c <__fp_splitA+0x30>
    16fc:	16 16       	cp	r1, r22
    16fe:	17 06       	cpc	r1, r23
    1700:	18 06       	cpc	r1, r24
    1702:	99 1f       	adc	r25, r25
    1704:	f1 cf       	rjmp	.-30     	; 0x16e8 <__fp_splitA+0xc>
    1706:	86 95       	lsr	r24
    1708:	71 05       	cpc	r23, r1
    170a:	61 05       	cpc	r22, r1
    170c:	08 94       	sec
    170e:	08 95       	ret

00001710 <__fp_zero>:
    1710:	e8 94       	clt

00001712 <__fp_szero>:
    1712:	bb 27       	eor	r27, r27
    1714:	66 27       	eor	r22, r22
    1716:	77 27       	eor	r23, r23
    1718:	cb 01       	movw	r24, r22
    171a:	97 f9       	bld	r25, 7
    171c:	08 95       	ret

0000171e <__gesf2>:
    171e:	b2 df       	rcall	.-156    	; 0x1684 <__fp_cmp>
    1720:	08 f4       	brcc	.+2      	; 0x1724 <__gesf2+0x6>
    1722:	8f ef       	ldi	r24, 0xFF	; 255
    1724:	08 95       	ret

00001726 <__mulsf3>:
    1726:	0b d0       	rcall	.+22     	; 0x173e <__mulsf3x>
    1728:	78 c0       	rjmp	.+240    	; 0x181a <__fp_round>
    172a:	69 d0       	rcall	.+210    	; 0x17fe <__fp_pscA>
    172c:	28 f0       	brcs	.+10     	; 0x1738 <__mulsf3+0x12>
    172e:	6e d0       	rcall	.+220    	; 0x180c <__fp_pscB>
    1730:	18 f0       	brcs	.+6      	; 0x1738 <__mulsf3+0x12>
    1732:	95 23       	and	r25, r21
    1734:	09 f0       	breq	.+2      	; 0x1738 <__mulsf3+0x12>
    1736:	5a c0       	rjmp	.+180    	; 0x17ec <__fp_inf>
    1738:	5f c0       	rjmp	.+190    	; 0x17f8 <__fp_nan>
    173a:	11 24       	eor	r1, r1
    173c:	ea cf       	rjmp	.-44     	; 0x1712 <__fp_szero>

0000173e <__mulsf3x>:
    173e:	c6 df       	rcall	.-116    	; 0x16cc <__fp_split3>
    1740:	a0 f3       	brcs	.-24     	; 0x172a <__mulsf3+0x4>

00001742 <__mulsf3_pse>:
    1742:	95 9f       	mul	r25, r21
    1744:	d1 f3       	breq	.-12     	; 0x173a <__mulsf3+0x14>
    1746:	95 0f       	add	r25, r21
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	55 1f       	adc	r21, r21
    174c:	62 9f       	mul	r22, r18
    174e:	f0 01       	movw	r30, r0
    1750:	72 9f       	mul	r23, r18
    1752:	bb 27       	eor	r27, r27
    1754:	f0 0d       	add	r31, r0
    1756:	b1 1d       	adc	r27, r1
    1758:	63 9f       	mul	r22, r19
    175a:	aa 27       	eor	r26, r26
    175c:	f0 0d       	add	r31, r0
    175e:	b1 1d       	adc	r27, r1
    1760:	aa 1f       	adc	r26, r26
    1762:	64 9f       	mul	r22, r20
    1764:	66 27       	eor	r22, r22
    1766:	b0 0d       	add	r27, r0
    1768:	a1 1d       	adc	r26, r1
    176a:	66 1f       	adc	r22, r22
    176c:	82 9f       	mul	r24, r18
    176e:	22 27       	eor	r18, r18
    1770:	b0 0d       	add	r27, r0
    1772:	a1 1d       	adc	r26, r1
    1774:	62 1f       	adc	r22, r18
    1776:	73 9f       	mul	r23, r19
    1778:	b0 0d       	add	r27, r0
    177a:	a1 1d       	adc	r26, r1
    177c:	62 1f       	adc	r22, r18
    177e:	83 9f       	mul	r24, r19
    1780:	a0 0d       	add	r26, r0
    1782:	61 1d       	adc	r22, r1
    1784:	22 1f       	adc	r18, r18
    1786:	74 9f       	mul	r23, r20
    1788:	33 27       	eor	r19, r19
    178a:	a0 0d       	add	r26, r0
    178c:	61 1d       	adc	r22, r1
    178e:	23 1f       	adc	r18, r19
    1790:	84 9f       	mul	r24, r20
    1792:	60 0d       	add	r22, r0
    1794:	21 1d       	adc	r18, r1
    1796:	82 2f       	mov	r24, r18
    1798:	76 2f       	mov	r23, r22
    179a:	6a 2f       	mov	r22, r26
    179c:	11 24       	eor	r1, r1
    179e:	9f 57       	subi	r25, 0x7F	; 127
    17a0:	50 40       	sbci	r21, 0x00	; 0
    17a2:	8a f0       	brmi	.+34     	; 0x17c6 <__mulsf3_pse+0x84>
    17a4:	e1 f0       	breq	.+56     	; 0x17de <__mulsf3_pse+0x9c>
    17a6:	88 23       	and	r24, r24
    17a8:	4a f0       	brmi	.+18     	; 0x17bc <__mulsf3_pse+0x7a>
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	bb 1f       	adc	r27, r27
    17b0:	66 1f       	adc	r22, r22
    17b2:	77 1f       	adc	r23, r23
    17b4:	88 1f       	adc	r24, r24
    17b6:	91 50       	subi	r25, 0x01	; 1
    17b8:	50 40       	sbci	r21, 0x00	; 0
    17ba:	a9 f7       	brne	.-22     	; 0x17a6 <__mulsf3_pse+0x64>
    17bc:	9e 3f       	cpi	r25, 0xFE	; 254
    17be:	51 05       	cpc	r21, r1
    17c0:	70 f0       	brcs	.+28     	; 0x17de <__mulsf3_pse+0x9c>
    17c2:	14 c0       	rjmp	.+40     	; 0x17ec <__fp_inf>
    17c4:	a6 cf       	rjmp	.-180    	; 0x1712 <__fp_szero>
    17c6:	5f 3f       	cpi	r21, 0xFF	; 255
    17c8:	ec f3       	brlt	.-6      	; 0x17c4 <__mulsf3_pse+0x82>
    17ca:	98 3e       	cpi	r25, 0xE8	; 232
    17cc:	dc f3       	brlt	.-10     	; 0x17c4 <__mulsf3_pse+0x82>
    17ce:	86 95       	lsr	r24
    17d0:	77 95       	ror	r23
    17d2:	67 95       	ror	r22
    17d4:	b7 95       	ror	r27
    17d6:	f7 95       	ror	r31
    17d8:	e7 95       	ror	r30
    17da:	9f 5f       	subi	r25, 0xFF	; 255
    17dc:	c1 f7       	brne	.-16     	; 0x17ce <__mulsf3_pse+0x8c>
    17de:	fe 2b       	or	r31, r30
    17e0:	88 0f       	add	r24, r24
    17e2:	91 1d       	adc	r25, r1
    17e4:	96 95       	lsr	r25
    17e6:	87 95       	ror	r24
    17e8:	97 f9       	bld	r25, 7
    17ea:	08 95       	ret

000017ec <__fp_inf>:
    17ec:	97 f9       	bld	r25, 7
    17ee:	9f 67       	ori	r25, 0x7F	; 127
    17f0:	80 e8       	ldi	r24, 0x80	; 128
    17f2:	70 e0       	ldi	r23, 0x00	; 0
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	08 95       	ret

000017f8 <__fp_nan>:
    17f8:	9f ef       	ldi	r25, 0xFF	; 255
    17fa:	80 ec       	ldi	r24, 0xC0	; 192
    17fc:	08 95       	ret

000017fe <__fp_pscA>:
    17fe:	00 24       	eor	r0, r0
    1800:	0a 94       	dec	r0
    1802:	16 16       	cp	r1, r22
    1804:	17 06       	cpc	r1, r23
    1806:	18 06       	cpc	r1, r24
    1808:	09 06       	cpc	r0, r25
    180a:	08 95       	ret

0000180c <__fp_pscB>:
    180c:	00 24       	eor	r0, r0
    180e:	0a 94       	dec	r0
    1810:	12 16       	cp	r1, r18
    1812:	13 06       	cpc	r1, r19
    1814:	14 06       	cpc	r1, r20
    1816:	05 06       	cpc	r0, r21
    1818:	08 95       	ret

0000181a <__fp_round>:
    181a:	09 2e       	mov	r0, r25
    181c:	03 94       	inc	r0
    181e:	00 0c       	add	r0, r0
    1820:	11 f4       	brne	.+4      	; 0x1826 <__fp_round+0xc>
    1822:	88 23       	and	r24, r24
    1824:	52 f0       	brmi	.+20     	; 0x183a <__fp_round+0x20>
    1826:	bb 0f       	add	r27, r27
    1828:	40 f4       	brcc	.+16     	; 0x183a <__fp_round+0x20>
    182a:	bf 2b       	or	r27, r31
    182c:	11 f4       	brne	.+4      	; 0x1832 <__fp_round+0x18>
    182e:	60 ff       	sbrs	r22, 0
    1830:	04 c0       	rjmp	.+8      	; 0x183a <__fp_round+0x20>
    1832:	6f 5f       	subi	r22, 0xFF	; 255
    1834:	7f 4f       	sbci	r23, 0xFF	; 255
    1836:	8f 4f       	sbci	r24, 0xFF	; 255
    1838:	9f 4f       	sbci	r25, 0xFF	; 255
    183a:	08 95       	ret

0000183c <__divmodhi4>:
    183c:	97 fb       	bst	r25, 7
    183e:	07 2e       	mov	r0, r23
    1840:	16 f4       	brtc	.+4      	; 0x1846 <__divmodhi4+0xa>
    1842:	00 94       	com	r0
    1844:	06 d0       	rcall	.+12     	; 0x1852 <__divmodhi4_neg1>
    1846:	77 fd       	sbrc	r23, 7
    1848:	08 d0       	rcall	.+16     	; 0x185a <__divmodhi4_neg2>
    184a:	0b d0       	rcall	.+22     	; 0x1862 <__udivmodhi4>
    184c:	07 fc       	sbrc	r0, 7
    184e:	05 d0       	rcall	.+10     	; 0x185a <__divmodhi4_neg2>
    1850:	3e f4       	brtc	.+14     	; 0x1860 <__divmodhi4_exit>

00001852 <__divmodhi4_neg1>:
    1852:	90 95       	com	r25
    1854:	81 95       	neg	r24
    1856:	9f 4f       	sbci	r25, 0xFF	; 255
    1858:	08 95       	ret

0000185a <__divmodhi4_neg2>:
    185a:	70 95       	com	r23
    185c:	61 95       	neg	r22
    185e:	7f 4f       	sbci	r23, 0xFF	; 255

00001860 <__divmodhi4_exit>:
    1860:	08 95       	ret

00001862 <__udivmodhi4>:
    1862:	aa 1b       	sub	r26, r26
    1864:	bb 1b       	sub	r27, r27
    1866:	51 e1       	ldi	r21, 0x11	; 17
    1868:	07 c0       	rjmp	.+14     	; 0x1878 <__udivmodhi4_ep>

0000186a <__udivmodhi4_loop>:
    186a:	aa 1f       	adc	r26, r26
    186c:	bb 1f       	adc	r27, r27
    186e:	a6 17       	cp	r26, r22
    1870:	b7 07       	cpc	r27, r23
    1872:	10 f0       	brcs	.+4      	; 0x1878 <__udivmodhi4_ep>
    1874:	a6 1b       	sub	r26, r22
    1876:	b7 0b       	sbc	r27, r23

00001878 <__udivmodhi4_ep>:
    1878:	88 1f       	adc	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	5a 95       	dec	r21
    187e:	a9 f7       	brne	.-22     	; 0x186a <__udivmodhi4_loop>
    1880:	80 95       	com	r24
    1882:	90 95       	com	r25
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	08 95       	ret

0000188a <do_rand>:
    188a:	8f 92       	push	r8
    188c:	9f 92       	push	r9
    188e:	af 92       	push	r10
    1890:	bf 92       	push	r11
    1892:	cf 92       	push	r12
    1894:	df 92       	push	r13
    1896:	ef 92       	push	r14
    1898:	ff 92       	push	r15
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	ec 01       	movw	r28, r24
    18a0:	68 81       	ld	r22, Y
    18a2:	79 81       	ldd	r23, Y+1	; 0x01
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	9b 81       	ldd	r25, Y+3	; 0x03
    18a8:	61 15       	cp	r22, r1
    18aa:	71 05       	cpc	r23, r1
    18ac:	81 05       	cpc	r24, r1
    18ae:	91 05       	cpc	r25, r1
    18b0:	21 f4       	brne	.+8      	; 0x18ba <do_rand+0x30>
    18b2:	64 e2       	ldi	r22, 0x24	; 36
    18b4:	79 ed       	ldi	r23, 0xD9	; 217
    18b6:	8b e5       	ldi	r24, 0x5B	; 91
    18b8:	97 e0       	ldi	r25, 0x07	; 7
    18ba:	2d e1       	ldi	r18, 0x1D	; 29
    18bc:	33 ef       	ldi	r19, 0xF3	; 243
    18be:	41 e0       	ldi	r20, 0x01	; 1
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	38 d0       	rcall	.+112    	; 0x1934 <__divmodsi4>
    18c4:	49 01       	movw	r8, r18
    18c6:	5a 01       	movw	r10, r20
    18c8:	9b 01       	movw	r18, r22
    18ca:	ac 01       	movw	r20, r24
    18cc:	a7 ea       	ldi	r26, 0xA7	; 167
    18ce:	b1 e4       	ldi	r27, 0x41	; 65
    18d0:	4d d0       	rcall	.+154    	; 0x196c <__muluhisi3>
    18d2:	6b 01       	movw	r12, r22
    18d4:	7c 01       	movw	r14, r24
    18d6:	ac ee       	ldi	r26, 0xEC	; 236
    18d8:	b4 ef       	ldi	r27, 0xF4	; 244
    18da:	a5 01       	movw	r20, r10
    18dc:	94 01       	movw	r18, r8
    18de:	52 d0       	rcall	.+164    	; 0x1984 <__mulohisi3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	8c 0d       	add	r24, r12
    18e6:	9d 1d       	adc	r25, r13
    18e8:	ae 1d       	adc	r26, r14
    18ea:	bf 1d       	adc	r27, r15
    18ec:	b7 ff       	sbrs	r27, 7
    18ee:	03 c0       	rjmp	.+6      	; 0x18f6 <do_rand+0x6c>
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	a1 09       	sbc	r26, r1
    18f4:	b0 48       	sbci	r27, 0x80	; 128
    18f6:	88 83       	st	Y, r24
    18f8:	99 83       	std	Y+1, r25	; 0x01
    18fa:	aa 83       	std	Y+2, r26	; 0x02
    18fc:	bb 83       	std	Y+3, r27	; 0x03
    18fe:	9f 77       	andi	r25, 0x7F	; 127
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	df 90       	pop	r13
    190a:	cf 90       	pop	r12
    190c:	bf 90       	pop	r11
    190e:	af 90       	pop	r10
    1910:	9f 90       	pop	r9
    1912:	8f 90       	pop	r8
    1914:	08 95       	ret

00001916 <rand_r>:
    1916:	b9 cf       	rjmp	.-142    	; 0x188a <do_rand>

00001918 <rand>:
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	92 e0       	ldi	r25, 0x02	; 2
    191c:	b6 cf       	rjmp	.-148    	; 0x188a <do_rand>

0000191e <srand>:
    191e:	a0 e0       	ldi	r26, 0x00	; 0
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    1926:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    192a:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    192e:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    1932:	08 95       	ret

00001934 <__divmodsi4>:
    1934:	05 2e       	mov	r0, r21
    1936:	97 fb       	bst	r25, 7
    1938:	16 f4       	brtc	.+4      	; 0x193e <__divmodsi4+0xa>
    193a:	00 94       	com	r0
    193c:	0f d0       	rcall	.+30     	; 0x195c <__negsi2>
    193e:	57 fd       	sbrc	r21, 7
    1940:	05 d0       	rcall	.+10     	; 0x194c <__divmodsi4_neg2>
    1942:	24 d0       	rcall	.+72     	; 0x198c <__udivmodsi4>
    1944:	07 fc       	sbrc	r0, 7
    1946:	02 d0       	rcall	.+4      	; 0x194c <__divmodsi4_neg2>
    1948:	46 f4       	brtc	.+16     	; 0x195a <__divmodsi4_exit>
    194a:	08 c0       	rjmp	.+16     	; 0x195c <__negsi2>

0000194c <__divmodsi4_neg2>:
    194c:	50 95       	com	r21
    194e:	40 95       	com	r20
    1950:	30 95       	com	r19
    1952:	21 95       	neg	r18
    1954:	3f 4f       	sbci	r19, 0xFF	; 255
    1956:	4f 4f       	sbci	r20, 0xFF	; 255
    1958:	5f 4f       	sbci	r21, 0xFF	; 255

0000195a <__divmodsi4_exit>:
    195a:	08 95       	ret

0000195c <__negsi2>:
    195c:	90 95       	com	r25
    195e:	80 95       	com	r24
    1960:	70 95       	com	r23
    1962:	61 95       	neg	r22
    1964:	7f 4f       	sbci	r23, 0xFF	; 255
    1966:	8f 4f       	sbci	r24, 0xFF	; 255
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	08 95       	ret

0000196c <__muluhisi3>:
    196c:	31 d0       	rcall	.+98     	; 0x19d0 <__umulhisi3>
    196e:	a5 9f       	mul	r26, r21
    1970:	90 0d       	add	r25, r0
    1972:	b4 9f       	mul	r27, r20
    1974:	90 0d       	add	r25, r0
    1976:	a4 9f       	mul	r26, r20
    1978:	80 0d       	add	r24, r0
    197a:	91 1d       	adc	r25, r1
    197c:	11 24       	eor	r1, r1
    197e:	08 95       	ret

00001980 <__mulshisi3>:
    1980:	b7 ff       	sbrs	r27, 7
    1982:	f4 cf       	rjmp	.-24     	; 0x196c <__muluhisi3>

00001984 <__mulohisi3>:
    1984:	f3 df       	rcall	.-26     	; 0x196c <__muluhisi3>
    1986:	82 1b       	sub	r24, r18
    1988:	93 0b       	sbc	r25, r19
    198a:	08 95       	ret

0000198c <__udivmodsi4>:
    198c:	a1 e2       	ldi	r26, 0x21	; 33
    198e:	1a 2e       	mov	r1, r26
    1990:	aa 1b       	sub	r26, r26
    1992:	bb 1b       	sub	r27, r27
    1994:	fd 01       	movw	r30, r26
    1996:	0d c0       	rjmp	.+26     	; 0x19b2 <__udivmodsi4_ep>

00001998 <__udivmodsi4_loop>:
    1998:	aa 1f       	adc	r26, r26
    199a:	bb 1f       	adc	r27, r27
    199c:	ee 1f       	adc	r30, r30
    199e:	ff 1f       	adc	r31, r31
    19a0:	a2 17       	cp	r26, r18
    19a2:	b3 07       	cpc	r27, r19
    19a4:	e4 07       	cpc	r30, r20
    19a6:	f5 07       	cpc	r31, r21
    19a8:	20 f0       	brcs	.+8      	; 0x19b2 <__udivmodsi4_ep>
    19aa:	a2 1b       	sub	r26, r18
    19ac:	b3 0b       	sbc	r27, r19
    19ae:	e4 0b       	sbc	r30, r20
    19b0:	f5 0b       	sbc	r31, r21

000019b2 <__udivmodsi4_ep>:
    19b2:	66 1f       	adc	r22, r22
    19b4:	77 1f       	adc	r23, r23
    19b6:	88 1f       	adc	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	1a 94       	dec	r1
    19bc:	69 f7       	brne	.-38     	; 0x1998 <__udivmodsi4_loop>
    19be:	60 95       	com	r22
    19c0:	70 95       	com	r23
    19c2:	80 95       	com	r24
    19c4:	90 95       	com	r25
    19c6:	9b 01       	movw	r18, r22
    19c8:	ac 01       	movw	r20, r24
    19ca:	bd 01       	movw	r22, r26
    19cc:	cf 01       	movw	r24, r30
    19ce:	08 95       	ret

000019d0 <__umulhisi3>:
    19d0:	a2 9f       	mul	r26, r18
    19d2:	b0 01       	movw	r22, r0
    19d4:	b3 9f       	mul	r27, r19
    19d6:	c0 01       	movw	r24, r0
    19d8:	a3 9f       	mul	r26, r19
    19da:	70 0d       	add	r23, r0
    19dc:	81 1d       	adc	r24, r1
    19de:	11 24       	eor	r1, r1
    19e0:	91 1d       	adc	r25, r1
    19e2:	b2 9f       	mul	r27, r18
    19e4:	70 0d       	add	r23, r0
    19e6:	81 1d       	adc	r24, r1
    19e8:	11 24       	eor	r1, r1
    19ea:	91 1d       	adc	r25, r1
    19ec:	08 95       	ret

000019ee <_exit>:
    19ee:	f8 94       	cli

000019f0 <__stop_program>:
    19f0:	ff cf       	rjmp	.-2      	; 0x19f0 <__stop_program>
