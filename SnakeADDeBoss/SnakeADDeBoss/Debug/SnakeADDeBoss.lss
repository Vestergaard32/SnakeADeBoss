
SnakeADDeBoss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00000ef0  00000f84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005e3  00800214  00800214  00000f98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144d  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fcd  00000000  00000000  00002535  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba3  00000000  00000000  00003502  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  000040a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077a  00000000  00000000  000042ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037e  00000000  00000000  00004a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004da4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ef       	ldi	r30, 0xF0	; 240
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 31       	cpi	r26, 0x14	; 20
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	27 e0       	ldi	r18, 0x07	; 7
 110:	a4 e1       	ldi	r26, 0x14	; 20
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 3f       	cpi	r26, 0xF7	; 247
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	de d0       	rcall	.+444    	; 0x2dc <main>
 120:	e5 c6       	rjmp	.+3530   	; 0xeec <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <InitKeypad>:
	{ '3', '6', '9', '#' },
	{ 'A', 'B', 'C', 'D' }
};

void InitKeypad()
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	// Setup input pins to keyboard
	// These are pins PA6 (Row 2) and PA4 (Row 1), and C7 (Row 3) and C5 (Row 4)
	DDRA &= ~(0b01010000);
 12c:	81 e2       	ldi	r24, 0x21	; 33
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	21 e2       	ldi	r18, 0x21	; 33
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	2f 7a       	andi	r18, 0xAF	; 175
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
	DDRC &= ~(0b10100000);
 13e:	87 e2       	ldi	r24, 0x27	; 39
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	27 e2       	ldi	r18, 0x27	; 39
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	2f 75       	andi	r18, 0x5F	; 95
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18

	// Setup output pins to keyboard
	// PD0 = Column 1, PD1 = Column 2, PD2 = Column 3, PD3 = Column 4
	DDRD |= 0b00001111;
 150:	8a e2       	ldi	r24, 0x2A	; 42
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	2a e2       	ldi	r18, 0x2A	; 42
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	20 81       	ld	r18, Z
 15c:	2f 60       	ori	r18, 0x0F	; 15
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
	PORTD |= 0b00001111;
 162:	8b e2       	ldi	r24, 0x2B	; 43
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	2b e2       	ldi	r18, 0x2B	; 43
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	2f 60       	ori	r18, 0x0F	; 15
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18

	DDRB = 0b11111111;
 174:	84 e2       	ldi	r24, 0x24	; 36
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18

	//PORTB = 0xFF;
}
 17e:	00 00       	nop
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <GetKey>:

char GetKey()
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	60 97       	sbiw	r28, 0x10	; 16
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
	// Scan Column 1 (1, 4, 7, and *)
	PORTD &= ~(1 << COLUMN_1);
 19a:	8b e2       	ldi	r24, 0x2B	; 43
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	2b e2       	ldi	r18, 0x2B	; 43
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	20 81       	ld	r18, Z
 1a6:	2e 7f       	andi	r18, 0xFE	; 254
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	a0 e8       	ldi	r26, 0x80	; 128
 1b2:	bf e3       	ldi	r27, 0x3F	; 63
 1b4:	8b 83       	std	Y+3, r24	; 0x03
 1b6:	9c 83       	std	Y+4, r25	; 0x04
 1b8:	ad 83       	std	Y+5, r26	; 0x05
 1ba:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	4a e7       	ldi	r20, 0x7A	; 122
 1c2:	55 e4       	ldi	r21, 0x45	; 69
 1c4:	6b 81       	ldd	r22, Y+3	; 0x03
 1c6:	7c 81       	ldd	r23, Y+4	; 0x04
 1c8:	8d 81       	ldd	r24, Y+5	; 0x05
 1ca:	9e 81       	ldd	r25, Y+6	; 0x06
 1cc:	04 d6       	rcall	.+3080   	; 0xdd6 <__mulsf3>
 1ce:	dc 01       	movw	r26, r24
 1d0:	cb 01       	movw	r24, r22
 1d2:	8f 83       	std	Y+7, r24	; 0x07
 1d4:	98 87       	std	Y+8, r25	; 0x08
 1d6:	a9 87       	std	Y+9, r26	; 0x09
 1d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	40 e8       	ldi	r20, 0x80	; 128
 1e0:	5f e3       	ldi	r21, 0x3F	; 63
 1e2:	6f 81       	ldd	r22, Y+7	; 0x07
 1e4:	78 85       	ldd	r23, Y+8	; 0x08
 1e6:	89 85       	ldd	r24, Y+9	; 0x09
 1e8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ea:	74 d5       	rcall	.+2792   	; 0xcd4 <__cmpsf2>
 1ec:	88 23       	and	r24, r24
 1ee:	2c f4       	brge	.+10     	; 0x1fa <GetKey+0x74>
		__ticks = 1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	9c 87       	std	Y+12, r25	; 0x0c
 1f6:	8b 87       	std	Y+11, r24	; 0x0b
 1f8:	3b c0       	rjmp	.+118    	; 0x270 <GetKey+0xea>
	else if (__tmp > 65535)
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	3f ef       	ldi	r19, 0xFF	; 255
 1fe:	4f e7       	ldi	r20, 0x7F	; 127
 200:	57 e4       	ldi	r21, 0x47	; 71
 202:	6f 81       	ldd	r22, Y+7	; 0x07
 204:	78 85       	ldd	r23, Y+8	; 0x08
 206:	89 85       	ldd	r24, Y+9	; 0x09
 208:	9a 85       	ldd	r25, Y+10	; 0x0a
 20a:	e1 d5       	rcall	.+3010   	; 0xdce <__gesf2>
 20c:	18 16       	cp	r1, r24
 20e:	3c f5       	brge	.+78     	; 0x25e <GetKey+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	40 e2       	ldi	r20, 0x20	; 32
 216:	51 e4       	ldi	r21, 0x41	; 65
 218:	6b 81       	ldd	r22, Y+3	; 0x03
 21a:	7c 81       	ldd	r23, Y+4	; 0x04
 21c:	8d 81       	ldd	r24, Y+5	; 0x05
 21e:	9e 81       	ldd	r25, Y+6	; 0x06
 220:	da d5       	rcall	.+2996   	; 0xdd6 <__mulsf3>
 222:	dc 01       	movw	r26, r24
 224:	cb 01       	movw	r24, r22
 226:	bc 01       	movw	r22, r24
 228:	cd 01       	movw	r24, r26
 22a:	58 d5       	rcall	.+2736   	; 0xcdc <__fixunssfsi>
 22c:	dc 01       	movw	r26, r24
 22e:	cb 01       	movw	r24, r22
 230:	9c 87       	std	Y+12, r25	; 0x0c
 232:	8b 87       	std	Y+11, r24	; 0x0b
 234:	0f c0       	rjmp	.+30     	; 0x254 <GetKey+0xce>
 236:	80 e9       	ldi	r24, 0x90	; 144
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	9e 87       	std	Y+14, r25	; 0x0e
 23c:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 23e:	8d 85       	ldd	r24, Y+13	; 0x0d
 240:	9e 85       	ldd	r25, Y+14	; 0x0e
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <GetKey+0xbc>
 246:	9e 87       	std	Y+14, r25	; 0x0e
 248:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24a:	8b 85       	ldd	r24, Y+11	; 0x0b
 24c:	9c 85       	ldd	r25, Y+12	; 0x0c
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	9c 87       	std	Y+12, r25	; 0x0c
 252:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 254:	8b 85       	ldd	r24, Y+11	; 0x0b
 256:	9c 85       	ldd	r25, Y+12	; 0x0c
 258:	89 2b       	or	r24, r25
 25a:	69 f7       	brne	.-38     	; 0x236 <GetKey+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 25c:	13 c0       	rjmp	.+38     	; 0x284 <GetKey+0xfe>
 25e:	6f 81       	ldd	r22, Y+7	; 0x07
 260:	78 85       	ldd	r23, Y+8	; 0x08
 262:	89 85       	ldd	r24, Y+9	; 0x09
 264:	9a 85       	ldd	r25, Y+10	; 0x0a
 266:	3a d5       	rcall	.+2676   	; 0xcdc <__fixunssfsi>
 268:	dc 01       	movw	r26, r24
 26a:	cb 01       	movw	r24, r22
 26c:	9c 87       	std	Y+12, r25	; 0x0c
 26e:	8b 87       	std	Y+11, r24	; 0x0b
 270:	8b 85       	ldd	r24, Y+11	; 0x0b
 272:	9c 85       	ldd	r25, Y+12	; 0x0c
 274:	98 8b       	std	Y+16, r25	; 0x10
 276:	8f 87       	std	Y+15, r24	; 0x0f
 278:	8f 85       	ldd	r24, Y+15	; 0x0f
 27a:	98 89       	ldd	r25, Y+16	; 0x10
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <GetKey+0xf6>
 280:	98 8b       	std	Y+16, r25	; 0x10
 282:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	for (int columnIndex = 0; columnIndex < 4; columnIndex++)
 284:	1a 82       	std	Y+2, r1	; 0x02
 286:	19 82       	std	Y+1, r1	; 0x01
 288:	1a c0       	rjmp	.+52     	; 0x2be <GetKey+0x138>
	{
		// Key '1'
		if ((PINA & (1 << ROW_1)) == 0)
 28a:	80 e2       	ldi	r24, 0x20	; 32
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	fc 01       	movw	r30, r24
 290:	80 81       	ld	r24, Z
 292:	88 2f       	mov	r24, r24
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	80 71       	andi	r24, 0x10	; 16
 298:	99 27       	eor	r25, r25
 29a:	89 2b       	or	r24, r25
 29c:	59 f4       	brne	.+22     	; 0x2b4 <GetKey+0x12e>
		{
			return characterColumns[columnIndex][0];
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	9a 81       	ldd	r25, Y+2	; 0x02
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	80 50       	subi	r24, 0x00	; 0
 2ac:	9e 4f       	sbci	r25, 0xFE	; 254
 2ae:	fc 01       	movw	r30, r24
 2b0:	80 81       	ld	r24, Z
 2b2:	0b c0       	rjmp	.+22     	; 0x2ca <GetKey+0x144>
{
	// Scan Column 1 (1, 4, 7, and *)
	PORTD &= ~(1 << COLUMN_1);
	_delay_ms(1);

	for (int columnIndex = 0; columnIndex < 4; columnIndex++)
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	9a 81       	ldd	r25, Y+2	; 0x02
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	9a 83       	std	Y+2, r25	; 0x02
 2bc:	89 83       	std	Y+1, r24	; 0x01
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	9a 81       	ldd	r25, Y+2	; 0x02
 2c2:	04 97       	sbiw	r24, 0x04	; 4
 2c4:	14 f3       	brlt	.-60     	; 0x28a <GetKey+0x104>
		*/
	}



	return keyPressed;
 2c6:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 2ca:	60 96       	adiw	r28, 0x10	; 16
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <main>:
int xDirection = 1;
int yDirection = 0;


int main(void)
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	ec 97       	sbiw	r28, 0x3c	; 60
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
	initDisplay();
 2f0:	74 d2       	rcall	.+1256   	; 0x7da <initDisplay>
	InitKeypad();
 2f2:	18 df       	rcall	.-464    	; 0x124 <InitKeypad>
 2f4:	1a 82       	std	Y+2, r1	; 0x02

	for (int x = 0; x < 504; x++)
 2f6:	19 82       	std	Y+1, r1	; 0x01
 2f8:	0b c0       	rjmp	.+22     	; 0x310 <main+0x34>
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
	{
		worldRender[x] = 0x00;
 2fc:	9a 81       	ldd	r25, Y+2	; 0x02
 2fe:	81 50       	subi	r24, 0x01	; 1
 300:	9a 4f       	sbci	r25, 0xFA	; 250
 302:	fc 01       	movw	r30, r24
 304:	10 82       	st	Z, r1
 306:	89 81       	ldd	r24, Y+1	; 0x01
int main(void)
{
	initDisplay();
	InitKeypad();

	for (int x = 0; x < 504; x++)
 308:	9a 81       	ldd	r25, Y+2	; 0x02
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	9a 83       	std	Y+2, r25	; 0x02
 30e:	89 83       	std	Y+1, r24	; 0x01
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	9a 81       	ldd	r25, Y+2	; 0x02
 314:	88 3f       	cpi	r24, 0xF8	; 248
 316:	91 40       	sbci	r25, 0x01	; 1
 318:	84 f3       	brlt	.-32     	; 0x2fa <main+0x1e>
 31a:	1e 8a       	std	Y+22, r1	; 0x16
	{
		worldRender[x] = 0x00;
	}
	
	struct SnakeBodyPart head;
	head.x = 0;
 31c:	1d 8a       	std	Y+21, r1	; 0x15
 31e:	18 8e       	std	Y+24, r1	; 0x18
	head.y = 0;
 320:	1f 8a       	std	Y+23, r1	; 0x17
 322:	1a 8e       	std	Y+26, r1	; 0x1a
	head.prevX = 0;
 324:	19 8e       	std	Y+25, r1	; 0x19
 326:	1c 8e       	std	Y+28, r1	; 0x1c
	head.prevY = 0;
 328:	1b 8e       	std	Y+27, r1	; 0x1b
 32a:	1e 8e       	std	Y+30, r1	; 0x1e
	head.headPointer = 0;
 32c:	1d 8e       	std	Y+29, r1	; 0x1d
 32e:	8a e0       	ldi	r24, 0x0A	; 10
	snake[0] = head;
 330:	fe 01       	movw	r30, r28
 332:	75 96       	adiw	r30, 0x15	; 21
 334:	a7 e1       	ldi	r26, 0x17	; 23
 336:	b2 e0       	ldi	r27, 0x02	; 2
 338:	01 90       	ld	r0, Z+
 33a:	0d 92       	st	X+, r0
 33c:	8a 95       	dec	r24
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x5c>
 340:	18 a2       	std	Y+32, r1	; 0x20

	struct SnakeBodyPart middle;
	middle.x = 0;
 342:	1f 8e       	std	Y+31, r1	; 0x1f
 344:	1a a2       	std	Y+34, r1	; 0x22
	middle.y = 0;
 346:	19 a2       	std	Y+33, r1	; 0x21
 348:	87 e1       	ldi	r24, 0x17	; 23
	middle.headPointer = &snake[0];
 34a:	92 e0       	ldi	r25, 0x02	; 2
 34c:	98 a7       	std	Y+40, r25	; 0x28
 34e:	8f a3       	std	Y+39, r24	; 0x27
 350:	8a e0       	ldi	r24, 0x0A	; 10
	snake[1] = middle;
 352:	fe 01       	movw	r30, r28
 354:	7f 96       	adiw	r30, 0x1f	; 31
 356:	a1 e2       	ldi	r26, 0x21	; 33
 358:	b2 e0       	ldi	r27, 0x02	; 2
 35a:	01 90       	ld	r0, Z+
 35c:	0d 92       	st	X+, r0
 35e:	8a 95       	dec	r24
 360:	e1 f7       	brne	.-8      	; 0x35a <main+0x7e>
 362:	1a a6       	std	Y+42, r1	; 0x2a

	struct SnakeBodyPart middle1;
	middle1.x = 0;
 364:	19 a6       	std	Y+41, r1	; 0x29
 366:	1c a6       	std	Y+44, r1	; 0x2c
	middle1.y = 0;
 368:	1b a6       	std	Y+43, r1	; 0x2b
 36a:	1e a6       	std	Y+46, r1	; 0x2e
	middle1.prevX = 0;
 36c:	1d a6       	std	Y+45, r1	; 0x2d
 36e:	18 aa       	std	Y+48, r1	; 0x30
	middle1.prevY = 0;
 370:	1f a6       	std	Y+47, r1	; 0x2f
 372:	81 e2       	ldi	r24, 0x21	; 33
	middle1.headPointer = &snake[1];
 374:	92 e0       	ldi	r25, 0x02	; 2
 376:	9a ab       	std	Y+50, r25	; 0x32
 378:	89 ab       	std	Y+49, r24	; 0x31
 37a:	8a e0       	ldi	r24, 0x0A	; 10
	snake[2] = middle1;
 37c:	fe 01       	movw	r30, r28
 37e:	b9 96       	adiw	r30, 0x29	; 41
 380:	ab e2       	ldi	r26, 0x2B	; 43
 382:	b2 e0       	ldi	r27, 0x02	; 2
 384:	01 90       	ld	r0, Z+
 386:	0d 92       	st	X+, r0
 388:	8a 95       	dec	r24
 38a:	e1 f7       	brne	.-8      	; 0x384 <main+0xa8>
 38c:	1c aa       	std	Y+52, r1	; 0x34
	
	struct SnakeBodyPart end;
	end.x = 0;
 38e:	1b aa       	std	Y+51, r1	; 0x33
 390:	1e aa       	std	Y+54, r1	; 0x36
	end.y = 0;
 392:	1d aa       	std	Y+53, r1	; 0x35
 394:	8b e2       	ldi	r24, 0x2B	; 43
	end.headPointer = &snake[2];
 396:	92 e0       	ldi	r25, 0x02	; 2
 398:	9c af       	std	Y+60, r25	; 0x3c
 39a:	8b af       	std	Y+59, r24	; 0x3b
 39c:	8a e0       	ldi	r24, 0x0A	; 10
	snake[3] = end;
 39e:	fe 01       	movw	r30, r28
 3a0:	f3 96       	adiw	r30, 0x33	; 51
 3a2:	a5 e3       	ldi	r26, 0x35	; 53
 3a4:	b2 e0       	ldi	r27, 0x02	; 2
 3a6:	01 90       	ld	r0, Z+
 3a8:	0d 92       	st	X+, r0
 3aa:	8a 95       	dec	r24
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <main+0xca>

    while (1) 
	{
		clearDisplay();
 3ae:	11 d3       	rcall	.+1570   	; 0x9d2 <clearDisplay>
 3b0:	1c 82       	std	Y+4, r1	; 0x04
		
		for (int bodyPartIndex = 0; bodyPartIndex < snakeBodyLength; bodyPartIndex++)
 3b2:	1b 82       	std	Y+3, r1	; 0x03
 3b4:	2f c1       	rjmp	.+606    	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 3b6:	8b 81       	ldd	r24, Y+3	; 0x03
		{
			// Check for head
			if (snake[bodyPartIndex].headPointer == 0)
 3b8:	9c 81       	ldd	r25, Y+4	; 0x04
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	9c 01       	movw	r18, r24
 3c0:	22 0f       	add	r18, r18
 3c2:	33 1f       	adc	r19, r19
 3c4:	22 0f       	add	r18, r18
 3c6:	33 1f       	adc	r19, r19
 3c8:	82 0f       	add	r24, r18
 3ca:	93 1f       	adc	r25, r19
 3cc:	81 5e       	subi	r24, 0xE1	; 225
 3ce:	9d 4f       	sbci	r25, 0xFD	; 253
 3d0:	fc 01       	movw	r30, r24
 3d2:	80 81       	ld	r24, Z
 3d4:	91 81       	ldd	r25, Z+1	; 0x01
 3d6:	89 2b       	or	r24, r25
 3d8:	09 f0       	breq	.+2      	; 0x3dc <main+0x100>
 3da:	91 c0       	rjmp	.+290    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 3dc:	8b 81       	ldd	r24, Y+3	; 0x03
			{
				snake[bodyPartIndex].prevX = snake[bodyPartIndex].x;
 3de:	9c 81       	ldd	r25, Y+4	; 0x04
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	9c 01       	movw	r18, r24
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	22 0f       	add	r18, r18
 3ec:	33 1f       	adc	r19, r19
 3ee:	82 0f       	add	r24, r18
 3f0:	93 1f       	adc	r25, r19
 3f2:	89 5e       	subi	r24, 0xE9	; 233
 3f4:	9d 4f       	sbci	r25, 0xFD	; 253
 3f6:	fc 01       	movw	r30, r24
 3f8:	20 81       	ld	r18, Z
 3fa:	31 81       	ldd	r19, Z+1	; 0x01
 3fc:	8b 81       	ldd	r24, Y+3	; 0x03
 3fe:	9c 81       	ldd	r25, Y+4	; 0x04
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	ac 01       	movw	r20, r24
 406:	44 0f       	add	r20, r20
 408:	55 1f       	adc	r21, r21
 40a:	44 0f       	add	r20, r20
 40c:	55 1f       	adc	r21, r21
 40e:	84 0f       	add	r24, r20
 410:	95 1f       	adc	r25, r21
 412:	85 5e       	subi	r24, 0xE5	; 229
 414:	9d 4f       	sbci	r25, 0xFD	; 253
 416:	fc 01       	movw	r30, r24
 418:	31 83       	std	Z+1, r19	; 0x01
 41a:	20 83       	st	Z, r18
 41c:	8b 81       	ldd	r24, Y+3	; 0x03
				snake[bodyPartIndex].prevY = snake[bodyPartIndex].y;
 41e:	9c 81       	ldd	r25, Y+4	; 0x04
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	9c 01       	movw	r18, r24
 426:	22 0f       	add	r18, r18
 428:	33 1f       	adc	r19, r19
 42a:	22 0f       	add	r18, r18
 42c:	33 1f       	adc	r19, r19
 42e:	82 0f       	add	r24, r18
 430:	93 1f       	adc	r25, r19
 432:	87 5e       	subi	r24, 0xE7	; 231
 434:	9d 4f       	sbci	r25, 0xFD	; 253
 436:	fc 01       	movw	r30, r24
 438:	20 81       	ld	r18, Z
 43a:	31 81       	ldd	r19, Z+1	; 0x01
 43c:	8b 81       	ldd	r24, Y+3	; 0x03
 43e:	9c 81       	ldd	r25, Y+4	; 0x04
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	ac 01       	movw	r20, r24
 446:	44 0f       	add	r20, r20
 448:	55 1f       	adc	r21, r21
 44a:	44 0f       	add	r20, r20
 44c:	55 1f       	adc	r21, r21
 44e:	84 0f       	add	r24, r20
 450:	95 1f       	adc	r25, r21
 452:	83 5e       	subi	r24, 0xE3	; 227
 454:	9d 4f       	sbci	r25, 0xFD	; 253
 456:	fc 01       	movw	r30, r24
 458:	31 83       	std	Z+1, r19	; 0x01
 45a:	20 83       	st	Z, r18
 45c:	8b 81       	ldd	r24, Y+3	; 0x03
				snake[bodyPartIndex].x += 2 * xDirection;
 45e:	9c 81       	ldd	r25, Y+4	; 0x04
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	9c 01       	movw	r18, r24
 466:	22 0f       	add	r18, r18
 468:	33 1f       	adc	r19, r19
 46a:	22 0f       	add	r18, r18
 46c:	33 1f       	adc	r19, r19
 46e:	82 0f       	add	r24, r18
 470:	93 1f       	adc	r25, r19
 472:	89 5e       	subi	r24, 0xE9	; 233
 474:	9d 4f       	sbci	r25, 0xFD	; 253
 476:	fc 01       	movw	r30, r24
 478:	20 81       	ld	r18, Z
 47a:	31 81       	ldd	r19, Z+1	; 0x01
 47c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <xDirection>
 480:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <xDirection+0x1>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	28 0f       	add	r18, r24
 48a:	39 1f       	adc	r19, r25
 48c:	8b 81       	ldd	r24, Y+3	; 0x03
 48e:	9c 81       	ldd	r25, Y+4	; 0x04
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	ac 01       	movw	r20, r24
 496:	44 0f       	add	r20, r20
 498:	55 1f       	adc	r21, r21
 49a:	44 0f       	add	r20, r20
 49c:	55 1f       	adc	r21, r21
 49e:	84 0f       	add	r24, r20
 4a0:	95 1f       	adc	r25, r21
 4a2:	89 5e       	subi	r24, 0xE9	; 233
 4a4:	9d 4f       	sbci	r25, 0xFD	; 253
 4a6:	fc 01       	movw	r30, r24
 4a8:	31 83       	std	Z+1, r19	; 0x01
 4aa:	20 83       	st	Z, r18
 4ac:	8b 81       	ldd	r24, Y+3	; 0x03
				snake[bodyPartIndex].y += 2 * yDirection;
 4ae:	9c 81       	ldd	r25, Y+4	; 0x04
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	9c 01       	movw	r18, r24
 4b6:	22 0f       	add	r18, r18
 4b8:	33 1f       	adc	r19, r19
 4ba:	22 0f       	add	r18, r18
 4bc:	33 1f       	adc	r19, r19
 4be:	82 0f       	add	r24, r18
 4c0:	93 1f       	adc	r25, r19
 4c2:	87 5e       	subi	r24, 0xE7	; 231
 4c4:	9d 4f       	sbci	r25, 0xFD	; 253
 4c6:	fc 01       	movw	r30, r24
 4c8:	20 81       	ld	r18, Z
 4ca:	31 81       	ldd	r19, Z+1	; 0x01
 4cc:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <yDirection>
 4d0:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <yDirection+0x1>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	28 0f       	add	r18, r24
 4da:	39 1f       	adc	r19, r25
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	9c 81       	ldd	r25, Y+4	; 0x04
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	ac 01       	movw	r20, r24
 4e6:	44 0f       	add	r20, r20
 4e8:	55 1f       	adc	r21, r21
 4ea:	44 0f       	add	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	84 0f       	add	r24, r20
 4f0:	95 1f       	adc	r25, r21
 4f2:	87 5e       	subi	r24, 0xE7	; 231
 4f4:	9d 4f       	sbci	r25, 0xFD	; 253
 4f6:	fc 01       	movw	r30, r24
 4f8:	31 83       	std	Z+1, r19	; 0x01
 4fa:	20 83       	st	Z, r18
 4fc:	86 c0       	rjmp	.+268    	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
 4fe:	8b 81       	ldd	r24, Y+3	; 0x03
			}
			else
			{
				snake[bodyPartIndex].prevX = snake[bodyPartIndex].x;
 500:	9c 81       	ldd	r25, Y+4	; 0x04
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	9c 01       	movw	r18, r24
 508:	22 0f       	add	r18, r18
 50a:	33 1f       	adc	r19, r19
 50c:	22 0f       	add	r18, r18
 50e:	33 1f       	adc	r19, r19
 510:	82 0f       	add	r24, r18
 512:	93 1f       	adc	r25, r19
 514:	89 5e       	subi	r24, 0xE9	; 233
 516:	9d 4f       	sbci	r25, 0xFD	; 253
 518:	fc 01       	movw	r30, r24
 51a:	20 81       	ld	r18, Z
 51c:	31 81       	ldd	r19, Z+1	; 0x01
 51e:	8b 81       	ldd	r24, Y+3	; 0x03
 520:	9c 81       	ldd	r25, Y+4	; 0x04
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	ac 01       	movw	r20, r24
 528:	44 0f       	add	r20, r20
 52a:	55 1f       	adc	r21, r21
 52c:	44 0f       	add	r20, r20
 52e:	55 1f       	adc	r21, r21
 530:	84 0f       	add	r24, r20
 532:	95 1f       	adc	r25, r21
 534:	85 5e       	subi	r24, 0xE5	; 229
 536:	9d 4f       	sbci	r25, 0xFD	; 253
 538:	fc 01       	movw	r30, r24
 53a:	31 83       	std	Z+1, r19	; 0x01
 53c:	20 83       	st	Z, r18
 53e:	8b 81       	ldd	r24, Y+3	; 0x03
				snake[bodyPartIndex].prevY = snake[bodyPartIndex].y;
 540:	9c 81       	ldd	r25, Y+4	; 0x04
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	9c 01       	movw	r18, r24
 548:	22 0f       	add	r18, r18
 54a:	33 1f       	adc	r19, r19
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	82 0f       	add	r24, r18
 552:	93 1f       	adc	r25, r19
 554:	87 5e       	subi	r24, 0xE7	; 231
 556:	9d 4f       	sbci	r25, 0xFD	; 253
 558:	fc 01       	movw	r30, r24
 55a:	20 81       	ld	r18, Z
 55c:	31 81       	ldd	r19, Z+1	; 0x01
 55e:	8b 81       	ldd	r24, Y+3	; 0x03
 560:	9c 81       	ldd	r25, Y+4	; 0x04
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	ac 01       	movw	r20, r24
 568:	44 0f       	add	r20, r20
 56a:	55 1f       	adc	r21, r21
 56c:	44 0f       	add	r20, r20
 56e:	55 1f       	adc	r21, r21
 570:	84 0f       	add	r24, r20
 572:	95 1f       	adc	r25, r21
 574:	83 5e       	subi	r24, 0xE3	; 227
 576:	9d 4f       	sbci	r25, 0xFD	; 253
 578:	fc 01       	movw	r30, r24
 57a:	31 83       	std	Z+1, r19	; 0x01
 57c:	20 83       	st	Z, r18
 57e:	8b 81       	ldd	r24, Y+3	; 0x03
				snake[bodyPartIndex].x = snake[bodyPartIndex].headPointer->prevX;
 580:	9c 81       	ldd	r25, Y+4	; 0x04
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	9c 01       	movw	r18, r24
 588:	22 0f       	add	r18, r18
 58a:	33 1f       	adc	r19, r19
 58c:	22 0f       	add	r18, r18
 58e:	33 1f       	adc	r19, r19
 590:	82 0f       	add	r24, r18
 592:	93 1f       	adc	r25, r19
 594:	81 5e       	subi	r24, 0xE1	; 225
 596:	9d 4f       	sbci	r25, 0xFD	; 253
 598:	fc 01       	movw	r30, r24
 59a:	80 81       	ld	r24, Z
 59c:	91 81       	ldd	r25, Z+1	; 0x01
 59e:	fc 01       	movw	r30, r24
 5a0:	24 81       	ldd	r18, Z+4	; 0x04
 5a2:	35 81       	ldd	r19, Z+5	; 0x05
 5a4:	8b 81       	ldd	r24, Y+3	; 0x03
 5a6:	9c 81       	ldd	r25, Y+4	; 0x04
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	ac 01       	movw	r20, r24
 5ae:	44 0f       	add	r20, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	44 0f       	add	r20, r20
 5b4:	55 1f       	adc	r21, r21
 5b6:	84 0f       	add	r24, r20
 5b8:	95 1f       	adc	r25, r21
 5ba:	89 5e       	subi	r24, 0xE9	; 233
 5bc:	9d 4f       	sbci	r25, 0xFD	; 253
 5be:	fc 01       	movw	r30, r24
 5c0:	31 83       	std	Z+1, r19	; 0x01
 5c2:	20 83       	st	Z, r18
 5c4:	8b 81       	ldd	r24, Y+3	; 0x03
				snake[bodyPartIndex].y = snake[bodyPartIndex].headPointer->prevY;
 5c6:	9c 81       	ldd	r25, Y+4	; 0x04
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	9c 01       	movw	r18, r24
 5ce:	22 0f       	add	r18, r18
 5d0:	33 1f       	adc	r19, r19
 5d2:	22 0f       	add	r18, r18
 5d4:	33 1f       	adc	r19, r19
 5d6:	82 0f       	add	r24, r18
 5d8:	93 1f       	adc	r25, r19
 5da:	81 5e       	subi	r24, 0xE1	; 225
 5dc:	9d 4f       	sbci	r25, 0xFD	; 253
 5de:	fc 01       	movw	r30, r24
 5e0:	80 81       	ld	r24, Z
 5e2:	91 81       	ldd	r25, Z+1	; 0x01
 5e4:	fc 01       	movw	r30, r24
 5e6:	26 81       	ldd	r18, Z+6	; 0x06
 5e8:	37 81       	ldd	r19, Z+7	; 0x07
 5ea:	8b 81       	ldd	r24, Y+3	; 0x03
 5ec:	9c 81       	ldd	r25, Y+4	; 0x04
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	ac 01       	movw	r20, r24
 5f4:	44 0f       	add	r20, r20
 5f6:	55 1f       	adc	r21, r21
 5f8:	44 0f       	add	r20, r20
 5fa:	55 1f       	adc	r21, r21
 5fc:	84 0f       	add	r24, r20
 5fe:	95 1f       	adc	r25, r21
 600:	87 5e       	subi	r24, 0xE7	; 231
 602:	9d 4f       	sbci	r25, 0xFD	; 253
 604:	fc 01       	movw	r30, r24
 606:	31 83       	std	Z+1, r19	; 0x01
 608:	20 83       	st	Z, r18
 60a:	8b 81       	ldd	r24, Y+3	; 0x03

    while (1) 
	{
		clearDisplay();
		
		for (int bodyPartIndex = 0; bodyPartIndex < snakeBodyLength; bodyPartIndex++)
 60c:	9c 81       	ldd	r25, Y+4	; 0x04
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	9c 83       	std	Y+4, r25	; 0x04
 612:	8b 83       	std	Y+3, r24	; 0x03
 614:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <snakeBodyLength>
 618:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <snakeBodyLength+0x1>
 61c:	2b 81       	ldd	r18, Y+3	; 0x03
 61e:	3c 81       	ldd	r19, Y+4	; 0x04
 620:	28 17       	cp	r18, r24
 622:	39 07       	cpc	r19, r25
 624:	0c f4       	brge	.+2      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 626:	c7 ce       	rjmp	.-626    	; 0x3b6 <main+0xda>
				snake[bodyPartIndex].x = snake[bodyPartIndex].headPointer->prevX;
				snake[bodyPartIndex].y = snake[bodyPartIndex].headPointer->prevY;
			}
		}

		if (GetKey() == '1')
 628:	ae dd       	rcall	.-1188   	; 0x186 <GetKey>
 62a:	81 33       	cpi	r24, 0x31	; 49
 62c:	51 f4       	brne	.+20     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 62e:	8f ef       	ldi	r24, 0xFF	; 255
		{
			yDirection = -1;
 630:	9f ef       	ldi	r25, 0xFF	; 255
 632:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <yDirection+0x1>
 636:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <yDirection>
 63a:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <xDirection+0x1>
			xDirection = 0;
 63e:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <xDirection>
		}

		if (GetKey() == '2')
 642:	a1 dd       	rcall	.-1214   	; 0x186 <GetKey>
 644:	82 33       	cpi	r24, 0x32	; 50
 646:	51 f4       	brne	.+20     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 648:	81 e0       	ldi	r24, 0x01	; 1
		{
			yDirection = 1;
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <yDirection+0x1>
 650:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <yDirection>
			xDirection = 0;
 654:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <xDirection+0x1>
 658:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <xDirection>
		}

		if (GetKey() == '3')
 65c:	94 dd       	rcall	.-1240   	; 0x186 <GetKey>
 65e:	83 33       	cpi	r24, 0x33	; 51
 660:	51 f4       	brne	.+20     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 662:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <yDirection+0x1>
		{
			yDirection = 0;
 666:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <yDirection>
 66a:	81 e0       	ldi	r24, 0x01	; 1
			xDirection = 1;
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <xDirection+0x1>
 672:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <xDirection>
		}

		if (GetKey() == 'A')
 676:	87 dd       	rcall	.-1266   	; 0x186 <GetKey>
 678:	81 34       	cpi	r24, 0x41	; 65
 67a:	51 f4       	brne	.+20     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 67c:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <yDirection+0x1>
		{
			yDirection = 0;
 680:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <yDirection>
 684:	8f ef       	ldi	r24, 0xFF	; 255
			xDirection = -1;
 686:	9f ef       	ldi	r25, 0xFF	; 255
 688:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <xDirection+0x1>
 68c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <xDirection>
 690:	1e 82       	std	Y+6, r1	; 0x06
			yDirection = 0;
			xDirection = 1;
		}
		*/

		for(int x = 0; x < snakeBodyLength; x++)
 692:	1d 82       	std	Y+5, r1	; 0x05
 694:	29 c0       	rjmp	.+82     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
 696:	8d 81       	ldd	r24, Y+5	; 0x05
		{
			DrawDot(snake[x].x, snake[x].y, worldRender);
 698:	9e 81       	ldd	r25, Y+6	; 0x06
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	9c 01       	movw	r18, r24
 6a0:	22 0f       	add	r18, r18
 6a2:	33 1f       	adc	r19, r19
 6a4:	22 0f       	add	r18, r18
 6a6:	33 1f       	adc	r19, r19
 6a8:	82 0f       	add	r24, r18
 6aa:	93 1f       	adc	r25, r19
 6ac:	87 5e       	subi	r24, 0xE7	; 231
 6ae:	9d 4f       	sbci	r25, 0xFD	; 253
 6b0:	fc 01       	movw	r30, r24
 6b2:	80 81       	ld	r24, Z
 6b4:	91 81       	ldd	r25, Z+1	; 0x01
 6b6:	68 2f       	mov	r22, r24
 6b8:	8d 81       	ldd	r24, Y+5	; 0x05
 6ba:	9e 81       	ldd	r25, Y+6	; 0x06
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	9c 01       	movw	r18, r24
 6c2:	22 0f       	add	r18, r18
 6c4:	33 1f       	adc	r19, r19
 6c6:	22 0f       	add	r18, r18
 6c8:	33 1f       	adc	r19, r19
 6ca:	82 0f       	add	r24, r18
 6cc:	93 1f       	adc	r25, r19
 6ce:	89 5e       	subi	r24, 0xE9	; 233
 6d0:	9d 4f       	sbci	r25, 0xFD	; 253
 6d2:	fc 01       	movw	r30, r24
 6d4:	80 81       	ld	r24, Z
 6d6:	91 81       	ldd	r25, Z+1	; 0x01
 6d8:	4f ef       	ldi	r20, 0xFF	; 255
 6da:	55 e0       	ldi	r21, 0x05	; 5
 6dc:	88 d2       	rcall	.+1296   	; 0xbee <DrawDot>
 6de:	8d 81       	ldd	r24, Y+5	; 0x05
			yDirection = 0;
			xDirection = 1;
		}
		*/

		for(int x = 0; x < snakeBodyLength; x++)
 6e0:	9e 81       	ldd	r25, Y+6	; 0x06
 6e2:	01 96       	adiw	r24, 0x01	; 1
 6e4:	9e 83       	std	Y+6, r25	; 0x06
 6e6:	8d 83       	std	Y+5, r24	; 0x05
 6e8:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <snakeBodyLength>
 6ec:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <snakeBodyLength+0x1>
 6f0:	2d 81       	ldd	r18, Y+5	; 0x05
 6f2:	3e 81       	ldd	r19, Y+6	; 0x06
 6f4:	28 17       	cp	r18, r24
 6f6:	39 07       	cpc	r19, r25
 6f8:	74 f2       	brlt	.-100    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
		{
			DrawDot(snake[x].x, snake[x].y, worldRender);
		}
		
		RenderWorld(worldRender);
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	95 e0       	ldi	r25, 0x05	; 5
 6fe:	ad d2       	rcall	.+1370   	; 0xc5a <RenderWorld>
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	a8 ec       	ldi	r26, 0xC8	; 200
 706:	b2 e4       	ldi	r27, 0x42	; 66
 708:	8f 83       	std	Y+7, r24	; 0x07
 70a:	98 87       	std	Y+8, r25	; 0x08
 70c:	a9 87       	std	Y+9, r26	; 0x09
 70e:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	4a e7       	ldi	r20, 0x7A	; 122
 716:	55 e4       	ldi	r21, 0x45	; 69
 718:	6f 81       	ldd	r22, Y+7	; 0x07
 71a:	78 85       	ldd	r23, Y+8	; 0x08
 71c:	89 85       	ldd	r24, Y+9	; 0x09
 71e:	9a 85       	ldd	r25, Y+10	; 0x0a
 720:	5a d3       	rcall	.+1716   	; 0xdd6 <__mulsf3>
 722:	dc 01       	movw	r26, r24
 724:	cb 01       	movw	r24, r22
 726:	8b 87       	std	Y+11, r24	; 0x0b
 728:	9c 87       	std	Y+12, r25	; 0x0c
 72a:	ad 87       	std	Y+13, r26	; 0x0d
 72c:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
 72e:	20 e0       	ldi	r18, 0x00	; 0
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	40 e8       	ldi	r20, 0x80	; 128
 734:	5f e3       	ldi	r21, 0x3F	; 63
 736:	6b 85       	ldd	r22, Y+11	; 0x0b
 738:	7c 85       	ldd	r23, Y+12	; 0x0c
 73a:	8d 85       	ldd	r24, Y+13	; 0x0d
 73c:	9e 85       	ldd	r25, Y+14	; 0x0e
 73e:	ca d2       	rcall	.+1428   	; 0xcd4 <__cmpsf2>
 740:	88 23       	and	r24, r24
 742:	2c f4       	brge	.+10     	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 744:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	98 8b       	std	Y+16, r25	; 0x10
 74a:	8f 87       	std	Y+15, r24	; 0x0f
 74c:	3b c0       	rjmp	.+118    	; 0x7c4 <__LOCK_REGION_LENGTH__+0x3c4>
	else if (__tmp > 65535)
 74e:	20 e0       	ldi	r18, 0x00	; 0
 750:	3f ef       	ldi	r19, 0xFF	; 255
 752:	4f e7       	ldi	r20, 0x7F	; 127
 754:	57 e4       	ldi	r21, 0x47	; 71
 756:	6b 85       	ldd	r22, Y+11	; 0x0b
 758:	7c 85       	ldd	r23, Y+12	; 0x0c
 75a:	8d 85       	ldd	r24, Y+13	; 0x0d
 75c:	9e 85       	ldd	r25, Y+14	; 0x0e
 75e:	37 d3       	rcall	.+1646   	; 0xdce <__gesf2>
 760:	18 16       	cp	r1, r24
 762:	3c f5       	brge	.+78     	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 764:	20 e0       	ldi	r18, 0x00	; 0
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	40 e2       	ldi	r20, 0x20	; 32
 76a:	51 e4       	ldi	r21, 0x41	; 65
 76c:	6f 81       	ldd	r22, Y+7	; 0x07
 76e:	78 85       	ldd	r23, Y+8	; 0x08
 770:	89 85       	ldd	r24, Y+9	; 0x09
 772:	9a 85       	ldd	r25, Y+10	; 0x0a
 774:	30 d3       	rcall	.+1632   	; 0xdd6 <__mulsf3>
 776:	dc 01       	movw	r26, r24
 778:	cb 01       	movw	r24, r22
 77a:	bc 01       	movw	r22, r24
 77c:	cd 01       	movw	r24, r26
 77e:	ae d2       	rcall	.+1372   	; 0xcdc <__fixunssfsi>
 780:	dc 01       	movw	r26, r24
 782:	cb 01       	movw	r24, r22
 784:	98 8b       	std	Y+16, r25	; 0x10
 786:	8f 87       	std	Y+15, r24	; 0x0f
 788:	0f c0       	rjmp	.+30     	; 0x7a8 <__LOCK_REGION_LENGTH__+0x3a8>
 78a:	80 e9       	ldi	r24, 0x90	; 144
 78c:	91 e0       	ldi	r25, 0x01	; 1
 78e:	9a 8b       	std	Y+18, r25	; 0x12
 790:	89 8b       	std	Y+17, r24	; 0x11
 792:	89 89       	ldd	r24, Y+17	; 0x11
 794:	9a 89       	ldd	r25, Y+18	; 0x12
 796:	01 97       	sbiw	r24, 0x01	; 1
 798:	f1 f7       	brne	.-4      	; 0x796 <__LOCK_REGION_LENGTH__+0x396>
 79a:	9a 8b       	std	Y+18, r25	; 0x12
 79c:	89 8b       	std	Y+17, r24	; 0x11
 79e:	8f 85       	ldd	r24, Y+15	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7a0:	98 89       	ldd	r25, Y+16	; 0x10
 7a2:	01 97       	sbiw	r24, 0x01	; 1
 7a4:	98 8b       	std	Y+16, r25	; 0x10
 7a6:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7a8:	8f 85       	ldd	r24, Y+15	; 0x0f
 7aa:	98 89       	ldd	r25, Y+16	; 0x10
 7ac:	89 2b       	or	r24, r25
 7ae:	69 f7       	brne	.-38     	; 0x78a <__LOCK_REGION_LENGTH__+0x38a>
 7b0:	13 c0       	rjmp	.+38     	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 7b2:	6b 85       	ldd	r22, Y+11	; 0x0b
 7b4:	7c 85       	ldd	r23, Y+12	; 0x0c
 7b6:	8d 85       	ldd	r24, Y+13	; 0x0d
 7b8:	9e 85       	ldd	r25, Y+14	; 0x0e
 7ba:	90 d2       	rcall	.+1312   	; 0xcdc <__fixunssfsi>
 7bc:	dc 01       	movw	r26, r24
 7be:	cb 01       	movw	r24, r22
 7c0:	98 8b       	std	Y+16, r25	; 0x10
 7c2:	8f 87       	std	Y+15, r24	; 0x0f
 7c4:	8f 85       	ldd	r24, Y+15	; 0x0f
 7c6:	98 89       	ldd	r25, Y+16	; 0x10
 7c8:	9c 8b       	std	Y+20, r25	; 0x14
 7ca:	8b 8b       	std	Y+19, r24	; 0x13
 7cc:	8b 89       	ldd	r24, Y+19	; 0x13
 7ce:	9c 89       	ldd	r25, Y+20	; 0x14
 7d0:	01 97       	sbiw	r24, 0x01	; 1
 7d2:	f1 f7       	brne	.-4      	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
 7d4:	9c 8b       	std	Y+20, r25	; 0x14
 7d6:	8b 8b       	std	Y+19, r24	; 0x13
 7d8:	ea cd       	rjmp	.-1068   	; 0x3ae <main+0xd2>

000007da <initDisplay>:
#define RST_BIT 0 // PA0
#define DC_BIT 1 // PA1
#define LIGHT_BIT 2 // PA2

void initDisplay()
{
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	cd b7       	in	r28, 0x3d	; 61
 7e0:	de b7       	in	r29, 0x3e	; 62
	SPI_MasterInit();
 7e2:	12 d1       	rcall	.+548    	; 0xa08 <SPI_MasterInit>
	
	// Set port to output
	DDRA = 0xFF;
 7e4:	81 e2       	ldi	r24, 0x21	; 33
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	2f ef       	ldi	r18, 0xFF	; 255
 7ea:	fc 01       	movw	r30, r24
 7ec:	20 83       	st	Z, r18
	
	// Set bits to high (active low)
	PORTA |= (1 << RST_BIT);
 7ee:	82 e2       	ldi	r24, 0x22	; 34
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	22 e2       	ldi	r18, 0x22	; 34
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	f9 01       	movw	r30, r18
 7f8:	20 81       	ld	r18, Z
 7fa:	21 60       	ori	r18, 0x01	; 1
 7fc:	fc 01       	movw	r30, r24
 7fe:	20 83       	st	Z, r18
	PORTA |= (1 << DC_BIT);
 800:	82 e2       	ldi	r24, 0x22	; 34
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	22 e2       	ldi	r18, 0x22	; 34
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	f9 01       	movw	r30, r18
 80a:	20 81       	ld	r18, Z
 80c:	22 60       	ori	r18, 0x02	; 2
 80e:	fc 01       	movw	r30, r24
 810:	20 83       	st	Z, r18

	// Turn on light
	PORTA &= ~(1 << LIGHT_BIT);
 812:	82 e2       	ldi	r24, 0x22	; 34
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	22 e2       	ldi	r18, 0x22	; 34
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	f9 01       	movw	r30, r18
 81c:	20 81       	ld	r18, Z
 81e:	2b 7f       	andi	r18, 0xFB	; 251
 820:	fc 01       	movw	r30, r24
	
	// Required display reset
	// This has to be done before doing
	// Anything else with the display
	resetDisplay();
 822:	20 83       	st	Z, r18
	
	// Use extended instruction set
	sendIntruction(0x21);
 824:	0f d0       	rcall	.+30     	; 0x844 <resetDisplay>
 826:	81 e2       	ldi	r24, 0x21	; 33

	// Here we control operation voltage of the LCD
	// We set it to 6V (the minimum allowed voltage range)
	// If you do not set a VOP value, the internal voltage generator
	// Will be switched off, and thus the display won't function.
	sendIntruction(0xC0);
 828:	9f d0       	rcall	.+318    	; 0x968 <sendIntruction>
 82a:	80 ec       	ldi	r24, 0xC0	; 192

	// We set the bias voltage levels
	// The bias value is taken after the
	// optimum bias value described in official
	// data sheet.
	sendIntruction(0x13);
 82c:	9d d0       	rcall	.+314    	; 0x968 <sendIntruction>
 82e:	83 e1       	ldi	r24, 0x13	; 19

	// Use basic instruction set
	sendIntruction(0x20);
 830:	9b d0       	rcall	.+310    	; 0x968 <sendIntruction>
 832:	80 e2       	ldi	r24, 0x20	; 32
 834:	99 d0       	rcall	.+306    	; 0x968 <sendIntruction>

	// Set display mode normal
	sendIntruction(0b00001100);
 836:	8c e0       	ldi	r24, 0x0C	; 12
 838:	97 d0       	rcall	.+302    	; 0x968 <sendIntruction>
 83a:	cb d0       	rcall	.+406    	; 0x9d2 <clearDisplay>
	

	// Clear the display to make sure
	// No pixels are alive on startup
	clearDisplay();
 83c:	00 00       	nop
 83e:	df 91       	pop	r29
}
 840:	cf 91       	pop	r28
 842:	08 95       	ret

00000844 <resetDisplay>:
 844:	cf 93       	push	r28
 846:	df 93       	push	r29


void resetDisplay()
{
 848:	cd b7       	in	r28, 0x3d	; 61
 84a:	de b7       	in	r29, 0x3e	; 62
 84c:	2e 97       	sbiw	r28, 0x0e	; 14
 84e:	0f b6       	in	r0, 0x3f	; 63
 850:	f8 94       	cli
 852:	de bf       	out	0x3e, r29	; 62
 854:	0f be       	out	0x3f, r0	; 63
 856:	cd bf       	out	0x3d, r28	; 61
	// Set RES low
	PORTA &= ~(1 << RST_BIT);
 858:	82 e2       	ldi	r24, 0x22	; 34
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	22 e2       	ldi	r18, 0x22	; 34
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	f9 01       	movw	r30, r18
 862:	20 81       	ld	r18, Z
 864:	2e 7f       	andi	r18, 0xFE	; 254
 866:	fc 01       	movw	r30, r24
 868:	20 83       	st	Z, r18
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	a8 ec       	ldi	r26, 0xC8	; 200
 870:	b2 e4       	ldi	r27, 0x42	; 66
 872:	89 83       	std	Y+1, r24	; 0x01
 874:	9a 83       	std	Y+2, r25	; 0x02
 876:	ab 83       	std	Y+3, r26	; 0x03
 878:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 87a:	20 e0       	ldi	r18, 0x00	; 0
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	4a e7       	ldi	r20, 0x7A	; 122
 880:	55 e4       	ldi	r21, 0x45	; 69
 882:	69 81       	ldd	r22, Y+1	; 0x01
 884:	7a 81       	ldd	r23, Y+2	; 0x02
 886:	8b 81       	ldd	r24, Y+3	; 0x03
 888:	9c 81       	ldd	r25, Y+4	; 0x04
 88a:	a5 d2       	rcall	.+1354   	; 0xdd6 <__mulsf3>
 88c:	dc 01       	movw	r26, r24
 88e:	cb 01       	movw	r24, r22
 890:	8d 83       	std	Y+5, r24	; 0x05
 892:	9e 83       	std	Y+6, r25	; 0x06
 894:	af 83       	std	Y+7, r26	; 0x07
 896:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 898:	20 e0       	ldi	r18, 0x00	; 0
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	40 e8       	ldi	r20, 0x80	; 128
 89e:	5f e3       	ldi	r21, 0x3F	; 63
 8a0:	6d 81       	ldd	r22, Y+5	; 0x05
 8a2:	7e 81       	ldd	r23, Y+6	; 0x06
 8a4:	8f 81       	ldd	r24, Y+7	; 0x07
 8a6:	98 85       	ldd	r25, Y+8	; 0x08
 8a8:	15 d2       	rcall	.+1066   	; 0xcd4 <__cmpsf2>
 8aa:	88 23       	and	r24, r24
 8ac:	2c f4       	brge	.+10     	; 0x8b8 <resetDisplay+0x74>
		__ticks = 1;
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	9a 87       	std	Y+10, r25	; 0x0a
 8b4:	89 87       	std	Y+9, r24	; 0x09
 8b6:	3b c0       	rjmp	.+118    	; 0x92e <resetDisplay+0xea>
	else if (__tmp > 65535)
 8b8:	20 e0       	ldi	r18, 0x00	; 0
 8ba:	3f ef       	ldi	r19, 0xFF	; 255
 8bc:	4f e7       	ldi	r20, 0x7F	; 127
 8be:	57 e4       	ldi	r21, 0x47	; 71
 8c0:	6d 81       	ldd	r22, Y+5	; 0x05
 8c2:	7e 81       	ldd	r23, Y+6	; 0x06
 8c4:	8f 81       	ldd	r24, Y+7	; 0x07
 8c6:	98 85       	ldd	r25, Y+8	; 0x08
 8c8:	82 d2       	rcall	.+1284   	; 0xdce <__gesf2>
 8ca:	18 16       	cp	r1, r24
 8cc:	3c f5       	brge	.+78     	; 0x91c <resetDisplay+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 8ce:	20 e0       	ldi	r18, 0x00	; 0
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	40 e2       	ldi	r20, 0x20	; 32
 8d4:	51 e4       	ldi	r21, 0x41	; 65
 8d6:	69 81       	ldd	r22, Y+1	; 0x01
 8d8:	7a 81       	ldd	r23, Y+2	; 0x02
 8da:	8b 81       	ldd	r24, Y+3	; 0x03
 8dc:	9c 81       	ldd	r25, Y+4	; 0x04
 8de:	7b d2       	rcall	.+1270   	; 0xdd6 <__mulsf3>
 8e0:	dc 01       	movw	r26, r24
 8e2:	cb 01       	movw	r24, r22
 8e4:	bc 01       	movw	r22, r24
 8e6:	cd 01       	movw	r24, r26
 8e8:	f9 d1       	rcall	.+1010   	; 0xcdc <__fixunssfsi>
 8ea:	dc 01       	movw	r26, r24
 8ec:	cb 01       	movw	r24, r22
 8ee:	9a 87       	std	Y+10, r25	; 0x0a
 8f0:	89 87       	std	Y+9, r24	; 0x09
 8f2:	0f c0       	rjmp	.+30     	; 0x912 <resetDisplay+0xce>
 8f4:	80 e9       	ldi	r24, 0x90	; 144
 8f6:	91 e0       	ldi	r25, 0x01	; 1
 8f8:	9c 87       	std	Y+12, r25	; 0x0c
 8fa:	8b 87       	std	Y+11, r24	; 0x0b
 8fc:	8b 85       	ldd	r24, Y+11	; 0x0b
 8fe:	9c 85       	ldd	r25, Y+12	; 0x0c
 900:	01 97       	sbiw	r24, 0x01	; 1
 902:	f1 f7       	brne	.-4      	; 0x900 <resetDisplay+0xbc>
 904:	9c 87       	std	Y+12, r25	; 0x0c
 906:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 908:	89 85       	ldd	r24, Y+9	; 0x09
 90a:	9a 85       	ldd	r25, Y+10	; 0x0a
 90c:	01 97       	sbiw	r24, 0x01	; 1
 90e:	9a 87       	std	Y+10, r25	; 0x0a
 910:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 912:	89 85       	ldd	r24, Y+9	; 0x09
 914:	9a 85       	ldd	r25, Y+10	; 0x0a
 916:	89 2b       	or	r24, r25
 918:	69 f7       	brne	.-38     	; 0x8f4 <resetDisplay+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 91a:	13 c0       	rjmp	.+38     	; 0x942 <resetDisplay+0xfe>
 91c:	6d 81       	ldd	r22, Y+5	; 0x05
 91e:	7e 81       	ldd	r23, Y+6	; 0x06
 920:	8f 81       	ldd	r24, Y+7	; 0x07
 922:	98 85       	ldd	r25, Y+8	; 0x08
 924:	db d1       	rcall	.+950    	; 0xcdc <__fixunssfsi>
 926:	dc 01       	movw	r26, r24
 928:	cb 01       	movw	r24, r22
 92a:	9a 87       	std	Y+10, r25	; 0x0a
 92c:	89 87       	std	Y+9, r24	; 0x09
 92e:	89 85       	ldd	r24, Y+9	; 0x09
 930:	9a 85       	ldd	r25, Y+10	; 0x0a
 932:	9e 87       	std	Y+14, r25	; 0x0e
 934:	8d 87       	std	Y+13, r24	; 0x0d
 936:	8d 85       	ldd	r24, Y+13	; 0x0d
 938:	9e 85       	ldd	r25, Y+14	; 0x0e
 93a:	01 97       	sbiw	r24, 0x01	; 1
 93c:	f1 f7       	brne	.-4      	; 0x93a <resetDisplay+0xf6>
 93e:	9e 87       	std	Y+14, r25	; 0x0e
 940:	8d 87       	std	Y+13, r24	; 0x0d
		
	// Delay of min 100 ns (0,1ms) p.20
	_delay_ms(100);
		
	// Set RES high
	PORTA |= (1 << RST_BIT);
 942:	82 e2       	ldi	r24, 0x22	; 34
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	22 e2       	ldi	r18, 0x22	; 34
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	f9 01       	movw	r30, r18
 94c:	20 81       	ld	r18, Z
 94e:	21 60       	ori	r18, 0x01	; 1
 950:	fc 01       	movw	r30, r24
 952:	20 83       	st	Z, r18
}
 954:	00 00       	nop
 956:	2e 96       	adiw	r28, 0x0e	; 14
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	f8 94       	cli
 95c:	de bf       	out	0x3e, r29	; 62
 95e:	0f be       	out	0x3f, r0	; 63
 960:	cd bf       	out	0x3d, r28	; 61
 962:	df 91       	pop	r29
 964:	cf 91       	pop	r28
 966:	08 95       	ret

00000968 <sendIntruction>:

void sendIntruction(unsigned char cmd)
{
 968:	cf 93       	push	r28
 96a:	df 93       	push	r29
 96c:	1f 92       	push	r1
 96e:	cd b7       	in	r28, 0x3d	; 61
 970:	de b7       	in	r29, 0x3e	; 62
 972:	89 83       	std	Y+1, r24	; 0x01
	// Set DC low, Command
	PORTA &= ~(1 << DC_BIT);
 974:	82 e2       	ldi	r24, 0x22	; 34
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	22 e2       	ldi	r18, 0x22	; 34
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	f9 01       	movw	r30, r18
 97e:	20 81       	ld	r18, Z
 980:	2d 7f       	andi	r18, 0xFD	; 253
 982:	fc 01       	movw	r30, r24
 984:	20 83       	st	Z, r18
	SPI_MasterTransmit(cmd);
 986:	89 81       	ldd	r24, Y+1	; 0x01
 988:	51 d0       	rcall	.+162    	; 0xa2c <SPI_MasterTransmit>
	PORTA |= 1 << DC_BIT;
 98a:	82 e2       	ldi	r24, 0x22	; 34
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	22 e2       	ldi	r18, 0x22	; 34
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	f9 01       	movw	r30, r18
 994:	20 81       	ld	r18, Z
 996:	22 60       	ori	r18, 0x02	; 2
 998:	fc 01       	movw	r30, r24
 99a:	20 83       	st	Z, r18
}
 99c:	00 00       	nop
 99e:	0f 90       	pop	r0
 9a0:	df 91       	pop	r29
 9a2:	cf 91       	pop	r28
 9a4:	08 95       	ret

000009a6 <sendData>:

void sendData(unsigned char data)
{	
 9a6:	cf 93       	push	r28
 9a8:	df 93       	push	r29
 9aa:	1f 92       	push	r1
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
 9b0:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= 1 << DC_BIT;
 9b2:	82 e2       	ldi	r24, 0x22	; 34
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	22 e2       	ldi	r18, 0x22	; 34
 9b8:	30 e0       	ldi	r19, 0x00	; 0
 9ba:	f9 01       	movw	r30, r18
 9bc:	20 81       	ld	r18, Z
 9be:	22 60       	ori	r18, 0x02	; 2
 9c0:	fc 01       	movw	r30, r24
 9c2:	20 83       	st	Z, r18
	SPI_MasterTransmit(data);
 9c4:	89 81       	ldd	r24, Y+1	; 0x01
 9c6:	32 d0       	rcall	.+100    	; 0xa2c <SPI_MasterTransmit>
}
 9c8:	00 00       	nop
 9ca:	0f 90       	pop	r0
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	08 95       	ret

000009d2 <clearDisplay>:

void clearDisplay()
{
 9d2:	cf 93       	push	r28
 9d4:	df 93       	push	r29
 9d6:	1f 92       	push	r1
 9d8:	1f 92       	push	r1
 9da:	cd b7       	in	r28, 0x3d	; 61
 9dc:	de b7       	in	r29, 0x3e	; 62
	for (int k=0; k<=503; k++)
 9de:	1a 82       	std	Y+2, r1	; 0x02
 9e0:	19 82       	std	Y+1, r1	; 0x01
 9e2:	07 c0       	rjmp	.+14     	; 0x9f2 <clearDisplay+0x20>
	{
		sendData(0x00);
 9e4:	80 e0       	ldi	r24, 0x00	; 0
 9e6:	df df       	rcall	.-66     	; 0x9a6 <sendData>
	SPI_MasterTransmit(data);
}

void clearDisplay()
{
	for (int k=0; k<=503; k++)
 9e8:	89 81       	ldd	r24, Y+1	; 0x01
 9ea:	9a 81       	ldd	r25, Y+2	; 0x02
 9ec:	01 96       	adiw	r24, 0x01	; 1
 9ee:	9a 83       	std	Y+2, r25	; 0x02
 9f0:	89 83       	std	Y+1, r24	; 0x01
 9f2:	89 81       	ldd	r24, Y+1	; 0x01
 9f4:	9a 81       	ldd	r25, Y+2	; 0x02
 9f6:	88 3f       	cpi	r24, 0xF8	; 248
 9f8:	91 40       	sbci	r25, 0x01	; 1
 9fa:	a4 f3       	brlt	.-24     	; 0x9e4 <clearDisplay+0x12>
	{
		sendData(0x00);
	}
 9fc:	00 00       	nop
 9fe:	0f 90       	pop	r0
 a00:	0f 90       	pop	r0
 a02:	df 91       	pop	r29
 a04:	cf 91       	pop	r28
 a06:	08 95       	ret

00000a08 <SPI_MasterInit>:
#define DD_MOSI 2
#define DD_MISO 3
#define DD_DORD 5

void SPI_MasterInit(void)
{	
 a08:	cf 93       	push	r28
 a0a:	df 93       	push	r29
 a0c:	cd b7       	in	r28, 0x3d	; 61
 a0e:	de b7       	in	r29, 0x3e	; 62
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS); //MOSI,SS & SCK output,others input
 a10:	84 e2       	ldi	r24, 0x24	; 36
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	27 e0       	ldi	r18, 0x07	; 7
 a16:	fc 01       	movw	r30, r24
 a18:	20 83       	st	Z, r18
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);  		   //SPI, Master, clock = fck/16
 a1a:	8c e4       	ldi	r24, 0x4C	; 76
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	21 e5       	ldi	r18, 0x51	; 81
 a20:	fc 01       	movw	r30, r24
 a22:	20 83       	st	Z, r18
}
 a24:	00 00       	nop
 a26:	df 91       	pop	r29
 a28:	cf 91       	pop	r28
 a2a:	08 95       	ret

00000a2c <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
 a2c:	cf 93       	push	r28
 a2e:	df 93       	push	r29
 a30:	00 d0       	rcall	.+0      	; 0xa32 <SPI_MasterTransmit+0x6>
 a32:	cd b7       	in	r28, 0x3d	; 61
 a34:	de b7       	in	r29, 0x3e	; 62
 a36:	8b 83       	std	Y+3, r24	; 0x03
	PORTB &= ~(1 << DD_SS);
 a38:	85 e2       	ldi	r24, 0x25	; 37
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	25 e2       	ldi	r18, 0x25	; 37
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	f9 01       	movw	r30, r18
 a42:	20 81       	ld	r18, Z
 a44:	2e 7f       	andi	r18, 0xFE	; 254
 a46:	fc 01       	movw	r30, r24
 a48:	20 83       	st	Z, r18

	// Start transmission
	SPDR = cData;			
 a4a:	8e e4       	ldi	r24, 0x4E	; 78
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	2b 81       	ldd	r18, Y+3	; 0x03
 a50:	fc 01       	movw	r30, r24
 a52:	20 83       	st	Z, r18
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
 a54:	1a 82       	std	Y+2, r1	; 0x02
 a56:	19 82       	std	Y+1, r1	; 0x01
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
 a58:	05 c0       	rjmp	.+10     	; 0xa64 <SPI_MasterTransmit+0x38>
	{
		k++;
 a5a:	89 81       	ldd	r24, Y+1	; 0x01
 a5c:	9a 81       	ldd	r25, Y+2	; 0x02
 a5e:	01 96       	adiw	r24, 0x01	; 1
 a60:	9a 83       	std	Y+2, r25	; 0x02
 a62:	89 83       	std	Y+1, r24	; 0x01
	// Start transmission
	SPDR = cData;			
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
 a64:	8d e4       	ldi	r24, 0x4D	; 77
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	fc 01       	movw	r30, r24
 a6a:	80 81       	ld	r24, Z
 a6c:	88 23       	and	r24, r24
 a6e:	ac f7       	brge	.-22     	; 0xa5a <SPI_MasterTransmit+0x2e>
	{
		k++;
	}			
	
	cData = SPDR;
 a70:	8e e4       	ldi	r24, 0x4E	; 78
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	fc 01       	movw	r30, r24
 a76:	80 81       	ld	r24, Z
 a78:	8b 83       	std	Y+3, r24	; 0x03

	PORTB|= 1 << DD_SS;
 a7a:	85 e2       	ldi	r24, 0x25	; 37
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	25 e2       	ldi	r18, 0x25	; 37
 a80:	30 e0       	ldi	r19, 0x00	; 0
 a82:	f9 01       	movw	r30, r18
 a84:	20 81       	ld	r18, Z
 a86:	21 60       	ori	r18, 0x01	; 1
 a88:	fc 01       	movw	r30, r24
 a8a:	20 83       	st	Z, r18
}
 a8c:	00 00       	nop
 a8e:	0f 90       	pop	r0
 a90:	0f 90       	pop	r0
 a92:	0f 90       	pop	r0
 a94:	df 91       	pop	r29
 a96:	cf 91       	pop	r28
 a98:	08 95       	ret

00000a9a <DrawPixel>:
 */ 
#include "WorldDriver.h"
#include "Nokia5110Driver.h"

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
 a9a:	cf 93       	push	r28
 a9c:	df 93       	push	r29
 a9e:	cd b7       	in	r28, 0x3d	; 61
 aa0:	de b7       	in	r29, 0x3e	; 62
 aa2:	28 97       	sbiw	r28, 0x08	; 8
 aa4:	0f b6       	in	r0, 0x3f	; 63
 aa6:	f8 94       	cli
 aa8:	de bf       	out	0x3e, r29	; 62
 aaa:	0f be       	out	0x3f, r0	; 63
 aac:	cd bf       	out	0x3d, r28	; 61
 aae:	8d 83       	std	Y+5, r24	; 0x05
 ab0:	6e 83       	std	Y+6, r22	; 0x06
 ab2:	58 87       	std	Y+8, r21	; 0x08
 ab4:	4f 83       	std	Y+7, r20	; 0x07
	if (x < 0 || x > 83)
 ab6:	8d 81       	ldd	r24, Y+5	; 0x05
 ab8:	84 35       	cpi	r24, 0x54	; 84
 aba:	08 f0       	brcs	.+2      	; 0xabe <DrawPixel+0x24>
 abc:	8c c0       	rjmp	.+280    	; 0xbd6 <DrawPixel+0x13c>
		return;

	if (y < 0 || y > 47)
 abe:	8e 81       	ldd	r24, Y+6	; 0x06
 ac0:	80 33       	cpi	r24, 0x30	; 48
 ac2:	08 f0       	brcs	.+2      	; 0xac6 <DrawPixel+0x2c>
 ac4:	8a c0       	rjmp	.+276    	; 0xbda <DrawPixel+0x140>
		return;

	unsigned int baselineOffset = 0;
 ac6:	1a 82       	std	Y+2, r1	; 0x02
 ac8:	19 82       	std	Y+1, r1	; 0x01
	unsigned int verticalBitOffset = 0;
 aca:	1c 82       	std	Y+4, r1	; 0x04
 acc:	1b 82       	std	Y+3, r1	; 0x03

	if (y >= 0 && y <= 7)
 ace:	8e 81       	ldd	r24, Y+6	; 0x06
 ad0:	88 30       	cpi	r24, 0x08	; 8
 ad2:	40 f4       	brcc	.+16     	; 0xae4 <DrawPixel+0x4a>
	{
		baselineOffset = 0;
 ad4:	1a 82       	std	Y+2, r1	; 0x02
 ad6:	19 82       	std	Y+1, r1	; 0x01
		verticalBitOffset = y;
 ad8:	8e 81       	ldd	r24, Y+6	; 0x06
 ada:	88 2f       	mov	r24, r24
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	9c 83       	std	Y+4, r25	; 0x04
 ae0:	8b 83       	std	Y+3, r24	; 0x03
 ae2:	54 c0       	rjmp	.+168    	; 0xb8c <DrawPixel+0xf2>
	} 
	else if (y >= 8 && y <= 15)
 ae4:	8e 81       	ldd	r24, Y+6	; 0x06
 ae6:	88 30       	cpi	r24, 0x08	; 8
 ae8:	70 f0       	brcs	.+28     	; 0xb06 <DrawPixel+0x6c>
 aea:	8e 81       	ldd	r24, Y+6	; 0x06
 aec:	80 31       	cpi	r24, 0x10	; 16
 aee:	58 f4       	brcc	.+22     	; 0xb06 <DrawPixel+0x6c>
	{
		baselineOffset = 84;
 af0:	84 e5       	ldi	r24, 0x54	; 84
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	9a 83       	std	Y+2, r25	; 0x02
 af6:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - 8;
 af8:	8e 81       	ldd	r24, Y+6	; 0x06
 afa:	88 2f       	mov	r24, r24
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	08 97       	sbiw	r24, 0x08	; 8
 b00:	9c 83       	std	Y+4, r25	; 0x04
 b02:	8b 83       	std	Y+3, r24	; 0x03
 b04:	43 c0       	rjmp	.+134    	; 0xb8c <DrawPixel+0xf2>
	} 
	else if (y >= 16 && y <= 23)
 b06:	8e 81       	ldd	r24, Y+6	; 0x06
 b08:	80 31       	cpi	r24, 0x10	; 16
 b0a:	70 f0       	brcs	.+28     	; 0xb28 <DrawPixel+0x8e>
 b0c:	8e 81       	ldd	r24, Y+6	; 0x06
 b0e:	88 31       	cpi	r24, 0x18	; 24
 b10:	58 f4       	brcc	.+22     	; 0xb28 <DrawPixel+0x8e>
	{
		baselineOffset = 84 * 2;
 b12:	88 ea       	ldi	r24, 0xA8	; 168
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	9a 83       	std	Y+2, r25	; 0x02
 b18:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 2);
 b1a:	8e 81       	ldd	r24, Y+6	; 0x06
 b1c:	88 2f       	mov	r24, r24
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	40 97       	sbiw	r24, 0x10	; 16
 b22:	9c 83       	std	Y+4, r25	; 0x04
 b24:	8b 83       	std	Y+3, r24	; 0x03
 b26:	32 c0       	rjmp	.+100    	; 0xb8c <DrawPixel+0xf2>
	} 
	else if (y >= 24 && y <= 31)
 b28:	8e 81       	ldd	r24, Y+6	; 0x06
 b2a:	88 31       	cpi	r24, 0x18	; 24
 b2c:	70 f0       	brcs	.+28     	; 0xb4a <DrawPixel+0xb0>
 b2e:	8e 81       	ldd	r24, Y+6	; 0x06
 b30:	80 32       	cpi	r24, 0x20	; 32
 b32:	58 f4       	brcc	.+22     	; 0xb4a <DrawPixel+0xb0>
	{
		baselineOffset = 84 * 3;
 b34:	8c ef       	ldi	r24, 0xFC	; 252
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	9a 83       	std	Y+2, r25	; 0x02
 b3a:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 3);
 b3c:	8e 81       	ldd	r24, Y+6	; 0x06
 b3e:	88 2f       	mov	r24, r24
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	48 97       	sbiw	r24, 0x18	; 24
 b44:	9c 83       	std	Y+4, r25	; 0x04
 b46:	8b 83       	std	Y+3, r24	; 0x03
 b48:	21 c0       	rjmp	.+66     	; 0xb8c <DrawPixel+0xf2>
	}
	else if (y >= 32 && y <= 39)
 b4a:	8e 81       	ldd	r24, Y+6	; 0x06
 b4c:	80 32       	cpi	r24, 0x20	; 32
 b4e:	70 f0       	brcs	.+28     	; 0xb6c <DrawPixel+0xd2>
 b50:	8e 81       	ldd	r24, Y+6	; 0x06
 b52:	88 32       	cpi	r24, 0x28	; 40
 b54:	58 f4       	brcc	.+22     	; 0xb6c <DrawPixel+0xd2>
	{
		baselineOffset = 84 * 4;
 b56:	80 e5       	ldi	r24, 0x50	; 80
 b58:	91 e0       	ldi	r25, 0x01	; 1
 b5a:	9a 83       	std	Y+2, r25	; 0x02
 b5c:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 4);
 b5e:	8e 81       	ldd	r24, Y+6	; 0x06
 b60:	88 2f       	mov	r24, r24
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	80 97       	sbiw	r24, 0x20	; 32
 b66:	9c 83       	std	Y+4, r25	; 0x04
 b68:	8b 83       	std	Y+3, r24	; 0x03
 b6a:	10 c0       	rjmp	.+32     	; 0xb8c <DrawPixel+0xf2>
	}
	else if (y >= 40 && y <= 47)
 b6c:	8e 81       	ldd	r24, Y+6	; 0x06
 b6e:	88 32       	cpi	r24, 0x28	; 40
 b70:	68 f0       	brcs	.+26     	; 0xb8c <DrawPixel+0xf2>
 b72:	8e 81       	ldd	r24, Y+6	; 0x06
 b74:	80 33       	cpi	r24, 0x30	; 48
 b76:	50 f4       	brcc	.+20     	; 0xb8c <DrawPixel+0xf2>
	{
		baselineOffset = 84 * 5;
 b78:	84 ea       	ldi	r24, 0xA4	; 164
 b7a:	91 e0       	ldi	r25, 0x01	; 1
 b7c:	9a 83       	std	Y+2, r25	; 0x02
 b7e:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 5);
 b80:	8e 81       	ldd	r24, Y+6	; 0x06
 b82:	88 2f       	mov	r24, r24
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	88 97       	sbiw	r24, 0x28	; 40
 b88:	9c 83       	std	Y+4, r25	; 0x04
 b8a:	8b 83       	std	Y+3, r24	; 0x03
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
 b8c:	8d 81       	ldd	r24, Y+5	; 0x05
 b8e:	28 2f       	mov	r18, r24
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	89 81       	ldd	r24, Y+1	; 0x01
 b94:	9a 81       	ldd	r25, Y+2	; 0x02
 b96:	82 0f       	add	r24, r18
 b98:	93 1f       	adc	r25, r19
 b9a:	2f 81       	ldd	r18, Y+7	; 0x07
 b9c:	38 85       	ldd	r19, Y+8	; 0x08
 b9e:	82 0f       	add	r24, r18
 ba0:	93 1f       	adc	r25, r19
 ba2:	2d 81       	ldd	r18, Y+5	; 0x05
 ba4:	42 2f       	mov	r20, r18
 ba6:	50 e0       	ldi	r21, 0x00	; 0
 ba8:	29 81       	ldd	r18, Y+1	; 0x01
 baa:	3a 81       	ldd	r19, Y+2	; 0x02
 bac:	24 0f       	add	r18, r20
 bae:	35 1f       	adc	r19, r21
 bb0:	4f 81       	ldd	r20, Y+7	; 0x07
 bb2:	58 85       	ldd	r21, Y+8	; 0x08
 bb4:	24 0f       	add	r18, r20
 bb6:	35 1f       	adc	r19, r21
 bb8:	f9 01       	movw	r30, r18
 bba:	20 81       	ld	r18, Z
 bbc:	42 2f       	mov	r20, r18
 bbe:	21 e0       	ldi	r18, 0x01	; 1
 bc0:	30 e0       	ldi	r19, 0x00	; 0
 bc2:	0b 80       	ldd	r0, Y+3	; 0x03
 bc4:	02 c0       	rjmp	.+4      	; 0xbca <DrawPixel+0x130>
 bc6:	22 0f       	add	r18, r18
 bc8:	33 1f       	adc	r19, r19
 bca:	0a 94       	dec	r0
 bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <DrawPixel+0x12c>
 bce:	24 2b       	or	r18, r20
 bd0:	fc 01       	movw	r30, r24
 bd2:	20 83       	st	Z, r18
 bd4:	03 c0       	rjmp	.+6      	; 0xbdc <DrawPixel+0x142>
#include "Nokia5110Driver.h"

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
	if (x < 0 || x > 83)
		return;
 bd6:	00 00       	nop
 bd8:	01 c0       	rjmp	.+2      	; 0xbdc <DrawPixel+0x142>

	if (y < 0 || y > 47)
		return;
 bda:	00 00       	nop
		baselineOffset = 84 * 5;
		verticalBitOffset = y - (8 * 5);
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
}
 bdc:	28 96       	adiw	r28, 0x08	; 8
 bde:	0f b6       	in	r0, 0x3f	; 63
 be0:	f8 94       	cli
 be2:	de bf       	out	0x3e, r29	; 62
 be4:	0f be       	out	0x3f, r0	; 63
 be6:	cd bf       	out	0x3d, r28	; 61
 be8:	df 91       	pop	r29
 bea:	cf 91       	pop	r28
 bec:	08 95       	ret

00000bee <DrawDot>:

 void DrawDot(unsigned char x, unsigned char y, unsigned char* world)
 {
 bee:	cf 93       	push	r28
 bf0:	df 93       	push	r29
 bf2:	00 d0       	rcall	.+0      	; 0xbf4 <DrawDot+0x6>
 bf4:	1f 92       	push	r1
 bf6:	cd b7       	in	r28, 0x3d	; 61
 bf8:	de b7       	in	r29, 0x3e	; 62
 bfa:	89 83       	std	Y+1, r24	; 0x01
 bfc:	6a 83       	std	Y+2, r22	; 0x02
 bfe:	5c 83       	std	Y+4, r21	; 0x04
 c00:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
 c02:	8b 81       	ldd	r24, Y+3	; 0x03
 c04:	9c 81       	ldd	r25, Y+4	; 0x04
 c06:	ac 01       	movw	r20, r24
 c08:	6a 81       	ldd	r22, Y+2	; 0x02
 c0a:	89 81       	ldd	r24, Y+1	; 0x01
 c0c:	46 df       	rcall	.-372    	; 0xa9a <DrawPixel>
	DrawPixel(x + 1, y, world);
 c0e:	89 81       	ldd	r24, Y+1	; 0x01
 c10:	21 e0       	ldi	r18, 0x01	; 1
 c12:	28 0f       	add	r18, r24
 c14:	8b 81       	ldd	r24, Y+3	; 0x03
 c16:	9c 81       	ldd	r25, Y+4	; 0x04
 c18:	ac 01       	movw	r20, r24
 c1a:	6a 81       	ldd	r22, Y+2	; 0x02
 c1c:	82 2f       	mov	r24, r18
 c1e:	3d df       	rcall	.-390    	; 0xa9a <DrawPixel>
	DrawPixel(x, y + 1, world);
 c20:	8a 81       	ldd	r24, Y+2	; 0x02
 c22:	21 e0       	ldi	r18, 0x01	; 1
 c24:	28 0f       	add	r18, r24
 c26:	8b 81       	ldd	r24, Y+3	; 0x03
 c28:	9c 81       	ldd	r25, Y+4	; 0x04
 c2a:	ac 01       	movw	r20, r24
 c2c:	62 2f       	mov	r22, r18
 c2e:	89 81       	ldd	r24, Y+1	; 0x01
 c30:	34 df       	rcall	.-408    	; 0xa9a <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
 c32:	8a 81       	ldd	r24, Y+2	; 0x02
 c34:	31 e0       	ldi	r19, 0x01	; 1
 c36:	38 0f       	add	r19, r24
 c38:	89 81       	ldd	r24, Y+1	; 0x01
 c3a:	21 e0       	ldi	r18, 0x01	; 1
 c3c:	28 0f       	add	r18, r24
 c3e:	8b 81       	ldd	r24, Y+3	; 0x03
 c40:	9c 81       	ldd	r25, Y+4	; 0x04
 c42:	ac 01       	movw	r20, r24
 c44:	63 2f       	mov	r22, r19
 c46:	82 2f       	mov	r24, r18
 c48:	28 df       	rcall	.-432    	; 0xa9a <DrawPixel>
 }
 c4a:	00 00       	nop
 c4c:	0f 90       	pop	r0
 c4e:	0f 90       	pop	r0
 c50:	0f 90       	pop	r0
 c52:	0f 90       	pop	r0
 c54:	df 91       	pop	r29
 c56:	cf 91       	pop	r28
 c58:	08 95       	ret

00000c5a <RenderWorld>:

 void RenderWorld(unsigned char* world)
 {
 c5a:	cf 93       	push	r28
 c5c:	df 93       	push	r29
 c5e:	00 d0       	rcall	.+0      	; 0xc60 <RenderWorld+0x6>
 c60:	00 d0       	rcall	.+0      	; 0xc62 <RenderWorld+0x8>
 c62:	cd b7       	in	r28, 0x3d	; 61
 c64:	de b7       	in	r29, 0x3e	; 62
 c66:	9e 83       	std	Y+6, r25	; 0x06
 c68:	8d 83       	std	Y+5, r24	; 0x05
	for (int x = 0; x < 504; x++)
 c6a:	1a 82       	std	Y+2, r1	; 0x02
 c6c:	19 82       	std	Y+1, r1	; 0x01
 c6e:	0e c0       	rjmp	.+28     	; 0xc8c <RenderWorld+0x32>
	{
		sendData(world[x]);
 c70:	89 81       	ldd	r24, Y+1	; 0x01
 c72:	9a 81       	ldd	r25, Y+2	; 0x02
 c74:	2d 81       	ldd	r18, Y+5	; 0x05
 c76:	3e 81       	ldd	r19, Y+6	; 0x06
 c78:	82 0f       	add	r24, r18
 c7a:	93 1f       	adc	r25, r19
 c7c:	fc 01       	movw	r30, r24
 c7e:	80 81       	ld	r24, Z
 c80:	92 de       	rcall	.-732    	; 0x9a6 <sendData>
	DrawPixel(x + 1, y + 1, world);
 }

 void RenderWorld(unsigned char* world)
 {
	for (int x = 0; x < 504; x++)
 c82:	89 81       	ldd	r24, Y+1	; 0x01
 c84:	9a 81       	ldd	r25, Y+2	; 0x02
 c86:	01 96       	adiw	r24, 0x01	; 1
 c88:	9a 83       	std	Y+2, r25	; 0x02
 c8a:	89 83       	std	Y+1, r24	; 0x01
 c8c:	89 81       	ldd	r24, Y+1	; 0x01
 c8e:	9a 81       	ldd	r25, Y+2	; 0x02
 c90:	88 3f       	cpi	r24, 0xF8	; 248
 c92:	91 40       	sbci	r25, 0x01	; 1
 c94:	6c f3       	brlt	.-38     	; 0xc70 <RenderWorld+0x16>
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
 c96:	1c 82       	std	Y+4, r1	; 0x04
 c98:	1b 82       	std	Y+3, r1	; 0x03
 c9a:	0d c0       	rjmp	.+26     	; 0xcb6 <RenderWorld+0x5c>
	{
		world[x] = 0x00;
 c9c:	8b 81       	ldd	r24, Y+3	; 0x03
 c9e:	9c 81       	ldd	r25, Y+4	; 0x04
 ca0:	2d 81       	ldd	r18, Y+5	; 0x05
 ca2:	3e 81       	ldd	r19, Y+6	; 0x06
 ca4:	82 0f       	add	r24, r18
 ca6:	93 1f       	adc	r25, r19
 ca8:	fc 01       	movw	r30, r24
 caa:	10 82       	st	Z, r1
	for (int x = 0; x < 504; x++)
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
 cac:	8b 81       	ldd	r24, Y+3	; 0x03
 cae:	9c 81       	ldd	r25, Y+4	; 0x04
 cb0:	01 96       	adiw	r24, 0x01	; 1
 cb2:	9c 83       	std	Y+4, r25	; 0x04
 cb4:	8b 83       	std	Y+3, r24	; 0x03
 cb6:	8b 81       	ldd	r24, Y+3	; 0x03
 cb8:	9c 81       	ldd	r25, Y+4	; 0x04
 cba:	88 3f       	cpi	r24, 0xF8	; 248
 cbc:	91 40       	sbci	r25, 0x01	; 1
 cbe:	74 f3       	brlt	.-36     	; 0xc9c <RenderWorld+0x42>
	{
		world[x] = 0x00;
	}
 cc0:	00 00       	nop
 cc2:	26 96       	adiw	r28, 0x06	; 6
 cc4:	0f b6       	in	r0, 0x3f	; 63
 cc6:	f8 94       	cli
 cc8:	de bf       	out	0x3e, r29	; 62
 cca:	0f be       	out	0x3f, r0	; 63
 ccc:	cd bf       	out	0x3d, r28	; 61
 cce:	df 91       	pop	r29
 cd0:	cf 91       	pop	r28
 cd2:	08 95       	ret

00000cd4 <__cmpsf2>:
 cd4:	2f d0       	rcall	.+94     	; 0xd34 <__fp_cmp>
 cd6:	08 f4       	brcc	.+2      	; 0xcda <__cmpsf2+0x6>
 cd8:	81 e0       	ldi	r24, 0x01	; 1
 cda:	08 95       	ret

00000cdc <__fixunssfsi>:
 cdc:	57 d0       	rcall	.+174    	; 0xd8c <__fp_splitA>
 cde:	88 f0       	brcs	.+34     	; 0xd02 <__fixunssfsi+0x26>
 ce0:	9f 57       	subi	r25, 0x7F	; 127
 ce2:	90 f0       	brcs	.+36     	; 0xd08 <__fixunssfsi+0x2c>
 ce4:	b9 2f       	mov	r27, r25
 ce6:	99 27       	eor	r25, r25
 ce8:	b7 51       	subi	r27, 0x17	; 23
 cea:	a0 f0       	brcs	.+40     	; 0xd14 <__fixunssfsi+0x38>
 cec:	d1 f0       	breq	.+52     	; 0xd22 <__fixunssfsi+0x46>
 cee:	66 0f       	add	r22, r22
 cf0:	77 1f       	adc	r23, r23
 cf2:	88 1f       	adc	r24, r24
 cf4:	99 1f       	adc	r25, r25
 cf6:	1a f0       	brmi	.+6      	; 0xcfe <__fixunssfsi+0x22>
 cf8:	ba 95       	dec	r27
 cfa:	c9 f7       	brne	.-14     	; 0xcee <__fixunssfsi+0x12>
 cfc:	12 c0       	rjmp	.+36     	; 0xd22 <__fixunssfsi+0x46>
 cfe:	b1 30       	cpi	r27, 0x01	; 1
 d00:	81 f0       	breq	.+32     	; 0xd22 <__fixunssfsi+0x46>
 d02:	5e d0       	rcall	.+188    	; 0xdc0 <__fp_zero>
 d04:	b1 e0       	ldi	r27, 0x01	; 1
 d06:	08 95       	ret
 d08:	5b c0       	rjmp	.+182    	; 0xdc0 <__fp_zero>
 d0a:	67 2f       	mov	r22, r23
 d0c:	78 2f       	mov	r23, r24
 d0e:	88 27       	eor	r24, r24
 d10:	b8 5f       	subi	r27, 0xF8	; 248
 d12:	39 f0       	breq	.+14     	; 0xd22 <__fixunssfsi+0x46>
 d14:	b9 3f       	cpi	r27, 0xF9	; 249
 d16:	cc f3       	brlt	.-14     	; 0xd0a <__fixunssfsi+0x2e>
 d18:	86 95       	lsr	r24
 d1a:	77 95       	ror	r23
 d1c:	67 95       	ror	r22
 d1e:	b3 95       	inc	r27
 d20:	d9 f7       	brne	.-10     	; 0xd18 <__fixunssfsi+0x3c>
 d22:	3e f4       	brtc	.+14     	; 0xd32 <__fixunssfsi+0x56>
 d24:	90 95       	com	r25
 d26:	80 95       	com	r24
 d28:	70 95       	com	r23
 d2a:	61 95       	neg	r22
 d2c:	7f 4f       	sbci	r23, 0xFF	; 255
 d2e:	8f 4f       	sbci	r24, 0xFF	; 255
 d30:	9f 4f       	sbci	r25, 0xFF	; 255
 d32:	08 95       	ret

00000d34 <__fp_cmp>:
 d34:	99 0f       	add	r25, r25
 d36:	00 08       	sbc	r0, r0
 d38:	55 0f       	add	r21, r21
 d3a:	aa 0b       	sbc	r26, r26
 d3c:	e0 e8       	ldi	r30, 0x80	; 128
 d3e:	fe ef       	ldi	r31, 0xFE	; 254
 d40:	16 16       	cp	r1, r22
 d42:	17 06       	cpc	r1, r23
 d44:	e8 07       	cpc	r30, r24
 d46:	f9 07       	cpc	r31, r25
 d48:	c0 f0       	brcs	.+48     	; 0xd7a <__fp_cmp+0x46>
 d4a:	12 16       	cp	r1, r18
 d4c:	13 06       	cpc	r1, r19
 d4e:	e4 07       	cpc	r30, r20
 d50:	f5 07       	cpc	r31, r21
 d52:	98 f0       	brcs	.+38     	; 0xd7a <__fp_cmp+0x46>
 d54:	62 1b       	sub	r22, r18
 d56:	73 0b       	sbc	r23, r19
 d58:	84 0b       	sbc	r24, r20
 d5a:	95 0b       	sbc	r25, r21
 d5c:	39 f4       	brne	.+14     	; 0xd6c <__fp_cmp+0x38>
 d5e:	0a 26       	eor	r0, r26
 d60:	61 f0       	breq	.+24     	; 0xd7a <__fp_cmp+0x46>
 d62:	23 2b       	or	r18, r19
 d64:	24 2b       	or	r18, r20
 d66:	25 2b       	or	r18, r21
 d68:	21 f4       	brne	.+8      	; 0xd72 <__fp_cmp+0x3e>
 d6a:	08 95       	ret
 d6c:	0a 26       	eor	r0, r26
 d6e:	09 f4       	brne	.+2      	; 0xd72 <__fp_cmp+0x3e>
 d70:	a1 40       	sbci	r26, 0x01	; 1
 d72:	a6 95       	lsr	r26
 d74:	8f ef       	ldi	r24, 0xFF	; 255
 d76:	81 1d       	adc	r24, r1
 d78:	81 1d       	adc	r24, r1
 d7a:	08 95       	ret

00000d7c <__fp_split3>:
 d7c:	57 fd       	sbrc	r21, 7
 d7e:	90 58       	subi	r25, 0x80	; 128
 d80:	44 0f       	add	r20, r20
 d82:	55 1f       	adc	r21, r21
 d84:	59 f0       	breq	.+22     	; 0xd9c <__fp_splitA+0x10>
 d86:	5f 3f       	cpi	r21, 0xFF	; 255
 d88:	71 f0       	breq	.+28     	; 0xda6 <__fp_splitA+0x1a>
 d8a:	47 95       	ror	r20

00000d8c <__fp_splitA>:
 d8c:	88 0f       	add	r24, r24
 d8e:	97 fb       	bst	r25, 7
 d90:	99 1f       	adc	r25, r25
 d92:	61 f0       	breq	.+24     	; 0xdac <__fp_splitA+0x20>
 d94:	9f 3f       	cpi	r25, 0xFF	; 255
 d96:	79 f0       	breq	.+30     	; 0xdb6 <__fp_splitA+0x2a>
 d98:	87 95       	ror	r24
 d9a:	08 95       	ret
 d9c:	12 16       	cp	r1, r18
 d9e:	13 06       	cpc	r1, r19
 da0:	14 06       	cpc	r1, r20
 da2:	55 1f       	adc	r21, r21
 da4:	f2 cf       	rjmp	.-28     	; 0xd8a <__fp_split3+0xe>
 da6:	46 95       	lsr	r20
 da8:	f1 df       	rcall	.-30     	; 0xd8c <__fp_splitA>
 daa:	08 c0       	rjmp	.+16     	; 0xdbc <__fp_splitA+0x30>
 dac:	16 16       	cp	r1, r22
 dae:	17 06       	cpc	r1, r23
 db0:	18 06       	cpc	r1, r24
 db2:	99 1f       	adc	r25, r25
 db4:	f1 cf       	rjmp	.-30     	; 0xd98 <__fp_splitA+0xc>
 db6:	86 95       	lsr	r24
 db8:	71 05       	cpc	r23, r1
 dba:	61 05       	cpc	r22, r1
 dbc:	08 94       	sec
 dbe:	08 95       	ret

00000dc0 <__fp_zero>:
 dc0:	e8 94       	clt

00000dc2 <__fp_szero>:
 dc2:	bb 27       	eor	r27, r27
 dc4:	66 27       	eor	r22, r22
 dc6:	77 27       	eor	r23, r23
 dc8:	cb 01       	movw	r24, r22
 dca:	97 f9       	bld	r25, 7
 dcc:	08 95       	ret

00000dce <__gesf2>:
 dce:	b2 df       	rcall	.-156    	; 0xd34 <__fp_cmp>
 dd0:	08 f4       	brcc	.+2      	; 0xdd4 <__gesf2+0x6>
 dd2:	8f ef       	ldi	r24, 0xFF	; 255
 dd4:	08 95       	ret

00000dd6 <__mulsf3>:
 dd6:	0b d0       	rcall	.+22     	; 0xdee <__mulsf3x>
 dd8:	78 c0       	rjmp	.+240    	; 0xeca <__fp_round>
 dda:	69 d0       	rcall	.+210    	; 0xeae <__fp_pscA>
 ddc:	28 f0       	brcs	.+10     	; 0xde8 <__mulsf3+0x12>
 dde:	6e d0       	rcall	.+220    	; 0xebc <__fp_pscB>
 de0:	18 f0       	brcs	.+6      	; 0xde8 <__mulsf3+0x12>
 de2:	95 23       	and	r25, r21
 de4:	09 f0       	breq	.+2      	; 0xde8 <__mulsf3+0x12>
 de6:	5a c0       	rjmp	.+180    	; 0xe9c <__fp_inf>
 de8:	5f c0       	rjmp	.+190    	; 0xea8 <__fp_nan>
 dea:	11 24       	eor	r1, r1
 dec:	ea cf       	rjmp	.-44     	; 0xdc2 <__fp_szero>

00000dee <__mulsf3x>:
 dee:	c6 df       	rcall	.-116    	; 0xd7c <__fp_split3>
 df0:	a0 f3       	brcs	.-24     	; 0xdda <__mulsf3+0x4>

00000df2 <__mulsf3_pse>:
 df2:	95 9f       	mul	r25, r21
 df4:	d1 f3       	breq	.-12     	; 0xdea <__mulsf3+0x14>
 df6:	95 0f       	add	r25, r21
 df8:	50 e0       	ldi	r21, 0x00	; 0
 dfa:	55 1f       	adc	r21, r21
 dfc:	62 9f       	mul	r22, r18
 dfe:	f0 01       	movw	r30, r0
 e00:	72 9f       	mul	r23, r18
 e02:	bb 27       	eor	r27, r27
 e04:	f0 0d       	add	r31, r0
 e06:	b1 1d       	adc	r27, r1
 e08:	63 9f       	mul	r22, r19
 e0a:	aa 27       	eor	r26, r26
 e0c:	f0 0d       	add	r31, r0
 e0e:	b1 1d       	adc	r27, r1
 e10:	aa 1f       	adc	r26, r26
 e12:	64 9f       	mul	r22, r20
 e14:	66 27       	eor	r22, r22
 e16:	b0 0d       	add	r27, r0
 e18:	a1 1d       	adc	r26, r1
 e1a:	66 1f       	adc	r22, r22
 e1c:	82 9f       	mul	r24, r18
 e1e:	22 27       	eor	r18, r18
 e20:	b0 0d       	add	r27, r0
 e22:	a1 1d       	adc	r26, r1
 e24:	62 1f       	adc	r22, r18
 e26:	73 9f       	mul	r23, r19
 e28:	b0 0d       	add	r27, r0
 e2a:	a1 1d       	adc	r26, r1
 e2c:	62 1f       	adc	r22, r18
 e2e:	83 9f       	mul	r24, r19
 e30:	a0 0d       	add	r26, r0
 e32:	61 1d       	adc	r22, r1
 e34:	22 1f       	adc	r18, r18
 e36:	74 9f       	mul	r23, r20
 e38:	33 27       	eor	r19, r19
 e3a:	a0 0d       	add	r26, r0
 e3c:	61 1d       	adc	r22, r1
 e3e:	23 1f       	adc	r18, r19
 e40:	84 9f       	mul	r24, r20
 e42:	60 0d       	add	r22, r0
 e44:	21 1d       	adc	r18, r1
 e46:	82 2f       	mov	r24, r18
 e48:	76 2f       	mov	r23, r22
 e4a:	6a 2f       	mov	r22, r26
 e4c:	11 24       	eor	r1, r1
 e4e:	9f 57       	subi	r25, 0x7F	; 127
 e50:	50 40       	sbci	r21, 0x00	; 0
 e52:	8a f0       	brmi	.+34     	; 0xe76 <__mulsf3_pse+0x84>
 e54:	e1 f0       	breq	.+56     	; 0xe8e <__mulsf3_pse+0x9c>
 e56:	88 23       	and	r24, r24
 e58:	4a f0       	brmi	.+18     	; 0xe6c <__mulsf3_pse+0x7a>
 e5a:	ee 0f       	add	r30, r30
 e5c:	ff 1f       	adc	r31, r31
 e5e:	bb 1f       	adc	r27, r27
 e60:	66 1f       	adc	r22, r22
 e62:	77 1f       	adc	r23, r23
 e64:	88 1f       	adc	r24, r24
 e66:	91 50       	subi	r25, 0x01	; 1
 e68:	50 40       	sbci	r21, 0x00	; 0
 e6a:	a9 f7       	brne	.-22     	; 0xe56 <__mulsf3_pse+0x64>
 e6c:	9e 3f       	cpi	r25, 0xFE	; 254
 e6e:	51 05       	cpc	r21, r1
 e70:	70 f0       	brcs	.+28     	; 0xe8e <__mulsf3_pse+0x9c>
 e72:	14 c0       	rjmp	.+40     	; 0xe9c <__fp_inf>
 e74:	a6 cf       	rjmp	.-180    	; 0xdc2 <__fp_szero>
 e76:	5f 3f       	cpi	r21, 0xFF	; 255
 e78:	ec f3       	brlt	.-6      	; 0xe74 <__mulsf3_pse+0x82>
 e7a:	98 3e       	cpi	r25, 0xE8	; 232
 e7c:	dc f3       	brlt	.-10     	; 0xe74 <__mulsf3_pse+0x82>
 e7e:	86 95       	lsr	r24
 e80:	77 95       	ror	r23
 e82:	67 95       	ror	r22
 e84:	b7 95       	ror	r27
 e86:	f7 95       	ror	r31
 e88:	e7 95       	ror	r30
 e8a:	9f 5f       	subi	r25, 0xFF	; 255
 e8c:	c1 f7       	brne	.-16     	; 0xe7e <__mulsf3_pse+0x8c>
 e8e:	fe 2b       	or	r31, r30
 e90:	88 0f       	add	r24, r24
 e92:	91 1d       	adc	r25, r1
 e94:	96 95       	lsr	r25
 e96:	87 95       	ror	r24
 e98:	97 f9       	bld	r25, 7
 e9a:	08 95       	ret

00000e9c <__fp_inf>:
 e9c:	97 f9       	bld	r25, 7
 e9e:	9f 67       	ori	r25, 0x7F	; 127
 ea0:	80 e8       	ldi	r24, 0x80	; 128
 ea2:	70 e0       	ldi	r23, 0x00	; 0
 ea4:	60 e0       	ldi	r22, 0x00	; 0
 ea6:	08 95       	ret

00000ea8 <__fp_nan>:
 ea8:	9f ef       	ldi	r25, 0xFF	; 255
 eaa:	80 ec       	ldi	r24, 0xC0	; 192
 eac:	08 95       	ret

00000eae <__fp_pscA>:
 eae:	00 24       	eor	r0, r0
 eb0:	0a 94       	dec	r0
 eb2:	16 16       	cp	r1, r22
 eb4:	17 06       	cpc	r1, r23
 eb6:	18 06       	cpc	r1, r24
 eb8:	09 06       	cpc	r0, r25
 eba:	08 95       	ret

00000ebc <__fp_pscB>:
 ebc:	00 24       	eor	r0, r0
 ebe:	0a 94       	dec	r0
 ec0:	12 16       	cp	r1, r18
 ec2:	13 06       	cpc	r1, r19
 ec4:	14 06       	cpc	r1, r20
 ec6:	05 06       	cpc	r0, r21
 ec8:	08 95       	ret

00000eca <__fp_round>:
 eca:	09 2e       	mov	r0, r25
 ecc:	03 94       	inc	r0
 ece:	00 0c       	add	r0, r0
 ed0:	11 f4       	brne	.+4      	; 0xed6 <__fp_round+0xc>
 ed2:	88 23       	and	r24, r24
 ed4:	52 f0       	brmi	.+20     	; 0xeea <__fp_round+0x20>
 ed6:	bb 0f       	add	r27, r27
 ed8:	40 f4       	brcc	.+16     	; 0xeea <__fp_round+0x20>
 eda:	bf 2b       	or	r27, r31
 edc:	11 f4       	brne	.+4      	; 0xee2 <__fp_round+0x18>
 ede:	60 ff       	sbrs	r22, 0
 ee0:	04 c0       	rjmp	.+8      	; 0xeea <__fp_round+0x20>
 ee2:	6f 5f       	subi	r22, 0xFF	; 255
 ee4:	7f 4f       	sbci	r23, 0xFF	; 255
 ee6:	8f 4f       	sbci	r24, 0xFF	; 255
 ee8:	9f 4f       	sbci	r25, 0xFF	; 255
 eea:	08 95       	ret

00000eec <_exit>:
 eec:	f8 94       	cli

00000eee <__stop_program>:
 eee:	ff cf       	rjmp	.-2      	; 0xeee <__stop_program>
