
SnakeADDeBoss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00000c9c  00000d30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005e2  00800204  00800204  00000d34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001223  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ecc  00000000  00000000  0000207f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000954  00000000  00000000  00002f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  000038a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cc  00000000  00000000  00003a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fb  00000000  00000000  0000411c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00004417  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e9       	ldi	r30, 0x9C	; 156
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	27 e0       	ldi	r18, 0x07	; 7
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 3e       	cpi	r26, 0xE6	; 230
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	bb c5       	rjmp	.+2934   	; 0xc98 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
int xDirection = 1;
int yDirection = 0;


int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	e2 97       	sbiw	r28, 0x32	; 50
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
	initDisplay();
 138:	26 d2       	rcall	.+1100   	; 0x586 <initDisplay>

	for (int x = 0; x < 504; x++)
 13a:	1a 82       	std	Y+2, r1	; 0x02
 13c:	19 82       	std	Y+1, r1	; 0x01
 13e:	0b c0       	rjmp	.+22     	; 0x156 <main+0x32>
	{
		worldRender[x] = 0x00;
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	9a 81       	ldd	r25, Y+2	; 0x02
 144:	82 51       	subi	r24, 0x12	; 18
 146:	9a 4f       	sbci	r25, 0xFA	; 250
 148:	fc 01       	movw	r30, r24
 14a:	10 82       	st	Z, r1

int main(void)
{
	initDisplay();

	for (int x = 0; x < 504; x++)
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	9a 81       	ldd	r25, Y+2	; 0x02
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	9a 83       	std	Y+2, r25	; 0x02
 154:	89 83       	std	Y+1, r24	; 0x01
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	88 3f       	cpi	r24, 0xF8	; 248
 15c:	91 40       	sbci	r25, 0x01	; 1
 15e:	84 f3       	brlt	.-32     	; 0x140 <main+0x1c>
		worldRender[x] = 0x00;
	}

	
	struct SnakeBodyPart head;
	head.x = 0;
 160:	1e 8a       	std	Y+22, r1	; 0x16
 162:	1d 8a       	std	Y+21, r1	; 0x15
	head.y = 0;
 164:	18 8e       	std	Y+24, r1	; 0x18
 166:	1f 8a       	std	Y+23, r1	; 0x17
	head.headPointer = 0;
 168:	1e 8e       	std	Y+30, r1	; 0x1e
 16a:	1d 8e       	std	Y+29, r1	; 0x1d
	snake[0] = head;
 16c:	8a e0       	ldi	r24, 0x0A	; 10
 16e:	fe 01       	movw	r30, r28
 170:	75 96       	adiw	r30, 0x15	; 21
 172:	a6 e0       	ldi	r26, 0x06	; 6
 174:	b2 e0       	ldi	r27, 0x02	; 2
 176:	01 90       	ld	r0, Z+
 178:	0d 92       	st	X+, r0
 17a:	8a 95       	dec	r24
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x52>

	struct SnakeBodyPart middle;
	middle.x = 0;
 17e:	18 a2       	std	Y+32, r1	; 0x20
 180:	1f 8e       	std	Y+31, r1	; 0x1f
	middle.y = 0;
 182:	1a a2       	std	Y+34, r1	; 0x22
 184:	19 a2       	std	Y+33, r1	; 0x21
	middle.headPointer = &snake[0];
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	92 e0       	ldi	r25, 0x02	; 2
 18a:	98 a7       	std	Y+40, r25	; 0x28
 18c:	8f a3       	std	Y+39, r24	; 0x27
	snake[1] = middle;
 18e:	8a e0       	ldi	r24, 0x0A	; 10
 190:	fe 01       	movw	r30, r28
 192:	7f 96       	adiw	r30, 0x1f	; 31
 194:	a0 e1       	ldi	r26, 0x10	; 16
 196:	b2 e0       	ldi	r27, 0x02	; 2
 198:	01 90       	ld	r0, Z+
 19a:	0d 92       	st	X+, r0
 19c:	8a 95       	dec	r24
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x74>
	
	struct SnakeBodyPart end;
	end.x = 0;
 1a0:	1a a6       	std	Y+42, r1	; 0x2a
 1a2:	19 a6       	std	Y+41, r1	; 0x29
	end.y = 0;
 1a4:	1c a6       	std	Y+44, r1	; 0x2c
 1a6:	1b a6       	std	Y+43, r1	; 0x2b
	end.headPointer = &snake[1];
 1a8:	80 e1       	ldi	r24, 0x10	; 16
 1aa:	92 e0       	ldi	r25, 0x02	; 2
 1ac:	9a ab       	std	Y+50, r25	; 0x32
 1ae:	89 ab       	std	Y+49, r24	; 0x31
	snake[2] = end;
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	fe 01       	movw	r30, r28
 1b4:	b9 96       	adiw	r30, 0x29	; 41
 1b6:	aa e1       	ldi	r26, 0x1A	; 26
 1b8:	b2 e0       	ldi	r27, 0x02	; 2
 1ba:	01 90       	ld	r0, Z+
 1bc:	0d 92       	st	X+, r0
 1be:	8a 95       	dec	r24

    while (1) 
	{
		clearDisplay();
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x96>
 1c2:	dd d2       	rcall	.+1466   	; 0x77e <clearDisplay>

		
		for (int bodyPartIndex = 0; bodyPartIndex < snakeBodyLength; bodyPartIndex++)
 1c4:	1c 82       	std	Y+4, r1	; 0x04
 1c6:	1b 82       	std	Y+3, r1	; 0x03
 1c8:	2f c1       	rjmp	.+606    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		{
			// Check for head
			if (snake[bodyPartIndex].headPointer == 0)
 1ca:	8b 81       	ldd	r24, Y+3	; 0x03
 1cc:	9c 81       	ldd	r25, Y+4	; 0x04
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	9c 01       	movw	r18, r24
 1d4:	22 0f       	add	r18, r18
 1d6:	33 1f       	adc	r19, r19
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	82 0f       	add	r24, r18
 1de:	93 1f       	adc	r25, r19
 1e0:	82 5f       	subi	r24, 0xF2	; 242
 1e2:	9d 4f       	sbci	r25, 0xFD	; 253
 1e4:	fc 01       	movw	r30, r24
 1e6:	80 81       	ld	r24, Z
 1e8:	91 81       	ldd	r25, Z+1	; 0x01
 1ea:	89 2b       	or	r24, r25
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <main+0xcc>
 1ee:	91 c0       	rjmp	.+290    	; 0x312 <main+0x1ee>
			{
				snake[bodyPartIndex].prevX = snake[bodyPartIndex].x;
 1f0:	8b 81       	ldd	r24, Y+3	; 0x03
 1f2:	9c 81       	ldd	r25, Y+4	; 0x04
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	9c 01       	movw	r18, r24
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	22 0f       	add	r18, r18
 200:	33 1f       	adc	r19, r19
 202:	82 0f       	add	r24, r18
 204:	93 1f       	adc	r25, r19
 206:	8a 5f       	subi	r24, 0xFA	; 250
 208:	9d 4f       	sbci	r25, 0xFD	; 253
 20a:	fc 01       	movw	r30, r24
 20c:	20 81       	ld	r18, Z
 20e:	31 81       	ldd	r19, Z+1	; 0x01
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	9c 81       	ldd	r25, Y+4	; 0x04
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	ac 01       	movw	r20, r24
 21a:	44 0f       	add	r20, r20
 21c:	55 1f       	adc	r21, r21
 21e:	44 0f       	add	r20, r20
 220:	55 1f       	adc	r21, r21
 222:	84 0f       	add	r24, r20
 224:	95 1f       	adc	r25, r21
 226:	86 5f       	subi	r24, 0xF6	; 246
 228:	9d 4f       	sbci	r25, 0xFD	; 253
 22a:	fc 01       	movw	r30, r24
 22c:	31 83       	std	Z+1, r19	; 0x01
 22e:	20 83       	st	Z, r18
				snake[bodyPartIndex].prevY = snake[bodyPartIndex].y;
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	9c 81       	ldd	r25, Y+4	; 0x04
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	9c 01       	movw	r18, r24
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	82 0f       	add	r24, r18
 244:	93 1f       	adc	r25, r19
 246:	88 5f       	subi	r24, 0xF8	; 248
 248:	9d 4f       	sbci	r25, 0xFD	; 253
 24a:	fc 01       	movw	r30, r24
 24c:	20 81       	ld	r18, Z
 24e:	31 81       	ldd	r19, Z+1	; 0x01
 250:	8b 81       	ldd	r24, Y+3	; 0x03
 252:	9c 81       	ldd	r25, Y+4	; 0x04
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	ac 01       	movw	r20, r24
 25a:	44 0f       	add	r20, r20
 25c:	55 1f       	adc	r21, r21
 25e:	44 0f       	add	r20, r20
 260:	55 1f       	adc	r21, r21
 262:	84 0f       	add	r24, r20
 264:	95 1f       	adc	r25, r21
 266:	84 5f       	subi	r24, 0xF4	; 244
 268:	9d 4f       	sbci	r25, 0xFD	; 253
 26a:	fc 01       	movw	r30, r24
 26c:	31 83       	std	Z+1, r19	; 0x01
 26e:	20 83       	st	Z, r18
				snake[bodyPartIndex].x += 2 * xDirection;
 270:	8b 81       	ldd	r24, Y+3	; 0x03
 272:	9c 81       	ldd	r25, Y+4	; 0x04
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	9c 01       	movw	r18, r24
 27a:	22 0f       	add	r18, r18
 27c:	33 1f       	adc	r19, r19
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	82 0f       	add	r24, r18
 284:	93 1f       	adc	r25, r19
 286:	8a 5f       	subi	r24, 0xFA	; 250
 288:	9d 4f       	sbci	r25, 0xFD	; 253
 28a:	fc 01       	movw	r30, r24
 28c:	20 81       	ld	r18, Z
 28e:	31 81       	ldd	r19, Z+1	; 0x01
 290:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <xDirection>
 294:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <xDirection+0x1>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	28 0f       	add	r18, r24
 29e:	39 1f       	adc	r19, r25
 2a0:	8b 81       	ldd	r24, Y+3	; 0x03
 2a2:	9c 81       	ldd	r25, Y+4	; 0x04
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	ac 01       	movw	r20, r24
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	44 0f       	add	r20, r20
 2b0:	55 1f       	adc	r21, r21
 2b2:	84 0f       	add	r24, r20
 2b4:	95 1f       	adc	r25, r21
 2b6:	8a 5f       	subi	r24, 0xFA	; 250
 2b8:	9d 4f       	sbci	r25, 0xFD	; 253
 2ba:	fc 01       	movw	r30, r24
 2bc:	31 83       	std	Z+1, r19	; 0x01
 2be:	20 83       	st	Z, r18
				snake[bodyPartIndex].y += 2 * yDirection;
 2c0:	8b 81       	ldd	r24, Y+3	; 0x03
 2c2:	9c 81       	ldd	r25, Y+4	; 0x04
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	9c 01       	movw	r18, r24
 2ca:	22 0f       	add	r18, r18
 2cc:	33 1f       	adc	r19, r19
 2ce:	22 0f       	add	r18, r18
 2d0:	33 1f       	adc	r19, r19
 2d2:	82 0f       	add	r24, r18
 2d4:	93 1f       	adc	r25, r19
 2d6:	88 5f       	subi	r24, 0xF8	; 248
 2d8:	9d 4f       	sbci	r25, 0xFD	; 253
 2da:	fc 01       	movw	r30, r24
 2dc:	20 81       	ld	r18, Z
 2de:	31 81       	ldd	r19, Z+1	; 0x01
 2e0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
 2e4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <__data_end+0x1>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	28 0f       	add	r18, r24
 2ee:	39 1f       	adc	r19, r25
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	9c 81       	ldd	r25, Y+4	; 0x04
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	ac 01       	movw	r20, r24
 2fa:	44 0f       	add	r20, r20
 2fc:	55 1f       	adc	r21, r21
 2fe:	44 0f       	add	r20, r20
 300:	55 1f       	adc	r21, r21
 302:	84 0f       	add	r24, r20
 304:	95 1f       	adc	r25, r21
 306:	88 5f       	subi	r24, 0xF8	; 248
 308:	9d 4f       	sbci	r25, 0xFD	; 253
 30a:	fc 01       	movw	r30, r24
 30c:	31 83       	std	Z+1, r19	; 0x01
 30e:	20 83       	st	Z, r18
 310:	86 c0       	rjmp	.+268    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			}
			else
			{
				snake[bodyPartIndex].prevX = snake[bodyPartIndex].x;
 312:	8b 81       	ldd	r24, Y+3	; 0x03
 314:	9c 81       	ldd	r25, Y+4	; 0x04
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	9c 01       	movw	r18, r24
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	82 0f       	add	r24, r18
 326:	93 1f       	adc	r25, r19
 328:	8a 5f       	subi	r24, 0xFA	; 250
 32a:	9d 4f       	sbci	r25, 0xFD	; 253
 32c:	fc 01       	movw	r30, r24
 32e:	20 81       	ld	r18, Z
 330:	31 81       	ldd	r19, Z+1	; 0x01
 332:	8b 81       	ldd	r24, Y+3	; 0x03
 334:	9c 81       	ldd	r25, Y+4	; 0x04
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	ac 01       	movw	r20, r24
 33c:	44 0f       	add	r20, r20
 33e:	55 1f       	adc	r21, r21
 340:	44 0f       	add	r20, r20
 342:	55 1f       	adc	r21, r21
 344:	84 0f       	add	r24, r20
 346:	95 1f       	adc	r25, r21
 348:	86 5f       	subi	r24, 0xF6	; 246
 34a:	9d 4f       	sbci	r25, 0xFD	; 253
 34c:	fc 01       	movw	r30, r24
 34e:	31 83       	std	Z+1, r19	; 0x01
 350:	20 83       	st	Z, r18
				snake[bodyPartIndex].prevY = snake[bodyPartIndex].y;
 352:	8b 81       	ldd	r24, Y+3	; 0x03
 354:	9c 81       	ldd	r25, Y+4	; 0x04
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	9c 01       	movw	r18, r24
 35c:	22 0f       	add	r18, r18
 35e:	33 1f       	adc	r19, r19
 360:	22 0f       	add	r18, r18
 362:	33 1f       	adc	r19, r19
 364:	82 0f       	add	r24, r18
 366:	93 1f       	adc	r25, r19
 368:	88 5f       	subi	r24, 0xF8	; 248
 36a:	9d 4f       	sbci	r25, 0xFD	; 253
 36c:	fc 01       	movw	r30, r24
 36e:	20 81       	ld	r18, Z
 370:	31 81       	ldd	r19, Z+1	; 0x01
 372:	8b 81       	ldd	r24, Y+3	; 0x03
 374:	9c 81       	ldd	r25, Y+4	; 0x04
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	ac 01       	movw	r20, r24
 37c:	44 0f       	add	r20, r20
 37e:	55 1f       	adc	r21, r21
 380:	44 0f       	add	r20, r20
 382:	55 1f       	adc	r21, r21
 384:	84 0f       	add	r24, r20
 386:	95 1f       	adc	r25, r21
 388:	84 5f       	subi	r24, 0xF4	; 244
 38a:	9d 4f       	sbci	r25, 0xFD	; 253
 38c:	fc 01       	movw	r30, r24
 38e:	31 83       	std	Z+1, r19	; 0x01
 390:	20 83       	st	Z, r18
				snake[bodyPartIndex].x = snake[bodyPartIndex].headPointer->prevX;
 392:	8b 81       	ldd	r24, Y+3	; 0x03
 394:	9c 81       	ldd	r25, Y+4	; 0x04
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	9c 01       	movw	r18, r24
 39c:	22 0f       	add	r18, r18
 39e:	33 1f       	adc	r19, r19
 3a0:	22 0f       	add	r18, r18
 3a2:	33 1f       	adc	r19, r19
 3a4:	82 0f       	add	r24, r18
 3a6:	93 1f       	adc	r25, r19
 3a8:	82 5f       	subi	r24, 0xF2	; 242
 3aa:	9d 4f       	sbci	r25, 0xFD	; 253
 3ac:	fc 01       	movw	r30, r24
 3ae:	80 81       	ld	r24, Z
 3b0:	91 81       	ldd	r25, Z+1	; 0x01
 3b2:	fc 01       	movw	r30, r24
 3b4:	24 81       	ldd	r18, Z+4	; 0x04
 3b6:	35 81       	ldd	r19, Z+5	; 0x05
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ba:	9c 81       	ldd	r25, Y+4	; 0x04
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	ac 01       	movw	r20, r24
 3c2:	44 0f       	add	r20, r20
 3c4:	55 1f       	adc	r21, r21
 3c6:	44 0f       	add	r20, r20
 3c8:	55 1f       	adc	r21, r21
 3ca:	84 0f       	add	r24, r20
 3cc:	95 1f       	adc	r25, r21
 3ce:	8a 5f       	subi	r24, 0xFA	; 250
 3d0:	9d 4f       	sbci	r25, 0xFD	; 253
 3d2:	fc 01       	movw	r30, r24
 3d4:	31 83       	std	Z+1, r19	; 0x01
 3d6:	20 83       	st	Z, r18
				snake[bodyPartIndex].y = snake[bodyPartIndex].headPointer->prevY;
 3d8:	8b 81       	ldd	r24, Y+3	; 0x03
 3da:	9c 81       	ldd	r25, Y+4	; 0x04
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	9c 01       	movw	r18, r24
 3e2:	22 0f       	add	r18, r18
 3e4:	33 1f       	adc	r19, r19
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	82 0f       	add	r24, r18
 3ec:	93 1f       	adc	r25, r19
 3ee:	82 5f       	subi	r24, 0xF2	; 242
 3f0:	9d 4f       	sbci	r25, 0xFD	; 253
 3f2:	fc 01       	movw	r30, r24
 3f4:	80 81       	ld	r24, Z
 3f6:	91 81       	ldd	r25, Z+1	; 0x01
 3f8:	fc 01       	movw	r30, r24
 3fa:	26 81       	ldd	r18, Z+6	; 0x06
 3fc:	37 81       	ldd	r19, Z+7	; 0x07
 3fe:	8b 81       	ldd	r24, Y+3	; 0x03
 400:	9c 81       	ldd	r25, Y+4	; 0x04
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	ac 01       	movw	r20, r24
 408:	44 0f       	add	r20, r20
 40a:	55 1f       	adc	r21, r21
 40c:	44 0f       	add	r20, r20
 40e:	55 1f       	adc	r21, r21
 410:	84 0f       	add	r24, r20
 412:	95 1f       	adc	r25, r21
 414:	88 5f       	subi	r24, 0xF8	; 248
 416:	9d 4f       	sbci	r25, 0xFD	; 253
 418:	fc 01       	movw	r30, r24
 41a:	31 83       	std	Z+1, r19	; 0x01
 41c:	20 83       	st	Z, r18
    while (1) 
	{
		clearDisplay();

		
		for (int bodyPartIndex = 0; bodyPartIndex < snakeBodyLength; bodyPartIndex++)
 41e:	8b 81       	ldd	r24, Y+3	; 0x03
 420:	9c 81       	ldd	r25, Y+4	; 0x04
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	9c 83       	std	Y+4, r25	; 0x04
 426:	8b 83       	std	Y+3, r24	; 0x03
 428:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 42c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 430:	2b 81       	ldd	r18, Y+3	; 0x03
 432:	3c 81       	ldd	r19, Y+4	; 0x04
 434:	28 17       	cp	r18, r24
 436:	39 07       	cpc	r19, r25
 438:	0c f4       	brge	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43a:	c7 ce       	rjmp	.-626    	; 0x1ca <main+0xa6>
				snake[bodyPartIndex].x = snake[bodyPartIndex].headPointer->prevX;
				snake[bodyPartIndex].y = snake[bodyPartIndex].headPointer->prevY;
			}
		}

		for(int x = 0; x < snakeBodyLength; x++)
 43c:	1e 82       	std	Y+6, r1	; 0x06
 43e:	1d 82       	std	Y+5, r1	; 0x05
 440:	29 c0       	rjmp	.+82     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
		{
			DrawDot(snake[x].x, snake[x].y, worldRender);
 442:	8d 81       	ldd	r24, Y+5	; 0x05
 444:	9e 81       	ldd	r25, Y+6	; 0x06
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	9c 01       	movw	r18, r24
 44c:	22 0f       	add	r18, r18
 44e:	33 1f       	adc	r19, r19
 450:	22 0f       	add	r18, r18
 452:	33 1f       	adc	r19, r19
 454:	82 0f       	add	r24, r18
 456:	93 1f       	adc	r25, r19
 458:	88 5f       	subi	r24, 0xF8	; 248
 45a:	9d 4f       	sbci	r25, 0xFD	; 253
 45c:	fc 01       	movw	r30, r24
 45e:	80 81       	ld	r24, Z
 460:	91 81       	ldd	r25, Z+1	; 0x01
 462:	68 2f       	mov	r22, r24
 464:	8d 81       	ldd	r24, Y+5	; 0x05
 466:	9e 81       	ldd	r25, Y+6	; 0x06
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	9c 01       	movw	r18, r24
 46e:	22 0f       	add	r18, r18
 470:	33 1f       	adc	r19, r19
 472:	22 0f       	add	r18, r18
 474:	33 1f       	adc	r19, r19
 476:	82 0f       	add	r24, r18
 478:	93 1f       	adc	r25, r19
 47a:	8a 5f       	subi	r24, 0xFA	; 250
 47c:	9d 4f       	sbci	r25, 0xFD	; 253
 47e:	fc 01       	movw	r30, r24
 480:	80 81       	ld	r24, Z
 482:	91 81       	ldd	r25, Z+1	; 0x01
 484:	4e ee       	ldi	r20, 0xEE	; 238
 486:	55 e0       	ldi	r21, 0x05	; 5
 488:	88 d2       	rcall	.+1296   	; 0x99a <DrawDot>
				snake[bodyPartIndex].x = snake[bodyPartIndex].headPointer->prevX;
				snake[bodyPartIndex].y = snake[bodyPartIndex].headPointer->prevY;
			}
		}

		for(int x = 0; x < snakeBodyLength; x++)
 48a:	8d 81       	ldd	r24, Y+5	; 0x05
 48c:	9e 81       	ldd	r25, Y+6	; 0x06
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	9e 83       	std	Y+6, r25	; 0x06
 492:	8d 83       	std	Y+5, r24	; 0x05
 494:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 498:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 49c:	2d 81       	ldd	r18, Y+5	; 0x05
 49e:	3e 81       	ldd	r19, Y+6	; 0x06
 4a0:	28 17       	cp	r18, r24
 4a2:	39 07       	cpc	r19, r25
		{
			DrawDot(snake[x].x, snake[x].y, worldRender);
		}
		
		RenderWorld(worldRender);
 4a4:	74 f2       	brlt	.-100    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 4a6:	8e ee       	ldi	r24, 0xEE	; 238
 4a8:	95 e0       	ldi	r25, 0x05	; 5
 4aa:	ad d2       	rcall	.+1370   	; 0xa06 <RenderWorld>
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	a8 e4       	ldi	r26, 0x48	; 72
 4b2:	b2 e4       	ldi	r27, 0x42	; 66
 4b4:	8f 83       	std	Y+7, r24	; 0x07
 4b6:	98 87       	std	Y+8, r25	; 0x08
 4b8:	a9 87       	std	Y+9, r26	; 0x09
 4ba:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	4a e7       	ldi	r20, 0x7A	; 122
 4c2:	55 e4       	ldi	r21, 0x45	; 69
 4c4:	6f 81       	ldd	r22, Y+7	; 0x07
 4c6:	78 85       	ldd	r23, Y+8	; 0x08
 4c8:	89 85       	ldd	r24, Y+9	; 0x09
 4ca:	9a 85       	ldd	r25, Y+10	; 0x0a
 4cc:	5a d3       	rcall	.+1716   	; 0xb82 <__mulsf3>
 4ce:	dc 01       	movw	r26, r24
 4d0:	cb 01       	movw	r24, r22
 4d2:	8b 87       	std	Y+11, r24	; 0x0b
 4d4:	9c 87       	std	Y+12, r25	; 0x0c
 4d6:	ad 87       	std	Y+13, r26	; 0x0d
 4d8:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	40 e8       	ldi	r20, 0x80	; 128
 4e0:	5f e3       	ldi	r21, 0x3F	; 63
 4e2:	6b 85       	ldd	r22, Y+11	; 0x0b
 4e4:	7c 85       	ldd	r23, Y+12	; 0x0c
 4e6:	8d 85       	ldd	r24, Y+13	; 0x0d
 4e8:	9e 85       	ldd	r25, Y+14	; 0x0e
 4ea:	ca d2       	rcall	.+1428   	; 0xa80 <__cmpsf2>
 4ec:	88 23       	and	r24, r24
 4ee:	2c f4       	brge	.+10     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
		__ticks = 1;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	98 8b       	std	Y+16, r25	; 0x10
 4f6:	8f 87       	std	Y+15, r24	; 0x0f
 4f8:	3b c0       	rjmp	.+118    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
	else if (__tmp > 65535)
 4fa:	20 e0       	ldi	r18, 0x00	; 0
 4fc:	3f ef       	ldi	r19, 0xFF	; 255
 4fe:	4f e7       	ldi	r20, 0x7F	; 127
 500:	57 e4       	ldi	r21, 0x47	; 71
 502:	6b 85       	ldd	r22, Y+11	; 0x0b
 504:	7c 85       	ldd	r23, Y+12	; 0x0c
 506:	8d 85       	ldd	r24, Y+13	; 0x0d
 508:	9e 85       	ldd	r25, Y+14	; 0x0e
 50a:	37 d3       	rcall	.+1646   	; 0xb7a <__gesf2>
 50c:	18 16       	cp	r1, r24
 50e:	3c f5       	brge	.+78     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	40 e2       	ldi	r20, 0x20	; 32
 516:	51 e4       	ldi	r21, 0x41	; 65
 518:	6f 81       	ldd	r22, Y+7	; 0x07
 51a:	78 85       	ldd	r23, Y+8	; 0x08
 51c:	89 85       	ldd	r24, Y+9	; 0x09
 51e:	9a 85       	ldd	r25, Y+10	; 0x0a
 520:	30 d3       	rcall	.+1632   	; 0xb82 <__mulsf3>
 522:	dc 01       	movw	r26, r24
 524:	cb 01       	movw	r24, r22
 526:	bc 01       	movw	r22, r24
 528:	cd 01       	movw	r24, r26
 52a:	ae d2       	rcall	.+1372   	; 0xa88 <__fixunssfsi>
 52c:	dc 01       	movw	r26, r24
 52e:	cb 01       	movw	r24, r22
 530:	98 8b       	std	Y+16, r25	; 0x10
 532:	8f 87       	std	Y+15, r24	; 0x0f
 534:	0f c0       	rjmp	.+30     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 536:	80 e9       	ldi	r24, 0x90	; 144
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	9a 8b       	std	Y+18, r25	; 0x12
 53c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 53e:	89 89       	ldd	r24, Y+17	; 0x11
 540:	9a 89       	ldd	r25, Y+18	; 0x12
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 546:	9a 8b       	std	Y+18, r25	; 0x12
 548:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 54a:	8f 85       	ldd	r24, Y+15	; 0x0f
 54c:	98 89       	ldd	r25, Y+16	; 0x10
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	98 8b       	std	Y+16, r25	; 0x10
 552:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 554:	8f 85       	ldd	r24, Y+15	; 0x0f
 556:	98 89       	ldd	r25, Y+16	; 0x10
 558:	89 2b       	or	r24, r25
 55a:	69 f7       	brne	.-38     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 55c:	13 c0       	rjmp	.+38     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 55e:	6b 85       	ldd	r22, Y+11	; 0x0b
 560:	7c 85       	ldd	r23, Y+12	; 0x0c
 562:	8d 85       	ldd	r24, Y+13	; 0x0d
 564:	9e 85       	ldd	r25, Y+14	; 0x0e
 566:	90 d2       	rcall	.+1312   	; 0xa88 <__fixunssfsi>
 568:	dc 01       	movw	r26, r24
 56a:	cb 01       	movw	r24, r22
 56c:	98 8b       	std	Y+16, r25	; 0x10
 56e:	8f 87       	std	Y+15, r24	; 0x0f
 570:	8f 85       	ldd	r24, Y+15	; 0x0f
 572:	98 89       	ldd	r25, Y+16	; 0x10
 574:	9c 8b       	std	Y+20, r25	; 0x14
 576:	8b 8b       	std	Y+19, r24	; 0x13
 578:	8b 89       	ldd	r24, Y+19	; 0x13
 57a:	9c 89       	ldd	r25, Y+20	; 0x14
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 580:	9c 8b       	std	Y+20, r25	; 0x14
 582:	8b 8b       	std	Y+19, r24	; 0x13

		_delay_ms(50);
    }
 584:	1e ce       	rjmp	.-964    	; 0x1c2 <main+0x9e>

00000586 <initDisplay>:
#define RST_BIT 0 // PA0
#define DC_BIT 1 // PA1
#define LIGHT_BIT 2 // PA2

void initDisplay()
{
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	cd b7       	in	r28, 0x3d	; 61
 58c:	de b7       	in	r29, 0x3e	; 62
	SPI_MasterInit();
 58e:	12 d1       	rcall	.+548    	; 0x7b4 <SPI_MasterInit>
	
	// Set port to output
	DDRA = 0xFF;
 590:	81 e2       	ldi	r24, 0x21	; 33
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	2f ef       	ldi	r18, 0xFF	; 255
 596:	fc 01       	movw	r30, r24
 598:	20 83       	st	Z, r18
	
	// Set bits to high (active low)
	PORTA |= (1 << RST_BIT);
 59a:	82 e2       	ldi	r24, 0x22	; 34
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	22 e2       	ldi	r18, 0x22	; 34
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	f9 01       	movw	r30, r18
 5a4:	20 81       	ld	r18, Z
 5a6:	21 60       	ori	r18, 0x01	; 1
 5a8:	fc 01       	movw	r30, r24
 5aa:	20 83       	st	Z, r18
	PORTA |= (1 << DC_BIT);
 5ac:	82 e2       	ldi	r24, 0x22	; 34
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	22 e2       	ldi	r18, 0x22	; 34
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	f9 01       	movw	r30, r18
 5b6:	20 81       	ld	r18, Z
 5b8:	22 60       	ori	r18, 0x02	; 2
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 83       	st	Z, r18

	// Turn on light
	PORTA &= ~(1 << LIGHT_BIT);
 5be:	82 e2       	ldi	r24, 0x22	; 34
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	22 e2       	ldi	r18, 0x22	; 34
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	f9 01       	movw	r30, r18
 5c8:	20 81       	ld	r18, Z
 5ca:	2b 7f       	andi	r18, 0xFB	; 251
 5cc:	fc 01       	movw	r30, r24
	
	// Required display reset
	// This has to be done before doing
	// Anything else with the display
	resetDisplay();
 5ce:	20 83       	st	Z, r18
	
	// Use extended instruction set
	sendIntruction(0x21);
 5d0:	0f d0       	rcall	.+30     	; 0x5f0 <resetDisplay>
 5d2:	81 e2       	ldi	r24, 0x21	; 33

	// Here we control operation voltage of the LCD
	// We set it to 6V (the minimum allowed voltage range)
	// If you do not set a VOP value, the internal voltage generator
	// Will be switched off, and thus the display won't function.
	sendIntruction(0xC0);
 5d4:	9f d0       	rcall	.+318    	; 0x714 <sendIntruction>
 5d6:	80 ec       	ldi	r24, 0xC0	; 192

	// We set the bias voltage levels
	// The bias value is taken after the
	// optimum bias value described in official
	// data sheet.
	sendIntruction(0x13);
 5d8:	9d d0       	rcall	.+314    	; 0x714 <sendIntruction>
 5da:	83 e1       	ldi	r24, 0x13	; 19

	// Use basic instruction set
	sendIntruction(0x20);
 5dc:	9b d0       	rcall	.+310    	; 0x714 <sendIntruction>
 5de:	80 e2       	ldi	r24, 0x20	; 32
 5e0:	99 d0       	rcall	.+306    	; 0x714 <sendIntruction>

	// Set display mode normal
	sendIntruction(0b00001100);
 5e2:	8c e0       	ldi	r24, 0x0C	; 12
 5e4:	97 d0       	rcall	.+302    	; 0x714 <sendIntruction>
 5e6:	cb d0       	rcall	.+406    	; 0x77e <clearDisplay>
	

	// Clear the display to make sure
	// No pixels are alive on startup
	clearDisplay();
 5e8:	00 00       	nop
 5ea:	df 91       	pop	r29
}
 5ec:	cf 91       	pop	r28
 5ee:	08 95       	ret

000005f0 <resetDisplay>:
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29


void resetDisplay()
{
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	2e 97       	sbiw	r28, 0x0e	; 14
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	f8 94       	cli
 5fe:	de bf       	out	0x3e, r29	; 62
 600:	0f be       	out	0x3f, r0	; 63
 602:	cd bf       	out	0x3d, r28	; 61
	// Set RES low
	PORTA &= ~(1 << RST_BIT);
 604:	82 e2       	ldi	r24, 0x22	; 34
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	22 e2       	ldi	r18, 0x22	; 34
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	f9 01       	movw	r30, r18
 60e:	20 81       	ld	r18, Z
 610:	2e 7f       	andi	r18, 0xFE	; 254
 612:	fc 01       	movw	r30, r24
 614:	20 83       	st	Z, r18
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	a8 ec       	ldi	r26, 0xC8	; 200
 61c:	b2 e4       	ldi	r27, 0x42	; 66
 61e:	89 83       	std	Y+1, r24	; 0x01
 620:	9a 83       	std	Y+2, r25	; 0x02
 622:	ab 83       	std	Y+3, r26	; 0x03
 624:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 626:	20 e0       	ldi	r18, 0x00	; 0
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	4a e7       	ldi	r20, 0x7A	; 122
 62c:	55 e4       	ldi	r21, 0x45	; 69
 62e:	69 81       	ldd	r22, Y+1	; 0x01
 630:	7a 81       	ldd	r23, Y+2	; 0x02
 632:	8b 81       	ldd	r24, Y+3	; 0x03
 634:	9c 81       	ldd	r25, Y+4	; 0x04
 636:	a5 d2       	rcall	.+1354   	; 0xb82 <__mulsf3>
 638:	dc 01       	movw	r26, r24
 63a:	cb 01       	movw	r24, r22
 63c:	8d 83       	std	Y+5, r24	; 0x05
 63e:	9e 83       	std	Y+6, r25	; 0x06
 640:	af 83       	std	Y+7, r26	; 0x07
 642:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 644:	20 e0       	ldi	r18, 0x00	; 0
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	40 e8       	ldi	r20, 0x80	; 128
 64a:	5f e3       	ldi	r21, 0x3F	; 63
 64c:	6d 81       	ldd	r22, Y+5	; 0x05
 64e:	7e 81       	ldd	r23, Y+6	; 0x06
 650:	8f 81       	ldd	r24, Y+7	; 0x07
 652:	98 85       	ldd	r25, Y+8	; 0x08
 654:	15 d2       	rcall	.+1066   	; 0xa80 <__cmpsf2>
 656:	88 23       	and	r24, r24
 658:	2c f4       	brge	.+10     	; 0x664 <resetDisplay+0x74>
		__ticks = 1;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	9a 87       	std	Y+10, r25	; 0x0a
 660:	89 87       	std	Y+9, r24	; 0x09
 662:	3b c0       	rjmp	.+118    	; 0x6da <resetDisplay+0xea>
	else if (__tmp > 65535)
 664:	20 e0       	ldi	r18, 0x00	; 0
 666:	3f ef       	ldi	r19, 0xFF	; 255
 668:	4f e7       	ldi	r20, 0x7F	; 127
 66a:	57 e4       	ldi	r21, 0x47	; 71
 66c:	6d 81       	ldd	r22, Y+5	; 0x05
 66e:	7e 81       	ldd	r23, Y+6	; 0x06
 670:	8f 81       	ldd	r24, Y+7	; 0x07
 672:	98 85       	ldd	r25, Y+8	; 0x08
 674:	82 d2       	rcall	.+1284   	; 0xb7a <__gesf2>
 676:	18 16       	cp	r1, r24
 678:	3c f5       	brge	.+78     	; 0x6c8 <resetDisplay+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 67a:	20 e0       	ldi	r18, 0x00	; 0
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	40 e2       	ldi	r20, 0x20	; 32
 680:	51 e4       	ldi	r21, 0x41	; 65
 682:	69 81       	ldd	r22, Y+1	; 0x01
 684:	7a 81       	ldd	r23, Y+2	; 0x02
 686:	8b 81       	ldd	r24, Y+3	; 0x03
 688:	9c 81       	ldd	r25, Y+4	; 0x04
 68a:	7b d2       	rcall	.+1270   	; 0xb82 <__mulsf3>
 68c:	dc 01       	movw	r26, r24
 68e:	cb 01       	movw	r24, r22
 690:	bc 01       	movw	r22, r24
 692:	cd 01       	movw	r24, r26
 694:	f9 d1       	rcall	.+1010   	; 0xa88 <__fixunssfsi>
 696:	dc 01       	movw	r26, r24
 698:	cb 01       	movw	r24, r22
 69a:	9a 87       	std	Y+10, r25	; 0x0a
 69c:	89 87       	std	Y+9, r24	; 0x09
 69e:	0f c0       	rjmp	.+30     	; 0x6be <resetDisplay+0xce>
 6a0:	80 e9       	ldi	r24, 0x90	; 144
 6a2:	91 e0       	ldi	r25, 0x01	; 1
 6a4:	9c 87       	std	Y+12, r25	; 0x0c
 6a6:	8b 87       	std	Y+11, r24	; 0x0b
 6a8:	8b 85       	ldd	r24, Y+11	; 0x0b
 6aa:	9c 85       	ldd	r25, Y+12	; 0x0c
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <resetDisplay+0xbc>
 6b0:	9c 87       	std	Y+12, r25	; 0x0c
 6b2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6b4:	89 85       	ldd	r24, Y+9	; 0x09
 6b6:	9a 85       	ldd	r25, Y+10	; 0x0a
 6b8:	01 97       	sbiw	r24, 0x01	; 1
 6ba:	9a 87       	std	Y+10, r25	; 0x0a
 6bc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6be:	89 85       	ldd	r24, Y+9	; 0x09
 6c0:	9a 85       	ldd	r25, Y+10	; 0x0a
 6c2:	89 2b       	or	r24, r25
 6c4:	69 f7       	brne	.-38     	; 0x6a0 <resetDisplay+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6c6:	13 c0       	rjmp	.+38     	; 0x6ee <resetDisplay+0xfe>
 6c8:	6d 81       	ldd	r22, Y+5	; 0x05
 6ca:	7e 81       	ldd	r23, Y+6	; 0x06
 6cc:	8f 81       	ldd	r24, Y+7	; 0x07
 6ce:	98 85       	ldd	r25, Y+8	; 0x08
 6d0:	db d1       	rcall	.+950    	; 0xa88 <__fixunssfsi>
 6d2:	dc 01       	movw	r26, r24
 6d4:	cb 01       	movw	r24, r22
 6d6:	9a 87       	std	Y+10, r25	; 0x0a
 6d8:	89 87       	std	Y+9, r24	; 0x09
 6da:	89 85       	ldd	r24, Y+9	; 0x09
 6dc:	9a 85       	ldd	r25, Y+10	; 0x0a
 6de:	9e 87       	std	Y+14, r25	; 0x0e
 6e0:	8d 87       	std	Y+13, r24	; 0x0d
 6e2:	8d 85       	ldd	r24, Y+13	; 0x0d
 6e4:	9e 85       	ldd	r25, Y+14	; 0x0e
 6e6:	01 97       	sbiw	r24, 0x01	; 1
 6e8:	f1 f7       	brne	.-4      	; 0x6e6 <resetDisplay+0xf6>
 6ea:	9e 87       	std	Y+14, r25	; 0x0e
 6ec:	8d 87       	std	Y+13, r24	; 0x0d
		
	// Delay of min 100 ns (0,1ms) p.20
	_delay_ms(100);
		
	// Set RES high
	PORTA |= (1 << RST_BIT);
 6ee:	82 e2       	ldi	r24, 0x22	; 34
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	22 e2       	ldi	r18, 0x22	; 34
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	f9 01       	movw	r30, r18
 6f8:	20 81       	ld	r18, Z
 6fa:	21 60       	ori	r18, 0x01	; 1
 6fc:	fc 01       	movw	r30, r24
 6fe:	20 83       	st	Z, r18
}
 700:	00 00       	nop
 702:	2e 96       	adiw	r28, 0x0e	; 14
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	de bf       	out	0x3e, r29	; 62
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	cd bf       	out	0x3d, r28	; 61
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	08 95       	ret

00000714 <sendIntruction>:

void sendIntruction(unsigned char cmd)
{
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	1f 92       	push	r1
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
 71e:	89 83       	std	Y+1, r24	; 0x01
	// Set DC low, Command
	PORTA &= ~(1 << DC_BIT);
 720:	82 e2       	ldi	r24, 0x22	; 34
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	22 e2       	ldi	r18, 0x22	; 34
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	f9 01       	movw	r30, r18
 72a:	20 81       	ld	r18, Z
 72c:	2d 7f       	andi	r18, 0xFD	; 253
 72e:	fc 01       	movw	r30, r24
 730:	20 83       	st	Z, r18
	SPI_MasterTransmit(cmd);
 732:	89 81       	ldd	r24, Y+1	; 0x01
 734:	51 d0       	rcall	.+162    	; 0x7d8 <SPI_MasterTransmit>
	PORTA |= 1 << DC_BIT;
 736:	82 e2       	ldi	r24, 0x22	; 34
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	22 e2       	ldi	r18, 0x22	; 34
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	f9 01       	movw	r30, r18
 740:	20 81       	ld	r18, Z
 742:	22 60       	ori	r18, 0x02	; 2
 744:	fc 01       	movw	r30, r24
 746:	20 83       	st	Z, r18
}
 748:	00 00       	nop
 74a:	0f 90       	pop	r0
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	08 95       	ret

00000752 <sendData>:

void sendData(unsigned char data)
{	
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	1f 92       	push	r1
 758:	cd b7       	in	r28, 0x3d	; 61
 75a:	de b7       	in	r29, 0x3e	; 62
 75c:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= 1 << DC_BIT;
 75e:	82 e2       	ldi	r24, 0x22	; 34
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	22 e2       	ldi	r18, 0x22	; 34
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	f9 01       	movw	r30, r18
 768:	20 81       	ld	r18, Z
 76a:	22 60       	ori	r18, 0x02	; 2
 76c:	fc 01       	movw	r30, r24
 76e:	20 83       	st	Z, r18
	SPI_MasterTransmit(data);
 770:	89 81       	ldd	r24, Y+1	; 0x01
 772:	32 d0       	rcall	.+100    	; 0x7d8 <SPI_MasterTransmit>
}
 774:	00 00       	nop
 776:	0f 90       	pop	r0
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	08 95       	ret

0000077e <clearDisplay>:

void clearDisplay()
{
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	1f 92       	push	r1
 784:	1f 92       	push	r1
 786:	cd b7       	in	r28, 0x3d	; 61
 788:	de b7       	in	r29, 0x3e	; 62
	for (int k=0; k<=503; k++)
 78a:	1a 82       	std	Y+2, r1	; 0x02
 78c:	19 82       	std	Y+1, r1	; 0x01
 78e:	07 c0       	rjmp	.+14     	; 0x79e <clearDisplay+0x20>
	{
		sendData(0x00);
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	df df       	rcall	.-66     	; 0x752 <sendData>
	SPI_MasterTransmit(data);
}

void clearDisplay()
{
	for (int k=0; k<=503; k++)
 794:	89 81       	ldd	r24, Y+1	; 0x01
 796:	9a 81       	ldd	r25, Y+2	; 0x02
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	9a 83       	std	Y+2, r25	; 0x02
 79c:	89 83       	std	Y+1, r24	; 0x01
 79e:	89 81       	ldd	r24, Y+1	; 0x01
 7a0:	9a 81       	ldd	r25, Y+2	; 0x02
 7a2:	88 3f       	cpi	r24, 0xF8	; 248
 7a4:	91 40       	sbci	r25, 0x01	; 1
 7a6:	a4 f3       	brlt	.-24     	; 0x790 <clearDisplay+0x12>
	{
		sendData(0x00);
	}
 7a8:	00 00       	nop
 7aa:	0f 90       	pop	r0
 7ac:	0f 90       	pop	r0
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	08 95       	ret

000007b4 <SPI_MasterInit>:
#define DD_MOSI 2
#define DD_MISO 3
#define DD_DORD 5

void SPI_MasterInit(void)
{	
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS); //MOSI,SS & SCK output,others input
 7bc:	84 e2       	ldi	r24, 0x24	; 36
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	27 e0       	ldi	r18, 0x07	; 7
 7c2:	fc 01       	movw	r30, r24
 7c4:	20 83       	st	Z, r18
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);  		   //SPI, Master, clock = fck/16
 7c6:	8c e4       	ldi	r24, 0x4C	; 76
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	21 e5       	ldi	r18, 0x51	; 81
 7cc:	fc 01       	movw	r30, r24
 7ce:	20 83       	st	Z, r18
}
 7d0:	00 00       	nop
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	08 95       	ret

000007d8 <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
 7d8:	cf 93       	push	r28
 7da:	df 93       	push	r29
 7dc:	00 d0       	rcall	.+0      	; 0x7de <SPI_MasterTransmit+0x6>
 7de:	cd b7       	in	r28, 0x3d	; 61
 7e0:	de b7       	in	r29, 0x3e	; 62
 7e2:	8b 83       	std	Y+3, r24	; 0x03
	PORTB &= ~(1 << DD_SS);
 7e4:	85 e2       	ldi	r24, 0x25	; 37
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	25 e2       	ldi	r18, 0x25	; 37
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	f9 01       	movw	r30, r18
 7ee:	20 81       	ld	r18, Z
 7f0:	2e 7f       	andi	r18, 0xFE	; 254
 7f2:	fc 01       	movw	r30, r24
 7f4:	20 83       	st	Z, r18

	// Start transmission
	SPDR = cData;			
 7f6:	8e e4       	ldi	r24, 0x4E	; 78
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	2b 81       	ldd	r18, Y+3	; 0x03
 7fc:	fc 01       	movw	r30, r24
 7fe:	20 83       	st	Z, r18
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
 800:	1a 82       	std	Y+2, r1	; 0x02
 802:	19 82       	std	Y+1, r1	; 0x01
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
 804:	05 c0       	rjmp	.+10     	; 0x810 <SPI_MasterTransmit+0x38>
	{
		k++;
 806:	89 81       	ldd	r24, Y+1	; 0x01
 808:	9a 81       	ldd	r25, Y+2	; 0x02
 80a:	01 96       	adiw	r24, 0x01	; 1
 80c:	9a 83       	std	Y+2, r25	; 0x02
 80e:	89 83       	std	Y+1, r24	; 0x01
	// Start transmission
	SPDR = cData;			
	
	// k variable increment is to avoid C compiler optimization
	int k = 0;
	while( !(SPSR & (1<<SPIF)) ) // Wait for transmission complete
 810:	8d e4       	ldi	r24, 0x4D	; 77
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	fc 01       	movw	r30, r24
 816:	80 81       	ld	r24, Z
 818:	88 23       	and	r24, r24
 81a:	ac f7       	brge	.-22     	; 0x806 <SPI_MasterTransmit+0x2e>
	{
		k++;
	}			
	
	cData = SPDR;
 81c:	8e e4       	ldi	r24, 0x4E	; 78
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	fc 01       	movw	r30, r24
 822:	80 81       	ld	r24, Z
 824:	8b 83       	std	Y+3, r24	; 0x03

	PORTB|= 1 << DD_SS;
 826:	85 e2       	ldi	r24, 0x25	; 37
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	25 e2       	ldi	r18, 0x25	; 37
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	f9 01       	movw	r30, r18
 830:	20 81       	ld	r18, Z
 832:	21 60       	ori	r18, 0x01	; 1
 834:	fc 01       	movw	r30, r24
 836:	20 83       	st	Z, r18
}
 838:	00 00       	nop
 83a:	0f 90       	pop	r0
 83c:	0f 90       	pop	r0
 83e:	0f 90       	pop	r0
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	08 95       	ret

00000846 <DrawPixel>:
 */ 
#include "WorldDriver.h"
#include "Nokia5110Driver.h"

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
 846:	cf 93       	push	r28
 848:	df 93       	push	r29
 84a:	cd b7       	in	r28, 0x3d	; 61
 84c:	de b7       	in	r29, 0x3e	; 62
 84e:	28 97       	sbiw	r28, 0x08	; 8
 850:	0f b6       	in	r0, 0x3f	; 63
 852:	f8 94       	cli
 854:	de bf       	out	0x3e, r29	; 62
 856:	0f be       	out	0x3f, r0	; 63
 858:	cd bf       	out	0x3d, r28	; 61
 85a:	8d 83       	std	Y+5, r24	; 0x05
 85c:	6e 83       	std	Y+6, r22	; 0x06
 85e:	58 87       	std	Y+8, r21	; 0x08
 860:	4f 83       	std	Y+7, r20	; 0x07
	if (x < 0 || x > 83)
 862:	8d 81       	ldd	r24, Y+5	; 0x05
 864:	84 35       	cpi	r24, 0x54	; 84
 866:	08 f0       	brcs	.+2      	; 0x86a <DrawPixel+0x24>
 868:	8c c0       	rjmp	.+280    	; 0x982 <DrawPixel+0x13c>
		return;

	if (y < 0 || y > 47)
 86a:	8e 81       	ldd	r24, Y+6	; 0x06
 86c:	80 33       	cpi	r24, 0x30	; 48
 86e:	08 f0       	brcs	.+2      	; 0x872 <DrawPixel+0x2c>
 870:	8a c0       	rjmp	.+276    	; 0x986 <DrawPixel+0x140>
		return;

	unsigned int baselineOffset = 0;
 872:	1a 82       	std	Y+2, r1	; 0x02
 874:	19 82       	std	Y+1, r1	; 0x01
	unsigned int verticalBitOffset = 0;
 876:	1c 82       	std	Y+4, r1	; 0x04
 878:	1b 82       	std	Y+3, r1	; 0x03

	if (y >= 0 && y <= 7)
 87a:	8e 81       	ldd	r24, Y+6	; 0x06
 87c:	88 30       	cpi	r24, 0x08	; 8
 87e:	40 f4       	brcc	.+16     	; 0x890 <DrawPixel+0x4a>
	{
		baselineOffset = 0;
 880:	1a 82       	std	Y+2, r1	; 0x02
 882:	19 82       	std	Y+1, r1	; 0x01
		verticalBitOffset = y;
 884:	8e 81       	ldd	r24, Y+6	; 0x06
 886:	88 2f       	mov	r24, r24
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	9c 83       	std	Y+4, r25	; 0x04
 88c:	8b 83       	std	Y+3, r24	; 0x03
 88e:	54 c0       	rjmp	.+168    	; 0x938 <DrawPixel+0xf2>
	} 
	else if (y >= 8 && y <= 15)
 890:	8e 81       	ldd	r24, Y+6	; 0x06
 892:	88 30       	cpi	r24, 0x08	; 8
 894:	70 f0       	brcs	.+28     	; 0x8b2 <DrawPixel+0x6c>
 896:	8e 81       	ldd	r24, Y+6	; 0x06
 898:	80 31       	cpi	r24, 0x10	; 16
 89a:	58 f4       	brcc	.+22     	; 0x8b2 <DrawPixel+0x6c>
	{
		baselineOffset = 84;
 89c:	84 e5       	ldi	r24, 0x54	; 84
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	9a 83       	std	Y+2, r25	; 0x02
 8a2:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - 8;
 8a4:	8e 81       	ldd	r24, Y+6	; 0x06
 8a6:	88 2f       	mov	r24, r24
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	08 97       	sbiw	r24, 0x08	; 8
 8ac:	9c 83       	std	Y+4, r25	; 0x04
 8ae:	8b 83       	std	Y+3, r24	; 0x03
 8b0:	43 c0       	rjmp	.+134    	; 0x938 <DrawPixel+0xf2>
	} 
	else if (y >= 16 && y <= 23)
 8b2:	8e 81       	ldd	r24, Y+6	; 0x06
 8b4:	80 31       	cpi	r24, 0x10	; 16
 8b6:	70 f0       	brcs	.+28     	; 0x8d4 <DrawPixel+0x8e>
 8b8:	8e 81       	ldd	r24, Y+6	; 0x06
 8ba:	88 31       	cpi	r24, 0x18	; 24
 8bc:	58 f4       	brcc	.+22     	; 0x8d4 <DrawPixel+0x8e>
	{
		baselineOffset = 84 * 2;
 8be:	88 ea       	ldi	r24, 0xA8	; 168
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	9a 83       	std	Y+2, r25	; 0x02
 8c4:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 2);
 8c6:	8e 81       	ldd	r24, Y+6	; 0x06
 8c8:	88 2f       	mov	r24, r24
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	40 97       	sbiw	r24, 0x10	; 16
 8ce:	9c 83       	std	Y+4, r25	; 0x04
 8d0:	8b 83       	std	Y+3, r24	; 0x03
 8d2:	32 c0       	rjmp	.+100    	; 0x938 <DrawPixel+0xf2>
	} 
	else if (y >= 24 && y <= 31)
 8d4:	8e 81       	ldd	r24, Y+6	; 0x06
 8d6:	88 31       	cpi	r24, 0x18	; 24
 8d8:	70 f0       	brcs	.+28     	; 0x8f6 <DrawPixel+0xb0>
 8da:	8e 81       	ldd	r24, Y+6	; 0x06
 8dc:	80 32       	cpi	r24, 0x20	; 32
 8de:	58 f4       	brcc	.+22     	; 0x8f6 <DrawPixel+0xb0>
	{
		baselineOffset = 84 * 3;
 8e0:	8c ef       	ldi	r24, 0xFC	; 252
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	9a 83       	std	Y+2, r25	; 0x02
 8e6:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 3);
 8e8:	8e 81       	ldd	r24, Y+6	; 0x06
 8ea:	88 2f       	mov	r24, r24
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	48 97       	sbiw	r24, 0x18	; 24
 8f0:	9c 83       	std	Y+4, r25	; 0x04
 8f2:	8b 83       	std	Y+3, r24	; 0x03
 8f4:	21 c0       	rjmp	.+66     	; 0x938 <DrawPixel+0xf2>
	}
	else if (y >= 32 && y <= 39)
 8f6:	8e 81       	ldd	r24, Y+6	; 0x06
 8f8:	80 32       	cpi	r24, 0x20	; 32
 8fa:	70 f0       	brcs	.+28     	; 0x918 <DrawPixel+0xd2>
 8fc:	8e 81       	ldd	r24, Y+6	; 0x06
 8fe:	88 32       	cpi	r24, 0x28	; 40
 900:	58 f4       	brcc	.+22     	; 0x918 <DrawPixel+0xd2>
	{
		baselineOffset = 84 * 4;
 902:	80 e5       	ldi	r24, 0x50	; 80
 904:	91 e0       	ldi	r25, 0x01	; 1
 906:	9a 83       	std	Y+2, r25	; 0x02
 908:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 4);
 90a:	8e 81       	ldd	r24, Y+6	; 0x06
 90c:	88 2f       	mov	r24, r24
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	80 97       	sbiw	r24, 0x20	; 32
 912:	9c 83       	std	Y+4, r25	; 0x04
 914:	8b 83       	std	Y+3, r24	; 0x03
 916:	10 c0       	rjmp	.+32     	; 0x938 <DrawPixel+0xf2>
	}
	else if (y >= 40 && y <= 47)
 918:	8e 81       	ldd	r24, Y+6	; 0x06
 91a:	88 32       	cpi	r24, 0x28	; 40
 91c:	68 f0       	brcs	.+26     	; 0x938 <DrawPixel+0xf2>
 91e:	8e 81       	ldd	r24, Y+6	; 0x06
 920:	80 33       	cpi	r24, 0x30	; 48
 922:	50 f4       	brcc	.+20     	; 0x938 <DrawPixel+0xf2>
	{
		baselineOffset = 84 * 5;
 924:	84 ea       	ldi	r24, 0xA4	; 164
 926:	91 e0       	ldi	r25, 0x01	; 1
 928:	9a 83       	std	Y+2, r25	; 0x02
 92a:	89 83       	std	Y+1, r24	; 0x01
		verticalBitOffset = y - (8 * 5);
 92c:	8e 81       	ldd	r24, Y+6	; 0x06
 92e:	88 2f       	mov	r24, r24
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	88 97       	sbiw	r24, 0x28	; 40
 934:	9c 83       	std	Y+4, r25	; 0x04
 936:	8b 83       	std	Y+3, r24	; 0x03
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
 938:	8d 81       	ldd	r24, Y+5	; 0x05
 93a:	28 2f       	mov	r18, r24
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	89 81       	ldd	r24, Y+1	; 0x01
 940:	9a 81       	ldd	r25, Y+2	; 0x02
 942:	82 0f       	add	r24, r18
 944:	93 1f       	adc	r25, r19
 946:	2f 81       	ldd	r18, Y+7	; 0x07
 948:	38 85       	ldd	r19, Y+8	; 0x08
 94a:	82 0f       	add	r24, r18
 94c:	93 1f       	adc	r25, r19
 94e:	2d 81       	ldd	r18, Y+5	; 0x05
 950:	42 2f       	mov	r20, r18
 952:	50 e0       	ldi	r21, 0x00	; 0
 954:	29 81       	ldd	r18, Y+1	; 0x01
 956:	3a 81       	ldd	r19, Y+2	; 0x02
 958:	24 0f       	add	r18, r20
 95a:	35 1f       	adc	r19, r21
 95c:	4f 81       	ldd	r20, Y+7	; 0x07
 95e:	58 85       	ldd	r21, Y+8	; 0x08
 960:	24 0f       	add	r18, r20
 962:	35 1f       	adc	r19, r21
 964:	f9 01       	movw	r30, r18
 966:	20 81       	ld	r18, Z
 968:	42 2f       	mov	r20, r18
 96a:	21 e0       	ldi	r18, 0x01	; 1
 96c:	30 e0       	ldi	r19, 0x00	; 0
 96e:	0b 80       	ldd	r0, Y+3	; 0x03
 970:	02 c0       	rjmp	.+4      	; 0x976 <DrawPixel+0x130>
 972:	22 0f       	add	r18, r18
 974:	33 1f       	adc	r19, r19
 976:	0a 94       	dec	r0
 978:	e2 f7       	brpl	.-8      	; 0x972 <DrawPixel+0x12c>
 97a:	24 2b       	or	r18, r20
 97c:	fc 01       	movw	r30, r24
 97e:	20 83       	st	Z, r18
 980:	03 c0       	rjmp	.+6      	; 0x988 <DrawPixel+0x142>
#include "Nokia5110Driver.h"

void DrawPixel(unsigned char x, unsigned char y, unsigned char* world)
{
	if (x < 0 || x > 83)
		return;
 982:	00 00       	nop
 984:	01 c0       	rjmp	.+2      	; 0x988 <DrawPixel+0x142>

	if (y < 0 || y > 47)
		return;
 986:	00 00       	nop
		baselineOffset = 84 * 5;
		verticalBitOffset = y - (8 * 5);
	}

	world[baselineOffset + x] |= (1 << verticalBitOffset);
}
 988:	28 96       	adiw	r28, 0x08	; 8
 98a:	0f b6       	in	r0, 0x3f	; 63
 98c:	f8 94       	cli
 98e:	de bf       	out	0x3e, r29	; 62
 990:	0f be       	out	0x3f, r0	; 63
 992:	cd bf       	out	0x3d, r28	; 61
 994:	df 91       	pop	r29
 996:	cf 91       	pop	r28
 998:	08 95       	ret

0000099a <DrawDot>:

 void DrawDot(unsigned char x, unsigned char y, unsigned char* world)
 {
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
 99e:	00 d0       	rcall	.+0      	; 0x9a0 <DrawDot+0x6>
 9a0:	1f 92       	push	r1
 9a2:	cd b7       	in	r28, 0x3d	; 61
 9a4:	de b7       	in	r29, 0x3e	; 62
 9a6:	89 83       	std	Y+1, r24	; 0x01
 9a8:	6a 83       	std	Y+2, r22	; 0x02
 9aa:	5c 83       	std	Y+4, r21	; 0x04
 9ac:	4b 83       	std	Y+3, r20	; 0x03
	DrawPixel(x, y, world);
 9ae:	8b 81       	ldd	r24, Y+3	; 0x03
 9b0:	9c 81       	ldd	r25, Y+4	; 0x04
 9b2:	ac 01       	movw	r20, r24
 9b4:	6a 81       	ldd	r22, Y+2	; 0x02
 9b6:	89 81       	ldd	r24, Y+1	; 0x01
 9b8:	46 df       	rcall	.-372    	; 0x846 <DrawPixel>
	DrawPixel(x + 1, y, world);
 9ba:	89 81       	ldd	r24, Y+1	; 0x01
 9bc:	21 e0       	ldi	r18, 0x01	; 1
 9be:	28 0f       	add	r18, r24
 9c0:	8b 81       	ldd	r24, Y+3	; 0x03
 9c2:	9c 81       	ldd	r25, Y+4	; 0x04
 9c4:	ac 01       	movw	r20, r24
 9c6:	6a 81       	ldd	r22, Y+2	; 0x02
 9c8:	82 2f       	mov	r24, r18
 9ca:	3d df       	rcall	.-390    	; 0x846 <DrawPixel>
	DrawPixel(x, y + 1, world);
 9cc:	8a 81       	ldd	r24, Y+2	; 0x02
 9ce:	21 e0       	ldi	r18, 0x01	; 1
 9d0:	28 0f       	add	r18, r24
 9d2:	8b 81       	ldd	r24, Y+3	; 0x03
 9d4:	9c 81       	ldd	r25, Y+4	; 0x04
 9d6:	ac 01       	movw	r20, r24
 9d8:	62 2f       	mov	r22, r18
 9da:	89 81       	ldd	r24, Y+1	; 0x01
 9dc:	34 df       	rcall	.-408    	; 0x846 <DrawPixel>
	DrawPixel(x + 1, y + 1, world);
 9de:	8a 81       	ldd	r24, Y+2	; 0x02
 9e0:	31 e0       	ldi	r19, 0x01	; 1
 9e2:	38 0f       	add	r19, r24
 9e4:	89 81       	ldd	r24, Y+1	; 0x01
 9e6:	21 e0       	ldi	r18, 0x01	; 1
 9e8:	28 0f       	add	r18, r24
 9ea:	8b 81       	ldd	r24, Y+3	; 0x03
 9ec:	9c 81       	ldd	r25, Y+4	; 0x04
 9ee:	ac 01       	movw	r20, r24
 9f0:	63 2f       	mov	r22, r19
 9f2:	82 2f       	mov	r24, r18
 9f4:	28 df       	rcall	.-432    	; 0x846 <DrawPixel>
 }
 9f6:	00 00       	nop
 9f8:	0f 90       	pop	r0
 9fa:	0f 90       	pop	r0
 9fc:	0f 90       	pop	r0
 9fe:	0f 90       	pop	r0
 a00:	df 91       	pop	r29
 a02:	cf 91       	pop	r28
 a04:	08 95       	ret

00000a06 <RenderWorld>:

 void RenderWorld(unsigned char* world)
 {
 a06:	cf 93       	push	r28
 a08:	df 93       	push	r29
 a0a:	00 d0       	rcall	.+0      	; 0xa0c <RenderWorld+0x6>
 a0c:	00 d0       	rcall	.+0      	; 0xa0e <RenderWorld+0x8>
 a0e:	cd b7       	in	r28, 0x3d	; 61
 a10:	de b7       	in	r29, 0x3e	; 62
 a12:	9e 83       	std	Y+6, r25	; 0x06
 a14:	8d 83       	std	Y+5, r24	; 0x05
	for (int x = 0; x < 504; x++)
 a16:	1a 82       	std	Y+2, r1	; 0x02
 a18:	19 82       	std	Y+1, r1	; 0x01
 a1a:	0e c0       	rjmp	.+28     	; 0xa38 <RenderWorld+0x32>
	{
		sendData(world[x]);
 a1c:	89 81       	ldd	r24, Y+1	; 0x01
 a1e:	9a 81       	ldd	r25, Y+2	; 0x02
 a20:	2d 81       	ldd	r18, Y+5	; 0x05
 a22:	3e 81       	ldd	r19, Y+6	; 0x06
 a24:	82 0f       	add	r24, r18
 a26:	93 1f       	adc	r25, r19
 a28:	fc 01       	movw	r30, r24
 a2a:	80 81       	ld	r24, Z
 a2c:	92 de       	rcall	.-732    	; 0x752 <sendData>
	DrawPixel(x + 1, y + 1, world);
 }

 void RenderWorld(unsigned char* world)
 {
	for (int x = 0; x < 504; x++)
 a2e:	89 81       	ldd	r24, Y+1	; 0x01
 a30:	9a 81       	ldd	r25, Y+2	; 0x02
 a32:	01 96       	adiw	r24, 0x01	; 1
 a34:	9a 83       	std	Y+2, r25	; 0x02
 a36:	89 83       	std	Y+1, r24	; 0x01
 a38:	89 81       	ldd	r24, Y+1	; 0x01
 a3a:	9a 81       	ldd	r25, Y+2	; 0x02
 a3c:	88 3f       	cpi	r24, 0xF8	; 248
 a3e:	91 40       	sbci	r25, 0x01	; 1
 a40:	6c f3       	brlt	.-38     	; 0xa1c <RenderWorld+0x16>
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
 a42:	1c 82       	std	Y+4, r1	; 0x04
 a44:	1b 82       	std	Y+3, r1	; 0x03
 a46:	0d c0       	rjmp	.+26     	; 0xa62 <RenderWorld+0x5c>
	{
		world[x] = 0x00;
 a48:	8b 81       	ldd	r24, Y+3	; 0x03
 a4a:	9c 81       	ldd	r25, Y+4	; 0x04
 a4c:	2d 81       	ldd	r18, Y+5	; 0x05
 a4e:	3e 81       	ldd	r19, Y+6	; 0x06
 a50:	82 0f       	add	r24, r18
 a52:	93 1f       	adc	r25, r19
 a54:	fc 01       	movw	r30, r24
 a56:	10 82       	st	Z, r1
	for (int x = 0; x < 504; x++)
	{
		sendData(world[x]);
	}

	for (int x = 0; x < 504; x++)
 a58:	8b 81       	ldd	r24, Y+3	; 0x03
 a5a:	9c 81       	ldd	r25, Y+4	; 0x04
 a5c:	01 96       	adiw	r24, 0x01	; 1
 a5e:	9c 83       	std	Y+4, r25	; 0x04
 a60:	8b 83       	std	Y+3, r24	; 0x03
 a62:	8b 81       	ldd	r24, Y+3	; 0x03
 a64:	9c 81       	ldd	r25, Y+4	; 0x04
 a66:	88 3f       	cpi	r24, 0xF8	; 248
 a68:	91 40       	sbci	r25, 0x01	; 1
 a6a:	74 f3       	brlt	.-36     	; 0xa48 <RenderWorld+0x42>
	{
		world[x] = 0x00;
	}
 a6c:	00 00       	nop
 a6e:	26 96       	adiw	r28, 0x06	; 6
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	f8 94       	cli
 a74:	de bf       	out	0x3e, r29	; 62
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	cd bf       	out	0x3d, r28	; 61
 a7a:	df 91       	pop	r29
 a7c:	cf 91       	pop	r28
 a7e:	08 95       	ret

00000a80 <__cmpsf2>:
 a80:	2f d0       	rcall	.+94     	; 0xae0 <__fp_cmp>
 a82:	08 f4       	brcc	.+2      	; 0xa86 <__cmpsf2+0x6>
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	08 95       	ret

00000a88 <__fixunssfsi>:
 a88:	57 d0       	rcall	.+174    	; 0xb38 <__fp_splitA>
 a8a:	88 f0       	brcs	.+34     	; 0xaae <__fixunssfsi+0x26>
 a8c:	9f 57       	subi	r25, 0x7F	; 127
 a8e:	90 f0       	brcs	.+36     	; 0xab4 <__fixunssfsi+0x2c>
 a90:	b9 2f       	mov	r27, r25
 a92:	99 27       	eor	r25, r25
 a94:	b7 51       	subi	r27, 0x17	; 23
 a96:	a0 f0       	brcs	.+40     	; 0xac0 <__fixunssfsi+0x38>
 a98:	d1 f0       	breq	.+52     	; 0xace <__fixunssfsi+0x46>
 a9a:	66 0f       	add	r22, r22
 a9c:	77 1f       	adc	r23, r23
 a9e:	88 1f       	adc	r24, r24
 aa0:	99 1f       	adc	r25, r25
 aa2:	1a f0       	brmi	.+6      	; 0xaaa <__fixunssfsi+0x22>
 aa4:	ba 95       	dec	r27
 aa6:	c9 f7       	brne	.-14     	; 0xa9a <__fixunssfsi+0x12>
 aa8:	12 c0       	rjmp	.+36     	; 0xace <__fixunssfsi+0x46>
 aaa:	b1 30       	cpi	r27, 0x01	; 1
 aac:	81 f0       	breq	.+32     	; 0xace <__fixunssfsi+0x46>
 aae:	5e d0       	rcall	.+188    	; 0xb6c <__fp_zero>
 ab0:	b1 e0       	ldi	r27, 0x01	; 1
 ab2:	08 95       	ret
 ab4:	5b c0       	rjmp	.+182    	; 0xb6c <__fp_zero>
 ab6:	67 2f       	mov	r22, r23
 ab8:	78 2f       	mov	r23, r24
 aba:	88 27       	eor	r24, r24
 abc:	b8 5f       	subi	r27, 0xF8	; 248
 abe:	39 f0       	breq	.+14     	; 0xace <__fixunssfsi+0x46>
 ac0:	b9 3f       	cpi	r27, 0xF9	; 249
 ac2:	cc f3       	brlt	.-14     	; 0xab6 <__fixunssfsi+0x2e>
 ac4:	86 95       	lsr	r24
 ac6:	77 95       	ror	r23
 ac8:	67 95       	ror	r22
 aca:	b3 95       	inc	r27
 acc:	d9 f7       	brne	.-10     	; 0xac4 <__fixunssfsi+0x3c>
 ace:	3e f4       	brtc	.+14     	; 0xade <__fixunssfsi+0x56>
 ad0:	90 95       	com	r25
 ad2:	80 95       	com	r24
 ad4:	70 95       	com	r23
 ad6:	61 95       	neg	r22
 ad8:	7f 4f       	sbci	r23, 0xFF	; 255
 ada:	8f 4f       	sbci	r24, 0xFF	; 255
 adc:	9f 4f       	sbci	r25, 0xFF	; 255
 ade:	08 95       	ret

00000ae0 <__fp_cmp>:
 ae0:	99 0f       	add	r25, r25
 ae2:	00 08       	sbc	r0, r0
 ae4:	55 0f       	add	r21, r21
 ae6:	aa 0b       	sbc	r26, r26
 ae8:	e0 e8       	ldi	r30, 0x80	; 128
 aea:	fe ef       	ldi	r31, 0xFE	; 254
 aec:	16 16       	cp	r1, r22
 aee:	17 06       	cpc	r1, r23
 af0:	e8 07       	cpc	r30, r24
 af2:	f9 07       	cpc	r31, r25
 af4:	c0 f0       	brcs	.+48     	; 0xb26 <__fp_cmp+0x46>
 af6:	12 16       	cp	r1, r18
 af8:	13 06       	cpc	r1, r19
 afa:	e4 07       	cpc	r30, r20
 afc:	f5 07       	cpc	r31, r21
 afe:	98 f0       	brcs	.+38     	; 0xb26 <__fp_cmp+0x46>
 b00:	62 1b       	sub	r22, r18
 b02:	73 0b       	sbc	r23, r19
 b04:	84 0b       	sbc	r24, r20
 b06:	95 0b       	sbc	r25, r21
 b08:	39 f4       	brne	.+14     	; 0xb18 <__fp_cmp+0x38>
 b0a:	0a 26       	eor	r0, r26
 b0c:	61 f0       	breq	.+24     	; 0xb26 <__fp_cmp+0x46>
 b0e:	23 2b       	or	r18, r19
 b10:	24 2b       	or	r18, r20
 b12:	25 2b       	or	r18, r21
 b14:	21 f4       	brne	.+8      	; 0xb1e <__fp_cmp+0x3e>
 b16:	08 95       	ret
 b18:	0a 26       	eor	r0, r26
 b1a:	09 f4       	brne	.+2      	; 0xb1e <__fp_cmp+0x3e>
 b1c:	a1 40       	sbci	r26, 0x01	; 1
 b1e:	a6 95       	lsr	r26
 b20:	8f ef       	ldi	r24, 0xFF	; 255
 b22:	81 1d       	adc	r24, r1
 b24:	81 1d       	adc	r24, r1
 b26:	08 95       	ret

00000b28 <__fp_split3>:
 b28:	57 fd       	sbrc	r21, 7
 b2a:	90 58       	subi	r25, 0x80	; 128
 b2c:	44 0f       	add	r20, r20
 b2e:	55 1f       	adc	r21, r21
 b30:	59 f0       	breq	.+22     	; 0xb48 <__fp_splitA+0x10>
 b32:	5f 3f       	cpi	r21, 0xFF	; 255
 b34:	71 f0       	breq	.+28     	; 0xb52 <__fp_splitA+0x1a>
 b36:	47 95       	ror	r20

00000b38 <__fp_splitA>:
 b38:	88 0f       	add	r24, r24
 b3a:	97 fb       	bst	r25, 7
 b3c:	99 1f       	adc	r25, r25
 b3e:	61 f0       	breq	.+24     	; 0xb58 <__fp_splitA+0x20>
 b40:	9f 3f       	cpi	r25, 0xFF	; 255
 b42:	79 f0       	breq	.+30     	; 0xb62 <__fp_splitA+0x2a>
 b44:	87 95       	ror	r24
 b46:	08 95       	ret
 b48:	12 16       	cp	r1, r18
 b4a:	13 06       	cpc	r1, r19
 b4c:	14 06       	cpc	r1, r20
 b4e:	55 1f       	adc	r21, r21
 b50:	f2 cf       	rjmp	.-28     	; 0xb36 <__fp_split3+0xe>
 b52:	46 95       	lsr	r20
 b54:	f1 df       	rcall	.-30     	; 0xb38 <__fp_splitA>
 b56:	08 c0       	rjmp	.+16     	; 0xb68 <__fp_splitA+0x30>
 b58:	16 16       	cp	r1, r22
 b5a:	17 06       	cpc	r1, r23
 b5c:	18 06       	cpc	r1, r24
 b5e:	99 1f       	adc	r25, r25
 b60:	f1 cf       	rjmp	.-30     	; 0xb44 <__fp_splitA+0xc>
 b62:	86 95       	lsr	r24
 b64:	71 05       	cpc	r23, r1
 b66:	61 05       	cpc	r22, r1
 b68:	08 94       	sec
 b6a:	08 95       	ret

00000b6c <__fp_zero>:
 b6c:	e8 94       	clt

00000b6e <__fp_szero>:
 b6e:	bb 27       	eor	r27, r27
 b70:	66 27       	eor	r22, r22
 b72:	77 27       	eor	r23, r23
 b74:	cb 01       	movw	r24, r22
 b76:	97 f9       	bld	r25, 7
 b78:	08 95       	ret

00000b7a <__gesf2>:
 b7a:	b2 df       	rcall	.-156    	; 0xae0 <__fp_cmp>
 b7c:	08 f4       	brcc	.+2      	; 0xb80 <__gesf2+0x6>
 b7e:	8f ef       	ldi	r24, 0xFF	; 255
 b80:	08 95       	ret

00000b82 <__mulsf3>:
 b82:	0b d0       	rcall	.+22     	; 0xb9a <__mulsf3x>
 b84:	78 c0       	rjmp	.+240    	; 0xc76 <__fp_round>
 b86:	69 d0       	rcall	.+210    	; 0xc5a <__fp_pscA>
 b88:	28 f0       	brcs	.+10     	; 0xb94 <__mulsf3+0x12>
 b8a:	6e d0       	rcall	.+220    	; 0xc68 <__fp_pscB>
 b8c:	18 f0       	brcs	.+6      	; 0xb94 <__mulsf3+0x12>
 b8e:	95 23       	and	r25, r21
 b90:	09 f0       	breq	.+2      	; 0xb94 <__mulsf3+0x12>
 b92:	5a c0       	rjmp	.+180    	; 0xc48 <__fp_inf>
 b94:	5f c0       	rjmp	.+190    	; 0xc54 <__fp_nan>
 b96:	11 24       	eor	r1, r1
 b98:	ea cf       	rjmp	.-44     	; 0xb6e <__fp_szero>

00000b9a <__mulsf3x>:
 b9a:	c6 df       	rcall	.-116    	; 0xb28 <__fp_split3>
 b9c:	a0 f3       	brcs	.-24     	; 0xb86 <__mulsf3+0x4>

00000b9e <__mulsf3_pse>:
 b9e:	95 9f       	mul	r25, r21
 ba0:	d1 f3       	breq	.-12     	; 0xb96 <__mulsf3+0x14>
 ba2:	95 0f       	add	r25, r21
 ba4:	50 e0       	ldi	r21, 0x00	; 0
 ba6:	55 1f       	adc	r21, r21
 ba8:	62 9f       	mul	r22, r18
 baa:	f0 01       	movw	r30, r0
 bac:	72 9f       	mul	r23, r18
 bae:	bb 27       	eor	r27, r27
 bb0:	f0 0d       	add	r31, r0
 bb2:	b1 1d       	adc	r27, r1
 bb4:	63 9f       	mul	r22, r19
 bb6:	aa 27       	eor	r26, r26
 bb8:	f0 0d       	add	r31, r0
 bba:	b1 1d       	adc	r27, r1
 bbc:	aa 1f       	adc	r26, r26
 bbe:	64 9f       	mul	r22, r20
 bc0:	66 27       	eor	r22, r22
 bc2:	b0 0d       	add	r27, r0
 bc4:	a1 1d       	adc	r26, r1
 bc6:	66 1f       	adc	r22, r22
 bc8:	82 9f       	mul	r24, r18
 bca:	22 27       	eor	r18, r18
 bcc:	b0 0d       	add	r27, r0
 bce:	a1 1d       	adc	r26, r1
 bd0:	62 1f       	adc	r22, r18
 bd2:	73 9f       	mul	r23, r19
 bd4:	b0 0d       	add	r27, r0
 bd6:	a1 1d       	adc	r26, r1
 bd8:	62 1f       	adc	r22, r18
 bda:	83 9f       	mul	r24, r19
 bdc:	a0 0d       	add	r26, r0
 bde:	61 1d       	adc	r22, r1
 be0:	22 1f       	adc	r18, r18
 be2:	74 9f       	mul	r23, r20
 be4:	33 27       	eor	r19, r19
 be6:	a0 0d       	add	r26, r0
 be8:	61 1d       	adc	r22, r1
 bea:	23 1f       	adc	r18, r19
 bec:	84 9f       	mul	r24, r20
 bee:	60 0d       	add	r22, r0
 bf0:	21 1d       	adc	r18, r1
 bf2:	82 2f       	mov	r24, r18
 bf4:	76 2f       	mov	r23, r22
 bf6:	6a 2f       	mov	r22, r26
 bf8:	11 24       	eor	r1, r1
 bfa:	9f 57       	subi	r25, 0x7F	; 127
 bfc:	50 40       	sbci	r21, 0x00	; 0
 bfe:	8a f0       	brmi	.+34     	; 0xc22 <__mulsf3_pse+0x84>
 c00:	e1 f0       	breq	.+56     	; 0xc3a <__mulsf3_pse+0x9c>
 c02:	88 23       	and	r24, r24
 c04:	4a f0       	brmi	.+18     	; 0xc18 <__mulsf3_pse+0x7a>
 c06:	ee 0f       	add	r30, r30
 c08:	ff 1f       	adc	r31, r31
 c0a:	bb 1f       	adc	r27, r27
 c0c:	66 1f       	adc	r22, r22
 c0e:	77 1f       	adc	r23, r23
 c10:	88 1f       	adc	r24, r24
 c12:	91 50       	subi	r25, 0x01	; 1
 c14:	50 40       	sbci	r21, 0x00	; 0
 c16:	a9 f7       	brne	.-22     	; 0xc02 <__mulsf3_pse+0x64>
 c18:	9e 3f       	cpi	r25, 0xFE	; 254
 c1a:	51 05       	cpc	r21, r1
 c1c:	70 f0       	brcs	.+28     	; 0xc3a <__mulsf3_pse+0x9c>
 c1e:	14 c0       	rjmp	.+40     	; 0xc48 <__fp_inf>
 c20:	a6 cf       	rjmp	.-180    	; 0xb6e <__fp_szero>
 c22:	5f 3f       	cpi	r21, 0xFF	; 255
 c24:	ec f3       	brlt	.-6      	; 0xc20 <__mulsf3_pse+0x82>
 c26:	98 3e       	cpi	r25, 0xE8	; 232
 c28:	dc f3       	brlt	.-10     	; 0xc20 <__mulsf3_pse+0x82>
 c2a:	86 95       	lsr	r24
 c2c:	77 95       	ror	r23
 c2e:	67 95       	ror	r22
 c30:	b7 95       	ror	r27
 c32:	f7 95       	ror	r31
 c34:	e7 95       	ror	r30
 c36:	9f 5f       	subi	r25, 0xFF	; 255
 c38:	c1 f7       	brne	.-16     	; 0xc2a <__mulsf3_pse+0x8c>
 c3a:	fe 2b       	or	r31, r30
 c3c:	88 0f       	add	r24, r24
 c3e:	91 1d       	adc	r25, r1
 c40:	96 95       	lsr	r25
 c42:	87 95       	ror	r24
 c44:	97 f9       	bld	r25, 7
 c46:	08 95       	ret

00000c48 <__fp_inf>:
 c48:	97 f9       	bld	r25, 7
 c4a:	9f 67       	ori	r25, 0x7F	; 127
 c4c:	80 e8       	ldi	r24, 0x80	; 128
 c4e:	70 e0       	ldi	r23, 0x00	; 0
 c50:	60 e0       	ldi	r22, 0x00	; 0
 c52:	08 95       	ret

00000c54 <__fp_nan>:
 c54:	9f ef       	ldi	r25, 0xFF	; 255
 c56:	80 ec       	ldi	r24, 0xC0	; 192
 c58:	08 95       	ret

00000c5a <__fp_pscA>:
 c5a:	00 24       	eor	r0, r0
 c5c:	0a 94       	dec	r0
 c5e:	16 16       	cp	r1, r22
 c60:	17 06       	cpc	r1, r23
 c62:	18 06       	cpc	r1, r24
 c64:	09 06       	cpc	r0, r25
 c66:	08 95       	ret

00000c68 <__fp_pscB>:
 c68:	00 24       	eor	r0, r0
 c6a:	0a 94       	dec	r0
 c6c:	12 16       	cp	r1, r18
 c6e:	13 06       	cpc	r1, r19
 c70:	14 06       	cpc	r1, r20
 c72:	05 06       	cpc	r0, r21
 c74:	08 95       	ret

00000c76 <__fp_round>:
 c76:	09 2e       	mov	r0, r25
 c78:	03 94       	inc	r0
 c7a:	00 0c       	add	r0, r0
 c7c:	11 f4       	brne	.+4      	; 0xc82 <__fp_round+0xc>
 c7e:	88 23       	and	r24, r24
 c80:	52 f0       	brmi	.+20     	; 0xc96 <__fp_round+0x20>
 c82:	bb 0f       	add	r27, r27
 c84:	40 f4       	brcc	.+16     	; 0xc96 <__fp_round+0x20>
 c86:	bf 2b       	or	r27, r31
 c88:	11 f4       	brne	.+4      	; 0xc8e <__fp_round+0x18>
 c8a:	60 ff       	sbrs	r22, 0
 c8c:	04 c0       	rjmp	.+8      	; 0xc96 <__fp_round+0x20>
 c8e:	6f 5f       	subi	r22, 0xFF	; 255
 c90:	7f 4f       	sbci	r23, 0xFF	; 255
 c92:	8f 4f       	sbci	r24, 0xFF	; 255
 c94:	9f 4f       	sbci	r25, 0xFF	; 255
 c96:	08 95       	ret

00000c98 <_exit>:
 c98:	f8 94       	cli

00000c9a <__stop_program>:
 c9a:	ff cf       	rjmp	.-2      	; 0xc9a <__stop_program>
