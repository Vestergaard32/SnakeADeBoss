
SnakeADDeBoss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ec5  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d04  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000595  00000000  00000000  000022c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f3  00000000  00000000  0000299c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000218  00000000  00000000  00002f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000031a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	02 d0       	rcall	.+4      	; 0xfa <main>
  f6:	5c c2       	rjmp	.+1208   	; 0x5b0 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <main>:

#include <avr/io.h>
#include "Nokia5110Driver.h"

int main(void)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	initDisplay();
 102:	01 d0       	rcall	.+2      	; 0x106 <initDisplay>
	
    while (1) 
    {
    }
 104:	ff cf       	rjmp	.-2      	; 0x104 <main+0xa>

00000106 <initDisplay>:
#define RST_BIT 0 // PA0
#define DC_BIT 1 // PA1
#define LIGHT_BIT 2 // PA2

void initDisplay()
{
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
	SPI_MasterInit();
 10e:	16 d1       	rcall	.+556    	; 0x33c <SPI_MasterInit>
	
	// Set port to output
	DDRA = 0xFF;
 110:	81 e2       	ldi	r24, 0x21	; 33
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
	
	// Set bits to high (active low)
	PORTA |= (1 << RST_BIT);
 11a:	82 e2       	ldi	r24, 0x22	; 34
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	22 e2       	ldi	r18, 0x22	; 34
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	f9 01       	movw	r30, r18
 124:	20 81       	ld	r18, Z
 126:	21 60       	ori	r18, 0x01	; 1
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
	PORTA |= (1 << DC_BIT);
 12c:	82 e2       	ldi	r24, 0x22	; 34
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	22 e2       	ldi	r18, 0x22	; 34
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	22 60       	ori	r18, 0x02	; 2
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18

	PORTA &= ~(1 << LIGHT_BIT); // Turn on light
 13e:	82 e2       	ldi	r24, 0x22	; 34
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	22 e2       	ldi	r18, 0x22	; 34
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	2b 7f       	andi	r18, 0xFB	; 251
 14c:	fc 01       	movw	r30, r24
	
	// Required display reset
	// This has to be done before doing
	// Anything else with the display
	resetDisplay();
 14e:	20 83       	st	Z, r18
	
	// Use extended instruction set
	sendIntruction(0x21);
 150:	13 d0       	rcall	.+38     	; 0x178 <resetDisplay>
 152:	81 e2       	ldi	r24, 0x21	; 33

	// Here we control operation voltage of the LCD
	// We set it to 6V (the minimum allowed voltage range)
	// If you do not set a VOP value, the internal voltage generator
	// Will be switched off, and thus the display won't function.
	sendIntruction(0xC0);
 154:	a3 d0       	rcall	.+326    	; 0x29c <sendIntruction>
 156:	80 ec       	ldi	r24, 0xC0	; 192

	// We set the bias voltage levels
	// The bias value is taken after the
	// optimum bias value described in official
	// data sheet.
	sendIntruction(0x13);
 158:	a1 d0       	rcall	.+322    	; 0x29c <sendIntruction>
 15a:	83 e1       	ldi	r24, 0x13	; 19

	// Use basic instruction set
	sendIntruction(0x20);
 15c:	9f d0       	rcall	.+318    	; 0x29c <sendIntruction>
 15e:	80 e2       	ldi	r24, 0x20	; 32

	// Set display mode normal
	sendIntruction(0b00001100);
 160:	9d d0       	rcall	.+314    	; 0x29c <sendIntruction>
 162:	8c e0       	ldi	r24, 0x0C	; 12
	
	// Clear the display to make sure
	// No pixels are alive on startup
	clearDisplay();
 164:	9b d0       	rcall	.+310    	; 0x29c <sendIntruction>
 166:	cf d0       	rcall	.+414    	; 0x306 <clearDisplay>

	sendData(0x1F);
 168:	8f e1       	ldi	r24, 0x1F	; 31
 16a:	b7 d0       	rcall	.+366    	; 0x2da <sendData>
 16c:	8f e1       	ldi	r24, 0x1F	; 31
	sendData(0x1F);
 16e:	b5 d0       	rcall	.+362    	; 0x2da <sendData>
 170:	00 00       	nop
 172:	df 91       	pop	r29
}
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <resetDisplay>:
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29


void resetDisplay()
{
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	2e 97       	sbiw	r28, 0x0e	; 14
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
	// Set RES low
	PORTA &= ~(1 << RST_BIT);
 18c:	82 e2       	ldi	r24, 0x22	; 34
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	22 e2       	ldi	r18, 0x22	; 34
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	f9 01       	movw	r30, r18
 196:	20 81       	ld	r18, Z
 198:	2e 7f       	andi	r18, 0xFE	; 254
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	a8 ec       	ldi	r26, 0xC8	; 200
 1a4:	b2 e4       	ldi	r27, 0x42	; 66
 1a6:	89 83       	std	Y+1, r24	; 0x01
 1a8:	9a 83       	std	Y+2, r25	; 0x02
 1aa:	ab 83       	std	Y+3, r26	; 0x03
 1ac:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	4a e7       	ldi	r20, 0x7A	; 122
 1b4:	55 e4       	ldi	r21, 0x45	; 69
 1b6:	69 81       	ldd	r22, Y+1	; 0x01
 1b8:	7a 81       	ldd	r23, Y+2	; 0x02
 1ba:	8b 81       	ldd	r24, Y+3	; 0x03
 1bc:	9c 81       	ldd	r25, Y+4	; 0x04
 1be:	6d d1       	rcall	.+730    	; 0x49a <__mulsf3>
 1c0:	dc 01       	movw	r26, r24
 1c2:	cb 01       	movw	r24, r22
 1c4:	8d 83       	std	Y+5, r24	; 0x05
 1c6:	9e 83       	std	Y+6, r25	; 0x06
 1c8:	af 83       	std	Y+7, r26	; 0x07
 1ca:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e8       	ldi	r20, 0x80	; 128
 1d2:	5f e3       	ldi	r21, 0x3F	; 63
 1d4:	6d 81       	ldd	r22, Y+5	; 0x05
 1d6:	7e 81       	ldd	r23, Y+6	; 0x06
 1d8:	8f 81       	ldd	r24, Y+7	; 0x07
 1da:	98 85       	ldd	r25, Y+8	; 0x08
 1dc:	dd d0       	rcall	.+442    	; 0x398 <__cmpsf2>
 1de:	88 23       	and	r24, r24
 1e0:	2c f4       	brge	.+10     	; 0x1ec <resetDisplay+0x74>
		__ticks = 1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	9a 87       	std	Y+10, r25	; 0x0a
 1e8:	89 87       	std	Y+9, r24	; 0x09
 1ea:	3b c0       	rjmp	.+118    	; 0x262 <resetDisplay+0xea>
	else if (__tmp > 65535)
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	3f ef       	ldi	r19, 0xFF	; 255
 1f0:	4f e7       	ldi	r20, 0x7F	; 127
 1f2:	57 e4       	ldi	r21, 0x47	; 71
 1f4:	6d 81       	ldd	r22, Y+5	; 0x05
 1f6:	7e 81       	ldd	r23, Y+6	; 0x06
 1f8:	8f 81       	ldd	r24, Y+7	; 0x07
 1fa:	98 85       	ldd	r25, Y+8	; 0x08
 1fc:	4a d1       	rcall	.+660    	; 0x492 <__gesf2>
 1fe:	18 16       	cp	r1, r24
 200:	3c f5       	brge	.+78     	; 0x250 <resetDisplay+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	40 e2       	ldi	r20, 0x20	; 32
 208:	51 e4       	ldi	r21, 0x41	; 65
 20a:	69 81       	ldd	r22, Y+1	; 0x01
 20c:	7a 81       	ldd	r23, Y+2	; 0x02
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	9c 81       	ldd	r25, Y+4	; 0x04
 212:	43 d1       	rcall	.+646    	; 0x49a <__mulsf3>
 214:	dc 01       	movw	r26, r24
 216:	cb 01       	movw	r24, r22
 218:	bc 01       	movw	r22, r24
 21a:	cd 01       	movw	r24, r26
 21c:	c1 d0       	rcall	.+386    	; 0x3a0 <__fixunssfsi>
 21e:	dc 01       	movw	r26, r24
 220:	cb 01       	movw	r24, r22
 222:	9a 87       	std	Y+10, r25	; 0x0a
 224:	89 87       	std	Y+9, r24	; 0x09
 226:	0f c0       	rjmp	.+30     	; 0x246 <resetDisplay+0xce>
 228:	80 e9       	ldi	r24, 0x90	; 144
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	9c 87       	std	Y+12, r25	; 0x0c
 22e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 230:	8b 85       	ldd	r24, Y+11	; 0x0b
 232:	9c 85       	ldd	r25, Y+12	; 0x0c
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <resetDisplay+0xbc>
 238:	9c 87       	std	Y+12, r25	; 0x0c
 23a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23c:	89 85       	ldd	r24, Y+9	; 0x09
 23e:	9a 85       	ldd	r25, Y+10	; 0x0a
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	9a 87       	std	Y+10, r25	; 0x0a
 244:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 246:	89 85       	ldd	r24, Y+9	; 0x09
 248:	9a 85       	ldd	r25, Y+10	; 0x0a
 24a:	89 2b       	or	r24, r25
 24c:	69 f7       	brne	.-38     	; 0x228 <resetDisplay+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 24e:	13 c0       	rjmp	.+38     	; 0x276 <resetDisplay+0xfe>
 250:	6d 81       	ldd	r22, Y+5	; 0x05
 252:	7e 81       	ldd	r23, Y+6	; 0x06
 254:	8f 81       	ldd	r24, Y+7	; 0x07
 256:	98 85       	ldd	r25, Y+8	; 0x08
 258:	a3 d0       	rcall	.+326    	; 0x3a0 <__fixunssfsi>
 25a:	dc 01       	movw	r26, r24
 25c:	cb 01       	movw	r24, r22
 25e:	9a 87       	std	Y+10, r25	; 0x0a
 260:	89 87       	std	Y+9, r24	; 0x09
 262:	89 85       	ldd	r24, Y+9	; 0x09
 264:	9a 85       	ldd	r25, Y+10	; 0x0a
 266:	9e 87       	std	Y+14, r25	; 0x0e
 268:	8d 87       	std	Y+13, r24	; 0x0d
 26a:	8d 85       	ldd	r24, Y+13	; 0x0d
 26c:	9e 85       	ldd	r25, Y+14	; 0x0e
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <resetDisplay+0xf6>
 272:	9e 87       	std	Y+14, r25	; 0x0e
 274:	8d 87       	std	Y+13, r24	; 0x0d
		
	// Delay of min 100 ns (0,1ms) p.20
	_delay_ms(100);
		
	// Set RES high
	PORTA |= (1 << RST_BIT);
 276:	82 e2       	ldi	r24, 0x22	; 34
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	22 e2       	ldi	r18, 0x22	; 34
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	f9 01       	movw	r30, r18
 280:	20 81       	ld	r18, Z
 282:	21 60       	ori	r18, 0x01	; 1
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
}
 288:	00 00       	nop
 28a:	2e 96       	adiw	r28, 0x0e	; 14
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <sendIntruction>:

void sendIntruction(unsigned char cmd)
{
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	1f 92       	push	r1
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	89 83       	std	Y+1, r24	; 0x01
	// Set DC low, Command
	PORTA &= ~(1 << DC_BIT);
 2a8:	82 e2       	ldi	r24, 0x22	; 34
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	22 e2       	ldi	r18, 0x22	; 34
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	f9 01       	movw	r30, r18
 2b2:	20 81       	ld	r18, Z
 2b4:	2d 7f       	andi	r18, 0xFD	; 253
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 83       	st	Z, r18
	SPI_MasterTransmit(cmd);
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	51 d0       	rcall	.+162    	; 0x360 <SPI_MasterTransmit>
	PORTA |= 1 << DC_BIT;
 2be:	82 e2       	ldi	r24, 0x22	; 34
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	22 e2       	ldi	r18, 0x22	; 34
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	f9 01       	movw	r30, r18
 2c8:	20 81       	ld	r18, Z
 2ca:	22 60       	ori	r18, 0x02	; 2
 2cc:	fc 01       	movw	r30, r24
 2ce:	20 83       	st	Z, r18
}
 2d0:	00 00       	nop
 2d2:	0f 90       	pop	r0
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <sendData>:

void sendData(unsigned char data)
{	
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	1f 92       	push	r1
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= 1 << DC_BIT;
 2e6:	82 e2       	ldi	r24, 0x22	; 34
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	22 e2       	ldi	r18, 0x22	; 34
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	f9 01       	movw	r30, r18
 2f0:	20 81       	ld	r18, Z
 2f2:	22 60       	ori	r18, 0x02	; 2
 2f4:	fc 01       	movw	r30, r24
 2f6:	20 83       	st	Z, r18
	SPI_MasterTransmit(data);
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	32 d0       	rcall	.+100    	; 0x360 <SPI_MasterTransmit>
}
 2fc:	00 00       	nop
 2fe:	0f 90       	pop	r0
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <clearDisplay>:

void clearDisplay()
{
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	1f 92       	push	r1
 30c:	1f 92       	push	r1
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
	for (int k=0; k<=503; k++)
 312:	1a 82       	std	Y+2, r1	; 0x02
 314:	19 82       	std	Y+1, r1	; 0x01
 316:	07 c0       	rjmp	.+14     	; 0x326 <clearDisplay+0x20>
	{
		sendData(0x00);
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	df df       	rcall	.-66     	; 0x2da <sendData>
	SPI_MasterTransmit(data);
}

void clearDisplay()
{
	for (int k=0; k<=503; k++)
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	9a 81       	ldd	r25, Y+2	; 0x02
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	9a 83       	std	Y+2, r25	; 0x02
 324:	89 83       	std	Y+1, r24	; 0x01
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	9a 81       	ldd	r25, Y+2	; 0x02
 32a:	88 3f       	cpi	r24, 0xF8	; 248
 32c:	91 40       	sbci	r25, 0x01	; 1
 32e:	a4 f3       	brlt	.-24     	; 0x318 <clearDisplay+0x12>
	{
		sendData(0x00);
	}
 330:	00 00       	nop
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <SPI_MasterInit>:
#define DD_MOSI 2
#define DD_MISO 3
#define DD_DORD 5

void SPI_MasterInit(void)
{	
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS); //MOSI,SS & SCK output,others input
 344:	84 e2       	ldi	r24, 0x24	; 36
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	27 e0       	ldi	r18, 0x07	; 7
 34a:	fc 01       	movw	r30, r24
 34c:	20 83       	st	Z, r18
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);  		   //SPI, Master, clock = fck/16
 34e:	8c e4       	ldi	r24, 0x4C	; 76
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	21 e5       	ldi	r18, 0x51	; 81
 354:	fc 01       	movw	r30, r24
 356:	20 83       	st	Z, r18
}
 358:	00 00       	nop
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	1f 92       	push	r1
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	89 83       	std	Y+1, r24	; 0x01
	SPDR = cData;			 	   			// Start transmission
 36c:	8e e4       	ldi	r24, 0x4E	; 78
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	29 81       	ldd	r18, Y+1	; 0x01
 372:	fc 01       	movw	r30, r24
 374:	20 83       	st	Z, r18
	while( !(SPSR & (1<<SPIF)) );				// Wait for transmission complete
 376:	00 00       	nop
 378:	8d e4       	ldi	r24, 0x4D	; 77
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	fc 01       	movw	r30, r24
 37e:	80 81       	ld	r24, Z
 380:	88 23       	and	r24, r24
 382:	d4 f7       	brge	.-12     	; 0x378 <SPI_MasterTransmit+0x18>
	cData = SPDR;
 384:	8e e4       	ldi	r24, 0x4E	; 78
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	fc 01       	movw	r30, r24
 38a:	80 81       	ld	r24, Z
 38c:	89 83       	std	Y+1, r24	; 0x01
}
 38e:	00 00       	nop
 390:	0f 90       	pop	r0
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <__cmpsf2>:
 398:	2f d0       	rcall	.+94     	; 0x3f8 <__fp_cmp>
 39a:	08 f4       	brcc	.+2      	; 0x39e <__cmpsf2+0x6>
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	08 95       	ret

000003a0 <__fixunssfsi>:
 3a0:	57 d0       	rcall	.+174    	; 0x450 <__fp_splitA>
 3a2:	88 f0       	brcs	.+34     	; 0x3c6 <__fixunssfsi+0x26>
 3a4:	9f 57       	subi	r25, 0x7F	; 127
 3a6:	90 f0       	brcs	.+36     	; 0x3cc <__fixunssfsi+0x2c>
 3a8:	b9 2f       	mov	r27, r25
 3aa:	99 27       	eor	r25, r25
 3ac:	b7 51       	subi	r27, 0x17	; 23
 3ae:	a0 f0       	brcs	.+40     	; 0x3d8 <__fixunssfsi+0x38>
 3b0:	d1 f0       	breq	.+52     	; 0x3e6 <__fixunssfsi+0x46>
 3b2:	66 0f       	add	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	88 1f       	adc	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	1a f0       	brmi	.+6      	; 0x3c2 <__fixunssfsi+0x22>
 3bc:	ba 95       	dec	r27
 3be:	c9 f7       	brne	.-14     	; 0x3b2 <__fixunssfsi+0x12>
 3c0:	12 c0       	rjmp	.+36     	; 0x3e6 <__fixunssfsi+0x46>
 3c2:	b1 30       	cpi	r27, 0x01	; 1
 3c4:	81 f0       	breq	.+32     	; 0x3e6 <__fixunssfsi+0x46>
 3c6:	5e d0       	rcall	.+188    	; 0x484 <__fp_zero>
 3c8:	b1 e0       	ldi	r27, 0x01	; 1
 3ca:	08 95       	ret
 3cc:	5b c0       	rjmp	.+182    	; 0x484 <__fp_zero>
 3ce:	67 2f       	mov	r22, r23
 3d0:	78 2f       	mov	r23, r24
 3d2:	88 27       	eor	r24, r24
 3d4:	b8 5f       	subi	r27, 0xF8	; 248
 3d6:	39 f0       	breq	.+14     	; 0x3e6 <__fixunssfsi+0x46>
 3d8:	b9 3f       	cpi	r27, 0xF9	; 249
 3da:	cc f3       	brlt	.-14     	; 0x3ce <__fixunssfsi+0x2e>
 3dc:	86 95       	lsr	r24
 3de:	77 95       	ror	r23
 3e0:	67 95       	ror	r22
 3e2:	b3 95       	inc	r27
 3e4:	d9 f7       	brne	.-10     	; 0x3dc <__fixunssfsi+0x3c>
 3e6:	3e f4       	brtc	.+14     	; 0x3f6 <__fixunssfsi+0x56>
 3e8:	90 95       	com	r25
 3ea:	80 95       	com	r24
 3ec:	70 95       	com	r23
 3ee:	61 95       	neg	r22
 3f0:	7f 4f       	sbci	r23, 0xFF	; 255
 3f2:	8f 4f       	sbci	r24, 0xFF	; 255
 3f4:	9f 4f       	sbci	r25, 0xFF	; 255
 3f6:	08 95       	ret

000003f8 <__fp_cmp>:
 3f8:	99 0f       	add	r25, r25
 3fa:	00 08       	sbc	r0, r0
 3fc:	55 0f       	add	r21, r21
 3fe:	aa 0b       	sbc	r26, r26
 400:	e0 e8       	ldi	r30, 0x80	; 128
 402:	fe ef       	ldi	r31, 0xFE	; 254
 404:	16 16       	cp	r1, r22
 406:	17 06       	cpc	r1, r23
 408:	e8 07       	cpc	r30, r24
 40a:	f9 07       	cpc	r31, r25
 40c:	c0 f0       	brcs	.+48     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 40e:	12 16       	cp	r1, r18
 410:	13 06       	cpc	r1, r19
 412:	e4 07       	cpc	r30, r20
 414:	f5 07       	cpc	r31, r21
 416:	98 f0       	brcs	.+38     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 418:	62 1b       	sub	r22, r18
 41a:	73 0b       	sbc	r23, r19
 41c:	84 0b       	sbc	r24, r20
 41e:	95 0b       	sbc	r25, r21
 420:	39 f4       	brne	.+14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 422:	0a 26       	eor	r0, r26
 424:	61 f0       	breq	.+24     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 426:	23 2b       	or	r18, r19
 428:	24 2b       	or	r18, r20
 42a:	25 2b       	or	r18, r21
 42c:	21 f4       	brne	.+8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42e:	08 95       	ret
 430:	0a 26       	eor	r0, r26
 432:	09 f4       	brne	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	a1 40       	sbci	r26, 0x01	; 1
 436:	a6 95       	lsr	r26
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	81 1d       	adc	r24, r1
 43c:	81 1d       	adc	r24, r1
 43e:	08 95       	ret

00000440 <__fp_split3>:
 440:	57 fd       	sbrc	r21, 7
 442:	90 58       	subi	r25, 0x80	; 128
 444:	44 0f       	add	r20, r20
 446:	55 1f       	adc	r21, r21
 448:	59 f0       	breq	.+22     	; 0x460 <__fp_splitA+0x10>
 44a:	5f 3f       	cpi	r21, 0xFF	; 255
 44c:	71 f0       	breq	.+28     	; 0x46a <__fp_splitA+0x1a>
 44e:	47 95       	ror	r20

00000450 <__fp_splitA>:
 450:	88 0f       	add	r24, r24
 452:	97 fb       	bst	r25, 7
 454:	99 1f       	adc	r25, r25
 456:	61 f0       	breq	.+24     	; 0x470 <__fp_splitA+0x20>
 458:	9f 3f       	cpi	r25, 0xFF	; 255
 45a:	79 f0       	breq	.+30     	; 0x47a <__fp_splitA+0x2a>
 45c:	87 95       	ror	r24
 45e:	08 95       	ret
 460:	12 16       	cp	r1, r18
 462:	13 06       	cpc	r1, r19
 464:	14 06       	cpc	r1, r20
 466:	55 1f       	adc	r21, r21
 468:	f2 cf       	rjmp	.-28     	; 0x44e <__fp_split3+0xe>
 46a:	46 95       	lsr	r20
 46c:	f1 df       	rcall	.-30     	; 0x450 <__fp_splitA>
 46e:	08 c0       	rjmp	.+16     	; 0x480 <__fp_splitA+0x30>
 470:	16 16       	cp	r1, r22
 472:	17 06       	cpc	r1, r23
 474:	18 06       	cpc	r1, r24
 476:	99 1f       	adc	r25, r25
 478:	f1 cf       	rjmp	.-30     	; 0x45c <__fp_splitA+0xc>
 47a:	86 95       	lsr	r24
 47c:	71 05       	cpc	r23, r1
 47e:	61 05       	cpc	r22, r1
 480:	08 94       	sec
 482:	08 95       	ret

00000484 <__fp_zero>:
 484:	e8 94       	clt

00000486 <__fp_szero>:
 486:	bb 27       	eor	r27, r27
 488:	66 27       	eor	r22, r22
 48a:	77 27       	eor	r23, r23
 48c:	cb 01       	movw	r24, r22
 48e:	97 f9       	bld	r25, 7
 490:	08 95       	ret

00000492 <__gesf2>:
 492:	b2 df       	rcall	.-156    	; 0x3f8 <__fp_cmp>
 494:	08 f4       	brcc	.+2      	; 0x498 <__gesf2+0x6>
 496:	8f ef       	ldi	r24, 0xFF	; 255
 498:	08 95       	ret

0000049a <__mulsf3>:
 49a:	0b d0       	rcall	.+22     	; 0x4b2 <__mulsf3x>
 49c:	78 c0       	rjmp	.+240    	; 0x58e <__fp_round>
 49e:	69 d0       	rcall	.+210    	; 0x572 <__fp_pscA>
 4a0:	28 f0       	brcs	.+10     	; 0x4ac <__mulsf3+0x12>
 4a2:	6e d0       	rcall	.+220    	; 0x580 <__fp_pscB>
 4a4:	18 f0       	brcs	.+6      	; 0x4ac <__mulsf3+0x12>
 4a6:	95 23       	and	r25, r21
 4a8:	09 f0       	breq	.+2      	; 0x4ac <__mulsf3+0x12>
 4aa:	5a c0       	rjmp	.+180    	; 0x560 <__fp_inf>
 4ac:	5f c0       	rjmp	.+190    	; 0x56c <__fp_nan>
 4ae:	11 24       	eor	r1, r1
 4b0:	ea cf       	rjmp	.-44     	; 0x486 <__fp_szero>

000004b2 <__mulsf3x>:
 4b2:	c6 df       	rcall	.-116    	; 0x440 <__fp_split3>
 4b4:	a0 f3       	brcs	.-24     	; 0x49e <__mulsf3+0x4>

000004b6 <__mulsf3_pse>:
 4b6:	95 9f       	mul	r25, r21
 4b8:	d1 f3       	breq	.-12     	; 0x4ae <__mulsf3+0x14>
 4ba:	95 0f       	add	r25, r21
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	55 1f       	adc	r21, r21
 4c0:	62 9f       	mul	r22, r18
 4c2:	f0 01       	movw	r30, r0
 4c4:	72 9f       	mul	r23, r18
 4c6:	bb 27       	eor	r27, r27
 4c8:	f0 0d       	add	r31, r0
 4ca:	b1 1d       	adc	r27, r1
 4cc:	63 9f       	mul	r22, r19
 4ce:	aa 27       	eor	r26, r26
 4d0:	f0 0d       	add	r31, r0
 4d2:	b1 1d       	adc	r27, r1
 4d4:	aa 1f       	adc	r26, r26
 4d6:	64 9f       	mul	r22, r20
 4d8:	66 27       	eor	r22, r22
 4da:	b0 0d       	add	r27, r0
 4dc:	a1 1d       	adc	r26, r1
 4de:	66 1f       	adc	r22, r22
 4e0:	82 9f       	mul	r24, r18
 4e2:	22 27       	eor	r18, r18
 4e4:	b0 0d       	add	r27, r0
 4e6:	a1 1d       	adc	r26, r1
 4e8:	62 1f       	adc	r22, r18
 4ea:	73 9f       	mul	r23, r19
 4ec:	b0 0d       	add	r27, r0
 4ee:	a1 1d       	adc	r26, r1
 4f0:	62 1f       	adc	r22, r18
 4f2:	83 9f       	mul	r24, r19
 4f4:	a0 0d       	add	r26, r0
 4f6:	61 1d       	adc	r22, r1
 4f8:	22 1f       	adc	r18, r18
 4fa:	74 9f       	mul	r23, r20
 4fc:	33 27       	eor	r19, r19
 4fe:	a0 0d       	add	r26, r0
 500:	61 1d       	adc	r22, r1
 502:	23 1f       	adc	r18, r19
 504:	84 9f       	mul	r24, r20
 506:	60 0d       	add	r22, r0
 508:	21 1d       	adc	r18, r1
 50a:	82 2f       	mov	r24, r18
 50c:	76 2f       	mov	r23, r22
 50e:	6a 2f       	mov	r22, r26
 510:	11 24       	eor	r1, r1
 512:	9f 57       	subi	r25, 0x7F	; 127
 514:	50 40       	sbci	r21, 0x00	; 0
 516:	8a f0       	brmi	.+34     	; 0x53a <__mulsf3_pse+0x84>
 518:	e1 f0       	breq	.+56     	; 0x552 <__mulsf3_pse+0x9c>
 51a:	88 23       	and	r24, r24
 51c:	4a f0       	brmi	.+18     	; 0x530 <__mulsf3_pse+0x7a>
 51e:	ee 0f       	add	r30, r30
 520:	ff 1f       	adc	r31, r31
 522:	bb 1f       	adc	r27, r27
 524:	66 1f       	adc	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	88 1f       	adc	r24, r24
 52a:	91 50       	subi	r25, 0x01	; 1
 52c:	50 40       	sbci	r21, 0x00	; 0
 52e:	a9 f7       	brne	.-22     	; 0x51a <__mulsf3_pse+0x64>
 530:	9e 3f       	cpi	r25, 0xFE	; 254
 532:	51 05       	cpc	r21, r1
 534:	70 f0       	brcs	.+28     	; 0x552 <__mulsf3_pse+0x9c>
 536:	14 c0       	rjmp	.+40     	; 0x560 <__fp_inf>
 538:	a6 cf       	rjmp	.-180    	; 0x486 <__fp_szero>
 53a:	5f 3f       	cpi	r21, 0xFF	; 255
 53c:	ec f3       	brlt	.-6      	; 0x538 <__mulsf3_pse+0x82>
 53e:	98 3e       	cpi	r25, 0xE8	; 232
 540:	dc f3       	brlt	.-10     	; 0x538 <__mulsf3_pse+0x82>
 542:	86 95       	lsr	r24
 544:	77 95       	ror	r23
 546:	67 95       	ror	r22
 548:	b7 95       	ror	r27
 54a:	f7 95       	ror	r31
 54c:	e7 95       	ror	r30
 54e:	9f 5f       	subi	r25, 0xFF	; 255
 550:	c1 f7       	brne	.-16     	; 0x542 <__mulsf3_pse+0x8c>
 552:	fe 2b       	or	r31, r30
 554:	88 0f       	add	r24, r24
 556:	91 1d       	adc	r25, r1
 558:	96 95       	lsr	r25
 55a:	87 95       	ror	r24
 55c:	97 f9       	bld	r25, 7
 55e:	08 95       	ret

00000560 <__fp_inf>:
 560:	97 f9       	bld	r25, 7
 562:	9f 67       	ori	r25, 0x7F	; 127
 564:	80 e8       	ldi	r24, 0x80	; 128
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	08 95       	ret

0000056c <__fp_nan>:
 56c:	9f ef       	ldi	r25, 0xFF	; 255
 56e:	80 ec       	ldi	r24, 0xC0	; 192
 570:	08 95       	ret

00000572 <__fp_pscA>:
 572:	00 24       	eor	r0, r0
 574:	0a 94       	dec	r0
 576:	16 16       	cp	r1, r22
 578:	17 06       	cpc	r1, r23
 57a:	18 06       	cpc	r1, r24
 57c:	09 06       	cpc	r0, r25
 57e:	08 95       	ret

00000580 <__fp_pscB>:
 580:	00 24       	eor	r0, r0
 582:	0a 94       	dec	r0
 584:	12 16       	cp	r1, r18
 586:	13 06       	cpc	r1, r19
 588:	14 06       	cpc	r1, r20
 58a:	05 06       	cpc	r0, r21
 58c:	08 95       	ret

0000058e <__fp_round>:
 58e:	09 2e       	mov	r0, r25
 590:	03 94       	inc	r0
 592:	00 0c       	add	r0, r0
 594:	11 f4       	brne	.+4      	; 0x59a <__fp_round+0xc>
 596:	88 23       	and	r24, r24
 598:	52 f0       	brmi	.+20     	; 0x5ae <__fp_round+0x20>
 59a:	bb 0f       	add	r27, r27
 59c:	40 f4       	brcc	.+16     	; 0x5ae <__fp_round+0x20>
 59e:	bf 2b       	or	r27, r31
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <__fp_round+0x18>
 5a2:	60 ff       	sbrs	r22, 0
 5a4:	04 c0       	rjmp	.+8      	; 0x5ae <__fp_round+0x20>
 5a6:	6f 5f       	subi	r22, 0xFF	; 255
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	8f 4f       	sbci	r24, 0xFF	; 255
 5ac:	9f 4f       	sbci	r25, 0xFF	; 255
 5ae:	08 95       	ret

000005b0 <_exit>:
 5b0:	f8 94       	cli

000005b2 <__stop_program>:
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <__stop_program>
