
SnakeADDeBoss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000007a8  0000083c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005e3  00800202  00800202  0000083e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000083e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001017  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d4f  00000000  00000000  0000190f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000635  00000000  00000000  0000265e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00002c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000618  00000000  00000000  00002d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c9  00000000  00000000  00003334  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000033fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ea       	ldi	r30, 0xA8	; 168
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	27 e0       	ldi	r18, 0x07	; 7
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 3e       	cpi	r26, 0xE5	; 229
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	54 d1       	rcall	.+680    	; 0x3c8 <main>
 120:	41 c3       	rjmp	.+1666   	; 0x7a4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <InitKeypad>:
#define COLUMN_4 3

char keyPressed = 0;

void InitKeypad()
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	// Setup input pins to keyboard
	// These are pins PA6 (Row 2) and PA4 (Row 1), and C7 (Row 3) and C5 (Row 4)
	DDRA &= ~(0b01010000);
 12c:	81 e2       	ldi	r24, 0x21	; 33
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	21 e2       	ldi	r18, 0x21	; 33
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	2f 7a       	andi	r18, 0xAF	; 175
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18

	DDRC &= ~(0b10100000);
 13e:	87 e2       	ldi	r24, 0x27	; 39
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	27 e2       	ldi	r18, 0x27	; 39
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	2f 75       	andi	r18, 0x5F	; 95
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18

	// Setup output pins to keyboard
	// PD0 = Column 1, PD1 = Column 2, PD2 = Column 3, PD3 = Column 4
	DDRD |= 0b00001111;
 150:	8a e2       	ldi	r24, 0x2A	; 42
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	2a e2       	ldi	r18, 0x2A	; 42
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	20 81       	ld	r18, Z
 15c:	2f 60       	ori	r18, 0x0F	; 15
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
	PORTD |= 0b00001111;
 162:	8b e2       	ldi	r24, 0x2B	; 43
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	2b e2       	ldi	r18, 0x2B	; 43
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	2f 60       	ori	r18, 0x0F	; 15
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18

	DDRB = 0b11111111;
 174:	84 e2       	ldi	r24, 0x24	; 36
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
}
 17e:	00 00       	nop
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <GetKey>:

char GetKey()
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	6d 97       	sbiw	r28, 0x1d	; 29
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
	// Scan Column 1
	PORTD &= ~(1 << COLUMN_1);
 19a:	8b e2       	ldi	r24, 0x2B	; 43
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	2b e2       	ldi	r18, 0x2B	; 43
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	20 81       	ld	r18, Z
 1a6:	2e 7f       	andi	r18, 0xFE	; 254
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	a0 ea       	ldi	r26, 0xA0	; 160
 1b2:	b1 e4       	ldi	r27, 0x41	; 65
 1b4:	89 83       	std	Y+1, r24	; 0x01
 1b6:	9a 83       	std	Y+2, r25	; 0x02
 1b8:	ab 83       	std	Y+3, r26	; 0x03
 1ba:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	4a e7       	ldi	r20, 0x7A	; 122
 1c2:	55 e4       	ldi	r21, 0x45	; 69
 1c4:	69 81       	ldd	r22, Y+1	; 0x01
 1c6:	7a 81       	ldd	r23, Y+2	; 0x02
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	9c 81       	ldd	r25, Y+4	; 0x04
 1cc:	60 d2       	rcall	.+1216   	; 0x68e <__mulsf3>
 1ce:	dc 01       	movw	r26, r24
 1d0:	cb 01       	movw	r24, r22
 1d2:	8c 8b       	std	Y+20, r24	; 0x14
 1d4:	9d 8b       	std	Y+21, r25	; 0x15
 1d6:	ae 8b       	std	Y+22, r26	; 0x16
 1d8:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	40 e8       	ldi	r20, 0x80	; 128
 1e0:	5f e3       	ldi	r21, 0x3F	; 63
 1e2:	6c 89       	ldd	r22, Y+20	; 0x14
 1e4:	7d 89       	ldd	r23, Y+21	; 0x15
 1e6:	8e 89       	ldd	r24, Y+22	; 0x16
 1e8:	9f 89       	ldd	r25, Y+23	; 0x17
 1ea:	d0 d1       	rcall	.+928    	; 0x58c <__cmpsf2>
 1ec:	88 23       	and	r24, r24
 1ee:	2c f4       	brge	.+10     	; 0x1fa <GetKey+0x74>
		__ticks = 1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	99 8f       	std	Y+25, r25	; 0x19
 1f6:	88 8f       	std	Y+24, r24	; 0x18
 1f8:	3b c0       	rjmp	.+118    	; 0x270 <GetKey+0xea>
	else if (__tmp > 65535)
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	3f ef       	ldi	r19, 0xFF	; 255
 1fe:	4f e7       	ldi	r20, 0x7F	; 127
 200:	57 e4       	ldi	r21, 0x47	; 71
 202:	6c 89       	ldd	r22, Y+20	; 0x14
 204:	7d 89       	ldd	r23, Y+21	; 0x15
 206:	8e 89       	ldd	r24, Y+22	; 0x16
 208:	9f 89       	ldd	r25, Y+23	; 0x17
 20a:	3d d2       	rcall	.+1146   	; 0x686 <__gesf2>
 20c:	18 16       	cp	r1, r24
 20e:	3c f5       	brge	.+78     	; 0x25e <GetKey+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	40 e2       	ldi	r20, 0x20	; 32
 216:	51 e4       	ldi	r21, 0x41	; 65
 218:	69 81       	ldd	r22, Y+1	; 0x01
 21a:	7a 81       	ldd	r23, Y+2	; 0x02
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	9c 81       	ldd	r25, Y+4	; 0x04
 220:	36 d2       	rcall	.+1132   	; 0x68e <__mulsf3>
 222:	dc 01       	movw	r26, r24
 224:	cb 01       	movw	r24, r22
 226:	bc 01       	movw	r22, r24
 228:	cd 01       	movw	r24, r26
 22a:	b4 d1       	rcall	.+872    	; 0x594 <__fixunssfsi>
 22c:	dc 01       	movw	r26, r24
 22e:	cb 01       	movw	r24, r22
 230:	99 8f       	std	Y+25, r25	; 0x19
 232:	88 8f       	std	Y+24, r24	; 0x18
 234:	0f c0       	rjmp	.+30     	; 0x254 <GetKey+0xce>
 236:	80 e9       	ldi	r24, 0x90	; 144
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	9b 8f       	std	Y+27, r25	; 0x1b
 23c:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 23e:	8a 8d       	ldd	r24, Y+26	; 0x1a
 240:	9b 8d       	ldd	r25, Y+27	; 0x1b
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <GetKey+0xbc>
 246:	9b 8f       	std	Y+27, r25	; 0x1b
 248:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24a:	88 8d       	ldd	r24, Y+24	; 0x18
 24c:	99 8d       	ldd	r25, Y+25	; 0x19
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	99 8f       	std	Y+25, r25	; 0x19
 252:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 254:	88 8d       	ldd	r24, Y+24	; 0x18
 256:	99 8d       	ldd	r25, Y+25	; 0x19
 258:	89 2b       	or	r24, r25
 25a:	69 f7       	brne	.-38     	; 0x236 <GetKey+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 25c:	13 c0       	rjmp	.+38     	; 0x284 <GetKey+0xfe>
 25e:	6c 89       	ldd	r22, Y+20	; 0x14
 260:	7d 89       	ldd	r23, Y+21	; 0x15
 262:	8e 89       	ldd	r24, Y+22	; 0x16
 264:	9f 89       	ldd	r25, Y+23	; 0x17
 266:	96 d1       	rcall	.+812    	; 0x594 <__fixunssfsi>
 268:	dc 01       	movw	r26, r24
 26a:	cb 01       	movw	r24, r22
 26c:	99 8f       	std	Y+25, r25	; 0x19
 26e:	88 8f       	std	Y+24, r24	; 0x18
 270:	88 8d       	ldd	r24, Y+24	; 0x18
 272:	99 8d       	ldd	r25, Y+25	; 0x19
 274:	9d 8f       	std	Y+29, r25	; 0x1d
 276:	8c 8f       	std	Y+28, r24	; 0x1c
 278:	8c 8d       	ldd	r24, Y+28	; 0x1c
 27a:	9d 8d       	ldd	r25, Y+29	; 0x1d
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <GetKey+0xf6>
 280:	9d 8f       	std	Y+29, r25	; 0x1d
 282:	8c 8f       	std	Y+28, r24	; 0x1c

	_delay_ms(20);

	PORTB = 0x00;
 284:	85 e2       	ldi	r24, 0x25	; 37
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	10 82       	st	Z, r1
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	a0 ea       	ldi	r26, 0xA0	; 160
 292:	b1 e4       	ldi	r27, 0x41	; 65
 294:	8e 83       	std	Y+6, r24	; 0x06
 296:	9f 83       	std	Y+7, r25	; 0x07
 298:	a8 87       	std	Y+8, r26	; 0x08
 29a:	b9 87       	std	Y+9, r27	; 0x09

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	4a e7       	ldi	r20, 0x7A	; 122
 2a2:	55 e4       	ldi	r21, 0x45	; 69
 2a4:	6e 81       	ldd	r22, Y+6	; 0x06
 2a6:	7f 81       	ldd	r23, Y+7	; 0x07
 2a8:	88 85       	ldd	r24, Y+8	; 0x08
 2aa:	99 85       	ldd	r25, Y+9	; 0x09
 2ac:	f0 d1       	rcall	.+992    	; 0x68e <__mulsf3>
 2ae:	dc 01       	movw	r26, r24
 2b0:	cb 01       	movw	r24, r22
 2b2:	8a 87       	std	Y+10, r24	; 0x0a
 2b4:	9b 87       	std	Y+11, r25	; 0x0b
 2b6:	ac 87       	std	Y+12, r26	; 0x0c
 2b8:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	40 e8       	ldi	r20, 0x80	; 128
 2c0:	5f e3       	ldi	r21, 0x3F	; 63
 2c2:	6a 85       	ldd	r22, Y+10	; 0x0a
 2c4:	7b 85       	ldd	r23, Y+11	; 0x0b
 2c6:	8c 85       	ldd	r24, Y+12	; 0x0c
 2c8:	9d 85       	ldd	r25, Y+13	; 0x0d
 2ca:	60 d1       	rcall	.+704    	; 0x58c <__cmpsf2>
 2cc:	88 23       	and	r24, r24
 2ce:	2c f4       	brge	.+10     	; 0x2da <GetKey+0x154>
		__ticks = 1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	9f 87       	std	Y+15, r25	; 0x0f
 2d6:	8e 87       	std	Y+14, r24	; 0x0e
 2d8:	3b c0       	rjmp	.+118    	; 0x350 <GetKey+0x1ca>
	else if (__tmp > 65535)
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	3f ef       	ldi	r19, 0xFF	; 255
 2de:	4f e7       	ldi	r20, 0x7F	; 127
 2e0:	57 e4       	ldi	r21, 0x47	; 71
 2e2:	6a 85       	ldd	r22, Y+10	; 0x0a
 2e4:	7b 85       	ldd	r23, Y+11	; 0x0b
 2e6:	8c 85       	ldd	r24, Y+12	; 0x0c
 2e8:	9d 85       	ldd	r25, Y+13	; 0x0d
 2ea:	cd d1       	rcall	.+922    	; 0x686 <__gesf2>
 2ec:	18 16       	cp	r1, r24
 2ee:	3c f5       	brge	.+78     	; 0x33e <GetKey+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	40 e2       	ldi	r20, 0x20	; 32
 2f6:	51 e4       	ldi	r21, 0x41	; 65
 2f8:	6e 81       	ldd	r22, Y+6	; 0x06
 2fa:	7f 81       	ldd	r23, Y+7	; 0x07
 2fc:	88 85       	ldd	r24, Y+8	; 0x08
 2fe:	99 85       	ldd	r25, Y+9	; 0x09
 300:	c6 d1       	rcall	.+908    	; 0x68e <__mulsf3>
 302:	dc 01       	movw	r26, r24
 304:	cb 01       	movw	r24, r22
 306:	bc 01       	movw	r22, r24
 308:	cd 01       	movw	r24, r26
 30a:	44 d1       	rcall	.+648    	; 0x594 <__fixunssfsi>
 30c:	dc 01       	movw	r26, r24
 30e:	cb 01       	movw	r24, r22
 310:	9f 87       	std	Y+15, r25	; 0x0f
 312:	8e 87       	std	Y+14, r24	; 0x0e
 314:	0f c0       	rjmp	.+30     	; 0x334 <GetKey+0x1ae>
 316:	80 e9       	ldi	r24, 0x90	; 144
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	99 8b       	std	Y+17, r25	; 0x11
 31c:	88 8b       	std	Y+16, r24	; 0x10
 31e:	88 89       	ldd	r24, Y+16	; 0x10
 320:	99 89       	ldd	r25, Y+17	; 0x11
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <GetKey+0x19c>
 326:	99 8b       	std	Y+17, r25	; 0x11
 328:	88 8b       	std	Y+16, r24	; 0x10
 32a:	8e 85       	ldd	r24, Y+14	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 32c:	9f 85       	ldd	r25, Y+15	; 0x0f
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	9f 87       	std	Y+15, r25	; 0x0f
 332:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 334:	8e 85       	ldd	r24, Y+14	; 0x0e
 336:	9f 85       	ldd	r25, Y+15	; 0x0f
 338:	89 2b       	or	r24, r25
 33a:	69 f7       	brne	.-38     	; 0x316 <GetKey+0x190>
 33c:	13 c0       	rjmp	.+38     	; 0x364 <GetKey+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 33e:	6a 85       	ldd	r22, Y+10	; 0x0a
 340:	7b 85       	ldd	r23, Y+11	; 0x0b
 342:	8c 85       	ldd	r24, Y+12	; 0x0c
 344:	9d 85       	ldd	r25, Y+13	; 0x0d
 346:	26 d1       	rcall	.+588    	; 0x594 <__fixunssfsi>
 348:	dc 01       	movw	r26, r24
 34a:	cb 01       	movw	r24, r22
 34c:	9f 87       	std	Y+15, r25	; 0x0f
 34e:	8e 87       	std	Y+14, r24	; 0x0e
 350:	8e 85       	ldd	r24, Y+14	; 0x0e
 352:	9f 85       	ldd	r25, Y+15	; 0x0f
 354:	9b 8b       	std	Y+19, r25	; 0x13
 356:	8a 8b       	std	Y+18, r24	; 0x12
 358:	8a 89       	ldd	r24, Y+18	; 0x12
 35a:	9b 89       	ldd	r25, Y+19	; 0x13
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <GetKey+0x1d6>
 360:	9b 8b       	std	Y+19, r25	; 0x13
 362:	8a 8b       	std	Y+18, r24	; 0x12
 364:	86 e2       	ldi	r24, 0x26	; 38

	_delay_ms(20);

	// 4 Key

	char inputStateC = PINC;
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	fc 01       	movw	r30, r24
 36a:	80 81       	ld	r24, Z
 36c:	8d 83       	std	Y+5, r24	; 0x05
 36e:	8d 81       	ldd	r24, Y+5	; 0x05


	// 7 Key

	if ((inputStateC & (1 << ROW_3)))
 370:	88 23       	and	r24, r24
 372:	64 f4       	brge	.+24     	; 0x38c <GetKey+0x206>
 374:	81 e0       	ldi	r24, 0x01	; 1
	{
		keyPressed = 1;
 376:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 37a:	85 e2       	ldi	r24, 0x25	; 37
		PORTB |= 0xFF;
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	fc 01       	movw	r30, r24
 380:	80 81       	ld	r24, Z
 382:	85 e2       	ldi	r24, 0x25	; 37
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	2f ef       	ldi	r18, 0xFF	; 255
 388:	fc 01       	movw	r30, r24
 38a:	20 83       	st	Z, r18
 38c:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	if ((inputStateC & (1 << ROW_4)))
 38e:	88 2f       	mov	r24, r24
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	80 72       	andi	r24, 0x20	; 32
 394:	99 27       	eor	r25, r25
 396:	89 2b       	or	r24, r25
 398:	61 f0       	breq	.+24     	; 0x3b2 <GetKey+0x22c>
 39a:	81 e0       	ldi	r24, 0x01	; 1
	{
		keyPressed = 1;
 39c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 3a0:	85 e2       	ldi	r24, 0x25	; 37
		PORTB |= 0xFF;
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	fc 01       	movw	r30, r24
 3a6:	80 81       	ld	r24, Z
 3a8:	85 e2       	ldi	r24, 0x25	; 37
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	2f ef       	ldi	r18, 0xFF	; 255
 3ae:	fc 01       	movw	r30, r24
 3b0:	20 83       	st	Z, r18
 3b2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
	if ((PINC & (1 << ROW_4)) != 0)
	{
		keyPressed = 1;
	}*/

	return keyPressed;
 3b6:	6d 96       	adiw	r28, 0x1d	; 29
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	de bf       	out	0x3e, r29	; 62
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	cd bf       	out	0x3d, r28	; 61
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <main>:
int xDirection = 1;
int yDirection = 0;


int main(void)
{
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
 3d0:	e8 97       	sbiw	r28, 0x38	; 56
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
	InitKeypad();
 3dc:	a3 de       	rcall	.-698    	; 0x124 <InitKeypad>
	//initDisplay();

	for (int x = 0; x < 504; x++)
 3de:	1a 82       	std	Y+2, r1	; 0x02
 3e0:	19 82       	std	Y+1, r1	; 0x01
 3e2:	0b c0       	rjmp	.+22     	; 0x3fa <main+0x32>
	{
		worldRender[x] = 0x00;
 3e4:	89 81       	ldd	r24, Y+1	; 0x01
 3e6:	9a 81       	ldd	r25, Y+2	; 0x02
 3e8:	83 51       	subi	r24, 0x13	; 19
 3ea:	9a 4f       	sbci	r25, 0xFA	; 250
 3ec:	fc 01       	movw	r30, r24
 3ee:	10 82       	st	Z, r1
int main(void)
{
	InitKeypad();
	//initDisplay();

	for (int x = 0; x < 504; x++)
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	9a 81       	ldd	r25, Y+2	; 0x02
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	9a 83       	std	Y+2, r25	; 0x02
 3f8:	89 83       	std	Y+1, r24	; 0x01
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	9a 81       	ldd	r25, Y+2	; 0x02
 3fe:	88 3f       	cpi	r24, 0xF8	; 248
 400:	91 40       	sbci	r25, 0x01	; 1
 402:	84 f3       	brlt	.-32     	; 0x3e4 <main+0x1c>
	{
		worldRender[x] = 0x00;
	}
	
	struct SnakeBodyPart head;
	head.x = 0;
 404:	1a 8a       	std	Y+18, r1	; 0x12
 406:	19 8a       	std	Y+17, r1	; 0x11
	head.y = 0;
 408:	1c 8a       	std	Y+20, r1	; 0x14
 40a:	1b 8a       	std	Y+19, r1	; 0x13
	head.prevX = 0;
 40c:	1e 8a       	std	Y+22, r1	; 0x16
 40e:	1d 8a       	std	Y+21, r1	; 0x15
	head.prevY = 0;
 410:	18 8e       	std	Y+24, r1	; 0x18
 412:	1f 8a       	std	Y+23, r1	; 0x17
	head.headPointer = 0;
 414:	1a 8e       	std	Y+26, r1	; 0x1a
 416:	19 8e       	std	Y+25, r1	; 0x19
	snake[0] = head;
 418:	8a e0       	ldi	r24, 0x0A	; 10
 41a:	fe 01       	movw	r30, r28
 41c:	71 96       	adiw	r30, 0x11	; 17
 41e:	a5 e0       	ldi	r26, 0x05	; 5
 420:	b2 e0       	ldi	r27, 0x02	; 2
 422:	01 90       	ld	r0, Z+
 424:	0d 92       	st	X+, r0
 426:	8a 95       	dec	r24
 428:	e1 f7       	brne	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>

	struct SnakeBodyPart middle;
	middle.x = 0;
 42a:	1c 8e       	std	Y+28, r1	; 0x1c
 42c:	1b 8e       	std	Y+27, r1	; 0x1b
	middle.y = 0;
 42e:	1e 8e       	std	Y+30, r1	; 0x1e
 430:	1d 8e       	std	Y+29, r1	; 0x1d
	middle.headPointer = &snake[0];
 432:	85 e0       	ldi	r24, 0x05	; 5
 434:	92 e0       	ldi	r25, 0x02	; 2
 436:	9c a3       	std	Y+36, r25	; 0x24
 438:	8b a3       	std	Y+35, r24	; 0x23
	snake[1] = middle;
 43a:	8a e0       	ldi	r24, 0x0A	; 10
 43c:	fe 01       	movw	r30, r28
 43e:	7b 96       	adiw	r30, 0x1b	; 27
 440:	af e0       	ldi	r26, 0x0F	; 15
 442:	b2 e0       	ldi	r27, 0x02	; 2
 444:	01 90       	ld	r0, Z+
 446:	0d 92       	st	X+, r0
 448:	8a 95       	dec	r24
 44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>

	struct SnakeBodyPart middle1;
	middle1.x = 0;
 44c:	1e a2       	std	Y+38, r1	; 0x26
 44e:	1d a2       	std	Y+37, r1	; 0x25
	middle1.y = 0;
 450:	18 a6       	std	Y+40, r1	; 0x28
 452:	1f a2       	std	Y+39, r1	; 0x27
	middle1.prevX = 0;
 454:	1a a6       	std	Y+42, r1	; 0x2a
 456:	19 a6       	std	Y+41, r1	; 0x29
	middle1.prevY = 0;
 458:	1c a6       	std	Y+44, r1	; 0x2c
 45a:	1b a6       	std	Y+43, r1	; 0x2b
	middle1.headPointer = &snake[1];
 45c:	8f e0       	ldi	r24, 0x0F	; 15
 45e:	92 e0       	ldi	r25, 0x02	; 2
 460:	9e a7       	std	Y+46, r25	; 0x2e
 462:	8d a7       	std	Y+45, r24	; 0x2d
	snake[2] = middle1;
 464:	8a e0       	ldi	r24, 0x0A	; 10
 466:	fe 01       	movw	r30, r28
 468:	b5 96       	adiw	r30, 0x25	; 37
 46a:	a9 e1       	ldi	r26, 0x19	; 25
 46c:	b2 e0       	ldi	r27, 0x02	; 2
 46e:	01 90       	ld	r0, Z+
 470:	0d 92       	st	X+, r0
 472:	8a 95       	dec	r24
 474:	e1 f7       	brne	.-8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
	
	struct SnakeBodyPart end;
	end.x = 0;
 476:	18 aa       	std	Y+48, r1	; 0x30
 478:	1f a6       	std	Y+47, r1	; 0x2f
	end.y = 0;
 47a:	1a aa       	std	Y+50, r1	; 0x32
 47c:	19 aa       	std	Y+49, r1	; 0x31
	end.headPointer = &snake[2];
 47e:	89 e1       	ldi	r24, 0x19	; 25
 480:	92 e0       	ldi	r25, 0x02	; 2
 482:	98 af       	std	Y+56, r25	; 0x38
 484:	8f ab       	std	Y+55, r24	; 0x37
	snake[3] = end;
 486:	8a e0       	ldi	r24, 0x0A	; 10
 488:	fe 01       	movw	r30, r28
 48a:	bf 96       	adiw	r30, 0x2f	; 47
 48c:	a3 e2       	ldi	r26, 0x23	; 35
 48e:	b2 e0       	ldi	r27, 0x02	; 2
 490:	01 90       	ld	r0, Z+
 492:	0d 92       	st	X+, r0
 494:	8a 95       	dec	r24
				snake[bodyPartIndex].y = snake[bodyPartIndex].headPointer->prevY;
			}
		}
		*/

		if (GetKey() == 1)
 496:	e1 f7       	brne	.-8      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 498:	76 de       	rcall	.-788    	; 0x186 <GetKey>
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	51 f4       	brne	.+20     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		{
			yDirection = 1;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <yDirection+0x1>
 4a6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <yDirection>
			xDirection = 0;
 4aa:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__data_start+0x1>
 4ae:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	a8 ec       	ldi	r26, 0xC8	; 200
 4b8:	b2 e4       	ldi	r27, 0x42	; 66
 4ba:	8b 83       	std	Y+3, r24	; 0x03
 4bc:	9c 83       	std	Y+4, r25	; 0x04
 4be:	ad 83       	std	Y+5, r26	; 0x05
 4c0:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	4a e7       	ldi	r20, 0x7A	; 122
 4c8:	55 e4       	ldi	r21, 0x45	; 69
 4ca:	6b 81       	ldd	r22, Y+3	; 0x03
 4cc:	7c 81       	ldd	r23, Y+4	; 0x04
 4ce:	8d 81       	ldd	r24, Y+5	; 0x05
 4d0:	9e 81       	ldd	r25, Y+6	; 0x06
 4d2:	dd d0       	rcall	.+442    	; 0x68e <__mulsf3>
 4d4:	dc 01       	movw	r26, r24
 4d6:	cb 01       	movw	r24, r22
 4d8:	8f 83       	std	Y+7, r24	; 0x07
 4da:	98 87       	std	Y+8, r25	; 0x08
 4dc:	a9 87       	std	Y+9, r26	; 0x09
 4de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 4e0:	20 e0       	ldi	r18, 0x00	; 0
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	40 e8       	ldi	r20, 0x80	; 128
 4e6:	5f e3       	ldi	r21, 0x3F	; 63
 4e8:	6f 81       	ldd	r22, Y+7	; 0x07
 4ea:	78 85       	ldd	r23, Y+8	; 0x08
 4ec:	89 85       	ldd	r24, Y+9	; 0x09
 4ee:	9a 85       	ldd	r25, Y+10	; 0x0a
 4f0:	4d d0       	rcall	.+154    	; 0x58c <__cmpsf2>
 4f2:	88 23       	and	r24, r24
 4f4:	2c f4       	brge	.+10     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		__ticks = 1;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	9c 87       	std	Y+12, r25	; 0x0c
 4fc:	8b 87       	std	Y+11, r24	; 0x0b
 4fe:	3b c0       	rjmp	.+118    	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
	else if (__tmp > 65535)
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	3f ef       	ldi	r19, 0xFF	; 255
 504:	4f e7       	ldi	r20, 0x7F	; 127
 506:	57 e4       	ldi	r21, 0x47	; 71
 508:	6f 81       	ldd	r22, Y+7	; 0x07
 50a:	78 85       	ldd	r23, Y+8	; 0x08
 50c:	89 85       	ldd	r24, Y+9	; 0x09
 50e:	9a 85       	ldd	r25, Y+10	; 0x0a
 510:	ba d0       	rcall	.+372    	; 0x686 <__gesf2>
 512:	18 16       	cp	r1, r24
 514:	3c f5       	brge	.+78     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	40 e2       	ldi	r20, 0x20	; 32
 51c:	51 e4       	ldi	r21, 0x41	; 65
 51e:	6b 81       	ldd	r22, Y+3	; 0x03
 520:	7c 81       	ldd	r23, Y+4	; 0x04
 522:	8d 81       	ldd	r24, Y+5	; 0x05
 524:	9e 81       	ldd	r25, Y+6	; 0x06
 526:	b3 d0       	rcall	.+358    	; 0x68e <__mulsf3>
 528:	dc 01       	movw	r26, r24
 52a:	cb 01       	movw	r24, r22
 52c:	bc 01       	movw	r22, r24
 52e:	cd 01       	movw	r24, r26
 530:	31 d0       	rcall	.+98     	; 0x594 <__fixunssfsi>
 532:	dc 01       	movw	r26, r24
 534:	cb 01       	movw	r24, r22
 536:	9c 87       	std	Y+12, r25	; 0x0c
 538:	8b 87       	std	Y+11, r24	; 0x0b
 53a:	0f c0       	rjmp	.+30     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 53c:	80 e9       	ldi	r24, 0x90	; 144
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	9e 87       	std	Y+14, r25	; 0x0e
 542:	8d 87       	std	Y+13, r24	; 0x0d
 544:	8d 85       	ldd	r24, Y+13	; 0x0d
 546:	9e 85       	ldd	r25, Y+14	; 0x0e
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 54c:	9e 87       	std	Y+14, r25	; 0x0e
 54e:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 550:	8b 85       	ldd	r24, Y+11	; 0x0b
 552:	9c 85       	ldd	r25, Y+12	; 0x0c
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	9c 87       	std	Y+12, r25	; 0x0c
 558:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 55a:	8b 85       	ldd	r24, Y+11	; 0x0b
 55c:	9c 85       	ldd	r25, Y+12	; 0x0c
 55e:	89 2b       	or	r24, r25
 560:	69 f7       	brne	.-38     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 562:	13 c0       	rjmp	.+38     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 564:	6f 81       	ldd	r22, Y+7	; 0x07
 566:	78 85       	ldd	r23, Y+8	; 0x08
 568:	89 85       	ldd	r24, Y+9	; 0x09
 56a:	9a 85       	ldd	r25, Y+10	; 0x0a
 56c:	13 d0       	rcall	.+38     	; 0x594 <__fixunssfsi>
 56e:	dc 01       	movw	r26, r24
 570:	cb 01       	movw	r24, r22
 572:	9c 87       	std	Y+12, r25	; 0x0c
 574:	8b 87       	std	Y+11, r24	; 0x0b
 576:	8b 85       	ldd	r24, Y+11	; 0x0b
 578:	9c 85       	ldd	r25, Y+12	; 0x0c
 57a:	98 8b       	std	Y+16, r25	; 0x10
 57c:	8f 87       	std	Y+15, r24	; 0x0f
 57e:	8f 85       	ldd	r24, Y+15	; 0x0f
 580:	98 89       	ldd	r25, Y+16	; 0x10
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 586:	98 8b       	std	Y+16, r25	; 0x10
 588:	8f 87       	std	Y+15, r24	; 0x0f
		
		RenderWorld(worldRender);
		*/

		_delay_ms(100);
    }
 58a:	86 cf       	rjmp	.-244    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>

0000058c <__cmpsf2>:
 58c:	2f d0       	rcall	.+94     	; 0x5ec <__fp_cmp>
 58e:	08 f4       	brcc	.+2      	; 0x592 <__cmpsf2+0x6>
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	08 95       	ret

00000594 <__fixunssfsi>:
 594:	57 d0       	rcall	.+174    	; 0x644 <__fp_splitA>
 596:	88 f0       	brcs	.+34     	; 0x5ba <__fixunssfsi+0x26>
 598:	9f 57       	subi	r25, 0x7F	; 127
 59a:	90 f0       	brcs	.+36     	; 0x5c0 <__fixunssfsi+0x2c>
 59c:	b9 2f       	mov	r27, r25
 59e:	99 27       	eor	r25, r25
 5a0:	b7 51       	subi	r27, 0x17	; 23
 5a2:	a0 f0       	brcs	.+40     	; 0x5cc <__fixunssfsi+0x38>
 5a4:	d1 f0       	breq	.+52     	; 0x5da <__fixunssfsi+0x46>
 5a6:	66 0f       	add	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	88 1f       	adc	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	1a f0       	brmi	.+6      	; 0x5b6 <__fixunssfsi+0x22>
 5b0:	ba 95       	dec	r27
 5b2:	c9 f7       	brne	.-14     	; 0x5a6 <__fixunssfsi+0x12>
 5b4:	12 c0       	rjmp	.+36     	; 0x5da <__fixunssfsi+0x46>
 5b6:	b1 30       	cpi	r27, 0x01	; 1
 5b8:	81 f0       	breq	.+32     	; 0x5da <__fixunssfsi+0x46>
 5ba:	5e d0       	rcall	.+188    	; 0x678 <__fp_zero>
 5bc:	b1 e0       	ldi	r27, 0x01	; 1
 5be:	08 95       	ret
 5c0:	5b c0       	rjmp	.+182    	; 0x678 <__fp_zero>
 5c2:	67 2f       	mov	r22, r23
 5c4:	78 2f       	mov	r23, r24
 5c6:	88 27       	eor	r24, r24
 5c8:	b8 5f       	subi	r27, 0xF8	; 248
 5ca:	39 f0       	breq	.+14     	; 0x5da <__fixunssfsi+0x46>
 5cc:	b9 3f       	cpi	r27, 0xF9	; 249
 5ce:	cc f3       	brlt	.-14     	; 0x5c2 <__fixunssfsi+0x2e>
 5d0:	86 95       	lsr	r24
 5d2:	77 95       	ror	r23
 5d4:	67 95       	ror	r22
 5d6:	b3 95       	inc	r27
 5d8:	d9 f7       	brne	.-10     	; 0x5d0 <__fixunssfsi+0x3c>
 5da:	3e f4       	brtc	.+14     	; 0x5ea <__fixunssfsi+0x56>
 5dc:	90 95       	com	r25
 5de:	80 95       	com	r24
 5e0:	70 95       	com	r23
 5e2:	61 95       	neg	r22
 5e4:	7f 4f       	sbci	r23, 0xFF	; 255
 5e6:	8f 4f       	sbci	r24, 0xFF	; 255
 5e8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ea:	08 95       	ret

000005ec <__fp_cmp>:
 5ec:	99 0f       	add	r25, r25
 5ee:	00 08       	sbc	r0, r0
 5f0:	55 0f       	add	r21, r21
 5f2:	aa 0b       	sbc	r26, r26
 5f4:	e0 e8       	ldi	r30, 0x80	; 128
 5f6:	fe ef       	ldi	r31, 0xFE	; 254
 5f8:	16 16       	cp	r1, r22
 5fa:	17 06       	cpc	r1, r23
 5fc:	e8 07       	cpc	r30, r24
 5fe:	f9 07       	cpc	r31, r25
 600:	c0 f0       	brcs	.+48     	; 0x632 <__fp_cmp+0x46>
 602:	12 16       	cp	r1, r18
 604:	13 06       	cpc	r1, r19
 606:	e4 07       	cpc	r30, r20
 608:	f5 07       	cpc	r31, r21
 60a:	98 f0       	brcs	.+38     	; 0x632 <__fp_cmp+0x46>
 60c:	62 1b       	sub	r22, r18
 60e:	73 0b       	sbc	r23, r19
 610:	84 0b       	sbc	r24, r20
 612:	95 0b       	sbc	r25, r21
 614:	39 f4       	brne	.+14     	; 0x624 <__fp_cmp+0x38>
 616:	0a 26       	eor	r0, r26
 618:	61 f0       	breq	.+24     	; 0x632 <__fp_cmp+0x46>
 61a:	23 2b       	or	r18, r19
 61c:	24 2b       	or	r18, r20
 61e:	25 2b       	or	r18, r21
 620:	21 f4       	brne	.+8      	; 0x62a <__fp_cmp+0x3e>
 622:	08 95       	ret
 624:	0a 26       	eor	r0, r26
 626:	09 f4       	brne	.+2      	; 0x62a <__fp_cmp+0x3e>
 628:	a1 40       	sbci	r26, 0x01	; 1
 62a:	a6 95       	lsr	r26
 62c:	8f ef       	ldi	r24, 0xFF	; 255
 62e:	81 1d       	adc	r24, r1
 630:	81 1d       	adc	r24, r1
 632:	08 95       	ret

00000634 <__fp_split3>:
 634:	57 fd       	sbrc	r21, 7
 636:	90 58       	subi	r25, 0x80	; 128
 638:	44 0f       	add	r20, r20
 63a:	55 1f       	adc	r21, r21
 63c:	59 f0       	breq	.+22     	; 0x654 <__fp_splitA+0x10>
 63e:	5f 3f       	cpi	r21, 0xFF	; 255
 640:	71 f0       	breq	.+28     	; 0x65e <__fp_splitA+0x1a>
 642:	47 95       	ror	r20

00000644 <__fp_splitA>:
 644:	88 0f       	add	r24, r24
 646:	97 fb       	bst	r25, 7
 648:	99 1f       	adc	r25, r25
 64a:	61 f0       	breq	.+24     	; 0x664 <__fp_splitA+0x20>
 64c:	9f 3f       	cpi	r25, 0xFF	; 255
 64e:	79 f0       	breq	.+30     	; 0x66e <__fp_splitA+0x2a>
 650:	87 95       	ror	r24
 652:	08 95       	ret
 654:	12 16       	cp	r1, r18
 656:	13 06       	cpc	r1, r19
 658:	14 06       	cpc	r1, r20
 65a:	55 1f       	adc	r21, r21
 65c:	f2 cf       	rjmp	.-28     	; 0x642 <__fp_split3+0xe>
 65e:	46 95       	lsr	r20
 660:	f1 df       	rcall	.-30     	; 0x644 <__fp_splitA>
 662:	08 c0       	rjmp	.+16     	; 0x674 <__fp_splitA+0x30>
 664:	16 16       	cp	r1, r22
 666:	17 06       	cpc	r1, r23
 668:	18 06       	cpc	r1, r24
 66a:	99 1f       	adc	r25, r25
 66c:	f1 cf       	rjmp	.-30     	; 0x650 <__fp_splitA+0xc>
 66e:	86 95       	lsr	r24
 670:	71 05       	cpc	r23, r1
 672:	61 05       	cpc	r22, r1
 674:	08 94       	sec
 676:	08 95       	ret

00000678 <__fp_zero>:
 678:	e8 94       	clt

0000067a <__fp_szero>:
 67a:	bb 27       	eor	r27, r27
 67c:	66 27       	eor	r22, r22
 67e:	77 27       	eor	r23, r23
 680:	cb 01       	movw	r24, r22
 682:	97 f9       	bld	r25, 7
 684:	08 95       	ret

00000686 <__gesf2>:
 686:	b2 df       	rcall	.-156    	; 0x5ec <__fp_cmp>
 688:	08 f4       	brcc	.+2      	; 0x68c <__gesf2+0x6>
 68a:	8f ef       	ldi	r24, 0xFF	; 255
 68c:	08 95       	ret

0000068e <__mulsf3>:
 68e:	0b d0       	rcall	.+22     	; 0x6a6 <__mulsf3x>
 690:	78 c0       	rjmp	.+240    	; 0x782 <__fp_round>
 692:	69 d0       	rcall	.+210    	; 0x766 <__fp_pscA>
 694:	28 f0       	brcs	.+10     	; 0x6a0 <__mulsf3+0x12>
 696:	6e d0       	rcall	.+220    	; 0x774 <__fp_pscB>
 698:	18 f0       	brcs	.+6      	; 0x6a0 <__mulsf3+0x12>
 69a:	95 23       	and	r25, r21
 69c:	09 f0       	breq	.+2      	; 0x6a0 <__mulsf3+0x12>
 69e:	5a c0       	rjmp	.+180    	; 0x754 <__fp_inf>
 6a0:	5f c0       	rjmp	.+190    	; 0x760 <__fp_nan>
 6a2:	11 24       	eor	r1, r1
 6a4:	ea cf       	rjmp	.-44     	; 0x67a <__fp_szero>

000006a6 <__mulsf3x>:
 6a6:	c6 df       	rcall	.-116    	; 0x634 <__fp_split3>
 6a8:	a0 f3       	brcs	.-24     	; 0x692 <__mulsf3+0x4>

000006aa <__mulsf3_pse>:
 6aa:	95 9f       	mul	r25, r21
 6ac:	d1 f3       	breq	.-12     	; 0x6a2 <__mulsf3+0x14>
 6ae:	95 0f       	add	r25, r21
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	55 1f       	adc	r21, r21
 6b4:	62 9f       	mul	r22, r18
 6b6:	f0 01       	movw	r30, r0
 6b8:	72 9f       	mul	r23, r18
 6ba:	bb 27       	eor	r27, r27
 6bc:	f0 0d       	add	r31, r0
 6be:	b1 1d       	adc	r27, r1
 6c0:	63 9f       	mul	r22, r19
 6c2:	aa 27       	eor	r26, r26
 6c4:	f0 0d       	add	r31, r0
 6c6:	b1 1d       	adc	r27, r1
 6c8:	aa 1f       	adc	r26, r26
 6ca:	64 9f       	mul	r22, r20
 6cc:	66 27       	eor	r22, r22
 6ce:	b0 0d       	add	r27, r0
 6d0:	a1 1d       	adc	r26, r1
 6d2:	66 1f       	adc	r22, r22
 6d4:	82 9f       	mul	r24, r18
 6d6:	22 27       	eor	r18, r18
 6d8:	b0 0d       	add	r27, r0
 6da:	a1 1d       	adc	r26, r1
 6dc:	62 1f       	adc	r22, r18
 6de:	73 9f       	mul	r23, r19
 6e0:	b0 0d       	add	r27, r0
 6e2:	a1 1d       	adc	r26, r1
 6e4:	62 1f       	adc	r22, r18
 6e6:	83 9f       	mul	r24, r19
 6e8:	a0 0d       	add	r26, r0
 6ea:	61 1d       	adc	r22, r1
 6ec:	22 1f       	adc	r18, r18
 6ee:	74 9f       	mul	r23, r20
 6f0:	33 27       	eor	r19, r19
 6f2:	a0 0d       	add	r26, r0
 6f4:	61 1d       	adc	r22, r1
 6f6:	23 1f       	adc	r18, r19
 6f8:	84 9f       	mul	r24, r20
 6fa:	60 0d       	add	r22, r0
 6fc:	21 1d       	adc	r18, r1
 6fe:	82 2f       	mov	r24, r18
 700:	76 2f       	mov	r23, r22
 702:	6a 2f       	mov	r22, r26
 704:	11 24       	eor	r1, r1
 706:	9f 57       	subi	r25, 0x7F	; 127
 708:	50 40       	sbci	r21, 0x00	; 0
 70a:	8a f0       	brmi	.+34     	; 0x72e <__mulsf3_pse+0x84>
 70c:	e1 f0       	breq	.+56     	; 0x746 <__mulsf3_pse+0x9c>
 70e:	88 23       	and	r24, r24
 710:	4a f0       	brmi	.+18     	; 0x724 <__mulsf3_pse+0x7a>
 712:	ee 0f       	add	r30, r30
 714:	ff 1f       	adc	r31, r31
 716:	bb 1f       	adc	r27, r27
 718:	66 1f       	adc	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	91 50       	subi	r25, 0x01	; 1
 720:	50 40       	sbci	r21, 0x00	; 0
 722:	a9 f7       	brne	.-22     	; 0x70e <__mulsf3_pse+0x64>
 724:	9e 3f       	cpi	r25, 0xFE	; 254
 726:	51 05       	cpc	r21, r1
 728:	70 f0       	brcs	.+28     	; 0x746 <__mulsf3_pse+0x9c>
 72a:	14 c0       	rjmp	.+40     	; 0x754 <__fp_inf>
 72c:	a6 cf       	rjmp	.-180    	; 0x67a <__fp_szero>
 72e:	5f 3f       	cpi	r21, 0xFF	; 255
 730:	ec f3       	brlt	.-6      	; 0x72c <__mulsf3_pse+0x82>
 732:	98 3e       	cpi	r25, 0xE8	; 232
 734:	dc f3       	brlt	.-10     	; 0x72c <__mulsf3_pse+0x82>
 736:	86 95       	lsr	r24
 738:	77 95       	ror	r23
 73a:	67 95       	ror	r22
 73c:	b7 95       	ror	r27
 73e:	f7 95       	ror	r31
 740:	e7 95       	ror	r30
 742:	9f 5f       	subi	r25, 0xFF	; 255
 744:	c1 f7       	brne	.-16     	; 0x736 <__mulsf3_pse+0x8c>
 746:	fe 2b       	or	r31, r30
 748:	88 0f       	add	r24, r24
 74a:	91 1d       	adc	r25, r1
 74c:	96 95       	lsr	r25
 74e:	87 95       	ror	r24
 750:	97 f9       	bld	r25, 7
 752:	08 95       	ret

00000754 <__fp_inf>:
 754:	97 f9       	bld	r25, 7
 756:	9f 67       	ori	r25, 0x7F	; 127
 758:	80 e8       	ldi	r24, 0x80	; 128
 75a:	70 e0       	ldi	r23, 0x00	; 0
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	08 95       	ret

00000760 <__fp_nan>:
 760:	9f ef       	ldi	r25, 0xFF	; 255
 762:	80 ec       	ldi	r24, 0xC0	; 192
 764:	08 95       	ret

00000766 <__fp_pscA>:
 766:	00 24       	eor	r0, r0
 768:	0a 94       	dec	r0
 76a:	16 16       	cp	r1, r22
 76c:	17 06       	cpc	r1, r23
 76e:	18 06       	cpc	r1, r24
 770:	09 06       	cpc	r0, r25
 772:	08 95       	ret

00000774 <__fp_pscB>:
 774:	00 24       	eor	r0, r0
 776:	0a 94       	dec	r0
 778:	12 16       	cp	r1, r18
 77a:	13 06       	cpc	r1, r19
 77c:	14 06       	cpc	r1, r20
 77e:	05 06       	cpc	r0, r21
 780:	08 95       	ret

00000782 <__fp_round>:
 782:	09 2e       	mov	r0, r25
 784:	03 94       	inc	r0
 786:	00 0c       	add	r0, r0
 788:	11 f4       	brne	.+4      	; 0x78e <__fp_round+0xc>
 78a:	88 23       	and	r24, r24
 78c:	52 f0       	brmi	.+20     	; 0x7a2 <__fp_round+0x20>
 78e:	bb 0f       	add	r27, r27
 790:	40 f4       	brcc	.+16     	; 0x7a2 <__fp_round+0x20>
 792:	bf 2b       	or	r27, r31
 794:	11 f4       	brne	.+4      	; 0x79a <__fp_round+0x18>
 796:	60 ff       	sbrs	r22, 0
 798:	04 c0       	rjmp	.+8      	; 0x7a2 <__fp_round+0x20>
 79a:	6f 5f       	subi	r22, 0xFF	; 255
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	8f 4f       	sbci	r24, 0xFF	; 255
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	08 95       	ret

000007a4 <_exit>:
 7a4:	f8 94       	cli

000007a6 <__stop_program>:
 7a6:	ff cf       	rjmp	.-2      	; 0x7a6 <__stop_program>
